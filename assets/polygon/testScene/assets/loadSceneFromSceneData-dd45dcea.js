import {P as rr, a as sM, b as rM, s as id} from './index-b424c83b.js';
class Oc {
	static urlParams() {
		return new URLSearchParams(window.location.search);
	}
	static urlParam(e) {
		return this.urlParams().get(e);
	}
	static noAssemblers() {
		return this.urlParam('noassemblers') == '1';
	}
	static debugLoadProgress() {
		return this.urlParam('debugLoadProgress') == '1';
	}
	static testBatchId() {
		const e = this.urlParam('testBatchId');
		return e ? parseInt(e) : -1;
	}
}
var j = ((n) => (
	(n.BOOLEAN = 'boolean'),
	(n.BUTTON = 'button'),
	(n.COLOR = 'color'),
	(n.FLOAT = 'float'),
	(n.FOLDER = 'folder'),
	(n.INTEGER = 'integer'),
	(n.PARAM_PATH = 'param_path'),
	(n.NODE_PATH = 'node_path'),
	(n.RAMP = 'ramp'),
	(n.STRING = 'string'),
	(n.VECTOR2 = 'vector2'),
	(n.VECTOR3 = 'vector3'),
	(n.VECTOR4 = 'vector4'),
	n
))(j || {});
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ const s_ = '159',
	bs = {LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2},
	Ji = {ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3},
	oM = 0,
	sg = 1,
	aM = 2,
	cM = 0,
	r_ = 1,
	gb = 2,
	Ki = 3,
	Ln = 0,
	fn = 1,
	Zn = 2,
	Ps = 0,
	hr = 1,
	jp = 2,
	Xp = 3,
	$p = 4,
	lM = 5,
	Vr = 100,
	uM = 101,
	hM = 102,
	rg = 103,
	og = 104,
	dM = 200,
	pM = 201,
	fM = 202,
	_M = 203,
	qp = 204,
	Yp = 205,
	mM = 206,
	gM = 207,
	vM = 208,
	EM = 209,
	CM = 210,
	yM = 211,
	bM = 212,
	SM = 213,
	AM = 214,
	xM = 0,
	MM = 1,
	TM = 2,
	Gu = 3,
	RM = 4,
	wM = 5,
	OM = 6,
	PM = 7,
	yh = 0,
	NM = 1,
	IM = 2,
	Ci = 0,
	vb = 1,
	Eb = 2,
	Cb = 3,
	yb = 4,
	DM = 5,
	bh = 300,
	Yr = 301,
	Kr = 302,
	zu = 303,
	Hu = 304,
	xa = 306,
	Pc = 1e3,
	Qn = 1001,
	Wu = 1002,
	qt = 1003,
	ag = 1004,
	LM = 1004,
	sd = 1005,
	UM = 1005,
	Yt = 1006,
	FM = 1007,
	BM = 1007,
	pa = 1008,
	kM = 1008,
	is = 1009,
	bb = 1010,
	Sb = 1011,
	Sh = 1012,
	o_ = 1013,
	Ms = 1014,
	jn = 1015,
	ki = 1016,
	a_ = 1017,
	c_ = 1018,
	Ns = 1020,
	Ab = 1021,
	wn = 1023,
	l_ = 1024,
	xb = 1025,
	dr = 1026,
	Zr = 1027,
	u_ = 1028,
	h_ = 1029,
	Mb = 1030,
	d_ = 1031,
	p_ = 1033,
	rd = 33776,
	od = 33777,
	ad = 33778,
	cd = 33779,
	cg = 35840,
	lg = 35841,
	ug = 35842,
	hg = 35843,
	Tb = 36196,
	dg = 37492,
	pg = 37496,
	fg = 37808,
	_g = 37809,
	mg = 37810,
	gg = 37811,
	vg = 37812,
	Eg = 37813,
	Cg = 37814,
	yg = 37815,
	bg = 37816,
	Sg = 37817,
	Ag = 37818,
	xg = 37819,
	Mg = 37820,
	Tg = 37821,
	ld = 36492,
	Rg = 36494,
	wg = 36495,
	VM = 36283,
	Og = 36284,
	Pg = 36285,
	Ng = 36286,
	Ig = 2400,
	Dg = 2401,
	Lg = 2402,
	Rb = 3e3,
	jr = 3001,
	GM = 3200,
	zM = 3201,
	Us = 0,
	f_ = 1,
	tn = '',
	en = 'srgb',
	$n = 'srgb-linear',
	io = 'display-p3',
	yr = 'display-p3-linear',
	ju = 'linear',
	Dt = 'srgb',
	Xu = 'rec709',
	$u = 'p3',
	po = 7680,
	Ug = 519,
	HM = 512,
	WM = 513,
	jM = 514,
	wb = 515,
	XM = 516,
	$M = 517,
	qM = 518,
	YM = 519,
	Fg = 35044,
	Bg = '300 es',
	Kp = 1035,
	Ts = 2e3,
	qu = 2001;
class cs {
	addEventListener(e, t) {
		this._listeners === void 0 && (this._listeners = {});
		const i = this._listeners;
		i[e] === void 0 && (i[e] = []), i[e].indexOf(t) === -1 && i[e].push(t);
	}
	hasEventListener(e, t) {
		if (this._listeners === void 0) return !1;
		const i = this._listeners;
		return i[e] !== void 0 && i[e].indexOf(t) !== -1;
	}
	removeEventListener(e, t) {
		if (this._listeners === void 0) return;
		const s = this._listeners[e];
		if (s !== void 0) {
			const r = s.indexOf(t);
			r !== -1 && s.splice(r, 1);
		}
	}
	dispatchEvent(e) {
		if (this._listeners === void 0) return;
		const i = this._listeners[e.type];
		if (i !== void 0) {
			e.target = this;
			const s = i.slice(0);
			for (let r = 0, o = s.length; r < o; r++) s[r].call(this, e);
			e.target = null;
		}
	}
}
const Un = [
	'00',
	'01',
	'02',
	'03',
	'04',
	'05',
	'06',
	'07',
	'08',
	'09',
	'0a',
	'0b',
	'0c',
	'0d',
	'0e',
	'0f',
	'10',
	'11',
	'12',
	'13',
	'14',
	'15',
	'16',
	'17',
	'18',
	'19',
	'1a',
	'1b',
	'1c',
	'1d',
	'1e',
	'1f',
	'20',
	'21',
	'22',
	'23',
	'24',
	'25',
	'26',
	'27',
	'28',
	'29',
	'2a',
	'2b',
	'2c',
	'2d',
	'2e',
	'2f',
	'30',
	'31',
	'32',
	'33',
	'34',
	'35',
	'36',
	'37',
	'38',
	'39',
	'3a',
	'3b',
	'3c',
	'3d',
	'3e',
	'3f',
	'40',
	'41',
	'42',
	'43',
	'44',
	'45',
	'46',
	'47',
	'48',
	'49',
	'4a',
	'4b',
	'4c',
	'4d',
	'4e',
	'4f',
	'50',
	'51',
	'52',
	'53',
	'54',
	'55',
	'56',
	'57',
	'58',
	'59',
	'5a',
	'5b',
	'5c',
	'5d',
	'5e',
	'5f',
	'60',
	'61',
	'62',
	'63',
	'64',
	'65',
	'66',
	'67',
	'68',
	'69',
	'6a',
	'6b',
	'6c',
	'6d',
	'6e',
	'6f',
	'70',
	'71',
	'72',
	'73',
	'74',
	'75',
	'76',
	'77',
	'78',
	'79',
	'7a',
	'7b',
	'7c',
	'7d',
	'7e',
	'7f',
	'80',
	'81',
	'82',
	'83',
	'84',
	'85',
	'86',
	'87',
	'88',
	'89',
	'8a',
	'8b',
	'8c',
	'8d',
	'8e',
	'8f',
	'90',
	'91',
	'92',
	'93',
	'94',
	'95',
	'96',
	'97',
	'98',
	'99',
	'9a',
	'9b',
	'9c',
	'9d',
	'9e',
	'9f',
	'a0',
	'a1',
	'a2',
	'a3',
	'a4',
	'a5',
	'a6',
	'a7',
	'a8',
	'a9',
	'aa',
	'ab',
	'ac',
	'ad',
	'ae',
	'af',
	'b0',
	'b1',
	'b2',
	'b3',
	'b4',
	'b5',
	'b6',
	'b7',
	'b8',
	'b9',
	'ba',
	'bb',
	'bc',
	'bd',
	'be',
	'bf',
	'c0',
	'c1',
	'c2',
	'c3',
	'c4',
	'c5',
	'c6',
	'c7',
	'c8',
	'c9',
	'ca',
	'cb',
	'cc',
	'cd',
	'ce',
	'cf',
	'd0',
	'd1',
	'd2',
	'd3',
	'd4',
	'd5',
	'd6',
	'd7',
	'd8',
	'd9',
	'da',
	'db',
	'dc',
	'dd',
	'de',
	'df',
	'e0',
	'e1',
	'e2',
	'e3',
	'e4',
	'e5',
	'e6',
	'e7',
	'e8',
	'e9',
	'ea',
	'eb',
	'ec',
	'ed',
	'ee',
	'ef',
	'f0',
	'f1',
	'f2',
	'f3',
	'f4',
	'f5',
	'f6',
	'f7',
	'f8',
	'f9',
	'fa',
	'fb',
	'fc',
	'fd',
	'fe',
	'ff',
];
let kg = 1234567;
const mc = Math.PI / 180,
	fa = 180 / Math.PI;
function Ma() {
	const n = (Math.random() * 4294967295) | 0,
		e = (Math.random() * 4294967295) | 0,
		t = (Math.random() * 4294967295) | 0,
		i = (Math.random() * 4294967295) | 0;
	return (
		Un[n & 255] +
		Un[(n >> 8) & 255] +
		Un[(n >> 16) & 255] +
		Un[(n >> 24) & 255] +
		'-' +
		Un[e & 255] +
		Un[(e >> 8) & 255] +
		'-' +
		Un[((e >> 16) & 15) | 64] +
		Un[(e >> 24) & 255] +
		'-' +
		Un[(t & 63) | 128] +
		Un[(t >> 8) & 255] +
		'-' +
		Un[(t >> 16) & 255] +
		Un[(t >> 24) & 255] +
		Un[i & 255] +
		Un[(i >> 8) & 255] +
		Un[(i >> 16) & 255] +
		Un[(i >> 24) & 255]
	).toLowerCase();
}
function pn(n, e, t) {
	return Math.max(e, Math.min(t, n));
}
function __(n, e) {
	return ((n % e) + e) % e;
}
function KM(n, e, t, i, s) {
	return i + ((n - e) * (s - i)) / (t - e);
}
function ZM(n, e, t) {
	return n !== e ? (t - n) / (e - n) : 0;
}
function gc(n, e, t) {
	return (1 - t) * n + t * e;
}
function QM(n, e, t, i) {
	return gc(n, e, 1 - Math.exp(-t * i));
}
function JM(n, e = 1) {
	return e - Math.abs(__(n, e * 2) - e);
}
function eT(n, e, t) {
	return n <= e ? 0 : n >= t ? 1 : ((n = (n - e) / (t - e)), n * n * (3 - 2 * n));
}
function tT(n, e, t) {
	return n <= e ? 0 : n >= t ? 1 : ((n = (n - e) / (t - e)), n * n * n * (n * (n * 6 - 15) + 10));
}
function nT(n, e) {
	return n + Math.floor(Math.random() * (e - n + 1));
}
function iT(n, e) {
	return n + Math.random() * (e - n);
}
function sT(n) {
	return n * (0.5 - Math.random());
}
function rT(n) {
	n !== void 0 && (kg = n);
	let e = (kg += 1831565813);
	return (
		(e = Math.imul(e ^ (e >>> 15), e | 1)),
		(e ^= e + Math.imul(e ^ (e >>> 7), e | 61)),
		((e ^ (e >>> 14)) >>> 0) / 4294967296
	);
}
function oT(n) {
	return n * mc;
}
function aT(n) {
	return n * fa;
}
function Zp(n) {
	return (n & (n - 1)) === 0 && n !== 0;
}
function cT(n) {
	return Math.pow(2, Math.ceil(Math.log(n) / Math.LN2));
}
function Yu(n) {
	return Math.pow(2, Math.floor(Math.log(n) / Math.LN2));
}
function lT(n, e, t, i, s) {
	const r = Math.cos,
		o = Math.sin,
		a = r(t / 2),
		c = o(t / 2),
		l = r((e + i) / 2),
		u = o((e + i) / 2),
		h = r((e - i) / 2),
		d = o((e - i) / 2),
		p = r((i - e) / 2),
		m = o((i - e) / 2);
	switch (s) {
		case 'XYX':
			n.set(a * u, c * h, c * d, a * l);
			break;
		case 'YZY':
			n.set(c * d, a * u, c * h, a * l);
			break;
		case 'ZXZ':
			n.set(c * h, c * d, a * u, a * l);
			break;
		case 'XZX':
			n.set(a * u, c * m, c * p, a * l);
			break;
		case 'YXY':
			n.set(c * p, a * u, c * m, a * l);
			break;
		case 'ZYZ':
			n.set(c * m, c * p, a * u, a * l);
			break;
		default:
			console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + s);
	}
}
function Ko(n, e) {
	switch (e.constructor) {
		case Float32Array:
			return n;
		case Uint32Array:
			return n / 4294967295;
		case Uint16Array:
			return n / 65535;
		case Uint8Array:
			return n / 255;
		case Int32Array:
			return Math.max(n / 2147483647, -1);
		case Int16Array:
			return Math.max(n / 32767, -1);
		case Int8Array:
			return Math.max(n / 127, -1);
		default:
			throw new Error('Invalid component type.');
	}
}
function zn(n, e) {
	switch (e.constructor) {
		case Float32Array:
			return n;
		case Uint32Array:
			return Math.round(n * 4294967295);
		case Uint16Array:
			return Math.round(n * 65535);
		case Uint8Array:
			return Math.round(n * 255);
		case Int32Array:
			return Math.round(n * 2147483647);
		case Int16Array:
			return Math.round(n * 32767);
		case Int8Array:
			return Math.round(n * 127);
		default:
			throw new Error('Invalid component type.');
	}
}
const bn = {
	DEG2RAD: mc,
	RAD2DEG: fa,
	generateUUID: Ma,
	clamp: pn,
	euclideanModulo: __,
	mapLinear: KM,
	inverseLerp: ZM,
	lerp: gc,
	damp: QM,
	pingpong: JM,
	smoothstep: eT,
	smootherstep: tT,
	randInt: nT,
	randFloat: iT,
	randFloatSpread: sT,
	seededRandom: rT,
	degToRad: oT,
	radToDeg: aT,
	isPowerOfTwo: Zp,
	ceilPowerOfTwo: cT,
	floorPowerOfTwo: Yu,
	setQuaternionFromProperEuler: lT,
	normalize: zn,
	denormalize: Ko,
};
class re {
	constructor(e = 0, t = 0) {
		(re.prototype.isVector2 = !0), (this.x = e), (this.y = t);
	}
	get width() {
		return this.x;
	}
	set width(e) {
		this.x = e;
	}
	get height() {
		return this.y;
	}
	set height(e) {
		this.y = e;
	}
	set(e, t) {
		return (this.x = e), (this.y = t), this;
	}
	setScalar(e) {
		return (this.x = e), (this.y = e), this;
	}
	setX(e) {
		return (this.x = e), this;
	}
	setY(e) {
		return (this.y = e), this;
	}
	setComponent(e, t) {
		switch (e) {
			case 0:
				this.x = t;
				break;
			case 1:
				this.y = t;
				break;
			default:
				throw new Error('index is out of range: ' + e);
		}
		return this;
	}
	getComponent(e) {
		switch (e) {
			case 0:
				return this.x;
			case 1:
				return this.y;
			default:
				throw new Error('index is out of range: ' + e);
		}
	}
	clone() {
		return new this.constructor(this.x, this.y);
	}
	copy(e) {
		return (this.x = e.x), (this.y = e.y), this;
	}
	add(e) {
		return (this.x += e.x), (this.y += e.y), this;
	}
	addScalar(e) {
		return (this.x += e), (this.y += e), this;
	}
	addVectors(e, t) {
		return (this.x = e.x + t.x), (this.y = e.y + t.y), this;
	}
	addScaledVector(e, t) {
		return (this.x += e.x * t), (this.y += e.y * t), this;
	}
	sub(e) {
		return (this.x -= e.x), (this.y -= e.y), this;
	}
	subScalar(e) {
		return (this.x -= e), (this.y -= e), this;
	}
	subVectors(e, t) {
		return (this.x = e.x - t.x), (this.y = e.y - t.y), this;
	}
	multiply(e) {
		return (this.x *= e.x), (this.y *= e.y), this;
	}
	multiplyScalar(e) {
		return (this.x *= e), (this.y *= e), this;
	}
	divide(e) {
		return (this.x /= e.x), (this.y /= e.y), this;
	}
	divideScalar(e) {
		return this.multiplyScalar(1 / e);
	}
	applyMatrix3(e) {
		const t = this.x,
			i = this.y,
			s = e.elements;
		return (this.x = s[0] * t + s[3] * i + s[6]), (this.y = s[1] * t + s[4] * i + s[7]), this;
	}
	min(e) {
		return (this.x = Math.min(this.x, e.x)), (this.y = Math.min(this.y, e.y)), this;
	}
	max(e) {
		return (this.x = Math.max(this.x, e.x)), (this.y = Math.max(this.y, e.y)), this;
	}
	clamp(e, t) {
		return (this.x = Math.max(e.x, Math.min(t.x, this.x))), (this.y = Math.max(e.y, Math.min(t.y, this.y))), this;
	}
	clampScalar(e, t) {
		return (this.x = Math.max(e, Math.min(t, this.x))), (this.y = Math.max(e, Math.min(t, this.y))), this;
	}
	clampLength(e, t) {
		const i = this.length();
		return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)));
	}
	floor() {
		return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this;
	}
	ceil() {
		return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this;
	}
	round() {
		return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this;
	}
	roundToZero() {
		return (this.x = Math.trunc(this.x)), (this.y = Math.trunc(this.y)), this;
	}
	negate() {
		return (this.x = -this.x), (this.y = -this.y), this;
	}
	dot(e) {
		return this.x * e.x + this.y * e.y;
	}
	cross(e) {
		return this.x * e.y - this.y * e.x;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	manhattanLength() {
		return Math.abs(this.x) + Math.abs(this.y);
	}
	normalize() {
		return this.divideScalar(this.length() || 1);
	}
	angle() {
		return Math.atan2(-this.y, -this.x) + Math.PI;
	}
	angleTo(e) {
		const t = Math.sqrt(this.lengthSq() * e.lengthSq());
		if (t === 0) return Math.PI / 2;
		const i = this.dot(e) / t;
		return Math.acos(pn(i, -1, 1));
	}
	distanceTo(e) {
		return Math.sqrt(this.distanceToSquared(e));
	}
	distanceToSquared(e) {
		const t = this.x - e.x,
			i = this.y - e.y;
		return t * t + i * i;
	}
	manhattanDistanceTo(e) {
		return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
	}
	setLength(e) {
		return this.normalize().multiplyScalar(e);
	}
	lerp(e, t) {
		return (this.x += (e.x - this.x) * t), (this.y += (e.y - this.y) * t), this;
	}
	lerpVectors(e, t, i) {
		return (this.x = e.x + (t.x - e.x) * i), (this.y = e.y + (t.y - e.y) * i), this;
	}
	equals(e) {
		return e.x === this.x && e.y === this.y;
	}
	fromArray(e, t = 0) {
		return (this.x = e[t]), (this.y = e[t + 1]), this;
	}
	toArray(e = [], t = 0) {
		return (e[t] = this.x), (e[t + 1] = this.y), e;
	}
	fromBufferAttribute(e, t) {
		return (this.x = e.getX(t)), (this.y = e.getY(t)), this;
	}
	rotateAround(e, t) {
		const i = Math.cos(t),
			s = Math.sin(t),
			r = this.x - e.x,
			o = this.y - e.y;
		return (this.x = r * i - o * s + e.x), (this.y = r * s + o * i + e.y), this;
	}
	random() {
		return (this.x = Math.random()), (this.y = Math.random()), this;
	}
	*[Symbol.iterator]() {
		yield this.x, yield this.y;
	}
}
class ut {
	constructor(e, t, i, s, r, o, a, c, l) {
		(ut.prototype.isMatrix3 = !0),
			(this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
			e !== void 0 && this.set(e, t, i, s, r, o, a, c, l);
	}
	set(e, t, i, s, r, o, a, c, l) {
		const u = this.elements;
		return (
			(u[0] = e),
			(u[1] = s),
			(u[2] = a),
			(u[3] = t),
			(u[4] = r),
			(u[5] = c),
			(u[6] = i),
			(u[7] = o),
			(u[8] = l),
			this
		);
	}
	identity() {
		return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
	}
	copy(e) {
		const t = this.elements,
			i = e.elements;
		return (
			(t[0] = i[0]),
			(t[1] = i[1]),
			(t[2] = i[2]),
			(t[3] = i[3]),
			(t[4] = i[4]),
			(t[5] = i[5]),
			(t[6] = i[6]),
			(t[7] = i[7]),
			(t[8] = i[8]),
			this
		);
	}
	extractBasis(e, t, i) {
		return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), i.setFromMatrix3Column(this, 2), this;
	}
	setFromMatrix4(e) {
		const t = e.elements;
		return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this;
	}
	multiply(e) {
		return this.multiplyMatrices(this, e);
	}
	premultiply(e) {
		return this.multiplyMatrices(e, this);
	}
	multiplyMatrices(e, t) {
		const i = e.elements,
			s = t.elements,
			r = this.elements,
			o = i[0],
			a = i[3],
			c = i[6],
			l = i[1],
			u = i[4],
			h = i[7],
			d = i[2],
			p = i[5],
			m = i[8],
			g = s[0],
			_ = s[3],
			f = s[6],
			y = s[1],
			v = s[4],
			A = s[7],
			S = s[2],
			T = s[5],
			R = s[8];
		return (
			(r[0] = o * g + a * y + c * S),
			(r[3] = o * _ + a * v + c * T),
			(r[6] = o * f + a * A + c * R),
			(r[1] = l * g + u * y + h * S),
			(r[4] = l * _ + u * v + h * T),
			(r[7] = l * f + u * A + h * R),
			(r[2] = d * g + p * y + m * S),
			(r[5] = d * _ + p * v + m * T),
			(r[8] = d * f + p * A + m * R),
			this
		);
	}
	multiplyScalar(e) {
		const t = this.elements;
		return (
			(t[0] *= e),
			(t[3] *= e),
			(t[6] *= e),
			(t[1] *= e),
			(t[4] *= e),
			(t[7] *= e),
			(t[2] *= e),
			(t[5] *= e),
			(t[8] *= e),
			this
		);
	}
	determinant() {
		const e = this.elements,
			t = e[0],
			i = e[1],
			s = e[2],
			r = e[3],
			o = e[4],
			a = e[5],
			c = e[6],
			l = e[7],
			u = e[8];
		return t * o * u - t * a * l - i * r * u + i * a * c + s * r * l - s * o * c;
	}
	invert() {
		const e = this.elements,
			t = e[0],
			i = e[1],
			s = e[2],
			r = e[3],
			o = e[4],
			a = e[5],
			c = e[6],
			l = e[7],
			u = e[8],
			h = u * o - a * l,
			d = a * c - u * r,
			p = l * r - o * c,
			m = t * h + i * d + s * p;
		if (m === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
		const g = 1 / m;
		return (
			(e[0] = h * g),
			(e[1] = (s * l - u * i) * g),
			(e[2] = (a * i - s * o) * g),
			(e[3] = d * g),
			(e[4] = (u * t - s * c) * g),
			(e[5] = (s * r - a * t) * g),
			(e[6] = p * g),
			(e[7] = (i * c - l * t) * g),
			(e[8] = (o * t - i * r) * g),
			this
		);
	}
	transpose() {
		let e;
		const t = this.elements;
		return (
			(e = t[1]),
			(t[1] = t[3]),
			(t[3] = e),
			(e = t[2]),
			(t[2] = t[6]),
			(t[6] = e),
			(e = t[5]),
			(t[5] = t[7]),
			(t[7] = e),
			this
		);
	}
	getNormalMatrix(e) {
		return this.setFromMatrix4(e).invert().transpose();
	}
	transposeIntoArray(e) {
		const t = this.elements;
		return (
			(e[0] = t[0]),
			(e[1] = t[3]),
			(e[2] = t[6]),
			(e[3] = t[1]),
			(e[4] = t[4]),
			(e[5] = t[7]),
			(e[6] = t[2]),
			(e[7] = t[5]),
			(e[8] = t[8]),
			this
		);
	}
	setUvTransform(e, t, i, s, r, o, a) {
		const c = Math.cos(r),
			l = Math.sin(r);
		return (
			this.set(i * c, i * l, -i * (c * o + l * a) + o + e, -s * l, s * c, -s * (-l * o + c * a) + a + t, 0, 0, 1),
			this
		);
	}
	scale(e, t) {
		return this.premultiply(ud.makeScale(e, t)), this;
	}
	rotate(e) {
		return this.premultiply(ud.makeRotation(-e)), this;
	}
	translate(e, t) {
		return this.premultiply(ud.makeTranslation(e, t)), this;
	}
	makeTranslation(e, t) {
		return e.isVector2 ? this.set(1, 0, e.x, 0, 1, e.y, 0, 0, 1) : this.set(1, 0, e, 0, 1, t, 0, 0, 1), this;
	}
	makeRotation(e) {
		const t = Math.cos(e),
			i = Math.sin(e);
		return this.set(t, -i, 0, i, t, 0, 0, 0, 1), this;
	}
	makeScale(e, t) {
		return this.set(e, 0, 0, 0, t, 0, 0, 0, 1), this;
	}
	equals(e) {
		const t = this.elements,
			i = e.elements;
		for (let s = 0; s < 9; s++) if (t[s] !== i[s]) return !1;
		return !0;
	}
	fromArray(e, t = 0) {
		for (let i = 0; i < 9; i++) this.elements[i] = e[i + t];
		return this;
	}
	toArray(e = [], t = 0) {
		const i = this.elements;
		return (
			(e[t] = i[0]),
			(e[t + 1] = i[1]),
			(e[t + 2] = i[2]),
			(e[t + 3] = i[3]),
			(e[t + 4] = i[4]),
			(e[t + 5] = i[5]),
			(e[t + 6] = i[6]),
			(e[t + 7] = i[7]),
			(e[t + 8] = i[8]),
			e
		);
	}
	clone() {
		return new this.constructor().fromArray(this.elements);
	}
}
const ud = new ut();
function Ob(n) {
	for (let e = n.length - 1; e >= 0; --e) if (n[e] >= 65535) return !0;
	return !1;
}
function Nc(n) {
	return document.createElementNS('http://www.w3.org/1999/xhtml', n);
}
function uT() {
	const n = Nc('canvas');
	return (n.style.display = 'block'), n;
}
const Vg = {};
function vc(n) {
	n in Vg || ((Vg[n] = !0), console.warn(n));
}
const Gg = new ut().set(0.8224621, 0.177538, 0, 0.0331941, 0.9668058, 0, 0.0170827, 0.0723974, 0.9105199),
	zg = new ut().set(1.2249401, -0.2249404, 0, -0.0420569, 1.0420571, 0, -0.0196376, -0.0786361, 1.0982735),
	al = {
		[$n]: {transfer: ju, primaries: Xu, toReference: (n) => n, fromReference: (n) => n},
		[en]: {
			transfer: Dt,
			primaries: Xu,
			toReference: (n) => n.convertSRGBToLinear(),
			fromReference: (n) => n.convertLinearToSRGB(),
		},
		[yr]: {
			transfer: ju,
			primaries: $u,
			toReference: (n) => n.applyMatrix3(zg),
			fromReference: (n) => n.applyMatrix3(Gg),
		},
		[io]: {
			transfer: Dt,
			primaries: $u,
			toReference: (n) => n.convertSRGBToLinear().applyMatrix3(zg),
			fromReference: (n) => n.applyMatrix3(Gg).convertLinearToSRGB(),
		},
	},
	hT = new Set([$n, yr]),
	Mt = {
		enabled: !0,
		_workingColorSpace: $n,
		get legacyMode() {
			return (
				console.warn('THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.'),
				!this.enabled
			);
		},
		set legacyMode(n) {
			console.warn('THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.'),
				(this.enabled = !n);
		},
		get workingColorSpace() {
			return this._workingColorSpace;
		},
		set workingColorSpace(n) {
			if (!hT.has(n)) throw new Error(`Unsupported working color space, "${n}".`);
			this._workingColorSpace = n;
		},
		convert: function (n, e, t) {
			if (this.enabled === !1 || e === t || !e || !t) return n;
			const i = al[e].toReference,
				s = al[t].fromReference;
			return s(i(n));
		},
		fromWorkingColorSpace: function (n, e) {
			return this.convert(n, this._workingColorSpace, e);
		},
		toWorkingColorSpace: function (n, e) {
			return this.convert(n, e, this._workingColorSpace);
		},
		getPrimaries: function (n) {
			return al[n].primaries;
		},
		getTransfer: function (n) {
			return n === tn ? ju : al[n].transfer;
		},
	};
function da(n) {
	return n < 0.04045 ? n * 0.0773993808 : Math.pow(n * 0.9478672986 + 0.0521327014, 2.4);
}
function hd(n) {
	return n < 0.0031308 ? n * 12.92 : 1.055 * Math.pow(n, 0.41666) - 0.055;
}
let fo;
class Pb {
	static getDataURL(e) {
		if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > 'u') return e.src;
		let t;
		if (e instanceof HTMLCanvasElement) t = e;
		else {
			fo === void 0 && (fo = Nc('canvas')), (fo.width = e.width), (fo.height = e.height);
			const i = fo.getContext('2d');
			e instanceof ImageData ? i.putImageData(e, 0, 0) : i.drawImage(e, 0, 0, e.width, e.height), (t = fo);
		}
		return t.width > 2048 || t.height > 2048
			? (console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', e),
			  t.toDataURL('image/jpeg', 0.6))
			: t.toDataURL('image/png');
	}
	static sRGBToLinear(e) {
		if (
			(typeof HTMLImageElement < 'u' && e instanceof HTMLImageElement) ||
			(typeof HTMLCanvasElement < 'u' && e instanceof HTMLCanvasElement) ||
			(typeof ImageBitmap < 'u' && e instanceof ImageBitmap)
		) {
			const t = Nc('canvas');
			(t.width = e.width), (t.height = e.height);
			const i = t.getContext('2d');
			i.drawImage(e, 0, 0, e.width, e.height);
			const s = i.getImageData(0, 0, e.width, e.height),
				r = s.data;
			for (let o = 0; o < r.length; o++) r[o] = da(r[o] / 255) * 255;
			return i.putImageData(s, 0, 0), t;
		} else if (e.data) {
			const t = e.data.slice(0);
			for (let i = 0; i < t.length; i++)
				t instanceof Uint8Array || t instanceof Uint8ClampedArray
					? (t[i] = Math.floor(da(t[i] / 255) * 255))
					: (t[i] = da(t[i]));
			return {data: t, width: e.width, height: e.height};
		} else
			return (
				console.warn(
					'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.'
				),
				e
			);
	}
}
let dT = 0;
class Nb {
	constructor(e = null) {
		(this.isSource = !0),
			Object.defineProperty(this, 'id', {value: dT++}),
			(this.uuid = Ma()),
			(this.data = e),
			(this.version = 0);
	}
	set needsUpdate(e) {
		e === !0 && this.version++;
	}
	toJSON(e) {
		const t = e === void 0 || typeof e == 'string';
		if (!t && e.images[this.uuid] !== void 0) return e.images[this.uuid];
		const i = {uuid: this.uuid, url: ''},
			s = this.data;
		if (s !== null) {
			let r;
			if (Array.isArray(s)) {
				r = [];
				for (let o = 0, a = s.length; o < a; o++)
					s[o].isDataTexture ? r.push(dd(s[o].image)) : r.push(dd(s[o]));
			} else r = dd(s);
			i.url = r;
		}
		return t || (e.images[this.uuid] = i), i;
	}
}
function dd(n) {
	return (typeof HTMLImageElement < 'u' && n instanceof HTMLImageElement) ||
		(typeof HTMLCanvasElement < 'u' && n instanceof HTMLCanvasElement) ||
		(typeof ImageBitmap < 'u' && n instanceof ImageBitmap)
		? Pb.getDataURL(n)
		: n.data
		? {data: Array.from(n.data), width: n.width, height: n.height, type: n.data.constructor.name}
		: (console.warn('THREE.Texture: Unable to serialize Texture.'), {});
}
let pT = 0;
class In extends cs {
	constructor(
		e = In.DEFAULT_IMAGE,
		t = In.DEFAULT_MAPPING,
		i = Qn,
		s = Qn,
		r = Yt,
		o = pa,
		a = wn,
		c = is,
		l = In.DEFAULT_ANISOTROPY,
		u = tn
	) {
		super(),
			(this.isTexture = !0),
			Object.defineProperty(this, 'id', {value: pT++}),
			(this.uuid = Ma()),
			(this.name = ''),
			(this.source = new Nb(e)),
			(this.mipmaps = []),
			(this.mapping = t),
			(this.channel = 0),
			(this.wrapS = i),
			(this.wrapT = s),
			(this.magFilter = r),
			(this.minFilter = o),
			(this.anisotropy = l),
			(this.format = a),
			(this.internalFormat = null),
			(this.type = c),
			(this.offset = new re(0, 0)),
			(this.repeat = new re(1, 1)),
			(this.center = new re(0, 0)),
			(this.rotation = 0),
			(this.matrixAutoUpdate = !0),
			(this.matrix = new ut()),
			(this.generateMipmaps = !0),
			(this.premultiplyAlpha = !1),
			(this.flipY = !0),
			(this.unpackAlignment = 4),
			typeof u == 'string'
				? (this.colorSpace = u)
				: (vc('THREE.Texture: Property .encoding has been replaced by .colorSpace.'),
				  (this.colorSpace = u === jr ? en : tn)),
			(this.userData = {}),
			(this.version = 0),
			(this.onUpdate = null),
			(this.isRenderTargetTexture = !1),
			(this.needsPMREMUpdate = !1);
	}
	get image() {
		return this.source.data;
	}
	set image(e = null) {
		this.source.data = e;
	}
	updateMatrix() {
		this.matrix.setUvTransform(
			this.offset.x,
			this.offset.y,
			this.repeat.x,
			this.repeat.y,
			this.rotation,
			this.center.x,
			this.center.y
		);
	}
	clone() {
		return new this.constructor().copy(this);
	}
	copy(e) {
		return (
			(this.name = e.name),
			(this.source = e.source),
			(this.mipmaps = e.mipmaps.slice(0)),
			(this.mapping = e.mapping),
			(this.channel = e.channel),
			(this.wrapS = e.wrapS),
			(this.wrapT = e.wrapT),
			(this.magFilter = e.magFilter),
			(this.minFilter = e.minFilter),
			(this.anisotropy = e.anisotropy),
			(this.format = e.format),
			(this.internalFormat = e.internalFormat),
			(this.type = e.type),
			this.offset.copy(e.offset),
			this.repeat.copy(e.repeat),
			this.center.copy(e.center),
			(this.rotation = e.rotation),
			(this.matrixAutoUpdate = e.matrixAutoUpdate),
			this.matrix.copy(e.matrix),
			(this.generateMipmaps = e.generateMipmaps),
			(this.premultiplyAlpha = e.premultiplyAlpha),
			(this.flipY = e.flipY),
			(this.unpackAlignment = e.unpackAlignment),
			(this.colorSpace = e.colorSpace),
			(this.userData = JSON.parse(JSON.stringify(e.userData))),
			(this.needsUpdate = !0),
			this
		);
	}
	toJSON(e) {
		const t = e === void 0 || typeof e == 'string';
		if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid];
		const i = {
			metadata: {version: 4.6, type: 'Texture', generator: 'Texture.toJSON'},
			uuid: this.uuid,
			name: this.name,
			image: this.source.toJSON(e).uuid,
			mapping: this.mapping,
			channel: this.channel,
			repeat: [this.repeat.x, this.repeat.y],
			offset: [this.offset.x, this.offset.y],
			center: [this.center.x, this.center.y],
			rotation: this.rotation,
			wrap: [this.wrapS, this.wrapT],
			format: this.format,
			internalFormat: this.internalFormat,
			type: this.type,
			colorSpace: this.colorSpace,
			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,
			flipY: this.flipY,
			generateMipmaps: this.generateMipmaps,
			premultiplyAlpha: this.premultiplyAlpha,
			unpackAlignment: this.unpackAlignment,
		};
		return (
			Object.keys(this.userData).length > 0 && (i.userData = this.userData), t || (e.textures[this.uuid] = i), i
		);
	}
	dispose() {
		this.dispatchEvent({type: 'dispose'});
	}
	transformUv(e) {
		if (this.mapping !== bh) return e;
		if ((e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1))
			switch (this.wrapS) {
				case Pc:
					e.x = e.x - Math.floor(e.x);
					break;
				case Qn:
					e.x = e.x < 0 ? 0 : 1;
					break;
				case Wu:
					Math.abs(Math.floor(e.x) % 2) === 1 ? (e.x = Math.ceil(e.x) - e.x) : (e.x = e.x - Math.floor(e.x));
					break;
			}
		if (e.y < 0 || e.y > 1)
			switch (this.wrapT) {
				case Pc:
					e.y = e.y - Math.floor(e.y);
					break;
				case Qn:
					e.y = e.y < 0 ? 0 : 1;
					break;
				case Wu:
					Math.abs(Math.floor(e.y) % 2) === 1 ? (e.y = Math.ceil(e.y) - e.y) : (e.y = e.y - Math.floor(e.y));
					break;
			}
		return this.flipY && (e.y = 1 - e.y), e;
	}
	set needsUpdate(e) {
		e === !0 && (this.version++, (this.source.needsUpdate = !0));
	}
	get encoding() {
		return (
			vc('THREE.Texture: Property .encoding has been replaced by .colorSpace.'), this.colorSpace === en ? jr : Rb
		);
	}
	set encoding(e) {
		vc('THREE.Texture: Property .encoding has been replaced by .colorSpace.'),
			(this.colorSpace = e === jr ? en : tn);
	}
}
In.DEFAULT_IMAGE = null;
In.DEFAULT_MAPPING = bh;
In.DEFAULT_ANISOTROPY = 1;
class Ke {
	constructor(e = 0, t = 0, i = 0, s = 1) {
		(Ke.prototype.isVector4 = !0), (this.x = e), (this.y = t), (this.z = i), (this.w = s);
	}
	get width() {
		return this.z;
	}
	set width(e) {
		this.z = e;
	}
	get height() {
		return this.w;
	}
	set height(e) {
		this.w = e;
	}
	set(e, t, i, s) {
		return (this.x = e), (this.y = t), (this.z = i), (this.w = s), this;
	}
	setScalar(e) {
		return (this.x = e), (this.y = e), (this.z = e), (this.w = e), this;
	}
	setX(e) {
		return (this.x = e), this;
	}
	setY(e) {
		return (this.y = e), this;
	}
	setZ(e) {
		return (this.z = e), this;
	}
	setW(e) {
		return (this.w = e), this;
	}
	setComponent(e, t) {
		switch (e) {
			case 0:
				this.x = t;
				break;
			case 1:
				this.y = t;
				break;
			case 2:
				this.z = t;
				break;
			case 3:
				this.w = t;
				break;
			default:
				throw new Error('index is out of range: ' + e);
		}
		return this;
	}
	getComponent(e) {
		switch (e) {
			case 0:
				return this.x;
			case 1:
				return this.y;
			case 2:
				return this.z;
			case 3:
				return this.w;
			default:
				throw new Error('index is out of range: ' + e);
		}
	}
	clone() {
		return new this.constructor(this.x, this.y, this.z, this.w);
	}
	copy(e) {
		return (this.x = e.x), (this.y = e.y), (this.z = e.z), (this.w = e.w !== void 0 ? e.w : 1), this;
	}
	add(e) {
		return (this.x += e.x), (this.y += e.y), (this.z += e.z), (this.w += e.w), this;
	}
	addScalar(e) {
		return (this.x += e), (this.y += e), (this.z += e), (this.w += e), this;
	}
	addVectors(e, t) {
		return (this.x = e.x + t.x), (this.y = e.y + t.y), (this.z = e.z + t.z), (this.w = e.w + t.w), this;
	}
	addScaledVector(e, t) {
		return (this.x += e.x * t), (this.y += e.y * t), (this.z += e.z * t), (this.w += e.w * t), this;
	}
	sub(e) {
		return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), (this.w -= e.w), this;
	}
	subScalar(e) {
		return (this.x -= e), (this.y -= e), (this.z -= e), (this.w -= e), this;
	}
	subVectors(e, t) {
		return (this.x = e.x - t.x), (this.y = e.y - t.y), (this.z = e.z - t.z), (this.w = e.w - t.w), this;
	}
	multiply(e) {
		return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), (this.w *= e.w), this;
	}
	multiplyScalar(e) {
		return (this.x *= e), (this.y *= e), (this.z *= e), (this.w *= e), this;
	}
	applyMatrix4(e) {
		const t = this.x,
			i = this.y,
			s = this.z,
			r = this.w,
			o = e.elements;
		return (
			(this.x = o[0] * t + o[4] * i + o[8] * s + o[12] * r),
			(this.y = o[1] * t + o[5] * i + o[9] * s + o[13] * r),
			(this.z = o[2] * t + o[6] * i + o[10] * s + o[14] * r),
			(this.w = o[3] * t + o[7] * i + o[11] * s + o[15] * r),
			this
		);
	}
	divideScalar(e) {
		return this.multiplyScalar(1 / e);
	}
	setAxisAngleFromQuaternion(e) {
		this.w = 2 * Math.acos(e.w);
		const t = Math.sqrt(1 - e.w * e.w);
		return (
			t < 1e-4
				? ((this.x = 1), (this.y = 0), (this.z = 0))
				: ((this.x = e.x / t), (this.y = e.y / t), (this.z = e.z / t)),
			this
		);
	}
	setAxisAngleFromRotationMatrix(e) {
		let t, i, s, r;
		const c = e.elements,
			l = c[0],
			u = c[4],
			h = c[8],
			d = c[1],
			p = c[5],
			m = c[9],
			g = c[2],
			_ = c[6],
			f = c[10];
		if (Math.abs(u - d) < 0.01 && Math.abs(h - g) < 0.01 && Math.abs(m - _) < 0.01) {
			if (
				Math.abs(u + d) < 0.1 &&
				Math.abs(h + g) < 0.1 &&
				Math.abs(m + _) < 0.1 &&
				Math.abs(l + p + f - 3) < 0.1
			)
				return this.set(1, 0, 0, 0), this;
			t = Math.PI;
			const v = (l + 1) / 2,
				A = (p + 1) / 2,
				S = (f + 1) / 2,
				T = (u + d) / 4,
				R = (h + g) / 4,
				D = (m + _) / 4;
			return (
				v > A && v > S
					? v < 0.01
						? ((i = 0), (s = 0.707106781), (r = 0.707106781))
						: ((i = Math.sqrt(v)), (s = T / i), (r = R / i))
					: A > S
					? A < 0.01
						? ((i = 0.707106781), (s = 0), (r = 0.707106781))
						: ((s = Math.sqrt(A)), (i = T / s), (r = D / s))
					: S < 0.01
					? ((i = 0.707106781), (s = 0.707106781), (r = 0))
					: ((r = Math.sqrt(S)), (i = R / r), (s = D / r)),
				this.set(i, s, r, t),
				this
			);
		}
		let y = Math.sqrt((_ - m) * (_ - m) + (h - g) * (h - g) + (d - u) * (d - u));
		return (
			Math.abs(y) < 0.001 && (y = 1),
			(this.x = (_ - m) / y),
			(this.y = (h - g) / y),
			(this.z = (d - u) / y),
			(this.w = Math.acos((l + p + f - 1) / 2)),
			this
		);
	}
	min(e) {
		return (
			(this.x = Math.min(this.x, e.x)),
			(this.y = Math.min(this.y, e.y)),
			(this.z = Math.min(this.z, e.z)),
			(this.w = Math.min(this.w, e.w)),
			this
		);
	}
	max(e) {
		return (
			(this.x = Math.max(this.x, e.x)),
			(this.y = Math.max(this.y, e.y)),
			(this.z = Math.max(this.z, e.z)),
			(this.w = Math.max(this.w, e.w)),
			this
		);
	}
	clamp(e, t) {
		return (
			(this.x = Math.max(e.x, Math.min(t.x, this.x))),
			(this.y = Math.max(e.y, Math.min(t.y, this.y))),
			(this.z = Math.max(e.z, Math.min(t.z, this.z))),
			(this.w = Math.max(e.w, Math.min(t.w, this.w))),
			this
		);
	}
	clampScalar(e, t) {
		return (
			(this.x = Math.max(e, Math.min(t, this.x))),
			(this.y = Math.max(e, Math.min(t, this.y))),
			(this.z = Math.max(e, Math.min(t, this.z))),
			(this.w = Math.max(e, Math.min(t, this.w))),
			this
		);
	}
	clampLength(e, t) {
		const i = this.length();
		return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)));
	}
	floor() {
		return (
			(this.x = Math.floor(this.x)),
			(this.y = Math.floor(this.y)),
			(this.z = Math.floor(this.z)),
			(this.w = Math.floor(this.w)),
			this
		);
	}
	ceil() {
		return (
			(this.x = Math.ceil(this.x)),
			(this.y = Math.ceil(this.y)),
			(this.z = Math.ceil(this.z)),
			(this.w = Math.ceil(this.w)),
			this
		);
	}
	round() {
		return (
			(this.x = Math.round(this.x)),
			(this.y = Math.round(this.y)),
			(this.z = Math.round(this.z)),
			(this.w = Math.round(this.w)),
			this
		);
	}
	roundToZero() {
		return (
			(this.x = Math.trunc(this.x)),
			(this.y = Math.trunc(this.y)),
			(this.z = Math.trunc(this.z)),
			(this.w = Math.trunc(this.w)),
			this
		);
	}
	negate() {
		return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), (this.w = -this.w), this;
	}
	dot(e) {
		return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	manhattanLength() {
		return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
	}
	normalize() {
		return this.divideScalar(this.length() || 1);
	}
	setLength(e) {
		return this.normalize().multiplyScalar(e);
	}
	lerp(e, t) {
		return (
			(this.x += (e.x - this.x) * t),
			(this.y += (e.y - this.y) * t),
			(this.z += (e.z - this.z) * t),
			(this.w += (e.w - this.w) * t),
			this
		);
	}
	lerpVectors(e, t, i) {
		return (
			(this.x = e.x + (t.x - e.x) * i),
			(this.y = e.y + (t.y - e.y) * i),
			(this.z = e.z + (t.z - e.z) * i),
			(this.w = e.w + (t.w - e.w) * i),
			this
		);
	}
	equals(e) {
		return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
	}
	fromArray(e, t = 0) {
		return (this.x = e[t]), (this.y = e[t + 1]), (this.z = e[t + 2]), (this.w = e[t + 3]), this;
	}
	toArray(e = [], t = 0) {
		return (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), (e[t + 3] = this.w), e;
	}
	fromBufferAttribute(e, t) {
		return (this.x = e.getX(t)), (this.y = e.getY(t)), (this.z = e.getZ(t)), (this.w = e.getW(t)), this;
	}
	random() {
		return (
			(this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), (this.w = Math.random()), this
		);
	}
	*[Symbol.iterator]() {
		yield this.x, yield this.y, yield this.z, yield this.w;
	}
}
class fT extends cs {
	constructor(e = 1, t = 1, i = {}) {
		super(),
			(this.isRenderTarget = !0),
			(this.width = e),
			(this.height = t),
			(this.depth = 1),
			(this.scissor = new Ke(0, 0, e, t)),
			(this.scissorTest = !1),
			(this.viewport = new Ke(0, 0, e, t));
		const s = {width: e, height: t, depth: 1};
		i.encoding !== void 0 &&
			(vc('THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.'),
			(i.colorSpace = i.encoding === jr ? en : tn)),
			(i = Object.assign(
				{
					generateMipmaps: !1,
					internalFormat: null,
					minFilter: Yt,
					depthBuffer: !0,
					stencilBuffer: !1,
					depthTexture: null,
					samples: 0,
				},
				i
			)),
			(this.texture = new In(
				s,
				i.mapping,
				i.wrapS,
				i.wrapT,
				i.magFilter,
				i.minFilter,
				i.format,
				i.type,
				i.anisotropy,
				i.colorSpace
			)),
			(this.texture.isRenderTargetTexture = !0),
			(this.texture.flipY = !1),
			(this.texture.generateMipmaps = i.generateMipmaps),
			(this.texture.internalFormat = i.internalFormat),
			(this.depthBuffer = i.depthBuffer),
			(this.stencilBuffer = i.stencilBuffer),
			(this.depthTexture = i.depthTexture),
			(this.samples = i.samples);
	}
	setSize(e, t, i = 1) {
		(this.width !== e || this.height !== t || this.depth !== i) &&
			((this.width = e),
			(this.height = t),
			(this.depth = i),
			(this.texture.image.width = e),
			(this.texture.image.height = t),
			(this.texture.image.depth = i),
			this.dispose()),
			this.viewport.set(0, 0, e, t),
			this.scissor.set(0, 0, e, t);
	}
	clone() {
		return new this.constructor().copy(this);
	}
	copy(e) {
		(this.width = e.width),
			(this.height = e.height),
			(this.depth = e.depth),
			this.scissor.copy(e.scissor),
			(this.scissorTest = e.scissorTest),
			this.viewport.copy(e.viewport),
			(this.texture = e.texture.clone()),
			(this.texture.isRenderTargetTexture = !0);
		const t = Object.assign({}, e.texture.image);
		return (
			(this.texture.source = new Nb(t)),
			(this.depthBuffer = e.depthBuffer),
			(this.stencilBuffer = e.stencilBuffer),
			e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()),
			(this.samples = e.samples),
			this
		);
	}
	dispose() {
		this.dispatchEvent({type: 'dispose'});
	}
}
class Gi extends fT {
	constructor(e = 1, t = 1, i = {}) {
		super(e, t, i), (this.isWebGLRenderTarget = !0);
	}
}
class Ib extends In {
	constructor(e = null, t = 1, i = 1, s = 1) {
		super(null),
			(this.isDataArrayTexture = !0),
			(this.image = {data: e, width: t, height: i, depth: s}),
			(this.magFilter = qt),
			(this.minFilter = qt),
			(this.wrapR = Qn),
			(this.generateMipmaps = !1),
			(this.flipY = !1),
			(this.unpackAlignment = 1);
	}
}
class _T extends In {
	constructor(e = null, t = 1, i = 1, s = 1) {
		super(null),
			(this.isData3DTexture = !0),
			(this.image = {data: e, width: t, height: i, depth: s}),
			(this.magFilter = qt),
			(this.minFilter = qt),
			(this.wrapR = Qn),
			(this.generateMipmaps = !1),
			(this.flipY = !1),
			(this.unpackAlignment = 1);
	}
}
class Sn {
	constructor(e = 0, t = 0, i = 0, s = 1) {
		(this.isQuaternion = !0), (this._x = e), (this._y = t), (this._z = i), (this._w = s);
	}
	static slerpFlat(e, t, i, s, r, o, a) {
		let c = i[s + 0],
			l = i[s + 1],
			u = i[s + 2],
			h = i[s + 3];
		const d = r[o + 0],
			p = r[o + 1],
			m = r[o + 2],
			g = r[o + 3];
		if (a === 0) {
			(e[t + 0] = c), (e[t + 1] = l), (e[t + 2] = u), (e[t + 3] = h);
			return;
		}
		if (a === 1) {
			(e[t + 0] = d), (e[t + 1] = p), (e[t + 2] = m), (e[t + 3] = g);
			return;
		}
		if (h !== g || c !== d || l !== p || u !== m) {
			let _ = 1 - a;
			const f = c * d + l * p + u * m + h * g,
				y = f >= 0 ? 1 : -1,
				v = 1 - f * f;
			if (v > Number.EPSILON) {
				const S = Math.sqrt(v),
					T = Math.atan2(S, f * y);
				(_ = Math.sin(_ * T) / S), (a = Math.sin(a * T) / S);
			}
			const A = a * y;
			if (((c = c * _ + d * A), (l = l * _ + p * A), (u = u * _ + m * A), (h = h * _ + g * A), _ === 1 - a)) {
				const S = 1 / Math.sqrt(c * c + l * l + u * u + h * h);
				(c *= S), (l *= S), (u *= S), (h *= S);
			}
		}
		(e[t] = c), (e[t + 1] = l), (e[t + 2] = u), (e[t + 3] = h);
	}
	static multiplyQuaternionsFlat(e, t, i, s, r, o) {
		const a = i[s],
			c = i[s + 1],
			l = i[s + 2],
			u = i[s + 3],
			h = r[o],
			d = r[o + 1],
			p = r[o + 2],
			m = r[o + 3];
		return (
			(e[t] = a * m + u * h + c * p - l * d),
			(e[t + 1] = c * m + u * d + l * h - a * p),
			(e[t + 2] = l * m + u * p + a * d - c * h),
			(e[t + 3] = u * m - a * h - c * d - l * p),
			e
		);
	}
	get x() {
		return this._x;
	}
	set x(e) {
		(this._x = e), this._onChangeCallback();
	}
	get y() {
		return this._y;
	}
	set y(e) {
		(this._y = e), this._onChangeCallback();
	}
	get z() {
		return this._z;
	}
	set z(e) {
		(this._z = e), this._onChangeCallback();
	}
	get w() {
		return this._w;
	}
	set w(e) {
		(this._w = e), this._onChangeCallback();
	}
	set(e, t, i, s) {
		return (this._x = e), (this._y = t), (this._z = i), (this._w = s), this._onChangeCallback(), this;
	}
	clone() {
		return new this.constructor(this._x, this._y, this._z, this._w);
	}
	copy(e) {
		return (this._x = e.x), (this._y = e.y), (this._z = e.z), (this._w = e.w), this._onChangeCallback(), this;
	}
	setFromEuler(e, t) {
		const i = e._x,
			s = e._y,
			r = e._z,
			o = e._order,
			a = Math.cos,
			c = Math.sin,
			l = a(i / 2),
			u = a(s / 2),
			h = a(r / 2),
			d = c(i / 2),
			p = c(s / 2),
			m = c(r / 2);
		switch (o) {
			case 'XYZ':
				(this._x = d * u * h + l * p * m),
					(this._y = l * p * h - d * u * m),
					(this._z = l * u * m + d * p * h),
					(this._w = l * u * h - d * p * m);
				break;
			case 'YXZ':
				(this._x = d * u * h + l * p * m),
					(this._y = l * p * h - d * u * m),
					(this._z = l * u * m - d * p * h),
					(this._w = l * u * h + d * p * m);
				break;
			case 'ZXY':
				(this._x = d * u * h - l * p * m),
					(this._y = l * p * h + d * u * m),
					(this._z = l * u * m + d * p * h),
					(this._w = l * u * h - d * p * m);
				break;
			case 'ZYX':
				(this._x = d * u * h - l * p * m),
					(this._y = l * p * h + d * u * m),
					(this._z = l * u * m - d * p * h),
					(this._w = l * u * h + d * p * m);
				break;
			case 'YZX':
				(this._x = d * u * h + l * p * m),
					(this._y = l * p * h + d * u * m),
					(this._z = l * u * m - d * p * h),
					(this._w = l * u * h - d * p * m);
				break;
			case 'XZY':
				(this._x = d * u * h - l * p * m),
					(this._y = l * p * h - d * u * m),
					(this._z = l * u * m + d * p * h),
					(this._w = l * u * h + d * p * m);
				break;
			default:
				console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + o);
		}
		return t !== !1 && this._onChangeCallback(), this;
	}
	setFromAxisAngle(e, t) {
		const i = t / 2,
			s = Math.sin(i);
		return (
			(this._x = e.x * s),
			(this._y = e.y * s),
			(this._z = e.z * s),
			(this._w = Math.cos(i)),
			this._onChangeCallback(),
			this
		);
	}
	setFromRotationMatrix(e) {
		const t = e.elements,
			i = t[0],
			s = t[4],
			r = t[8],
			o = t[1],
			a = t[5],
			c = t[9],
			l = t[2],
			u = t[6],
			h = t[10],
			d = i + a + h;
		if (d > 0) {
			const p = 0.5 / Math.sqrt(d + 1);
			(this._w = 0.25 / p), (this._x = (u - c) * p), (this._y = (r - l) * p), (this._z = (o - s) * p);
		} else if (i > a && i > h) {
			const p = 2 * Math.sqrt(1 + i - a - h);
			(this._w = (u - c) / p), (this._x = 0.25 * p), (this._y = (s + o) / p), (this._z = (r + l) / p);
		} else if (a > h) {
			const p = 2 * Math.sqrt(1 + a - i - h);
			(this._w = (r - l) / p), (this._x = (s + o) / p), (this._y = 0.25 * p), (this._z = (c + u) / p);
		} else {
			const p = 2 * Math.sqrt(1 + h - i - a);
			(this._w = (o - s) / p), (this._x = (r + l) / p), (this._y = (c + u) / p), (this._z = 0.25 * p);
		}
		return this._onChangeCallback(), this;
	}
	setFromUnitVectors(e, t) {
		let i = e.dot(t) + 1;
		return (
			i < Number.EPSILON
				? ((i = 0),
				  Math.abs(e.x) > Math.abs(e.z)
						? ((this._x = -e.y), (this._y = e.x), (this._z = 0), (this._w = i))
						: ((this._x = 0), (this._y = -e.z), (this._z = e.y), (this._w = i)))
				: ((this._x = e.y * t.z - e.z * t.y),
				  (this._y = e.z * t.x - e.x * t.z),
				  (this._z = e.x * t.y - e.y * t.x),
				  (this._w = i)),
			this.normalize()
		);
	}
	angleTo(e) {
		return 2 * Math.acos(Math.abs(pn(this.dot(e), -1, 1)));
	}
	rotateTowards(e, t) {
		const i = this.angleTo(e);
		if (i === 0) return this;
		const s = Math.min(1, t / i);
		return this.slerp(e, s), this;
	}
	identity() {
		return this.set(0, 0, 0, 1);
	}
	invert() {
		return this.conjugate();
	}
	conjugate() {
		return (this._x *= -1), (this._y *= -1), (this._z *= -1), this._onChangeCallback(), this;
	}
	dot(e) {
		return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
	}
	lengthSq() {
		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	}
	length() {
		return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
	}
	normalize() {
		let e = this.length();
		return (
			e === 0
				? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1))
				: ((e = 1 / e),
				  (this._x = this._x * e),
				  (this._y = this._y * e),
				  (this._z = this._z * e),
				  (this._w = this._w * e)),
			this._onChangeCallback(),
			this
		);
	}
	multiply(e) {
		return this.multiplyQuaternions(this, e);
	}
	premultiply(e) {
		return this.multiplyQuaternions(e, this);
	}
	multiplyQuaternions(e, t) {
		const i = e._x,
			s = e._y,
			r = e._z,
			o = e._w,
			a = t._x,
			c = t._y,
			l = t._z,
			u = t._w;
		return (
			(this._x = i * u + o * a + s * l - r * c),
			(this._y = s * u + o * c + r * a - i * l),
			(this._z = r * u + o * l + i * c - s * a),
			(this._w = o * u - i * a - s * c - r * l),
			this._onChangeCallback(),
			this
		);
	}
	slerp(e, t) {
		if (t === 0) return this;
		if (t === 1) return this.copy(e);
		const i = this._x,
			s = this._y,
			r = this._z,
			o = this._w;
		let a = o * e._w + i * e._x + s * e._y + r * e._z;
		if (
			(a < 0
				? ((this._w = -e._w), (this._x = -e._x), (this._y = -e._y), (this._z = -e._z), (a = -a))
				: this.copy(e),
			a >= 1)
		)
			return (this._w = o), (this._x = i), (this._y = s), (this._z = r), this;
		const c = 1 - a * a;
		if (c <= Number.EPSILON) {
			const p = 1 - t;
			return (
				(this._w = p * o + t * this._w),
				(this._x = p * i + t * this._x),
				(this._y = p * s + t * this._y),
				(this._z = p * r + t * this._z),
				this.normalize(),
				this._onChangeCallback(),
				this
			);
		}
		const l = Math.sqrt(c),
			u = Math.atan2(l, a),
			h = Math.sin((1 - t) * u) / l,
			d = Math.sin(t * u) / l;
		return (
			(this._w = o * h + this._w * d),
			(this._x = i * h + this._x * d),
			(this._y = s * h + this._y * d),
			(this._z = r * h + this._z * d),
			this._onChangeCallback(),
			this
		);
	}
	slerpQuaternions(e, t, i) {
		return this.copy(e).slerp(t, i);
	}
	random() {
		const e = Math.random(),
			t = Math.sqrt(1 - e),
			i = Math.sqrt(e),
			s = 2 * Math.PI * Math.random(),
			r = 2 * Math.PI * Math.random();
		return this.set(t * Math.cos(s), i * Math.sin(r), i * Math.cos(r), t * Math.sin(s));
	}
	equals(e) {
		return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
	}
	fromArray(e, t = 0) {
		return (
			(this._x = e[t]),
			(this._y = e[t + 1]),
			(this._z = e[t + 2]),
			(this._w = e[t + 3]),
			this._onChangeCallback(),
			this
		);
	}
	toArray(e = [], t = 0) {
		return (e[t] = this._x), (e[t + 1] = this._y), (e[t + 2] = this._z), (e[t + 3] = this._w), e;
	}
	fromBufferAttribute(e, t) {
		return (this._x = e.getX(t)), (this._y = e.getY(t)), (this._z = e.getZ(t)), (this._w = e.getW(t)), this;
	}
	toJSON() {
		return this.toArray();
	}
	_onChange(e) {
		return (this._onChangeCallback = e), this;
	}
	_onChangeCallback() {}
	*[Symbol.iterator]() {
		yield this._x, yield this._y, yield this._z, yield this._w;
	}
}
class w {
	constructor(e = 0, t = 0, i = 0) {
		(w.prototype.isVector3 = !0), (this.x = e), (this.y = t), (this.z = i);
	}
	set(e, t, i) {
		return i === void 0 && (i = this.z), (this.x = e), (this.y = t), (this.z = i), this;
	}
	setScalar(e) {
		return (this.x = e), (this.y = e), (this.z = e), this;
	}
	setX(e) {
		return (this.x = e), this;
	}
	setY(e) {
		return (this.y = e), this;
	}
	setZ(e) {
		return (this.z = e), this;
	}
	setComponent(e, t) {
		switch (e) {
			case 0:
				this.x = t;
				break;
			case 1:
				this.y = t;
				break;
			case 2:
				this.z = t;
				break;
			default:
				throw new Error('index is out of range: ' + e);
		}
		return this;
	}
	getComponent(e) {
		switch (e) {
			case 0:
				return this.x;
			case 1:
				return this.y;
			case 2:
				return this.z;
			default:
				throw new Error('index is out of range: ' + e);
		}
	}
	clone() {
		return new this.constructor(this.x, this.y, this.z);
	}
	copy(e) {
		return (this.x = e.x), (this.y = e.y), (this.z = e.z), this;
	}
	add(e) {
		return (this.x += e.x), (this.y += e.y), (this.z += e.z), this;
	}
	addScalar(e) {
		return (this.x += e), (this.y += e), (this.z += e), this;
	}
	addVectors(e, t) {
		return (this.x = e.x + t.x), (this.y = e.y + t.y), (this.z = e.z + t.z), this;
	}
	addScaledVector(e, t) {
		return (this.x += e.x * t), (this.y += e.y * t), (this.z += e.z * t), this;
	}
	sub(e) {
		return (this.x -= e.x), (this.y -= e.y), (this.z -= e.z), this;
	}
	subScalar(e) {
		return (this.x -= e), (this.y -= e), (this.z -= e), this;
	}
	subVectors(e, t) {
		return (this.x = e.x - t.x), (this.y = e.y - t.y), (this.z = e.z - t.z), this;
	}
	multiply(e) {
		return (this.x *= e.x), (this.y *= e.y), (this.z *= e.z), this;
	}
	multiplyScalar(e) {
		return (this.x *= e), (this.y *= e), (this.z *= e), this;
	}
	multiplyVectors(e, t) {
		return (this.x = e.x * t.x), (this.y = e.y * t.y), (this.z = e.z * t.z), this;
	}
	applyEuler(e) {
		return this.applyQuaternion(Hg.setFromEuler(e));
	}
	applyAxisAngle(e, t) {
		return this.applyQuaternion(Hg.setFromAxisAngle(e, t));
	}
	applyMatrix3(e) {
		const t = this.x,
			i = this.y,
			s = this.z,
			r = e.elements;
		return (
			(this.x = r[0] * t + r[3] * i + r[6] * s),
			(this.y = r[1] * t + r[4] * i + r[7] * s),
			(this.z = r[2] * t + r[5] * i + r[8] * s),
			this
		);
	}
	applyNormalMatrix(e) {
		return this.applyMatrix3(e).normalize();
	}
	applyMatrix4(e) {
		const t = this.x,
			i = this.y,
			s = this.z,
			r = e.elements,
			o = 1 / (r[3] * t + r[7] * i + r[11] * s + r[15]);
		return (
			(this.x = (r[0] * t + r[4] * i + r[8] * s + r[12]) * o),
			(this.y = (r[1] * t + r[5] * i + r[9] * s + r[13]) * o),
			(this.z = (r[2] * t + r[6] * i + r[10] * s + r[14]) * o),
			this
		);
	}
	applyQuaternion(e) {
		const t = this.x,
			i = this.y,
			s = this.z,
			r = e.x,
			o = e.y,
			a = e.z,
			c = e.w,
			l = 2 * (o * s - a * i),
			u = 2 * (a * t - r * s),
			h = 2 * (r * i - o * t);
		return (
			(this.x = t + c * l + o * h - a * u),
			(this.y = i + c * u + a * l - r * h),
			(this.z = s + c * h + r * u - o * l),
			this
		);
	}
	project(e) {
		return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
	}
	unproject(e) {
		return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
	}
	transformDirection(e) {
		const t = this.x,
			i = this.y,
			s = this.z,
			r = e.elements;
		return (
			(this.x = r[0] * t + r[4] * i + r[8] * s),
			(this.y = r[1] * t + r[5] * i + r[9] * s),
			(this.z = r[2] * t + r[6] * i + r[10] * s),
			this.normalize()
		);
	}
	divide(e) {
		return (this.x /= e.x), (this.y /= e.y), (this.z /= e.z), this;
	}
	divideScalar(e) {
		return this.multiplyScalar(1 / e);
	}
	min(e) {
		return (
			(this.x = Math.min(this.x, e.x)), (this.y = Math.min(this.y, e.y)), (this.z = Math.min(this.z, e.z)), this
		);
	}
	max(e) {
		return (
			(this.x = Math.max(this.x, e.x)), (this.y = Math.max(this.y, e.y)), (this.z = Math.max(this.z, e.z)), this
		);
	}
	clamp(e, t) {
		return (
			(this.x = Math.max(e.x, Math.min(t.x, this.x))),
			(this.y = Math.max(e.y, Math.min(t.y, this.y))),
			(this.z = Math.max(e.z, Math.min(t.z, this.z))),
			this
		);
	}
	clampScalar(e, t) {
		return (
			(this.x = Math.max(e, Math.min(t, this.x))),
			(this.y = Math.max(e, Math.min(t, this.y))),
			(this.z = Math.max(e, Math.min(t, this.z))),
			this
		);
	}
	clampLength(e, t) {
		const i = this.length();
		return this.divideScalar(i || 1).multiplyScalar(Math.max(e, Math.min(t, i)));
	}
	floor() {
		return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), this;
	}
	ceil() {
		return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), this;
	}
	round() {
		return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), this;
	}
	roundToZero() {
		return (this.x = Math.trunc(this.x)), (this.y = Math.trunc(this.y)), (this.z = Math.trunc(this.z)), this;
	}
	negate() {
		return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this;
	}
	dot(e) {
		return this.x * e.x + this.y * e.y + this.z * e.z;
	}
	lengthSq() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	length() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	manhattanLength() {
		return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
	}
	normalize() {
		return this.divideScalar(this.length() || 1);
	}
	setLength(e) {
		return this.normalize().multiplyScalar(e);
	}
	lerp(e, t) {
		return (this.x += (e.x - this.x) * t), (this.y += (e.y - this.y) * t), (this.z += (e.z - this.z) * t), this;
	}
	lerpVectors(e, t, i) {
		return (
			(this.x = e.x + (t.x - e.x) * i), (this.y = e.y + (t.y - e.y) * i), (this.z = e.z + (t.z - e.z) * i), this
		);
	}
	cross(e) {
		return this.crossVectors(this, e);
	}
	crossVectors(e, t) {
		const i = e.x,
			s = e.y,
			r = e.z,
			o = t.x,
			a = t.y,
			c = t.z;
		return (this.x = s * c - r * a), (this.y = r * o - i * c), (this.z = i * a - s * o), this;
	}
	projectOnVector(e) {
		const t = e.lengthSq();
		if (t === 0) return this.set(0, 0, 0);
		const i = e.dot(this) / t;
		return this.copy(e).multiplyScalar(i);
	}
	projectOnPlane(e) {
		return pd.copy(this).projectOnVector(e), this.sub(pd);
	}
	reflect(e) {
		return this.sub(pd.copy(e).multiplyScalar(2 * this.dot(e)));
	}
	angleTo(e) {
		const t = Math.sqrt(this.lengthSq() * e.lengthSq());
		if (t === 0) return Math.PI / 2;
		const i = this.dot(e) / t;
		return Math.acos(pn(i, -1, 1));
	}
	distanceTo(e) {
		return Math.sqrt(this.distanceToSquared(e));
	}
	distanceToSquared(e) {
		const t = this.x - e.x,
			i = this.y - e.y,
			s = this.z - e.z;
		return t * t + i * i + s * s;
	}
	manhattanDistanceTo(e) {
		return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
	}
	setFromSpherical(e) {
		return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
	}
	setFromSphericalCoords(e, t, i) {
		const s = Math.sin(t) * e;
		return (this.x = s * Math.sin(i)), (this.y = Math.cos(t) * e), (this.z = s * Math.cos(i)), this;
	}
	setFromCylindrical(e) {
		return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
	}
	setFromCylindricalCoords(e, t, i) {
		return (this.x = e * Math.sin(t)), (this.y = i), (this.z = e * Math.cos(t)), this;
	}
	setFromMatrixPosition(e) {
		const t = e.elements;
		return (this.x = t[12]), (this.y = t[13]), (this.z = t[14]), this;
	}
	setFromMatrixScale(e) {
		const t = this.setFromMatrixColumn(e, 0).length(),
			i = this.setFromMatrixColumn(e, 1).length(),
			s = this.setFromMatrixColumn(e, 2).length();
		return (this.x = t), (this.y = i), (this.z = s), this;
	}
	setFromMatrixColumn(e, t) {
		return this.fromArray(e.elements, t * 4);
	}
	setFromMatrix3Column(e, t) {
		return this.fromArray(e.elements, t * 3);
	}
	setFromEuler(e) {
		return (this.x = e._x), (this.y = e._y), (this.z = e._z), this;
	}
	setFromColor(e) {
		return (this.x = e.r), (this.y = e.g), (this.z = e.b), this;
	}
	equals(e) {
		return e.x === this.x && e.y === this.y && e.z === this.z;
	}
	fromArray(e, t = 0) {
		return (this.x = e[t]), (this.y = e[t + 1]), (this.z = e[t + 2]), this;
	}
	toArray(e = [], t = 0) {
		return (e[t] = this.x), (e[t + 1] = this.y), (e[t + 2] = this.z), e;
	}
	fromBufferAttribute(e, t) {
		return (this.x = e.getX(t)), (this.y = e.getY(t)), (this.z = e.getZ(t)), this;
	}
	random() {
		return (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), this;
	}
	randomDirection() {
		const e = (Math.random() - 0.5) * 2,
			t = Math.random() * Math.PI * 2,
			i = Math.sqrt(1 - e ** 2);
		return (this.x = i * Math.cos(t)), (this.y = i * Math.sin(t)), (this.z = e), this;
	}
	*[Symbol.iterator]() {
		yield this.x, yield this.y, yield this.z;
	}
}
const pd = new w(),
	Hg = new Sn();
class Ht {
	constructor(e = new w(1 / 0, 1 / 0, 1 / 0), t = new w(-1 / 0, -1 / 0, -1 / 0)) {
		(this.isBox3 = !0), (this.min = e), (this.max = t);
	}
	set(e, t) {
		return this.min.copy(e), this.max.copy(t), this;
	}
	setFromArray(e) {
		this.makeEmpty();
		for (let t = 0, i = e.length; t < i; t += 3) this.expandByPoint(Pi.fromArray(e, t));
		return this;
	}
	setFromBufferAttribute(e) {
		this.makeEmpty();
		for (let t = 0, i = e.count; t < i; t++) this.expandByPoint(Pi.fromBufferAttribute(e, t));
		return this;
	}
	setFromPoints(e) {
		this.makeEmpty();
		for (let t = 0, i = e.length; t < i; t++) this.expandByPoint(e[t]);
		return this;
	}
	setFromCenterAndSize(e, t) {
		const i = Pi.copy(t).multiplyScalar(0.5);
		return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
	}
	setFromObject(e, t = !1) {
		return this.makeEmpty(), this.expandByObject(e, t);
	}
	clone() {
		return new this.constructor().copy(this);
	}
	copy(e) {
		return this.min.copy(e.min), this.max.copy(e.max), this;
	}
	makeEmpty() {
		return (this.min.x = this.min.y = this.min.z = 1 / 0), (this.max.x = this.max.y = this.max.z = -1 / 0), this;
	}
	isEmpty() {
		return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
	}
	getCenter(e) {
		return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
	}
	getSize(e) {
		return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
	}
	expandByPoint(e) {
		return this.min.min(e), this.max.max(e), this;
	}
	expandByVector(e) {
		return this.min.sub(e), this.max.add(e), this;
	}
	expandByScalar(e) {
		return this.min.addScalar(-e), this.max.addScalar(e), this;
	}
	expandByObject(e, t = !1) {
		e.updateWorldMatrix(!1, !1);
		const i = e.geometry;
		if (i !== void 0) {
			const r = i.getAttribute('position');
			if (t === !0 && r !== void 0 && e.isInstancedMesh !== !0)
				for (let o = 0, a = r.count; o < a; o++)
					e.isMesh === !0 ? e.getVertexPosition(o, Pi) : Pi.fromBufferAttribute(r, o),
						Pi.applyMatrix4(e.matrixWorld),
						this.expandByPoint(Pi);
			else
				e.boundingBox !== void 0
					? (e.boundingBox === null && e.computeBoundingBox(), cl.copy(e.boundingBox))
					: (i.boundingBox === null && i.computeBoundingBox(), cl.copy(i.boundingBox)),
					cl.applyMatrix4(e.matrixWorld),
					this.union(cl);
		}
		const s = e.children;
		for (let r = 0, o = s.length; r < o; r++) this.expandByObject(s[r], t);
		return this;
	}
	containsPoint(e) {
		return !(
			e.x < this.min.x ||
			e.x > this.max.x ||
			e.y < this.min.y ||
			e.y > this.max.y ||
			e.z < this.min.z ||
			e.z > this.max.z
		);
	}
	containsBox(e) {
		return (
			this.min.x <= e.min.x &&
			e.max.x <= this.max.x &&
			this.min.y <= e.min.y &&
			e.max.y <= this.max.y &&
			this.min.z <= e.min.z &&
			e.max.z <= this.max.z
		);
	}
	getParameter(e, t) {
		return t.set(
			(e.x - this.min.x) / (this.max.x - this.min.x),
			(e.y - this.min.y) / (this.max.y - this.min.y),
			(e.z - this.min.z) / (this.max.z - this.min.z)
		);
	}
	intersectsBox(e) {
		return !(
			e.max.x < this.min.x ||
			e.min.x > this.max.x ||
			e.max.y < this.min.y ||
			e.min.y > this.max.y ||
			e.max.z < this.min.z ||
			e.min.z > this.max.z
		);
	}
	intersectsSphere(e) {
		return this.clampPoint(e.center, Pi), Pi.distanceToSquared(e.center) <= e.radius * e.radius;
	}
	intersectsPlane(e) {
		let t, i;
		return (
			e.normal.x > 0
				? ((t = e.normal.x * this.min.x), (i = e.normal.x * this.max.x))
				: ((t = e.normal.x * this.max.x), (i = e.normal.x * this.min.x)),
			e.normal.y > 0
				? ((t += e.normal.y * this.min.y), (i += e.normal.y * this.max.y))
				: ((t += e.normal.y * this.max.y), (i += e.normal.y * this.min.y)),
			e.normal.z > 0
				? ((t += e.normal.z * this.min.z), (i += e.normal.z * this.max.z))
				: ((t += e.normal.z * this.max.z), (i += e.normal.z * this.min.z)),
			t <= -e.constant && i >= -e.constant
		);
	}
	intersectsTriangle(e) {
		if (this.isEmpty()) return !1;
		this.getCenter(Ga),
			ll.subVectors(this.max, Ga),
			_o.subVectors(e.a, Ga),
			mo.subVectors(e.b, Ga),
			go.subVectors(e.c, Ga),
			Ws.subVectors(mo, _o),
			js.subVectors(go, mo),
			Mr.subVectors(_o, go);
		let t = [
			0,
			-Ws.z,
			Ws.y,
			0,
			-js.z,
			js.y,
			0,
			-Mr.z,
			Mr.y,
			Ws.z,
			0,
			-Ws.x,
			js.z,
			0,
			-js.x,
			Mr.z,
			0,
			-Mr.x,
			-Ws.y,
			Ws.x,
			0,
			-js.y,
			js.x,
			0,
			-Mr.y,
			Mr.x,
			0,
		];
		return !fd(t, _o, mo, go, ll) || ((t = [1, 0, 0, 0, 1, 0, 0, 0, 1]), !fd(t, _o, mo, go, ll))
			? !1
			: (ul.crossVectors(Ws, js), (t = [ul.x, ul.y, ul.z]), fd(t, _o, mo, go, ll));
	}
	clampPoint(e, t) {
		return t.copy(e).clamp(this.min, this.max);
	}
	distanceToPoint(e) {
		return this.clampPoint(e, Pi).distanceTo(e);
	}
	getBoundingSphere(e) {
		return (
			this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), (e.radius = this.getSize(Pi).length() * 0.5)), e
		);
	}
	intersect(e) {
		return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
	}
	union(e) {
		return this.min.min(e.min), this.max.max(e.max), this;
	}
	applyMatrix4(e) {
		return this.isEmpty()
			? this
			: (ps[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e),
			  ps[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e),
			  ps[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e),
			  ps[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e),
			  ps[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e),
			  ps[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e),
			  ps[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e),
			  ps[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e),
			  this.setFromPoints(ps),
			  this);
	}
	translate(e) {
		return this.min.add(e), this.max.add(e), this;
	}
	equals(e) {
		return e.min.equals(this.min) && e.max.equals(this.max);
	}
}
const ps = [new w(), new w(), new w(), new w(), new w(), new w(), new w(), new w()],
	Pi = new w(),
	cl = new Ht(),
	_o = new w(),
	mo = new w(),
	go = new w(),
	Ws = new w(),
	js = new w(),
	Mr = new w(),
	Ga = new w(),
	ll = new w(),
	ul = new w(),
	Tr = new w();
function fd(n, e, t, i, s) {
	for (let r = 0, o = n.length - 3; r <= o; r += 3) {
		Tr.fromArray(n, r);
		const a = s.x * Math.abs(Tr.x) + s.y * Math.abs(Tr.y) + s.z * Math.abs(Tr.z),
			c = e.dot(Tr),
			l = t.dot(Tr),
			u = i.dot(Tr);
		if (Math.max(-Math.max(c, l, u), Math.min(c, l, u)) > a) return !1;
	}
	return !0;
}
const mT = new Ht(),
	za = new w(),
	_d = new w();
class Fs {
	constructor(e = new w(), t = -1) {
		(this.center = e), (this.radius = t);
	}
	set(e, t) {
		return this.center.copy(e), (this.radius = t), this;
	}
	setFromPoints(e, t) {
		const i = this.center;
		t !== void 0 ? i.copy(t) : mT.setFromPoints(e).getCenter(i);
		let s = 0;
		for (let r = 0, o = e.length; r < o; r++) s = Math.max(s, i.distanceToSquared(e[r]));
		return (this.radius = Math.sqrt(s)), this;
	}
	copy(e) {
		return this.center.copy(e.center), (this.radius = e.radius), this;
	}
	isEmpty() {
		return this.radius < 0;
	}
	makeEmpty() {
		return this.center.set(0, 0, 0), (this.radius = -1), this;
	}
	containsPoint(e) {
		return e.distanceToSquared(this.center) <= this.radius * this.radius;
	}
	distanceToPoint(e) {
		return e.distanceTo(this.center) - this.radius;
	}
	intersectsSphere(e) {
		const t = this.radius + e.radius;
		return e.center.distanceToSquared(this.center) <= t * t;
	}
	intersectsBox(e) {
		return e.intersectsSphere(this);
	}
	intersectsPlane(e) {
		return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
	}
	clampPoint(e, t) {
		const i = this.center.distanceToSquared(e);
		return (
			t.copy(e),
			i > this.radius * this.radius &&
				(t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)),
			t
		);
	}
	getBoundingBox(e) {
		return this.isEmpty()
			? (e.makeEmpty(), e)
			: (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
	}
	applyMatrix4(e) {
		return this.center.applyMatrix4(e), (this.radius = this.radius * e.getMaxScaleOnAxis()), this;
	}
	translate(e) {
		return this.center.add(e), this;
	}
	expandByPoint(e) {
		if (this.isEmpty()) return this.center.copy(e), (this.radius = 0), this;
		za.subVectors(e, this.center);
		const t = za.lengthSq();
		if (t > this.radius * this.radius) {
			const i = Math.sqrt(t),
				s = (i - this.radius) * 0.5;
			this.center.addScaledVector(za, s / i), (this.radius += s);
		}
		return this;
	}
	union(e) {
		return e.isEmpty()
			? this
			: this.isEmpty()
			? (this.copy(e), this)
			: (this.center.equals(e.center) === !0
					? (this.radius = Math.max(this.radius, e.radius))
					: (_d.subVectors(e.center, this.center).setLength(e.radius),
					  this.expandByPoint(za.copy(e.center).add(_d)),
					  this.expandByPoint(za.copy(e.center).sub(_d))),
			  this);
	}
	equals(e) {
		return e.center.equals(this.center) && e.radius === this.radius;
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
const fs = new w(),
	md = new w(),
	hl = new w(),
	Xs = new w(),
	gd = new w(),
	dl = new w(),
	vd = new w();
class Ta {
	constructor(e = new w(), t = new w(0, 0, -1)) {
		(this.origin = e), (this.direction = t);
	}
	set(e, t) {
		return this.origin.copy(e), this.direction.copy(t), this;
	}
	copy(e) {
		return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
	}
	at(e, t) {
		return t.copy(this.origin).addScaledVector(this.direction, e);
	}
	lookAt(e) {
		return this.direction.copy(e).sub(this.origin).normalize(), this;
	}
	recast(e) {
		return this.origin.copy(this.at(e, fs)), this;
	}
	closestPointToPoint(e, t) {
		t.subVectors(e, this.origin);
		const i = t.dot(this.direction);
		return i < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, i);
	}
	distanceToPoint(e) {
		return Math.sqrt(this.distanceSqToPoint(e));
	}
	distanceSqToPoint(e) {
		const t = fs.subVectors(e, this.origin).dot(this.direction);
		return t < 0
			? this.origin.distanceToSquared(e)
			: (fs.copy(this.origin).addScaledVector(this.direction, t), fs.distanceToSquared(e));
	}
	distanceSqToSegment(e, t, i, s) {
		md.copy(e).add(t).multiplyScalar(0.5), hl.copy(t).sub(e).normalize(), Xs.copy(this.origin).sub(md);
		const r = e.distanceTo(t) * 0.5,
			o = -this.direction.dot(hl),
			a = Xs.dot(this.direction),
			c = -Xs.dot(hl),
			l = Xs.lengthSq(),
			u = Math.abs(1 - o * o);
		let h, d, p, m;
		if (u > 0)
			if (((h = o * c - a), (d = o * a - c), (m = r * u), h >= 0))
				if (d >= -m)
					if (d <= m) {
						const g = 1 / u;
						(h *= g), (d *= g), (p = h * (h + o * d + 2 * a) + d * (o * h + d + 2 * c) + l);
					} else (d = r), (h = Math.max(0, -(o * d + a))), (p = -h * h + d * (d + 2 * c) + l);
				else (d = -r), (h = Math.max(0, -(o * d + a))), (p = -h * h + d * (d + 2 * c) + l);
			else
				d <= -m
					? ((h = Math.max(0, -(-o * r + a))),
					  (d = h > 0 ? -r : Math.min(Math.max(-r, -c), r)),
					  (p = -h * h + d * (d + 2 * c) + l))
					: d <= m
					? ((h = 0), (d = Math.min(Math.max(-r, -c), r)), (p = d * (d + 2 * c) + l))
					: ((h = Math.max(0, -(o * r + a))),
					  (d = h > 0 ? r : Math.min(Math.max(-r, -c), r)),
					  (p = -h * h + d * (d + 2 * c) + l));
		else (d = o > 0 ? -r : r), (h = Math.max(0, -(o * d + a))), (p = -h * h + d * (d + 2 * c) + l);
		return i && i.copy(this.origin).addScaledVector(this.direction, h), s && s.copy(md).addScaledVector(hl, d), p;
	}
	intersectSphere(e, t) {
		fs.subVectors(e.center, this.origin);
		const i = fs.dot(this.direction),
			s = fs.dot(fs) - i * i,
			r = e.radius * e.radius;
		if (s > r) return null;
		const o = Math.sqrt(r - s),
			a = i - o,
			c = i + o;
		return c < 0 ? null : a < 0 ? this.at(c, t) : this.at(a, t);
	}
	intersectsSphere(e) {
		return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
	}
	distanceToPlane(e) {
		const t = e.normal.dot(this.direction);
		if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null;
		const i = -(this.origin.dot(e.normal) + e.constant) / t;
		return i >= 0 ? i : null;
	}
	intersectPlane(e, t) {
		const i = this.distanceToPlane(e);
		return i === null ? null : this.at(i, t);
	}
	intersectsPlane(e) {
		const t = e.distanceToPoint(this.origin);
		return t === 0 || e.normal.dot(this.direction) * t < 0;
	}
	intersectBox(e, t) {
		let i, s, r, o, a, c;
		const l = 1 / this.direction.x,
			u = 1 / this.direction.y,
			h = 1 / this.direction.z,
			d = this.origin;
		return (
			l >= 0
				? ((i = (e.min.x - d.x) * l), (s = (e.max.x - d.x) * l))
				: ((i = (e.max.x - d.x) * l), (s = (e.min.x - d.x) * l)),
			u >= 0
				? ((r = (e.min.y - d.y) * u), (o = (e.max.y - d.y) * u))
				: ((r = (e.max.y - d.y) * u), (o = (e.min.y - d.y) * u)),
			i > o ||
			r > s ||
			((r > i || isNaN(i)) && (i = r),
			(o < s || isNaN(s)) && (s = o),
			h >= 0
				? ((a = (e.min.z - d.z) * h), (c = (e.max.z - d.z) * h))
				: ((a = (e.max.z - d.z) * h), (c = (e.min.z - d.z) * h)),
			i > c || a > s) ||
			((a > i || i !== i) && (i = a), (c < s || s !== s) && (s = c), s < 0)
				? null
				: this.at(i >= 0 ? i : s, t)
		);
	}
	intersectsBox(e) {
		return this.intersectBox(e, fs) !== null;
	}
	intersectTriangle(e, t, i, s, r) {
		gd.subVectors(t, e), dl.subVectors(i, e), vd.crossVectors(gd, dl);
		let o = this.direction.dot(vd),
			a;
		if (o > 0) {
			if (s) return null;
			a = 1;
		} else if (o < 0) (a = -1), (o = -o);
		else return null;
		Xs.subVectors(this.origin, e);
		const c = a * this.direction.dot(dl.crossVectors(Xs, dl));
		if (c < 0) return null;
		const l = a * this.direction.dot(gd.cross(Xs));
		if (l < 0 || c + l > o) return null;
		const u = -a * Xs.dot(vd);
		return u < 0 ? null : this.at(u / o, r);
	}
	applyMatrix4(e) {
		return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
	}
	equals(e) {
		return e.origin.equals(this.origin) && e.direction.equals(this.direction);
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
class Qe {
	constructor(e, t, i, s, r, o, a, c, l, u, h, d, p, m, g, _) {
		(Qe.prototype.isMatrix4 = !0),
			(this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
			e !== void 0 && this.set(e, t, i, s, r, o, a, c, l, u, h, d, p, m, g, _);
	}
	set(e, t, i, s, r, o, a, c, l, u, h, d, p, m, g, _) {
		const f = this.elements;
		return (
			(f[0] = e),
			(f[4] = t),
			(f[8] = i),
			(f[12] = s),
			(f[1] = r),
			(f[5] = o),
			(f[9] = a),
			(f[13] = c),
			(f[2] = l),
			(f[6] = u),
			(f[10] = h),
			(f[14] = d),
			(f[3] = p),
			(f[7] = m),
			(f[11] = g),
			(f[15] = _),
			this
		);
	}
	identity() {
		return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
	}
	clone() {
		return new Qe().fromArray(this.elements);
	}
	copy(e) {
		const t = this.elements,
			i = e.elements;
		return (
			(t[0] = i[0]),
			(t[1] = i[1]),
			(t[2] = i[2]),
			(t[3] = i[3]),
			(t[4] = i[4]),
			(t[5] = i[5]),
			(t[6] = i[6]),
			(t[7] = i[7]),
			(t[8] = i[8]),
			(t[9] = i[9]),
			(t[10] = i[10]),
			(t[11] = i[11]),
			(t[12] = i[12]),
			(t[13] = i[13]),
			(t[14] = i[14]),
			(t[15] = i[15]),
			this
		);
	}
	copyPosition(e) {
		const t = this.elements,
			i = e.elements;
		return (t[12] = i[12]), (t[13] = i[13]), (t[14] = i[14]), this;
	}
	setFromMatrix3(e) {
		const t = e.elements;
		return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this;
	}
	extractBasis(e, t, i) {
		return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), i.setFromMatrixColumn(this, 2), this;
	}
	makeBasis(e, t, i) {
		return this.set(e.x, t.x, i.x, 0, e.y, t.y, i.y, 0, e.z, t.z, i.z, 0, 0, 0, 0, 1), this;
	}
	extractRotation(e) {
		const t = this.elements,
			i = e.elements,
			s = 1 / vo.setFromMatrixColumn(e, 0).length(),
			r = 1 / vo.setFromMatrixColumn(e, 1).length(),
			o = 1 / vo.setFromMatrixColumn(e, 2).length();
		return (
			(t[0] = i[0] * s),
			(t[1] = i[1] * s),
			(t[2] = i[2] * s),
			(t[3] = 0),
			(t[4] = i[4] * r),
			(t[5] = i[5] * r),
			(t[6] = i[6] * r),
			(t[7] = 0),
			(t[8] = i[8] * o),
			(t[9] = i[9] * o),
			(t[10] = i[10] * o),
			(t[11] = 0),
			(t[12] = 0),
			(t[13] = 0),
			(t[14] = 0),
			(t[15] = 1),
			this
		);
	}
	makeRotationFromEuler(e) {
		const t = this.elements,
			i = e.x,
			s = e.y,
			r = e.z,
			o = Math.cos(i),
			a = Math.sin(i),
			c = Math.cos(s),
			l = Math.sin(s),
			u = Math.cos(r),
			h = Math.sin(r);
		if (e.order === 'XYZ') {
			const d = o * u,
				p = o * h,
				m = a * u,
				g = a * h;
			(t[0] = c * u),
				(t[4] = -c * h),
				(t[8] = l),
				(t[1] = p + m * l),
				(t[5] = d - g * l),
				(t[9] = -a * c),
				(t[2] = g - d * l),
				(t[6] = m + p * l),
				(t[10] = o * c);
		} else if (e.order === 'YXZ') {
			const d = c * u,
				p = c * h,
				m = l * u,
				g = l * h;
			(t[0] = d + g * a),
				(t[4] = m * a - p),
				(t[8] = o * l),
				(t[1] = o * h),
				(t[5] = o * u),
				(t[9] = -a),
				(t[2] = p * a - m),
				(t[6] = g + d * a),
				(t[10] = o * c);
		} else if (e.order === 'ZXY') {
			const d = c * u,
				p = c * h,
				m = l * u,
				g = l * h;
			(t[0] = d - g * a),
				(t[4] = -o * h),
				(t[8] = m + p * a),
				(t[1] = p + m * a),
				(t[5] = o * u),
				(t[9] = g - d * a),
				(t[2] = -o * l),
				(t[6] = a),
				(t[10] = o * c);
		} else if (e.order === 'ZYX') {
			const d = o * u,
				p = o * h,
				m = a * u,
				g = a * h;
			(t[0] = c * u),
				(t[4] = m * l - p),
				(t[8] = d * l + g),
				(t[1] = c * h),
				(t[5] = g * l + d),
				(t[9] = p * l - m),
				(t[2] = -l),
				(t[6] = a * c),
				(t[10] = o * c);
		} else if (e.order === 'YZX') {
			const d = o * c,
				p = o * l,
				m = a * c,
				g = a * l;
			(t[0] = c * u),
				(t[4] = g - d * h),
				(t[8] = m * h + p),
				(t[1] = h),
				(t[5] = o * u),
				(t[9] = -a * u),
				(t[2] = -l * u),
				(t[6] = p * h + m),
				(t[10] = d - g * h);
		} else if (e.order === 'XZY') {
			const d = o * c,
				p = o * l,
				m = a * c,
				g = a * l;
			(t[0] = c * u),
				(t[4] = -h),
				(t[8] = l * u),
				(t[1] = d * h + g),
				(t[5] = o * u),
				(t[9] = p * h - m),
				(t[2] = m * h - p),
				(t[6] = a * u),
				(t[10] = g * h + d);
		}
		return (t[3] = 0), (t[7] = 0), (t[11] = 0), (t[12] = 0), (t[13] = 0), (t[14] = 0), (t[15] = 1), this;
	}
	makeRotationFromQuaternion(e) {
		return this.compose(gT, e, vT);
	}
	lookAt(e, t, i) {
		const s = this.elements;
		return (
			ni.subVectors(e, t),
			ni.lengthSq() === 0 && (ni.z = 1),
			ni.normalize(),
			$s.crossVectors(i, ni),
			$s.lengthSq() === 0 &&
				(Math.abs(i.z) === 1 ? (ni.x += 1e-4) : (ni.z += 1e-4), ni.normalize(), $s.crossVectors(i, ni)),
			$s.normalize(),
			pl.crossVectors(ni, $s),
			(s[0] = $s.x),
			(s[4] = pl.x),
			(s[8] = ni.x),
			(s[1] = $s.y),
			(s[5] = pl.y),
			(s[9] = ni.y),
			(s[2] = $s.z),
			(s[6] = pl.z),
			(s[10] = ni.z),
			this
		);
	}
	multiply(e) {
		return this.multiplyMatrices(this, e);
	}
	premultiply(e) {
		return this.multiplyMatrices(e, this);
	}
	multiplyMatrices(e, t) {
		const i = e.elements,
			s = t.elements,
			r = this.elements,
			o = i[0],
			a = i[4],
			c = i[8],
			l = i[12],
			u = i[1],
			h = i[5],
			d = i[9],
			p = i[13],
			m = i[2],
			g = i[6],
			_ = i[10],
			f = i[14],
			y = i[3],
			v = i[7],
			A = i[11],
			S = i[15],
			T = s[0],
			R = s[4],
			D = s[8],
			E = s[12],
			x = s[1],
			z = s[5],
			B = s[9],
			W = s[13],
			F = s[2],
			X = s[6],
			Z = s[10],
			Q = s[14],
			he = s[3],
			ie = s[7],
			oe = s[11],
			de = s[15];
		return (
			(r[0] = o * T + a * x + c * F + l * he),
			(r[4] = o * R + a * z + c * X + l * ie),
			(r[8] = o * D + a * B + c * Z + l * oe),
			(r[12] = o * E + a * W + c * Q + l * de),
			(r[1] = u * T + h * x + d * F + p * he),
			(r[5] = u * R + h * z + d * X + p * ie),
			(r[9] = u * D + h * B + d * Z + p * oe),
			(r[13] = u * E + h * W + d * Q + p * de),
			(r[2] = m * T + g * x + _ * F + f * he),
			(r[6] = m * R + g * z + _ * X + f * ie),
			(r[10] = m * D + g * B + _ * Z + f * oe),
			(r[14] = m * E + g * W + _ * Q + f * de),
			(r[3] = y * T + v * x + A * F + S * he),
			(r[7] = y * R + v * z + A * X + S * ie),
			(r[11] = y * D + v * B + A * Z + S * oe),
			(r[15] = y * E + v * W + A * Q + S * de),
			this
		);
	}
	multiplyScalar(e) {
		const t = this.elements;
		return (
			(t[0] *= e),
			(t[4] *= e),
			(t[8] *= e),
			(t[12] *= e),
			(t[1] *= e),
			(t[5] *= e),
			(t[9] *= e),
			(t[13] *= e),
			(t[2] *= e),
			(t[6] *= e),
			(t[10] *= e),
			(t[14] *= e),
			(t[3] *= e),
			(t[7] *= e),
			(t[11] *= e),
			(t[15] *= e),
			this
		);
	}
	determinant() {
		const e = this.elements,
			t = e[0],
			i = e[4],
			s = e[8],
			r = e[12],
			o = e[1],
			a = e[5],
			c = e[9],
			l = e[13],
			u = e[2],
			h = e[6],
			d = e[10],
			p = e[14],
			m = e[3],
			g = e[7],
			_ = e[11],
			f = e[15];
		return (
			m * (+r * c * h - s * l * h - r * a * d + i * l * d + s * a * p - i * c * p) +
			g * (+t * c * p - t * l * d + r * o * d - s * o * p + s * l * u - r * c * u) +
			_ * (+t * l * h - t * a * p - r * o * h + i * o * p + r * a * u - i * l * u) +
			f * (-s * a * u - t * c * h + t * a * d + s * o * h - i * o * d + i * c * u)
		);
	}
	transpose() {
		const e = this.elements;
		let t;
		return (
			(t = e[1]),
			(e[1] = e[4]),
			(e[4] = t),
			(t = e[2]),
			(e[2] = e[8]),
			(e[8] = t),
			(t = e[6]),
			(e[6] = e[9]),
			(e[9] = t),
			(t = e[3]),
			(e[3] = e[12]),
			(e[12] = t),
			(t = e[7]),
			(e[7] = e[13]),
			(e[13] = t),
			(t = e[11]),
			(e[11] = e[14]),
			(e[14] = t),
			this
		);
	}
	setPosition(e, t, i) {
		const s = this.elements;
		return (
			e.isVector3 ? ((s[12] = e.x), (s[13] = e.y), (s[14] = e.z)) : ((s[12] = e), (s[13] = t), (s[14] = i)), this
		);
	}
	invert() {
		const e = this.elements,
			t = e[0],
			i = e[1],
			s = e[2],
			r = e[3],
			o = e[4],
			a = e[5],
			c = e[6],
			l = e[7],
			u = e[8],
			h = e[9],
			d = e[10],
			p = e[11],
			m = e[12],
			g = e[13],
			_ = e[14],
			f = e[15],
			y = h * _ * l - g * d * l + g * c * p - a * _ * p - h * c * f + a * d * f,
			v = m * d * l - u * _ * l - m * c * p + o * _ * p + u * c * f - o * d * f,
			A = u * g * l - m * h * l + m * a * p - o * g * p - u * a * f + o * h * f,
			S = m * h * c - u * g * c - m * a * d + o * g * d + u * a * _ - o * h * _,
			T = t * y + i * v + s * A + r * S;
		if (T === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		const R = 1 / T;
		return (
			(e[0] = y * R),
			(e[1] = (g * d * r - h * _ * r - g * s * p + i * _ * p + h * s * f - i * d * f) * R),
			(e[2] = (a * _ * r - g * c * r + g * s * l - i * _ * l - a * s * f + i * c * f) * R),
			(e[3] = (h * c * r - a * d * r - h * s * l + i * d * l + a * s * p - i * c * p) * R),
			(e[4] = v * R),
			(e[5] = (u * _ * r - m * d * r + m * s * p - t * _ * p - u * s * f + t * d * f) * R),
			(e[6] = (m * c * r - o * _ * r - m * s * l + t * _ * l + o * s * f - t * c * f) * R),
			(e[7] = (o * d * r - u * c * r + u * s * l - t * d * l - o * s * p + t * c * p) * R),
			(e[8] = A * R),
			(e[9] = (m * h * r - u * g * r - m * i * p + t * g * p + u * i * f - t * h * f) * R),
			(e[10] = (o * g * r - m * a * r + m * i * l - t * g * l - o * i * f + t * a * f) * R),
			(e[11] = (u * a * r - o * h * r - u * i * l + t * h * l + o * i * p - t * a * p) * R),
			(e[12] = S * R),
			(e[13] = (u * g * s - m * h * s + m * i * d - t * g * d - u * i * _ + t * h * _) * R),
			(e[14] = (m * a * s - o * g * s - m * i * c + t * g * c + o * i * _ - t * a * _) * R),
			(e[15] = (o * h * s - u * a * s + u * i * c - t * h * c - o * i * d + t * a * d) * R),
			this
		);
	}
	scale(e) {
		const t = this.elements,
			i = e.x,
			s = e.y,
			r = e.z;
		return (
			(t[0] *= i),
			(t[4] *= s),
			(t[8] *= r),
			(t[1] *= i),
			(t[5] *= s),
			(t[9] *= r),
			(t[2] *= i),
			(t[6] *= s),
			(t[10] *= r),
			(t[3] *= i),
			(t[7] *= s),
			(t[11] *= r),
			this
		);
	}
	getMaxScaleOnAxis() {
		const e = this.elements,
			t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2],
			i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6],
			s = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
		return Math.sqrt(Math.max(t, i, s));
	}
	makeTranslation(e, t, i) {
		return (
			e.isVector3
				? this.set(1, 0, 0, e.x, 0, 1, 0, e.y, 0, 0, 1, e.z, 0, 0, 0, 1)
				: this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, i, 0, 0, 0, 1),
			this
		);
	}
	makeRotationX(e) {
		const t = Math.cos(e),
			i = Math.sin(e);
		return this.set(1, 0, 0, 0, 0, t, -i, 0, 0, i, t, 0, 0, 0, 0, 1), this;
	}
	makeRotationY(e) {
		const t = Math.cos(e),
			i = Math.sin(e);
		return this.set(t, 0, i, 0, 0, 1, 0, 0, -i, 0, t, 0, 0, 0, 0, 1), this;
	}
	makeRotationZ(e) {
		const t = Math.cos(e),
			i = Math.sin(e);
		return this.set(t, -i, 0, 0, i, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
	}
	makeRotationAxis(e, t) {
		const i = Math.cos(t),
			s = Math.sin(t),
			r = 1 - i,
			o = e.x,
			a = e.y,
			c = e.z,
			l = r * o,
			u = r * a;
		return (
			this.set(
				l * o + i,
				l * a - s * c,
				l * c + s * a,
				0,
				l * a + s * c,
				u * a + i,
				u * c - s * o,
				0,
				l * c - s * a,
				u * c + s * o,
				r * c * c + i,
				0,
				0,
				0,
				0,
				1
			),
			this
		);
	}
	makeScale(e, t, i) {
		return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, i, 0, 0, 0, 0, 1), this;
	}
	makeShear(e, t, i, s, r, o) {
		return this.set(1, i, r, 0, e, 1, o, 0, t, s, 1, 0, 0, 0, 0, 1), this;
	}
	compose(e, t, i) {
		const s = this.elements,
			r = t._x,
			o = t._y,
			a = t._z,
			c = t._w,
			l = r + r,
			u = o + o,
			h = a + a,
			d = r * l,
			p = r * u,
			m = r * h,
			g = o * u,
			_ = o * h,
			f = a * h,
			y = c * l,
			v = c * u,
			A = c * h,
			S = i.x,
			T = i.y,
			R = i.z;
		return (
			(s[0] = (1 - (g + f)) * S),
			(s[1] = (p + A) * S),
			(s[2] = (m - v) * S),
			(s[3] = 0),
			(s[4] = (p - A) * T),
			(s[5] = (1 - (d + f)) * T),
			(s[6] = (_ + y) * T),
			(s[7] = 0),
			(s[8] = (m + v) * R),
			(s[9] = (_ - y) * R),
			(s[10] = (1 - (d + g)) * R),
			(s[11] = 0),
			(s[12] = e.x),
			(s[13] = e.y),
			(s[14] = e.z),
			(s[15] = 1),
			this
		);
	}
	decompose(e, t, i) {
		const s = this.elements;
		let r = vo.set(s[0], s[1], s[2]).length();
		const o = vo.set(s[4], s[5], s[6]).length(),
			a = vo.set(s[8], s[9], s[10]).length();
		this.determinant() < 0 && (r = -r), (e.x = s[12]), (e.y = s[13]), (e.z = s[14]), Ni.copy(this);
		const l = 1 / r,
			u = 1 / o,
			h = 1 / a;
		return (
			(Ni.elements[0] *= l),
			(Ni.elements[1] *= l),
			(Ni.elements[2] *= l),
			(Ni.elements[4] *= u),
			(Ni.elements[5] *= u),
			(Ni.elements[6] *= u),
			(Ni.elements[8] *= h),
			(Ni.elements[9] *= h),
			(Ni.elements[10] *= h),
			t.setFromRotationMatrix(Ni),
			(i.x = r),
			(i.y = o),
			(i.z = a),
			this
		);
	}
	makePerspective(e, t, i, s, r, o, a = Ts) {
		const c = this.elements,
			l = (2 * r) / (t - e),
			u = (2 * r) / (i - s),
			h = (t + e) / (t - e),
			d = (i + s) / (i - s);
		let p, m;
		if (a === Ts) (p = -(o + r) / (o - r)), (m = (-2 * o * r) / (o - r));
		else if (a === qu) (p = -o / (o - r)), (m = (-o * r) / (o - r));
		else throw new Error('THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + a);
		return (
			(c[0] = l),
			(c[4] = 0),
			(c[8] = h),
			(c[12] = 0),
			(c[1] = 0),
			(c[5] = u),
			(c[9] = d),
			(c[13] = 0),
			(c[2] = 0),
			(c[6] = 0),
			(c[10] = p),
			(c[14] = m),
			(c[3] = 0),
			(c[7] = 0),
			(c[11] = -1),
			(c[15] = 0),
			this
		);
	}
	makeOrthographic(e, t, i, s, r, o, a = Ts) {
		const c = this.elements,
			l = 1 / (t - e),
			u = 1 / (i - s),
			h = 1 / (o - r),
			d = (t + e) * l,
			p = (i + s) * u;
		let m, g;
		if (a === Ts) (m = (o + r) * h), (g = -2 * h);
		else if (a === qu) (m = r * h), (g = -1 * h);
		else throw new Error('THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + a);
		return (
			(c[0] = 2 * l),
			(c[4] = 0),
			(c[8] = 0),
			(c[12] = -d),
			(c[1] = 0),
			(c[5] = 2 * u),
			(c[9] = 0),
			(c[13] = -p),
			(c[2] = 0),
			(c[6] = 0),
			(c[10] = g),
			(c[14] = -m),
			(c[3] = 0),
			(c[7] = 0),
			(c[11] = 0),
			(c[15] = 1),
			this
		);
	}
	equals(e) {
		const t = this.elements,
			i = e.elements;
		for (let s = 0; s < 16; s++) if (t[s] !== i[s]) return !1;
		return !0;
	}
	fromArray(e, t = 0) {
		for (let i = 0; i < 16; i++) this.elements[i] = e[i + t];
		return this;
	}
	toArray(e = [], t = 0) {
		const i = this.elements;
		return (
			(e[t] = i[0]),
			(e[t + 1] = i[1]),
			(e[t + 2] = i[2]),
			(e[t + 3] = i[3]),
			(e[t + 4] = i[4]),
			(e[t + 5] = i[5]),
			(e[t + 6] = i[6]),
			(e[t + 7] = i[7]),
			(e[t + 8] = i[8]),
			(e[t + 9] = i[9]),
			(e[t + 10] = i[10]),
			(e[t + 11] = i[11]),
			(e[t + 12] = i[12]),
			(e[t + 13] = i[13]),
			(e[t + 14] = i[14]),
			(e[t + 15] = i[15]),
			e
		);
	}
}
const vo = new w(),
	Ni = new Qe(),
	gT = new w(0, 0, 0),
	vT = new w(1, 1, 1),
	$s = new w(),
	pl = new w(),
	ni = new w(),
	Wg = new Qe(),
	jg = new Sn();
class br {
	constructor(e = 0, t = 0, i = 0, s = br.DEFAULT_ORDER) {
		(this.isEuler = !0), (this._x = e), (this._y = t), (this._z = i), (this._order = s);
	}
	get x() {
		return this._x;
	}
	set x(e) {
		(this._x = e), this._onChangeCallback();
	}
	get y() {
		return this._y;
	}
	set y(e) {
		(this._y = e), this._onChangeCallback();
	}
	get z() {
		return this._z;
	}
	set z(e) {
		(this._z = e), this._onChangeCallback();
	}
	get order() {
		return this._order;
	}
	set order(e) {
		(this._order = e), this._onChangeCallback();
	}
	set(e, t, i, s = this._order) {
		return (this._x = e), (this._y = t), (this._z = i), (this._order = s), this._onChangeCallback(), this;
	}
	clone() {
		return new this.constructor(this._x, this._y, this._z, this._order);
	}
	copy(e) {
		return (
			(this._x = e._x),
			(this._y = e._y),
			(this._z = e._z),
			(this._order = e._order),
			this._onChangeCallback(),
			this
		);
	}
	setFromRotationMatrix(e, t = this._order, i = !0) {
		const s = e.elements,
			r = s[0],
			o = s[4],
			a = s[8],
			c = s[1],
			l = s[5],
			u = s[9],
			h = s[2],
			d = s[6],
			p = s[10];
		switch (t) {
			case 'XYZ':
				(this._y = Math.asin(pn(a, -1, 1))),
					Math.abs(a) < 0.9999999
						? ((this._x = Math.atan2(-u, p)), (this._z = Math.atan2(-o, r)))
						: ((this._x = Math.atan2(d, l)), (this._z = 0));
				break;
			case 'YXZ':
				(this._x = Math.asin(-pn(u, -1, 1))),
					Math.abs(u) < 0.9999999
						? ((this._y = Math.atan2(a, p)), (this._z = Math.atan2(c, l)))
						: ((this._y = Math.atan2(-h, r)), (this._z = 0));
				break;
			case 'ZXY':
				(this._x = Math.asin(pn(d, -1, 1))),
					Math.abs(d) < 0.9999999
						? ((this._y = Math.atan2(-h, p)), (this._z = Math.atan2(-o, l)))
						: ((this._y = 0), (this._z = Math.atan2(c, r)));
				break;
			case 'ZYX':
				(this._y = Math.asin(-pn(h, -1, 1))),
					Math.abs(h) < 0.9999999
						? ((this._x = Math.atan2(d, p)), (this._z = Math.atan2(c, r)))
						: ((this._x = 0), (this._z = Math.atan2(-o, l)));
				break;
			case 'YZX':
				(this._z = Math.asin(pn(c, -1, 1))),
					Math.abs(c) < 0.9999999
						? ((this._x = Math.atan2(-u, l)), (this._y = Math.atan2(-h, r)))
						: ((this._x = 0), (this._y = Math.atan2(a, p)));
				break;
			case 'XZY':
				(this._z = Math.asin(-pn(o, -1, 1))),
					Math.abs(o) < 0.9999999
						? ((this._x = Math.atan2(d, l)), (this._y = Math.atan2(a, r)))
						: ((this._x = Math.atan2(-u, p)), (this._y = 0));
				break;
			default:
				console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + t);
		}
		return (this._order = t), i === !0 && this._onChangeCallback(), this;
	}
	setFromQuaternion(e, t, i) {
		return Wg.makeRotationFromQuaternion(e), this.setFromRotationMatrix(Wg, t, i);
	}
	setFromVector3(e, t = this._order) {
		return this.set(e.x, e.y, e.z, t);
	}
	reorder(e) {
		return jg.setFromEuler(this), this.setFromQuaternion(jg, e);
	}
	equals(e) {
		return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
	}
	fromArray(e) {
		return (
			(this._x = e[0]),
			(this._y = e[1]),
			(this._z = e[2]),
			e[3] !== void 0 && (this._order = e[3]),
			this._onChangeCallback(),
			this
		);
	}
	toArray(e = [], t = 0) {
		return (e[t] = this._x), (e[t + 1] = this._y), (e[t + 2] = this._z), (e[t + 3] = this._order), e;
	}
	_onChange(e) {
		return (this._onChangeCallback = e), this;
	}
	_onChangeCallback() {}
	*[Symbol.iterator]() {
		yield this._x, yield this._y, yield this._z, yield this._order;
	}
}
br.DEFAULT_ORDER = 'XYZ';
class m_ {
	constructor() {
		this.mask = 1;
	}
	set(e) {
		this.mask = ((1 << e) | 0) >>> 0;
	}
	enable(e) {
		this.mask |= (1 << e) | 0;
	}
	enableAll() {
		this.mask = -1;
	}
	toggle(e) {
		this.mask ^= (1 << e) | 0;
	}
	disable(e) {
		this.mask &= ~((1 << e) | 0);
	}
	disableAll() {
		this.mask = 0;
	}
	test(e) {
		return (this.mask & e.mask) !== 0;
	}
	isEnabled(e) {
		return (this.mask & ((1 << e) | 0)) !== 0;
	}
}
let ET = 0;
const Xg = new w(),
	Eo = new Sn(),
	_s = new Qe(),
	fl = new w(),
	Ha = new w(),
	CT = new w(),
	yT = new Sn(),
	$g = new w(1, 0, 0),
	qg = new w(0, 1, 0),
	Yg = new w(0, 0, 1),
	bT = {type: 'added'},
	ST = {type: 'removed'};
class kt extends cs {
	constructor() {
		super(),
			(this.isObject3D = !0),
			Object.defineProperty(this, 'id', {value: ET++}),
			(this.uuid = Ma()),
			(this.name = ''),
			(this.type = 'Object3D'),
			(this.parent = null),
			(this.children = []),
			(this.up = kt.DEFAULT_UP.clone());
		const e = new w(),
			t = new br(),
			i = new Sn(),
			s = new w(1, 1, 1);
		function r() {
			i.setFromEuler(t, !1);
		}
		function o() {
			t.setFromQuaternion(i, void 0, !1);
		}
		t._onChange(r),
			i._onChange(o),
			Object.defineProperties(this, {
				position: {configurable: !0, enumerable: !0, value: e},
				rotation: {configurable: !0, enumerable: !0, value: t},
				quaternion: {configurable: !0, enumerable: !0, value: i},
				scale: {configurable: !0, enumerable: !0, value: s},
				modelViewMatrix: {value: new Qe()},
				normalMatrix: {value: new ut()},
			}),
			(this.matrix = new Qe()),
			(this.matrixWorld = new Qe()),
			(this.matrixAutoUpdate = kt.DEFAULT_MATRIX_AUTO_UPDATE),
			(this.matrixWorldAutoUpdate = kt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE),
			(this.matrixWorldNeedsUpdate = !1),
			(this.layers = new m_()),
			(this.visible = !0),
			(this.castShadow = !1),
			(this.receiveShadow = !1),
			(this.frustumCulled = !0),
			(this.renderOrder = 0),
			(this.animations = []),
			(this.userData = {});
	}
	onBeforeShadow() {}
	onAfterShadow() {}
	onBeforeRender() {}
	onAfterRender() {}
	applyMatrix4(e) {
		this.matrixAutoUpdate && this.updateMatrix(),
			this.matrix.premultiply(e),
			this.matrix.decompose(this.position, this.quaternion, this.scale);
	}
	applyQuaternion(e) {
		return this.quaternion.premultiply(e), this;
	}
	setRotationFromAxisAngle(e, t) {
		this.quaternion.setFromAxisAngle(e, t);
	}
	setRotationFromEuler(e) {
		this.quaternion.setFromEuler(e, !0);
	}
	setRotationFromMatrix(e) {
		this.quaternion.setFromRotationMatrix(e);
	}
	setRotationFromQuaternion(e) {
		this.quaternion.copy(e);
	}
	rotateOnAxis(e, t) {
		return Eo.setFromAxisAngle(e, t), this.quaternion.multiply(Eo), this;
	}
	rotateOnWorldAxis(e, t) {
		return Eo.setFromAxisAngle(e, t), this.quaternion.premultiply(Eo), this;
	}
	rotateX(e) {
		return this.rotateOnAxis($g, e);
	}
	rotateY(e) {
		return this.rotateOnAxis(qg, e);
	}
	rotateZ(e) {
		return this.rotateOnAxis(Yg, e);
	}
	translateOnAxis(e, t) {
		return Xg.copy(e).applyQuaternion(this.quaternion), this.position.add(Xg.multiplyScalar(t)), this;
	}
	translateX(e) {
		return this.translateOnAxis($g, e);
	}
	translateY(e) {
		return this.translateOnAxis(qg, e);
	}
	translateZ(e) {
		return this.translateOnAxis(Yg, e);
	}
	localToWorld(e) {
		return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
	}
	worldToLocal(e) {
		return this.updateWorldMatrix(!0, !1), e.applyMatrix4(_s.copy(this.matrixWorld).invert());
	}
	lookAt(e, t, i) {
		e.isVector3 ? fl.copy(e) : fl.set(e, t, i);
		const s = this.parent;
		this.updateWorldMatrix(!0, !1),
			Ha.setFromMatrixPosition(this.matrixWorld),
			this.isCamera || this.isLight ? _s.lookAt(Ha, fl, this.up) : _s.lookAt(fl, Ha, this.up),
			this.quaternion.setFromRotationMatrix(_s),
			s &&
				(_s.extractRotation(s.matrixWorld),
				Eo.setFromRotationMatrix(_s),
				this.quaternion.premultiply(Eo.invert()));
	}
	add(e) {
		if (arguments.length > 1) {
			for (let t = 0; t < arguments.length; t++) this.add(arguments[t]);
			return this;
		}
		return e === this
			? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this)
			: (e && e.isObject3D
					? (e.parent !== null && e.parent.remove(e),
					  (e.parent = this),
					  this.children.push(e),
					  e.dispatchEvent(bT))
					: console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', e),
			  this);
	}
	remove(e) {
		if (arguments.length > 1) {
			for (let i = 0; i < arguments.length; i++) this.remove(arguments[i]);
			return this;
		}
		const t = this.children.indexOf(e);
		return t !== -1 && ((e.parent = null), this.children.splice(t, 1), e.dispatchEvent(ST)), this;
	}
	removeFromParent() {
		const e = this.parent;
		return e !== null && e.remove(this), this;
	}
	clear() {
		return this.remove(...this.children);
	}
	attach(e) {
		return (
			this.updateWorldMatrix(!0, !1),
			_s.copy(this.matrixWorld).invert(),
			e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), _s.multiply(e.parent.matrixWorld)),
			e.applyMatrix4(_s),
			this.add(e),
			e.updateWorldMatrix(!1, !0),
			this
		);
	}
	getObjectById(e) {
		return this.getObjectByProperty('id', e);
	}
	getObjectByName(e) {
		return this.getObjectByProperty('name', e);
	}
	getObjectByProperty(e, t) {
		if (this[e] === t) return this;
		for (let i = 0, s = this.children.length; i < s; i++) {
			const o = this.children[i].getObjectByProperty(e, t);
			if (o !== void 0) return o;
		}
	}
	getObjectsByProperty(e, t, i = []) {
		this[e] === t && i.push(this);
		const s = this.children;
		for (let r = 0, o = s.length; r < o; r++) s[r].getObjectsByProperty(e, t, i);
		return i;
	}
	getWorldPosition(e) {
		return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
	}
	getWorldQuaternion(e) {
		return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Ha, e, CT), e;
	}
	getWorldScale(e) {
		return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Ha, yT, e), e;
	}
	getWorldDirection(e) {
		this.updateWorldMatrix(!0, !1);
		const t = this.matrixWorld.elements;
		return e.set(t[8], t[9], t[10]).normalize();
	}
	raycast() {}
	traverse(e) {
		e(this);
		const t = this.children;
		for (let i = 0, s = t.length; i < s; i++) t[i].traverse(e);
	}
	traverseVisible(e) {
		if (this.visible === !1) return;
		e(this);
		const t = this.children;
		for (let i = 0, s = t.length; i < s; i++) t[i].traverseVisible(e);
	}
	traverseAncestors(e) {
		const t = this.parent;
		t !== null && (e(t), t.traverseAncestors(e));
	}
	updateMatrix() {
		this.matrix.compose(this.position, this.quaternion, this.scale), (this.matrixWorldNeedsUpdate = !0);
	}
	updateMatrixWorld(e) {
		this.matrixAutoUpdate && this.updateMatrix(),
			(this.matrixWorldNeedsUpdate || e) &&
				(this.parent === null
					? this.matrixWorld.copy(this.matrix)
					: this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
				(this.matrixWorldNeedsUpdate = !1),
				(e = !0));
		const t = this.children;
		for (let i = 0, s = t.length; i < s; i++) {
			const r = t[i];
			(r.matrixWorldAutoUpdate === !0 || e === !0) && r.updateMatrixWorld(e);
		}
	}
	updateWorldMatrix(e, t) {
		const i = this.parent;
		if (
			(e === !0 && i !== null && i.matrixWorldAutoUpdate === !0 && i.updateWorldMatrix(!0, !1),
			this.matrixAutoUpdate && this.updateMatrix(),
			this.parent === null
				? this.matrixWorld.copy(this.matrix)
				: this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
			t === !0)
		) {
			const s = this.children;
			for (let r = 0, o = s.length; r < o; r++) {
				const a = s[r];
				a.matrixWorldAutoUpdate === !0 && a.updateWorldMatrix(!1, !0);
			}
		}
	}
	toJSON(e) {
		const t = e === void 0 || typeof e == 'string',
			i = {};
		t &&
			((e = {
				geometries: {},
				materials: {},
				textures: {},
				images: {},
				shapes: {},
				skeletons: {},
				animations: {},
				nodes: {},
			}),
			(i.metadata = {version: 4.6, type: 'Object', generator: 'Object3D.toJSON'}));
		const s = {};
		(s.uuid = this.uuid),
			(s.type = this.type),
			this.name !== '' && (s.name = this.name),
			this.castShadow === !0 && (s.castShadow = !0),
			this.receiveShadow === !0 && (s.receiveShadow = !0),
			this.visible === !1 && (s.visible = !1),
			this.frustumCulled === !1 && (s.frustumCulled = !1),
			this.renderOrder !== 0 && (s.renderOrder = this.renderOrder),
			Object.keys(this.userData).length > 0 && (s.userData = this.userData),
			(s.layers = this.layers.mask),
			(s.matrix = this.matrix.toArray()),
			(s.up = this.up.toArray()),
			this.matrixAutoUpdate === !1 && (s.matrixAutoUpdate = !1),
			this.isInstancedMesh &&
				((s.type = 'InstancedMesh'),
				(s.count = this.count),
				(s.instanceMatrix = this.instanceMatrix.toJSON()),
				this.instanceColor !== null && (s.instanceColor = this.instanceColor.toJSON())),
			this.isBatchedMesh &&
				((s.type = 'BatchedMesh'),
				(s.perObjectFrustumCulled = this.perObjectFrustumCulled),
				(s.sortObjects = this.sortObjects),
				(s.drawRanges = this._drawRanges),
				(s.reservedRanges = this._reservedRanges),
				(s.visibility = this._visibility),
				(s.active = this._active),
				(s.bounds = this._bounds.map((a) => ({
					boxInitialized: a.boxInitialized,
					boxMin: a.box.min.toArray(),
					boxMax: a.box.max.toArray(),
					sphereInitialized: a.sphereInitialized,
					sphereRadius: a.sphere.radius,
					sphereCenter: a.sphere.center.toArray(),
				}))),
				(s.maxGeometryCount = this._maxGeometryCount),
				(s.maxVertexCount = this._maxVertexCount),
				(s.maxIndexCount = this._maxIndexCount),
				(s.geometryInitialized = this._geometryInitialized),
				(s.geometryCount = this._geometryCount),
				(s.matricesTexture = this._matricesTexture.toJSON(e)),
				this.boundingSphere !== null &&
					(s.boundingSphere = {center: s.boundingSphere.center.toArray(), radius: s.boundingSphere.radius}),
				this.boundingBox !== null &&
					(s.boundingBox = {min: s.boundingBox.min.toArray(), max: s.boundingBox.max.toArray()}));
		function r(a, c) {
			return a[c.uuid] === void 0 && (a[c.uuid] = c.toJSON(e)), c.uuid;
		}
		if (this.isScene)
			this.background &&
				(this.background.isColor
					? (s.background = this.background.toJSON())
					: this.background.isTexture && (s.background = this.background.toJSON(e).uuid)),
				this.environment &&
					this.environment.isTexture &&
					this.environment.isRenderTargetTexture !== !0 &&
					(s.environment = this.environment.toJSON(e).uuid);
		else if (this.isMesh || this.isLine || this.isPoints) {
			s.geometry = r(e.geometries, this.geometry);
			const a = this.geometry.parameters;
			if (a !== void 0 && a.shapes !== void 0) {
				const c = a.shapes;
				if (Array.isArray(c))
					for (let l = 0, u = c.length; l < u; l++) {
						const h = c[l];
						r(e.shapes, h);
					}
				else r(e.shapes, c);
			}
		}
		if (
			(this.isSkinnedMesh &&
				((s.bindMode = this.bindMode),
				(s.bindMatrix = this.bindMatrix.toArray()),
				this.skeleton !== void 0 && (r(e.skeletons, this.skeleton), (s.skeleton = this.skeleton.uuid))),
			this.material !== void 0)
		)
			if (Array.isArray(this.material)) {
				const a = [];
				for (let c = 0, l = this.material.length; c < l; c++) a.push(r(e.materials, this.material[c]));
				s.material = a;
			} else s.material = r(e.materials, this.material);
		if (this.children.length > 0) {
			s.children = [];
			for (let a = 0; a < this.children.length; a++) s.children.push(this.children[a].toJSON(e).object);
		}
		if (this.animations.length > 0) {
			s.animations = [];
			for (let a = 0; a < this.animations.length; a++) {
				const c = this.animations[a];
				s.animations.push(r(e.animations, c));
			}
		}
		if (t) {
			const a = o(e.geometries),
				c = o(e.materials),
				l = o(e.textures),
				u = o(e.images),
				h = o(e.shapes),
				d = o(e.skeletons),
				p = o(e.animations),
				m = o(e.nodes);
			a.length > 0 && (i.geometries = a),
				c.length > 0 && (i.materials = c),
				l.length > 0 && (i.textures = l),
				u.length > 0 && (i.images = u),
				h.length > 0 && (i.shapes = h),
				d.length > 0 && (i.skeletons = d),
				p.length > 0 && (i.animations = p),
				m.length > 0 && (i.nodes = m);
		}
		return (i.object = s), i;
		function o(a) {
			const c = [];
			for (const l in a) {
				const u = a[l];
				delete u.metadata, c.push(u);
			}
			return c;
		}
	}
	clone(e) {
		return new this.constructor().copy(this, e);
	}
	copy(e, t = !0) {
		if (
			((this.name = e.name),
			this.up.copy(e.up),
			this.position.copy(e.position),
			(this.rotation.order = e.rotation.order),
			this.quaternion.copy(e.quaternion),
			this.scale.copy(e.scale),
			this.matrix.copy(e.matrix),
			this.matrixWorld.copy(e.matrixWorld),
			(this.matrixAutoUpdate = e.matrixAutoUpdate),
			(this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate),
			(this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate),
			(this.layers.mask = e.layers.mask),
			(this.visible = e.visible),
			(this.castShadow = e.castShadow),
			(this.receiveShadow = e.receiveShadow),
			(this.frustumCulled = e.frustumCulled),
			(this.renderOrder = e.renderOrder),
			(this.animations = e.animations.slice()),
			(this.userData = JSON.parse(JSON.stringify(e.userData))),
			t === !0)
		)
			for (let i = 0; i < e.children.length; i++) {
				const s = e.children[i];
				this.add(s.clone());
			}
		return this;
	}
}
kt.DEFAULT_UP = new w(0, 1, 0);
kt.DEFAULT_MATRIX_AUTO_UPDATE = !0;
kt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const Ii = new w(),
	ms = new w(),
	Ed = new w(),
	gs = new w(),
	Co = new w(),
	yo = new w(),
	Kg = new w(),
	Cd = new w(),
	yd = new w(),
	bd = new w();
let _l = !1;
class Tn {
	constructor(e = new w(), t = new w(), i = new w()) {
		(this.a = e), (this.b = t), (this.c = i);
	}
	static getNormal(e, t, i, s) {
		s.subVectors(i, t), Ii.subVectors(e, t), s.cross(Ii);
		const r = s.lengthSq();
		return r > 0 ? s.multiplyScalar(1 / Math.sqrt(r)) : s.set(0, 0, 0);
	}
	static getBarycoord(e, t, i, s, r) {
		Ii.subVectors(s, t), ms.subVectors(i, t), Ed.subVectors(e, t);
		const o = Ii.dot(Ii),
			a = Ii.dot(ms),
			c = Ii.dot(Ed),
			l = ms.dot(ms),
			u = ms.dot(Ed),
			h = o * l - a * a;
		if (h === 0) return r.set(-2, -1, -1);
		const d = 1 / h,
			p = (l * c - a * u) * d,
			m = (o * u - a * c) * d;
		return r.set(1 - p - m, m, p);
	}
	static containsPoint(e, t, i, s) {
		return this.getBarycoord(e, t, i, s, gs), gs.x >= 0 && gs.y >= 0 && gs.x + gs.y <= 1;
	}
	static getUV(e, t, i, s, r, o, a, c) {
		return (
			_l === !1 &&
				(console.warn('THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().'),
				(_l = !0)),
			this.getInterpolation(e, t, i, s, r, o, a, c)
		);
	}
	static getInterpolation(e, t, i, s, r, o, a, c) {
		return (
			this.getBarycoord(e, t, i, s, gs),
			c.setScalar(0),
			c.addScaledVector(r, gs.x),
			c.addScaledVector(o, gs.y),
			c.addScaledVector(a, gs.z),
			c
		);
	}
	static isFrontFacing(e, t, i, s) {
		return Ii.subVectors(i, t), ms.subVectors(e, t), Ii.cross(ms).dot(s) < 0;
	}
	set(e, t, i) {
		return this.a.copy(e), this.b.copy(t), this.c.copy(i), this;
	}
	setFromPointsAndIndices(e, t, i, s) {
		return this.a.copy(e[t]), this.b.copy(e[i]), this.c.copy(e[s]), this;
	}
	setFromAttributeAndIndices(e, t, i, s) {
		return (
			this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, i), this.c.fromBufferAttribute(e, s), this
		);
	}
	clone() {
		return new this.constructor().copy(this);
	}
	copy(e) {
		return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
	}
	getArea() {
		return Ii.subVectors(this.c, this.b), ms.subVectors(this.a, this.b), Ii.cross(ms).length() * 0.5;
	}
	getMidpoint(e) {
		return e
			.addVectors(this.a, this.b)
			.add(this.c)
			.multiplyScalar(1 / 3);
	}
	getNormal(e) {
		return Tn.getNormal(this.a, this.b, this.c, e);
	}
	getPlane(e) {
		return e.setFromCoplanarPoints(this.a, this.b, this.c);
	}
	getBarycoord(e, t) {
		return Tn.getBarycoord(e, this.a, this.b, this.c, t);
	}
	getUV(e, t, i, s, r) {
		return (
			_l === !1 &&
				(console.warn('THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().'),
				(_l = !0)),
			Tn.getInterpolation(e, this.a, this.b, this.c, t, i, s, r)
		);
	}
	getInterpolation(e, t, i, s, r) {
		return Tn.getInterpolation(e, this.a, this.b, this.c, t, i, s, r);
	}
	containsPoint(e) {
		return Tn.containsPoint(e, this.a, this.b, this.c);
	}
	isFrontFacing(e) {
		return Tn.isFrontFacing(this.a, this.b, this.c, e);
	}
	intersectsBox(e) {
		return e.intersectsTriangle(this);
	}
	closestPointToPoint(e, t) {
		const i = this.a,
			s = this.b,
			r = this.c;
		let o, a;
		Co.subVectors(s, i), yo.subVectors(r, i), Cd.subVectors(e, i);
		const c = Co.dot(Cd),
			l = yo.dot(Cd);
		if (c <= 0 && l <= 0) return t.copy(i);
		yd.subVectors(e, s);
		const u = Co.dot(yd),
			h = yo.dot(yd);
		if (u >= 0 && h <= u) return t.copy(s);
		const d = c * h - u * l;
		if (d <= 0 && c >= 0 && u <= 0) return (o = c / (c - u)), t.copy(i).addScaledVector(Co, o);
		bd.subVectors(e, r);
		const p = Co.dot(bd),
			m = yo.dot(bd);
		if (m >= 0 && p <= m) return t.copy(r);
		const g = p * l - c * m;
		if (g <= 0 && l >= 0 && m <= 0) return (a = l / (l - m)), t.copy(i).addScaledVector(yo, a);
		const _ = u * m - p * h;
		if (_ <= 0 && h - u >= 0 && p - m >= 0)
			return Kg.subVectors(r, s), (a = (h - u) / (h - u + (p - m))), t.copy(s).addScaledVector(Kg, a);
		const f = 1 / (_ + g + d);
		return (o = g * f), (a = d * f), t.copy(i).addScaledVector(Co, o).addScaledVector(yo, a);
	}
	equals(e) {
		return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
	}
}
const Db = {
		aliceblue: 15792383,
		antiquewhite: 16444375,
		aqua: 65535,
		aquamarine: 8388564,
		azure: 15794175,
		beige: 16119260,
		bisque: 16770244,
		black: 0,
		blanchedalmond: 16772045,
		blue: 255,
		blueviolet: 9055202,
		brown: 10824234,
		burlywood: 14596231,
		cadetblue: 6266528,
		chartreuse: 8388352,
		chocolate: 13789470,
		coral: 16744272,
		cornflowerblue: 6591981,
		cornsilk: 16775388,
		crimson: 14423100,
		cyan: 65535,
		darkblue: 139,
		darkcyan: 35723,
		darkgoldenrod: 12092939,
		darkgray: 11119017,
		darkgreen: 25600,
		darkgrey: 11119017,
		darkkhaki: 12433259,
		darkmagenta: 9109643,
		darkolivegreen: 5597999,
		darkorange: 16747520,
		darkorchid: 10040012,
		darkred: 9109504,
		darksalmon: 15308410,
		darkseagreen: 9419919,
		darkslateblue: 4734347,
		darkslategray: 3100495,
		darkslategrey: 3100495,
		darkturquoise: 52945,
		darkviolet: 9699539,
		deeppink: 16716947,
		deepskyblue: 49151,
		dimgray: 6908265,
		dimgrey: 6908265,
		dodgerblue: 2003199,
		firebrick: 11674146,
		floralwhite: 16775920,
		forestgreen: 2263842,
		fuchsia: 16711935,
		gainsboro: 14474460,
		ghostwhite: 16316671,
		gold: 16766720,
		goldenrod: 14329120,
		gray: 8421504,
		green: 32768,
		greenyellow: 11403055,
		grey: 8421504,
		honeydew: 15794160,
		hotpink: 16738740,
		indianred: 13458524,
		indigo: 4915330,
		ivory: 16777200,
		khaki: 15787660,
		lavender: 15132410,
		lavenderblush: 16773365,
		lawngreen: 8190976,
		lemonchiffon: 16775885,
		lightblue: 11393254,
		lightcoral: 15761536,
		lightcyan: 14745599,
		lightgoldenrodyellow: 16448210,
		lightgray: 13882323,
		lightgreen: 9498256,
		lightgrey: 13882323,
		lightpink: 16758465,
		lightsalmon: 16752762,
		lightseagreen: 2142890,
		lightskyblue: 8900346,
		lightslategray: 7833753,
		lightslategrey: 7833753,
		lightsteelblue: 11584734,
		lightyellow: 16777184,
		lime: 65280,
		limegreen: 3329330,
		linen: 16445670,
		magenta: 16711935,
		maroon: 8388608,
		mediumaquamarine: 6737322,
		mediumblue: 205,
		mediumorchid: 12211667,
		mediumpurple: 9662683,
		mediumseagreen: 3978097,
		mediumslateblue: 8087790,
		mediumspringgreen: 64154,
		mediumturquoise: 4772300,
		mediumvioletred: 13047173,
		midnightblue: 1644912,
		mintcream: 16121850,
		mistyrose: 16770273,
		moccasin: 16770229,
		navajowhite: 16768685,
		navy: 128,
		oldlace: 16643558,
		olive: 8421376,
		olivedrab: 7048739,
		orange: 16753920,
		orangered: 16729344,
		orchid: 14315734,
		palegoldenrod: 15657130,
		palegreen: 10025880,
		paleturquoise: 11529966,
		palevioletred: 14381203,
		papayawhip: 16773077,
		peachpuff: 16767673,
		peru: 13468991,
		pink: 16761035,
		plum: 14524637,
		powderblue: 11591910,
		purple: 8388736,
		rebeccapurple: 6697881,
		red: 16711680,
		rosybrown: 12357519,
		royalblue: 4286945,
		saddlebrown: 9127187,
		salmon: 16416882,
		sandybrown: 16032864,
		seagreen: 3050327,
		seashell: 16774638,
		sienna: 10506797,
		silver: 12632256,
		skyblue: 8900331,
		slateblue: 6970061,
		slategray: 7372944,
		slategrey: 7372944,
		snow: 16775930,
		springgreen: 65407,
		steelblue: 4620980,
		tan: 13808780,
		teal: 32896,
		thistle: 14204888,
		tomato: 16737095,
		turquoise: 4251856,
		violet: 15631086,
		wheat: 16113331,
		white: 16777215,
		whitesmoke: 16119285,
		yellow: 16776960,
		yellowgreen: 10145074,
	},
	qs = {h: 0, s: 0, l: 0},
	ml = {h: 0, s: 0, l: 0};
function Sd(n, e, t) {
	return (
		t < 0 && (t += 1),
		t > 1 && (t -= 1),
		t < 1 / 6 ? n + (e - n) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? n + (e - n) * 6 * (2 / 3 - t) : n
	);
}
class Ee {
	constructor(e, t, i) {
		return (this.isColor = !0), (this.r = 1), (this.g = 1), (this.b = 1), this.set(e, t, i);
	}
	set(e, t, i) {
		if (t === void 0 && i === void 0) {
			const s = e;
			s && s.isColor
				? this.copy(s)
				: typeof s == 'number'
				? this.setHex(s)
				: typeof s == 'string' && this.setStyle(s);
		} else this.setRGB(e, t, i);
		return this;
	}
	setScalar(e) {
		return (this.r = e), (this.g = e), (this.b = e), this;
	}
	setHex(e, t = en) {
		return (
			(e = Math.floor(e)),
			(this.r = ((e >> 16) & 255) / 255),
			(this.g = ((e >> 8) & 255) / 255),
			(this.b = (e & 255) / 255),
			Mt.toWorkingColorSpace(this, t),
			this
		);
	}
	setRGB(e, t, i, s = Mt.workingColorSpace) {
		return (this.r = e), (this.g = t), (this.b = i), Mt.toWorkingColorSpace(this, s), this;
	}
	setHSL(e, t, i, s = Mt.workingColorSpace) {
		if (((e = __(e, 1)), (t = pn(t, 0, 1)), (i = pn(i, 0, 1)), t === 0)) this.r = this.g = this.b = i;
		else {
			const r = i <= 0.5 ? i * (1 + t) : i + t - i * t,
				o = 2 * i - r;
			(this.r = Sd(o, r, e + 1 / 3)), (this.g = Sd(o, r, e)), (this.b = Sd(o, r, e - 1 / 3));
		}
		return Mt.toWorkingColorSpace(this, s), this;
	}
	setStyle(e, t = en) {
		function i(r) {
			r !== void 0 &&
				parseFloat(r) < 1 &&
				console.warn('THREE.Color: Alpha component of ' + e + ' will be ignored.');
		}
		let s;
		if ((s = /^(\w+)\(([^\)]*)\)/.exec(e))) {
			let r;
			const o = s[1],
				a = s[2];
			switch (o) {
				case 'rgb':
				case 'rgba':
					if ((r = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)))
						return (
							i(r[4]),
							this.setRGB(
								Math.min(255, parseInt(r[1], 10)) / 255,
								Math.min(255, parseInt(r[2], 10)) / 255,
								Math.min(255, parseInt(r[3], 10)) / 255,
								t
							)
						);
					if ((r = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)))
						return (
							i(r[4]),
							this.setRGB(
								Math.min(100, parseInt(r[1], 10)) / 100,
								Math.min(100, parseInt(r[2], 10)) / 100,
								Math.min(100, parseInt(r[3], 10)) / 100,
								t
							)
						);
					break;
				case 'hsl':
				case 'hsla':
					if (
						(r = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(
							a
						))
					)
						return (
							i(r[4]),
							this.setHSL(parseFloat(r[1]) / 360, parseFloat(r[2]) / 100, parseFloat(r[3]) / 100, t)
						);
					break;
				default:
					console.warn('THREE.Color: Unknown color model ' + e);
			}
		} else if ((s = /^\#([A-Fa-f\d]+)$/.exec(e))) {
			const r = s[1],
				o = r.length;
			if (o === 3)
				return this.setRGB(
					parseInt(r.charAt(0), 16) / 15,
					parseInt(r.charAt(1), 16) / 15,
					parseInt(r.charAt(2), 16) / 15,
					t
				);
			if (o === 6) return this.setHex(parseInt(r, 16), t);
			console.warn('THREE.Color: Invalid hex color ' + e);
		} else if (e && e.length > 0) return this.setColorName(e, t);
		return this;
	}
	setColorName(e, t = en) {
		const i = Db[e.toLowerCase()];
		return i !== void 0 ? this.setHex(i, t) : console.warn('THREE.Color: Unknown color ' + e), this;
	}
	clone() {
		return new this.constructor(this.r, this.g, this.b);
	}
	copy(e) {
		return (this.r = e.r), (this.g = e.g), (this.b = e.b), this;
	}
	copySRGBToLinear(e) {
		return (this.r = da(e.r)), (this.g = da(e.g)), (this.b = da(e.b)), this;
	}
	copyLinearToSRGB(e) {
		return (this.r = hd(e.r)), (this.g = hd(e.g)), (this.b = hd(e.b)), this;
	}
	convertSRGBToLinear() {
		return this.copySRGBToLinear(this), this;
	}
	convertLinearToSRGB() {
		return this.copyLinearToSRGB(this), this;
	}
	getHex(e = en) {
		return (
			Mt.fromWorkingColorSpace(Fn.copy(this), e),
			Math.round(pn(Fn.r * 255, 0, 255)) * 65536 +
				Math.round(pn(Fn.g * 255, 0, 255)) * 256 +
				Math.round(pn(Fn.b * 255, 0, 255))
		);
	}
	getHexString(e = en) {
		return ('000000' + this.getHex(e).toString(16)).slice(-6);
	}
	getHSL(e, t = Mt.workingColorSpace) {
		Mt.fromWorkingColorSpace(Fn.copy(this), t);
		const i = Fn.r,
			s = Fn.g,
			r = Fn.b,
			o = Math.max(i, s, r),
			a = Math.min(i, s, r);
		let c, l;
		const u = (a + o) / 2;
		if (a === o) (c = 0), (l = 0);
		else {
			const h = o - a;
			switch (((l = u <= 0.5 ? h / (o + a) : h / (2 - o - a)), o)) {
				case i:
					c = (s - r) / h + (s < r ? 6 : 0);
					break;
				case s:
					c = (r - i) / h + 2;
					break;
				case r:
					c = (i - s) / h + 4;
					break;
			}
			c /= 6;
		}
		return (e.h = c), (e.s = l), (e.l = u), e;
	}
	getRGB(e, t = Mt.workingColorSpace) {
		return Mt.fromWorkingColorSpace(Fn.copy(this), t), (e.r = Fn.r), (e.g = Fn.g), (e.b = Fn.b), e;
	}
	getStyle(e = en) {
		Mt.fromWorkingColorSpace(Fn.copy(this), e);
		const t = Fn.r,
			i = Fn.g,
			s = Fn.b;
		return e !== en
			? `color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${s.toFixed(3)})`
			: `rgb(${Math.round(t * 255)},${Math.round(i * 255)},${Math.round(s * 255)})`;
	}
	offsetHSL(e, t, i) {
		return this.getHSL(qs), this.setHSL(qs.h + e, qs.s + t, qs.l + i);
	}
	add(e) {
		return (this.r += e.r), (this.g += e.g), (this.b += e.b), this;
	}
	addColors(e, t) {
		return (this.r = e.r + t.r), (this.g = e.g + t.g), (this.b = e.b + t.b), this;
	}
	addScalar(e) {
		return (this.r += e), (this.g += e), (this.b += e), this;
	}
	sub(e) {
		return (
			(this.r = Math.max(0, this.r - e.r)),
			(this.g = Math.max(0, this.g - e.g)),
			(this.b = Math.max(0, this.b - e.b)),
			this
		);
	}
	multiply(e) {
		return (this.r *= e.r), (this.g *= e.g), (this.b *= e.b), this;
	}
	multiplyScalar(e) {
		return (this.r *= e), (this.g *= e), (this.b *= e), this;
	}
	lerp(e, t) {
		return (this.r += (e.r - this.r) * t), (this.g += (e.g - this.g) * t), (this.b += (e.b - this.b) * t), this;
	}
	lerpColors(e, t, i) {
		return (
			(this.r = e.r + (t.r - e.r) * i), (this.g = e.g + (t.g - e.g) * i), (this.b = e.b + (t.b - e.b) * i), this
		);
	}
	lerpHSL(e, t) {
		this.getHSL(qs), e.getHSL(ml);
		const i = gc(qs.h, ml.h, t),
			s = gc(qs.s, ml.s, t),
			r = gc(qs.l, ml.l, t);
		return this.setHSL(i, s, r), this;
	}
	setFromVector3(e) {
		return (this.r = e.x), (this.g = e.y), (this.b = e.z), this;
	}
	applyMatrix3(e) {
		const t = this.r,
			i = this.g,
			s = this.b,
			r = e.elements;
		return (
			(this.r = r[0] * t + r[3] * i + r[6] * s),
			(this.g = r[1] * t + r[4] * i + r[7] * s),
			(this.b = r[2] * t + r[5] * i + r[8] * s),
			this
		);
	}
	equals(e) {
		return e.r === this.r && e.g === this.g && e.b === this.b;
	}
	fromArray(e, t = 0) {
		return (this.r = e[t]), (this.g = e[t + 1]), (this.b = e[t + 2]), this;
	}
	toArray(e = [], t = 0) {
		return (e[t] = this.r), (e[t + 1] = this.g), (e[t + 2] = this.b), e;
	}
	fromBufferAttribute(e, t) {
		return (this.r = e.getX(t)), (this.g = e.getY(t)), (this.b = e.getZ(t)), this;
	}
	toJSON() {
		return this.getHex();
	}
	*[Symbol.iterator]() {
		yield this.r, yield this.g, yield this.b;
	}
}
const Fn = new Ee();
Ee.NAMES = Db;
let AT = 0;
class An extends cs {
	constructor() {
		super(),
			(this.isMaterial = !0),
			Object.defineProperty(this, 'id', {value: AT++}),
			(this.uuid = Ma()),
			(this.name = ''),
			(this.type = 'Material'),
			(this.blending = hr),
			(this.side = Ln),
			(this.vertexColors = !1),
			(this.opacity = 1),
			(this.transparent = !1),
			(this.alphaHash = !1),
			(this.blendSrc = qp),
			(this.blendDst = Yp),
			(this.blendEquation = Vr),
			(this.blendSrcAlpha = null),
			(this.blendDstAlpha = null),
			(this.blendEquationAlpha = null),
			(this.blendColor = new Ee(0, 0, 0)),
			(this.blendAlpha = 0),
			(this.depthFunc = Gu),
			(this.depthTest = !0),
			(this.depthWrite = !0),
			(this.stencilWriteMask = 255),
			(this.stencilFunc = Ug),
			(this.stencilRef = 0),
			(this.stencilFuncMask = 255),
			(this.stencilFail = po),
			(this.stencilZFail = po),
			(this.stencilZPass = po),
			(this.stencilWrite = !1),
			(this.clippingPlanes = null),
			(this.clipIntersection = !1),
			(this.clipShadows = !1),
			(this.shadowSide = null),
			(this.colorWrite = !0),
			(this.precision = null),
			(this.polygonOffset = !1),
			(this.polygonOffsetFactor = 0),
			(this.polygonOffsetUnits = 0),
			(this.dithering = !1),
			(this.alphaToCoverage = !1),
			(this.premultipliedAlpha = !1),
			(this.forceSinglePass = !1),
			(this.visible = !0),
			(this.toneMapped = !0),
			(this.userData = {}),
			(this.version = 0),
			(this._alphaTest = 0);
	}
	get alphaTest() {
		return this._alphaTest;
	}
	set alphaTest(e) {
		this._alphaTest > 0 != e > 0 && this.version++, (this._alphaTest = e);
	}
	onBuild() {}
	onBeforeRender() {}
	onBeforeCompile() {}
	customProgramCacheKey() {
		return this.onBeforeCompile.toString();
	}
	setValues(e) {
		if (e !== void 0)
			for (const t in e) {
				const i = e[t];
				if (i === void 0) {
					console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
					continue;
				}
				const s = this[t];
				if (s === void 0) {
					console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
					continue;
				}
				s && s.isColor ? s.set(i) : s && s.isVector3 && i && i.isVector3 ? s.copy(i) : (this[t] = i);
			}
	}
	toJSON(e) {
		const t = e === void 0 || typeof e == 'string';
		t && (e = {textures: {}, images: {}});
		const i = {metadata: {version: 4.6, type: 'Material', generator: 'Material.toJSON'}};
		(i.uuid = this.uuid),
			(i.type = this.type),
			this.name !== '' && (i.name = this.name),
			this.color && this.color.isColor && (i.color = this.color.getHex()),
			this.roughness !== void 0 && (i.roughness = this.roughness),
			this.metalness !== void 0 && (i.metalness = this.metalness),
			this.sheen !== void 0 && (i.sheen = this.sheen),
			this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()),
			this.sheenRoughness !== void 0 && (i.sheenRoughness = this.sheenRoughness),
			this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()),
			this.emissiveIntensity && this.emissiveIntensity !== 1 && (i.emissiveIntensity = this.emissiveIntensity),
			this.specular && this.specular.isColor && (i.specular = this.specular.getHex()),
			this.specularIntensity !== void 0 && (i.specularIntensity = this.specularIntensity),
			this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()),
			this.shininess !== void 0 && (i.shininess = this.shininess),
			this.clearcoat !== void 0 && (i.clearcoat = this.clearcoat),
			this.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = this.clearcoatRoughness),
			this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(e).uuid),
			this.clearcoatRoughnessMap &&
				this.clearcoatRoughnessMap.isTexture &&
				(i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid),
			this.clearcoatNormalMap &&
				this.clearcoatNormalMap.isTexture &&
				((i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid),
				(i.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
			this.iridescence !== void 0 && (i.iridescence = this.iridescence),
			this.iridescenceIOR !== void 0 && (i.iridescenceIOR = this.iridescenceIOR),
			this.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = this.iridescenceThicknessRange),
			this.iridescenceMap &&
				this.iridescenceMap.isTexture &&
				(i.iridescenceMap = this.iridescenceMap.toJSON(e).uuid),
			this.iridescenceThicknessMap &&
				this.iridescenceThicknessMap.isTexture &&
				(i.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid),
			this.anisotropy !== void 0 && (i.anisotropy = this.anisotropy),
			this.anisotropyRotation !== void 0 && (i.anisotropyRotation = this.anisotropyRotation),
			this.anisotropyMap && this.anisotropyMap.isTexture && (i.anisotropyMap = this.anisotropyMap.toJSON(e).uuid),
			this.map && this.map.isTexture && (i.map = this.map.toJSON(e).uuid),
			this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(e).uuid),
			this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(e).uuid),
			this.lightMap &&
				this.lightMap.isTexture &&
				((i.lightMap = this.lightMap.toJSON(e).uuid), (i.lightMapIntensity = this.lightMapIntensity)),
			this.aoMap &&
				this.aoMap.isTexture &&
				((i.aoMap = this.aoMap.toJSON(e).uuid), (i.aoMapIntensity = this.aoMapIntensity)),
			this.bumpMap &&
				this.bumpMap.isTexture &&
				((i.bumpMap = this.bumpMap.toJSON(e).uuid), (i.bumpScale = this.bumpScale)),
			this.normalMap &&
				this.normalMap.isTexture &&
				((i.normalMap = this.normalMap.toJSON(e).uuid),
				(i.normalMapType = this.normalMapType),
				(i.normalScale = this.normalScale.toArray())),
			this.displacementMap &&
				this.displacementMap.isTexture &&
				((i.displacementMap = this.displacementMap.toJSON(e).uuid),
				(i.displacementScale = this.displacementScale),
				(i.displacementBias = this.displacementBias)),
			this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(e).uuid),
			this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(e).uuid),
			this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(e).uuid),
			this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(e).uuid),
			this.specularIntensityMap &&
				this.specularIntensityMap.isTexture &&
				(i.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid),
			this.specularColorMap &&
				this.specularColorMap.isTexture &&
				(i.specularColorMap = this.specularColorMap.toJSON(e).uuid),
			this.envMap &&
				this.envMap.isTexture &&
				((i.envMap = this.envMap.toJSON(e).uuid), this.combine !== void 0 && (i.combine = this.combine)),
			this.envMapIntensity !== void 0 && (i.envMapIntensity = this.envMapIntensity),
			this.reflectivity !== void 0 && (i.reflectivity = this.reflectivity),
			this.refractionRatio !== void 0 && (i.refractionRatio = this.refractionRatio),
			this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(e).uuid),
			this.transmission !== void 0 && (i.transmission = this.transmission),
			this.transmissionMap &&
				this.transmissionMap.isTexture &&
				(i.transmissionMap = this.transmissionMap.toJSON(e).uuid),
			this.thickness !== void 0 && (i.thickness = this.thickness),
			this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(e).uuid),
			this.attenuationDistance !== void 0 &&
				this.attenuationDistance !== 1 / 0 &&
				(i.attenuationDistance = this.attenuationDistance),
			this.attenuationColor !== void 0 && (i.attenuationColor = this.attenuationColor.getHex()),
			this.size !== void 0 && (i.size = this.size),
			this.shadowSide !== null && (i.shadowSide = this.shadowSide),
			this.sizeAttenuation !== void 0 && (i.sizeAttenuation = this.sizeAttenuation),
			this.blending !== hr && (i.blending = this.blending),
			this.side !== Ln && (i.side = this.side),
			this.vertexColors === !0 && (i.vertexColors = !0),
			this.opacity < 1 && (i.opacity = this.opacity),
			this.transparent === !0 && (i.transparent = !0),
			this.blendSrc !== qp && (i.blendSrc = this.blendSrc),
			this.blendDst !== Yp && (i.blendDst = this.blendDst),
			this.blendEquation !== Vr && (i.blendEquation = this.blendEquation),
			this.blendSrcAlpha !== null && (i.blendSrcAlpha = this.blendSrcAlpha),
			this.blendDstAlpha !== null && (i.blendDstAlpha = this.blendDstAlpha),
			this.blendEquationAlpha !== null && (i.blendEquationAlpha = this.blendEquationAlpha),
			this.blendColor && this.blendColor.isColor && (i.blendColor = this.blendColor.getHex()),
			this.blendAlpha !== 0 && (i.blendAlpha = this.blendAlpha),
			this.depthFunc !== Gu && (i.depthFunc = this.depthFunc),
			this.depthTest === !1 && (i.depthTest = this.depthTest),
			this.depthWrite === !1 && (i.depthWrite = this.depthWrite),
			this.colorWrite === !1 && (i.colorWrite = this.colorWrite),
			this.stencilWriteMask !== 255 && (i.stencilWriteMask = this.stencilWriteMask),
			this.stencilFunc !== Ug && (i.stencilFunc = this.stencilFunc),
			this.stencilRef !== 0 && (i.stencilRef = this.stencilRef),
			this.stencilFuncMask !== 255 && (i.stencilFuncMask = this.stencilFuncMask),
			this.stencilFail !== po && (i.stencilFail = this.stencilFail),
			this.stencilZFail !== po && (i.stencilZFail = this.stencilZFail),
			this.stencilZPass !== po && (i.stencilZPass = this.stencilZPass),
			this.stencilWrite === !0 && (i.stencilWrite = this.stencilWrite),
			this.rotation !== void 0 && this.rotation !== 0 && (i.rotation = this.rotation),
			this.polygonOffset === !0 && (i.polygonOffset = !0),
			this.polygonOffsetFactor !== 0 && (i.polygonOffsetFactor = this.polygonOffsetFactor),
			this.polygonOffsetUnits !== 0 && (i.polygonOffsetUnits = this.polygonOffsetUnits),
			this.linewidth !== void 0 && this.linewidth !== 1 && (i.linewidth = this.linewidth),
			this.dashSize !== void 0 && (i.dashSize = this.dashSize),
			this.gapSize !== void 0 && (i.gapSize = this.gapSize),
			this.scale !== void 0 && (i.scale = this.scale),
			this.dithering === !0 && (i.dithering = !0),
			this.alphaTest > 0 && (i.alphaTest = this.alphaTest),
			this.alphaHash === !0 && (i.alphaHash = !0),
			this.alphaToCoverage === !0 && (i.alphaToCoverage = !0),
			this.premultipliedAlpha === !0 && (i.premultipliedAlpha = !0),
			this.forceSinglePass === !0 && (i.forceSinglePass = !0),
			this.wireframe === !0 && (i.wireframe = !0),
			this.wireframeLinewidth > 1 && (i.wireframeLinewidth = this.wireframeLinewidth),
			this.wireframeLinecap !== 'round' && (i.wireframeLinecap = this.wireframeLinecap),
			this.wireframeLinejoin !== 'round' && (i.wireframeLinejoin = this.wireframeLinejoin),
			this.flatShading === !0 && (i.flatShading = !0),
			this.visible === !1 && (i.visible = !1),
			this.toneMapped === !1 && (i.toneMapped = !1),
			this.fog === !1 && (i.fog = !1),
			Object.keys(this.userData).length > 0 && (i.userData = this.userData);
		function s(r) {
			const o = [];
			for (const a in r) {
				const c = r[a];
				delete c.metadata, o.push(c);
			}
			return o;
		}
		if (t) {
			const r = s(e.textures),
				o = s(e.images);
			r.length > 0 && (i.textures = r), o.length > 0 && (i.images = o);
		}
		return i;
	}
	clone() {
		return new this.constructor().copy(this);
	}
	copy(e) {
		(this.name = e.name),
			(this.blending = e.blending),
			(this.side = e.side),
			(this.vertexColors = e.vertexColors),
			(this.opacity = e.opacity),
			(this.transparent = e.transparent),
			(this.blendSrc = e.blendSrc),
			(this.blendDst = e.blendDst),
			(this.blendEquation = e.blendEquation),
			(this.blendSrcAlpha = e.blendSrcAlpha),
			(this.blendDstAlpha = e.blendDstAlpha),
			(this.blendEquationAlpha = e.blendEquationAlpha),
			this.blendColor.copy(e.blendColor),
			(this.blendAlpha = e.blendAlpha),
			(this.depthFunc = e.depthFunc),
			(this.depthTest = e.depthTest),
			(this.depthWrite = e.depthWrite),
			(this.stencilWriteMask = e.stencilWriteMask),
			(this.stencilFunc = e.stencilFunc),
			(this.stencilRef = e.stencilRef),
			(this.stencilFuncMask = e.stencilFuncMask),
			(this.stencilFail = e.stencilFail),
			(this.stencilZFail = e.stencilZFail),
			(this.stencilZPass = e.stencilZPass),
			(this.stencilWrite = e.stencilWrite);
		const t = e.clippingPlanes;
		let i = null;
		if (t !== null) {
			const s = t.length;
			i = new Array(s);
			for (let r = 0; r !== s; ++r) i[r] = t[r].clone();
		}
		return (
			(this.clippingPlanes = i),
			(this.clipIntersection = e.clipIntersection),
			(this.clipShadows = e.clipShadows),
			(this.shadowSide = e.shadowSide),
			(this.colorWrite = e.colorWrite),
			(this.precision = e.precision),
			(this.polygonOffset = e.polygonOffset),
			(this.polygonOffsetFactor = e.polygonOffsetFactor),
			(this.polygonOffsetUnits = e.polygonOffsetUnits),
			(this.dithering = e.dithering),
			(this.alphaTest = e.alphaTest),
			(this.alphaHash = e.alphaHash),
			(this.alphaToCoverage = e.alphaToCoverage),
			(this.premultipliedAlpha = e.premultipliedAlpha),
			(this.forceSinglePass = e.forceSinglePass),
			(this.visible = e.visible),
			(this.toneMapped = e.toneMapped),
			(this.userData = JSON.parse(JSON.stringify(e.userData))),
			this
		);
	}
	dispose() {
		this.dispatchEvent({type: 'dispose'});
	}
	set needsUpdate(e) {
		e === !0 && this.version++;
	}
}
class Ah extends An {
	constructor(e) {
		super(),
			(this.isMeshBasicMaterial = !0),
			(this.type = 'MeshBasicMaterial'),
			(this.color = new Ee(16777215)),
			(this.map = null),
			(this.lightMap = null),
			(this.lightMapIntensity = 1),
			(this.aoMap = null),
			(this.aoMapIntensity = 1),
			(this.specularMap = null),
			(this.alphaMap = null),
			(this.envMap = null),
			(this.combine = yh),
			(this.reflectivity = 1),
			(this.refractionRatio = 0.98),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.wireframeLinecap = 'round'),
			(this.wireframeLinejoin = 'round'),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			(this.map = e.map),
			(this.lightMap = e.lightMap),
			(this.lightMapIntensity = e.lightMapIntensity),
			(this.aoMap = e.aoMap),
			(this.aoMapIntensity = e.aoMapIntensity),
			(this.specularMap = e.specularMap),
			(this.alphaMap = e.alphaMap),
			(this.envMap = e.envMap),
			(this.combine = e.combine),
			(this.reflectivity = e.reflectivity),
			(this.refractionRatio = e.refractionRatio),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.wireframeLinecap = e.wireframeLinecap),
			(this.wireframeLinejoin = e.wireframeLinejoin),
			(this.fog = e.fog),
			this
		);
	}
}
const xs = xT();
function xT() {
	const n = new ArrayBuffer(4),
		e = new Float32Array(n),
		t = new Uint32Array(n),
		i = new Uint32Array(512),
		s = new Uint32Array(512);
	for (let c = 0; c < 256; ++c) {
		const l = c - 127;
		l < -27
			? ((i[c] = 0), (i[c | 256] = 32768), (s[c] = 24), (s[c | 256] = 24))
			: l < -14
			? ((i[c] = 1024 >> (-l - 14)),
			  (i[c | 256] = (1024 >> (-l - 14)) | 32768),
			  (s[c] = -l - 1),
			  (s[c | 256] = -l - 1))
			: l <= 15
			? ((i[c] = (l + 15) << 10), (i[c | 256] = ((l + 15) << 10) | 32768), (s[c] = 13), (s[c | 256] = 13))
			: l < 128
			? ((i[c] = 31744), (i[c | 256] = 64512), (s[c] = 24), (s[c | 256] = 24))
			: ((i[c] = 31744), (i[c | 256] = 64512), (s[c] = 13), (s[c | 256] = 13));
	}
	const r = new Uint32Array(2048),
		o = new Uint32Array(64),
		a = new Uint32Array(64);
	for (let c = 1; c < 1024; ++c) {
		let l = c << 13,
			u = 0;
		for (; !(l & 8388608); ) (l <<= 1), (u -= 8388608);
		(l &= -8388609), (u += 947912704), (r[c] = l | u);
	}
	for (let c = 1024; c < 2048; ++c) r[c] = 939524096 + ((c - 1024) << 13);
	for (let c = 1; c < 31; ++c) o[c] = c << 23;
	(o[31] = 1199570944), (o[32] = 2147483648);
	for (let c = 33; c < 63; ++c) o[c] = 2147483648 + ((c - 32) << 23);
	o[63] = 3347054592;
	for (let c = 1; c < 64; ++c) c !== 32 && (a[c] = 1024);
	return {
		floatView: e,
		uint32View: t,
		baseTable: i,
		shiftTable: s,
		mantissaTable: r,
		exponentTable: o,
		offsetTable: a,
	};
}
function MT(n) {
	Math.abs(n) > 65504 && console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.'),
		(n = pn(n, -65504, 65504)),
		(xs.floatView[0] = n);
	const e = xs.uint32View[0],
		t = (e >> 23) & 511;
	return xs.baseTable[t] + ((e & 8388607) >> xs.shiftTable[t]);
}
function TT(n) {
	const e = n >> 10;
	return (xs.uint32View[0] = xs.mantissaTable[xs.offsetTable[e] + (n & 1023)] + xs.exponentTable[e]), xs.floatView[0];
}
const Zg = {toHalfFloat: MT, fromHalfFloat: TT},
	an = new w(),
	gl = new re();
class kn {
	constructor(e, t, i = !1) {
		if (Array.isArray(e)) throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
		(this.isBufferAttribute = !0),
			(this.name = ''),
			(this.array = e),
			(this.itemSize = t),
			(this.count = e !== void 0 ? e.length / t : 0),
			(this.normalized = i),
			(this.usage = Fg),
			(this._updateRange = {offset: 0, count: -1}),
			(this.updateRanges = []),
			(this.gpuType = jn),
			(this.version = 0);
	}
	onUploadCallback() {}
	set needsUpdate(e) {
		e === !0 && this.version++;
	}
	get updateRange() {
		return (
			console.warn(
				'THREE.BufferAttribute: "updateRange" is deprecated and removed in r169. Use "addUpdateRange()" instead.'
			),
			this._updateRange
		);
	}
	setUsage(e) {
		return (this.usage = e), this;
	}
	addUpdateRange(e, t) {
		this.updateRanges.push({start: e, count: t});
	}
	clearUpdateRanges() {
		this.updateRanges.length = 0;
	}
	copy(e) {
		return (
			(this.name = e.name),
			(this.array = new e.array.constructor(e.array)),
			(this.itemSize = e.itemSize),
			(this.count = e.count),
			(this.normalized = e.normalized),
			(this.usage = e.usage),
			(this.gpuType = e.gpuType),
			this
		);
	}
	copyAt(e, t, i) {
		(e *= this.itemSize), (i *= t.itemSize);
		for (let s = 0, r = this.itemSize; s < r; s++) this.array[e + s] = t.array[i + s];
		return this;
	}
	copyArray(e) {
		return this.array.set(e), this;
	}
	applyMatrix3(e) {
		if (this.itemSize === 2)
			for (let t = 0, i = this.count; t < i; t++)
				gl.fromBufferAttribute(this, t), gl.applyMatrix3(e), this.setXY(t, gl.x, gl.y);
		else if (this.itemSize === 3)
			for (let t = 0, i = this.count; t < i; t++)
				an.fromBufferAttribute(this, t), an.applyMatrix3(e), this.setXYZ(t, an.x, an.y, an.z);
		return this;
	}
	applyMatrix4(e) {
		for (let t = 0, i = this.count; t < i; t++)
			an.fromBufferAttribute(this, t), an.applyMatrix4(e), this.setXYZ(t, an.x, an.y, an.z);
		return this;
	}
	applyNormalMatrix(e) {
		for (let t = 0, i = this.count; t < i; t++)
			an.fromBufferAttribute(this, t), an.applyNormalMatrix(e), this.setXYZ(t, an.x, an.y, an.z);
		return this;
	}
	transformDirection(e) {
		for (let t = 0, i = this.count; t < i; t++)
			an.fromBufferAttribute(this, t), an.transformDirection(e), this.setXYZ(t, an.x, an.y, an.z);
		return this;
	}
	set(e, t = 0) {
		return this.array.set(e, t), this;
	}
	getComponent(e, t) {
		let i = this.array[e * this.itemSize + t];
		return this.normalized && (i = Ko(i, this.array)), i;
	}
	setComponent(e, t, i) {
		return this.normalized && (i = zn(i, this.array)), (this.array[e * this.itemSize + t] = i), this;
	}
	getX(e) {
		let t = this.array[e * this.itemSize];
		return this.normalized && (t = Ko(t, this.array)), t;
	}
	setX(e, t) {
		return this.normalized && (t = zn(t, this.array)), (this.array[e * this.itemSize] = t), this;
	}
	getY(e) {
		let t = this.array[e * this.itemSize + 1];
		return this.normalized && (t = Ko(t, this.array)), t;
	}
	setY(e, t) {
		return this.normalized && (t = zn(t, this.array)), (this.array[e * this.itemSize + 1] = t), this;
	}
	getZ(e) {
		let t = this.array[e * this.itemSize + 2];
		return this.normalized && (t = Ko(t, this.array)), t;
	}
	setZ(e, t) {
		return this.normalized && (t = zn(t, this.array)), (this.array[e * this.itemSize + 2] = t), this;
	}
	getW(e) {
		let t = this.array[e * this.itemSize + 3];
		return this.normalized && (t = Ko(t, this.array)), t;
	}
	setW(e, t) {
		return this.normalized && (t = zn(t, this.array)), (this.array[e * this.itemSize + 3] = t), this;
	}
	setXY(e, t, i) {
		return (
			(e *= this.itemSize),
			this.normalized && ((t = zn(t, this.array)), (i = zn(i, this.array))),
			(this.array[e + 0] = t),
			(this.array[e + 1] = i),
			this
		);
	}
	setXYZ(e, t, i, s) {
		return (
			(e *= this.itemSize),
			this.normalized && ((t = zn(t, this.array)), (i = zn(i, this.array)), (s = zn(s, this.array))),
			(this.array[e + 0] = t),
			(this.array[e + 1] = i),
			(this.array[e + 2] = s),
			this
		);
	}
	setXYZW(e, t, i, s, r) {
		return (
			(e *= this.itemSize),
			this.normalized &&
				((t = zn(t, this.array)), (i = zn(i, this.array)), (s = zn(s, this.array)), (r = zn(r, this.array))),
			(this.array[e + 0] = t),
			(this.array[e + 1] = i),
			(this.array[e + 2] = s),
			(this.array[e + 3] = r),
			this
		);
	}
	onUpload(e) {
		return (this.onUploadCallback = e), this;
	}
	clone() {
		return new this.constructor(this.array, this.itemSize).copy(this);
	}
	toJSON() {
		const e = {
			itemSize: this.itemSize,
			type: this.array.constructor.name,
			array: Array.from(this.array),
			normalized: this.normalized,
		};
		return this.name !== '' && (e.name = this.name), this.usage !== Fg && (e.usage = this.usage), e;
	}
}
class Lb extends kn {
	constructor(e, t, i) {
		super(new Uint16Array(e), t, i);
	}
}
class RT extends kn {
	constructor(e, t, i) {
		super(new Int32Array(e), t, i);
	}
}
class Ub extends kn {
	constructor(e, t, i) {
		super(new Uint32Array(e), t, i);
	}
}
class Kt extends kn {
	constructor(e, t, i) {
		super(new Float32Array(e), t, i);
	}
}
let wT = 0;
const hi = new Qe(),
	Ad = new kt(),
	bo = new w(),
	ii = new Ht(),
	Wa = new Ht(),
	En = new w();
class qn extends cs {
	constructor() {
		super(),
			(this.isBufferGeometry = !0),
			Object.defineProperty(this, 'id', {value: wT++}),
			(this.uuid = Ma()),
			(this.name = ''),
			(this.type = 'BufferGeometry'),
			(this.index = null),
			(this.attributes = {}),
			(this.morphAttributes = {}),
			(this.morphTargetsRelative = !1),
			(this.groups = []),
			(this.boundingBox = null),
			(this.boundingSphere = null),
			(this.drawRange = {start: 0, count: 1 / 0}),
			(this.userData = {});
	}
	getIndex() {
		return this.index;
	}
	setIndex(e) {
		return Array.isArray(e) ? (this.index = new (Ob(e) ? Ub : Lb)(e, 1)) : (this.index = e), this;
	}
	getAttribute(e) {
		return this.attributes[e];
	}
	setAttribute(e, t) {
		return (this.attributes[e] = t), this;
	}
	deleteAttribute(e) {
		return delete this.attributes[e], this;
	}
	hasAttribute(e) {
		return this.attributes[e] !== void 0;
	}
	addGroup(e, t, i = 0) {
		this.groups.push({start: e, count: t, materialIndex: i});
	}
	clearGroups() {
		this.groups = [];
	}
	setDrawRange(e, t) {
		(this.drawRange.start = e), (this.drawRange.count = t);
	}
	applyMatrix4(e) {
		const t = this.attributes.position;
		t !== void 0 && (t.applyMatrix4(e), (t.needsUpdate = !0));
		const i = this.attributes.normal;
		if (i !== void 0) {
			const r = new ut().getNormalMatrix(e);
			i.applyNormalMatrix(r), (i.needsUpdate = !0);
		}
		const s = this.attributes.tangent;
		return (
			s !== void 0 && (s.transformDirection(e), (s.needsUpdate = !0)),
			this.boundingBox !== null && this.computeBoundingBox(),
			this.boundingSphere !== null && this.computeBoundingSphere(),
			this
		);
	}
	applyQuaternion(e) {
		return hi.makeRotationFromQuaternion(e), this.applyMatrix4(hi), this;
	}
	rotateX(e) {
		return hi.makeRotationX(e), this.applyMatrix4(hi), this;
	}
	rotateY(e) {
		return hi.makeRotationY(e), this.applyMatrix4(hi), this;
	}
	rotateZ(e) {
		return hi.makeRotationZ(e), this.applyMatrix4(hi), this;
	}
	translate(e, t, i) {
		return hi.makeTranslation(e, t, i), this.applyMatrix4(hi), this;
	}
	scale(e, t, i) {
		return hi.makeScale(e, t, i), this.applyMatrix4(hi), this;
	}
	lookAt(e) {
		return Ad.lookAt(e), Ad.updateMatrix(), this.applyMatrix4(Ad.matrix), this;
	}
	center() {
		return (
			this.computeBoundingBox(), this.boundingBox.getCenter(bo).negate(), this.translate(bo.x, bo.y, bo.z), this
		);
	}
	setFromPoints(e) {
		const t = [];
		for (let i = 0, s = e.length; i < s; i++) {
			const r = e[i];
			t.push(r.x, r.y, r.z || 0);
		}
		return this.setAttribute('position', new Kt(t, 3)), this;
	}
	computeBoundingBox() {
		this.boundingBox === null && (this.boundingBox = new Ht());
		const e = this.attributes.position,
			t = this.morphAttributes.position;
		if (e && e.isGLBufferAttribute) {
			console.error(
				'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',
				this
			),
				this.boundingBox.set(new w(-1 / 0, -1 / 0, -1 / 0), new w(1 / 0, 1 / 0, 1 / 0));
			return;
		}
		if (e !== void 0) {
			if ((this.boundingBox.setFromBufferAttribute(e), t))
				for (let i = 0, s = t.length; i < s; i++) {
					const r = t[i];
					ii.setFromBufferAttribute(r),
						this.morphTargetsRelative
							? (En.addVectors(this.boundingBox.min, ii.min),
							  this.boundingBox.expandByPoint(En),
							  En.addVectors(this.boundingBox.max, ii.max),
							  this.boundingBox.expandByPoint(En))
							: (this.boundingBox.expandByPoint(ii.min), this.boundingBox.expandByPoint(ii.max));
				}
		} else this.boundingBox.makeEmpty();
		(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) &&
			console.error(
				'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
				this
			);
	}
	computeBoundingSphere() {
		this.boundingSphere === null && (this.boundingSphere = new Fs());
		const e = this.attributes.position,
			t = this.morphAttributes.position;
		if (e && e.isGLBufferAttribute) {
			console.error(
				'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',
				this
			),
				this.boundingSphere.set(new w(), 1 / 0);
			return;
		}
		if (e) {
			const i = this.boundingSphere.center;
			if ((ii.setFromBufferAttribute(e), t))
				for (let r = 0, o = t.length; r < o; r++) {
					const a = t[r];
					Wa.setFromBufferAttribute(a),
						this.morphTargetsRelative
							? (En.addVectors(ii.min, Wa.min),
							  ii.expandByPoint(En),
							  En.addVectors(ii.max, Wa.max),
							  ii.expandByPoint(En))
							: (ii.expandByPoint(Wa.min), ii.expandByPoint(Wa.max));
				}
			ii.getCenter(i);
			let s = 0;
			for (let r = 0, o = e.count; r < o; r++)
				En.fromBufferAttribute(e, r), (s = Math.max(s, i.distanceToSquared(En)));
			if (t)
				for (let r = 0, o = t.length; r < o; r++) {
					const a = t[r],
						c = this.morphTargetsRelative;
					for (let l = 0, u = a.count; l < u; l++)
						En.fromBufferAttribute(a, l),
							c && (bo.fromBufferAttribute(e, l), En.add(bo)),
							(s = Math.max(s, i.distanceToSquared(En)));
				}
			(this.boundingSphere.radius = Math.sqrt(s)),
				isNaN(this.boundingSphere.radius) &&
					console.error(
						'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
						this
					);
		}
	}
	computeTangents() {
		const e = this.index,
			t = this.attributes;
		if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
			console.error(
				'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)'
			);
			return;
		}
		const i = e.array,
			s = t.position.array,
			r = t.normal.array,
			o = t.uv.array,
			a = s.length / 3;
		this.hasAttribute('tangent') === !1 && this.setAttribute('tangent', new kn(new Float32Array(4 * a), 4));
		const c = this.getAttribute('tangent').array,
			l = [],
			u = [];
		for (let x = 0; x < a; x++) (l[x] = new w()), (u[x] = new w());
		const h = new w(),
			d = new w(),
			p = new w(),
			m = new re(),
			g = new re(),
			_ = new re(),
			f = new w(),
			y = new w();
		function v(x, z, B) {
			h.fromArray(s, x * 3),
				d.fromArray(s, z * 3),
				p.fromArray(s, B * 3),
				m.fromArray(o, x * 2),
				g.fromArray(o, z * 2),
				_.fromArray(o, B * 2),
				d.sub(h),
				p.sub(h),
				g.sub(m),
				_.sub(m);
			const W = 1 / (g.x * _.y - _.x * g.y);
			isFinite(W) &&
				(f.copy(d).multiplyScalar(_.y).addScaledVector(p, -g.y).multiplyScalar(W),
				y.copy(p).multiplyScalar(g.x).addScaledVector(d, -_.x).multiplyScalar(W),
				l[x].add(f),
				l[z].add(f),
				l[B].add(f),
				u[x].add(y),
				u[z].add(y),
				u[B].add(y));
		}
		let A = this.groups;
		A.length === 0 && (A = [{start: 0, count: i.length}]);
		for (let x = 0, z = A.length; x < z; ++x) {
			const B = A[x],
				W = B.start,
				F = B.count;
			for (let X = W, Z = W + F; X < Z; X += 3) v(i[X + 0], i[X + 1], i[X + 2]);
		}
		const S = new w(),
			T = new w(),
			R = new w(),
			D = new w();
		function E(x) {
			R.fromArray(r, x * 3), D.copy(R);
			const z = l[x];
			S.copy(z), S.sub(R.multiplyScalar(R.dot(z))).normalize(), T.crossVectors(D, z);
			const W = T.dot(u[x]) < 0 ? -1 : 1;
			(c[x * 4] = S.x), (c[x * 4 + 1] = S.y), (c[x * 4 + 2] = S.z), (c[x * 4 + 3] = W);
		}
		for (let x = 0, z = A.length; x < z; ++x) {
			const B = A[x],
				W = B.start,
				F = B.count;
			for (let X = W, Z = W + F; X < Z; X += 3) E(i[X + 0]), E(i[X + 1]), E(i[X + 2]);
		}
	}
	computeVertexNormals() {
		const e = this.index,
			t = this.getAttribute('position');
		if (t !== void 0) {
			let i = this.getAttribute('normal');
			if (i === void 0) (i = new kn(new Float32Array(t.count * 3), 3)), this.setAttribute('normal', i);
			else for (let d = 0, p = i.count; d < p; d++) i.setXYZ(d, 0, 0, 0);
			const s = new w(),
				r = new w(),
				o = new w(),
				a = new w(),
				c = new w(),
				l = new w(),
				u = new w(),
				h = new w();
			if (e)
				for (let d = 0, p = e.count; d < p; d += 3) {
					const m = e.getX(d + 0),
						g = e.getX(d + 1),
						_ = e.getX(d + 2);
					s.fromBufferAttribute(t, m),
						r.fromBufferAttribute(t, g),
						o.fromBufferAttribute(t, _),
						u.subVectors(o, r),
						h.subVectors(s, r),
						u.cross(h),
						a.fromBufferAttribute(i, m),
						c.fromBufferAttribute(i, g),
						l.fromBufferAttribute(i, _),
						a.add(u),
						c.add(u),
						l.add(u),
						i.setXYZ(m, a.x, a.y, a.z),
						i.setXYZ(g, c.x, c.y, c.z),
						i.setXYZ(_, l.x, l.y, l.z);
				}
			else
				for (let d = 0, p = t.count; d < p; d += 3)
					s.fromBufferAttribute(t, d + 0),
						r.fromBufferAttribute(t, d + 1),
						o.fromBufferAttribute(t, d + 2),
						u.subVectors(o, r),
						h.subVectors(s, r),
						u.cross(h),
						i.setXYZ(d + 0, u.x, u.y, u.z),
						i.setXYZ(d + 1, u.x, u.y, u.z),
						i.setXYZ(d + 2, u.x, u.y, u.z);
			this.normalizeNormals(), (i.needsUpdate = !0);
		}
	}
	normalizeNormals() {
		const e = this.attributes.normal;
		for (let t = 0, i = e.count; t < i; t++)
			En.fromBufferAttribute(e, t), En.normalize(), e.setXYZ(t, En.x, En.y, En.z);
	}
	toNonIndexed() {
		function e(a, c) {
			const l = a.array,
				u = a.itemSize,
				h = a.normalized,
				d = new l.constructor(c.length * u);
			let p = 0,
				m = 0;
			for (let g = 0, _ = c.length; g < _; g++) {
				a.isInterleavedBufferAttribute ? (p = c[g] * a.data.stride + a.offset) : (p = c[g] * u);
				for (let f = 0; f < u; f++) d[m++] = l[p++];
			}
			return new kn(d, u, h);
		}
		if (this.index === null)
			return console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.'), this;
		const t = new qn(),
			i = this.index.array,
			s = this.attributes;
		for (const a in s) {
			const c = s[a],
				l = e(c, i);
			t.setAttribute(a, l);
		}
		const r = this.morphAttributes;
		for (const a in r) {
			const c = [],
				l = r[a];
			for (let u = 0, h = l.length; u < h; u++) {
				const d = l[u],
					p = e(d, i);
				c.push(p);
			}
			t.morphAttributes[a] = c;
		}
		t.morphTargetsRelative = this.morphTargetsRelative;
		const o = this.groups;
		for (let a = 0, c = o.length; a < c; a++) {
			const l = o[a];
			t.addGroup(l.start, l.count, l.materialIndex);
		}
		return t;
	}
	toJSON() {
		const e = {metadata: {version: 4.6, type: 'BufferGeometry', generator: 'BufferGeometry.toJSON'}};
		if (
			((e.uuid = this.uuid),
			(e.type = this.type),
			this.name !== '' && (e.name = this.name),
			Object.keys(this.userData).length > 0 && (e.userData = this.userData),
			this.parameters !== void 0)
		) {
			const c = this.parameters;
			for (const l in c) c[l] !== void 0 && (e[l] = c[l]);
			return e;
		}
		e.data = {attributes: {}};
		const t = this.index;
		t !== null && (e.data.index = {type: t.array.constructor.name, array: Array.prototype.slice.call(t.array)});
		const i = this.attributes;
		for (const c in i) {
			const l = i[c];
			e.data.attributes[c] = l.toJSON(e.data);
		}
		const s = {};
		let r = !1;
		for (const c in this.morphAttributes) {
			const l = this.morphAttributes[c],
				u = [];
			for (let h = 0, d = l.length; h < d; h++) {
				const p = l[h];
				u.push(p.toJSON(e.data));
			}
			u.length > 0 && ((s[c] = u), (r = !0));
		}
		r && ((e.data.morphAttributes = s), (e.data.morphTargetsRelative = this.morphTargetsRelative));
		const o = this.groups;
		o.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(o)));
		const a = this.boundingSphere;
		return a !== null && (e.data.boundingSphere = {center: a.center.toArray(), radius: a.radius}), e;
	}
	clone() {
		return new this.constructor().copy(this);
	}
	copy(e) {
		(this.index = null),
			(this.attributes = {}),
			(this.morphAttributes = {}),
			(this.groups = []),
			(this.boundingBox = null),
			(this.boundingSphere = null);
		const t = {};
		this.name = e.name;
		const i = e.index;
		i !== null && this.setIndex(i.clone(t));
		const s = e.attributes;
		for (const l in s) {
			const u = s[l];
			this.setAttribute(l, u.clone(t));
		}
		const r = e.morphAttributes;
		for (const l in r) {
			const u = [],
				h = r[l];
			for (let d = 0, p = h.length; d < p; d++) u.push(h[d].clone(t));
			this.morphAttributes[l] = u;
		}
		this.morphTargetsRelative = e.morphTargetsRelative;
		const o = e.groups;
		for (let l = 0, u = o.length; l < u; l++) {
			const h = o[l];
			this.addGroup(h.start, h.count, h.materialIndex);
		}
		const a = e.boundingBox;
		a !== null && (this.boundingBox = a.clone());
		const c = e.boundingSphere;
		return (
			c !== null && (this.boundingSphere = c.clone()),
			(this.drawRange.start = e.drawRange.start),
			(this.drawRange.count = e.drawRange.count),
			(this.userData = e.userData),
			this
		);
	}
	dispose() {
		this.dispatchEvent({type: 'dispose'});
	}
}
const Qg = new Qe(),
	Rr = new Ta(),
	vl = new Fs(),
	Jg = new w(),
	So = new w(),
	Ao = new w(),
	xo = new w(),
	xd = new w(),
	El = new w(),
	Cl = new re(),
	yl = new re(),
	bl = new re(),
	ev = new w(),
	tv = new w(),
	nv = new w(),
	Sl = new w(),
	Al = new w();
class On extends kt {
	constructor(e = new qn(), t = new Ah()) {
		super(),
			(this.isMesh = !0),
			(this.type = 'Mesh'),
			(this.geometry = e),
			(this.material = t),
			this.updateMorphTargets();
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()),
			e.morphTargetDictionary !== void 0 &&
				(this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)),
			(this.material = Array.isArray(e.material) ? e.material.slice() : e.material),
			(this.geometry = e.geometry),
			this
		);
	}
	updateMorphTargets() {
		const t = this.geometry.morphAttributes,
			i = Object.keys(t);
		if (i.length > 0) {
			const s = t[i[0]];
			if (s !== void 0) {
				(this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
				for (let r = 0, o = s.length; r < o; r++) {
					const a = s[r].name || String(r);
					this.morphTargetInfluences.push(0), (this.morphTargetDictionary[a] = r);
				}
			}
		}
	}
	getVertexPosition(e, t) {
		const i = this.geometry,
			s = i.attributes.position,
			r = i.morphAttributes.position,
			o = i.morphTargetsRelative;
		t.fromBufferAttribute(s, e);
		const a = this.morphTargetInfluences;
		if (r && a) {
			El.set(0, 0, 0);
			for (let c = 0, l = r.length; c < l; c++) {
				const u = a[c],
					h = r[c];
				u !== 0 &&
					(xd.fromBufferAttribute(h, e), o ? El.addScaledVector(xd, u) : El.addScaledVector(xd.sub(t), u));
			}
			t.add(El);
		}
		return t;
	}
	raycast(e, t) {
		const i = this.geometry,
			s = this.material,
			r = this.matrixWorld;
		s !== void 0 &&
			(i.boundingSphere === null && i.computeBoundingSphere(),
			vl.copy(i.boundingSphere),
			vl.applyMatrix4(r),
			Rr.copy(e.ray).recast(e.near),
			!(
				vl.containsPoint(Rr.origin) === !1 &&
				(Rr.intersectSphere(vl, Jg) === null || Rr.origin.distanceToSquared(Jg) > (e.far - e.near) ** 2)
			) &&
				(Qg.copy(r).invert(),
				Rr.copy(e.ray).applyMatrix4(Qg),
				!(i.boundingBox !== null && Rr.intersectsBox(i.boundingBox) === !1) &&
					this._computeIntersections(e, t, Rr)));
	}
	_computeIntersections(e, t, i) {
		let s;
		const r = this.geometry,
			o = this.material,
			a = r.index,
			c = r.attributes.position,
			l = r.attributes.uv,
			u = r.attributes.uv1,
			h = r.attributes.normal,
			d = r.groups,
			p = r.drawRange;
		if (a !== null)
			if (Array.isArray(o))
				for (let m = 0, g = d.length; m < g; m++) {
					const _ = d[m],
						f = o[_.materialIndex],
						y = Math.max(_.start, p.start),
						v = Math.min(a.count, Math.min(_.start + _.count, p.start + p.count));
					for (let A = y, S = v; A < S; A += 3) {
						const T = a.getX(A),
							R = a.getX(A + 1),
							D = a.getX(A + 2);
						(s = xl(this, f, e, i, l, u, h, T, R, D)),
							s &&
								((s.faceIndex = Math.floor(A / 3)),
								(s.face.materialIndex = _.materialIndex),
								t.push(s));
					}
				}
			else {
				const m = Math.max(0, p.start),
					g = Math.min(a.count, p.start + p.count);
				for (let _ = m, f = g; _ < f; _ += 3) {
					const y = a.getX(_),
						v = a.getX(_ + 1),
						A = a.getX(_ + 2);
					(s = xl(this, o, e, i, l, u, h, y, v, A)), s && ((s.faceIndex = Math.floor(_ / 3)), t.push(s));
				}
			}
		else if (c !== void 0)
			if (Array.isArray(o))
				for (let m = 0, g = d.length; m < g; m++) {
					const _ = d[m],
						f = o[_.materialIndex],
						y = Math.max(_.start, p.start),
						v = Math.min(c.count, Math.min(_.start + _.count, p.start + p.count));
					for (let A = y, S = v; A < S; A += 3) {
						const T = A,
							R = A + 1,
							D = A + 2;
						(s = xl(this, f, e, i, l, u, h, T, R, D)),
							s &&
								((s.faceIndex = Math.floor(A / 3)),
								(s.face.materialIndex = _.materialIndex),
								t.push(s));
					}
				}
			else {
				const m = Math.max(0, p.start),
					g = Math.min(c.count, p.start + p.count);
				for (let _ = m, f = g; _ < f; _ += 3) {
					const y = _,
						v = _ + 1,
						A = _ + 2;
					(s = xl(this, o, e, i, l, u, h, y, v, A)), s && ((s.faceIndex = Math.floor(_ / 3)), t.push(s));
				}
			}
	}
}
function OT(n, e, t, i, s, r, o, a) {
	let c;
	if (
		(e.side === fn
			? (c = i.intersectTriangle(o, r, s, !0, a))
			: (c = i.intersectTriangle(s, r, o, e.side === Ln, a)),
		c === null)
	)
		return null;
	Al.copy(a), Al.applyMatrix4(n.matrixWorld);
	const l = t.ray.origin.distanceTo(Al);
	return l < t.near || l > t.far ? null : {distance: l, point: Al.clone(), object: n};
}
function xl(n, e, t, i, s, r, o, a, c, l) {
	n.getVertexPosition(a, So), n.getVertexPosition(c, Ao), n.getVertexPosition(l, xo);
	const u = OT(n, e, t, i, So, Ao, xo, Sl);
	if (u) {
		s &&
			(Cl.fromBufferAttribute(s, a),
			yl.fromBufferAttribute(s, c),
			bl.fromBufferAttribute(s, l),
			(u.uv = Tn.getInterpolation(Sl, So, Ao, xo, Cl, yl, bl, new re()))),
			r &&
				(Cl.fromBufferAttribute(r, a),
				yl.fromBufferAttribute(r, c),
				bl.fromBufferAttribute(r, l),
				(u.uv1 = Tn.getInterpolation(Sl, So, Ao, xo, Cl, yl, bl, new re())),
				(u.uv2 = u.uv1)),
			o &&
				(ev.fromBufferAttribute(o, a),
				tv.fromBufferAttribute(o, c),
				nv.fromBufferAttribute(o, l),
				(u.normal = Tn.getInterpolation(Sl, So, Ao, xo, ev, tv, nv, new w())),
				u.normal.dot(i.direction) > 0 && u.normal.multiplyScalar(-1));
		const h = {a, b: c, c: l, normal: new w(), materialIndex: 0};
		Tn.getNormal(So, Ao, xo, h.normal), (u.face = h);
	}
	return u;
}
class Qr extends qn {
	constructor(e = 1, t = 1, i = 1, s = 1, r = 1, o = 1) {
		super(),
			(this.type = 'BoxGeometry'),
			(this.parameters = {width: e, height: t, depth: i, widthSegments: s, heightSegments: r, depthSegments: o});
		const a = this;
		(s = Math.floor(s)), (r = Math.floor(r)), (o = Math.floor(o));
		const c = [],
			l = [],
			u = [],
			h = [];
		let d = 0,
			p = 0;
		m('z', 'y', 'x', -1, -1, i, t, e, o, r, 0),
			m('z', 'y', 'x', 1, -1, i, t, -e, o, r, 1),
			m('x', 'z', 'y', 1, 1, e, i, t, s, o, 2),
			m('x', 'z', 'y', 1, -1, e, i, -t, s, o, 3),
			m('x', 'y', 'z', 1, -1, e, t, i, s, r, 4),
			m('x', 'y', 'z', -1, -1, e, t, -i, s, r, 5),
			this.setIndex(c),
			this.setAttribute('position', new Kt(l, 3)),
			this.setAttribute('normal', new Kt(u, 3)),
			this.setAttribute('uv', new Kt(h, 2));
		function m(g, _, f, y, v, A, S, T, R, D, E) {
			const x = A / R,
				z = S / D,
				B = A / 2,
				W = S / 2,
				F = T / 2,
				X = R + 1,
				Z = D + 1;
			let Q = 0,
				he = 0;
			const ie = new w();
			for (let oe = 0; oe < Z; oe++) {
				const de = oe * z - W;
				for (let Te = 0; Te < X; Te++) {
					const ee = Te * x - B;
					(ie[g] = ee * y),
						(ie[_] = de * v),
						(ie[f] = F),
						l.push(ie.x, ie.y, ie.z),
						(ie[g] = 0),
						(ie[_] = 0),
						(ie[f] = T > 0 ? 1 : -1),
						u.push(ie.x, ie.y, ie.z),
						h.push(Te / R),
						h.push(1 - oe / D),
						(Q += 1);
				}
			}
			for (let oe = 0; oe < D; oe++)
				for (let de = 0; de < R; de++) {
					const Te = d + de + X * oe,
						ee = d + de + X * (oe + 1),
						ae = d + (de + 1) + X * (oe + 1),
						Oe = d + (de + 1) + X * oe;
					c.push(Te, ee, Oe), c.push(ee, ae, Oe), (he += 6);
				}
			a.addGroup(p, he, E), (p += he), (d += Q);
		}
	}
	copy(e) {
		return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
	}
	static fromJSON(e) {
		return new Qr(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
	}
}
function _a(n) {
	const e = {};
	for (const t in n) {
		e[t] = {};
		for (const i in n[t]) {
			const s = n[t][i];
			s &&
			(s.isColor ||
				s.isMatrix3 ||
				s.isMatrix4 ||
				s.isVector2 ||
				s.isVector3 ||
				s.isVector4 ||
				s.isTexture ||
				s.isQuaternion)
				? s.isRenderTargetTexture
					? (console.warn(
							'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().'
					  ),
					  (e[t][i] = null))
					: (e[t][i] = s.clone())
				: Array.isArray(s)
				? (e[t][i] = s.slice())
				: (e[t][i] = s);
		}
	}
	return e;
}
function Wn(n) {
	const e = {};
	for (let t = 0; t < n.length; t++) {
		const i = _a(n[t]);
		for (const s in i) e[s] = i[s];
	}
	return e;
}
function PT(n) {
	const e = [];
	for (let t = 0; t < n.length; t++) e.push(n[t].clone());
	return e;
}
function Fb(n) {
	return n.getRenderTarget() === null ? n.outputColorSpace : Mt.workingColorSpace;
}
const Bb = {clone: _a, merge: Wn};
var NT = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,
	IT = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class ti extends An {
	constructor(e) {
		super(),
			(this.isShaderMaterial = !0),
			(this.type = 'ShaderMaterial'),
			(this.defines = {}),
			(this.uniforms = {}),
			(this.uniformsGroups = []),
			(this.vertexShader = NT),
			(this.fragmentShader = IT),
			(this.linewidth = 1),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.fog = !1),
			(this.lights = !1),
			(this.clipping = !1),
			(this.forceSinglePass = !0),
			(this.extensions = {derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1}),
			(this.defaultAttributeValues = {color: [1, 1, 1], uv: [0, 0], uv1: [0, 0]}),
			(this.index0AttributeName = void 0),
			(this.uniformsNeedUpdate = !1),
			(this.glslVersion = null),
			e !== void 0 && this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.fragmentShader = e.fragmentShader),
			(this.vertexShader = e.vertexShader),
			(this.uniforms = _a(e.uniforms)),
			(this.uniformsGroups = PT(e.uniformsGroups)),
			(this.defines = Object.assign({}, e.defines)),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.fog = e.fog),
			(this.lights = e.lights),
			(this.clipping = e.clipping),
			(this.extensions = Object.assign({}, e.extensions)),
			(this.glslVersion = e.glslVersion),
			this
		);
	}
	toJSON(e) {
		const t = super.toJSON(e);
		(t.glslVersion = this.glslVersion), (t.uniforms = {});
		for (const s in this.uniforms) {
			const o = this.uniforms[s].value;
			o && o.isTexture
				? (t.uniforms[s] = {type: 't', value: o.toJSON(e).uuid})
				: o && o.isColor
				? (t.uniforms[s] = {type: 'c', value: o.getHex()})
				: o && o.isVector2
				? (t.uniforms[s] = {type: 'v2', value: o.toArray()})
				: o && o.isVector3
				? (t.uniforms[s] = {type: 'v3', value: o.toArray()})
				: o && o.isVector4
				? (t.uniforms[s] = {type: 'v4', value: o.toArray()})
				: o && o.isMatrix3
				? (t.uniforms[s] = {type: 'm3', value: o.toArray()})
				: o && o.isMatrix4
				? (t.uniforms[s] = {type: 'm4', value: o.toArray()})
				: (t.uniforms[s] = {value: o});
		}
		Object.keys(this.defines).length > 0 && (t.defines = this.defines),
			(t.vertexShader = this.vertexShader),
			(t.fragmentShader = this.fragmentShader),
			(t.lights = this.lights),
			(t.clipping = this.clipping);
		const i = {};
		for (const s in this.extensions) this.extensions[s] === !0 && (i[s] = !0);
		return Object.keys(i).length > 0 && (t.extensions = i), t;
	}
}
class kb extends kt {
	constructor() {
		super(),
			(this.isCamera = !0),
			(this.type = 'Camera'),
			(this.matrixWorldInverse = new Qe()),
			(this.projectionMatrix = new Qe()),
			(this.projectionMatrixInverse = new Qe()),
			(this.coordinateSystem = Ts);
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			this.matrixWorldInverse.copy(e.matrixWorldInverse),
			this.projectionMatrix.copy(e.projectionMatrix),
			this.projectionMatrixInverse.copy(e.projectionMatrixInverse),
			(this.coordinateSystem = e.coordinateSystem),
			this
		);
	}
	getWorldDirection(e) {
		return super.getWorldDirection(e).negate();
	}
	updateMatrixWorld(e) {
		super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
	}
	updateWorldMatrix(e, t) {
		super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
class Rn extends kb {
	constructor(e = 50, t = 1, i = 0.1, s = 2e3) {
		super(),
			(this.isPerspectiveCamera = !0),
			(this.type = 'PerspectiveCamera'),
			(this.fov = e),
			(this.zoom = 1),
			(this.near = i),
			(this.far = s),
			(this.focus = 10),
			(this.aspect = t),
			(this.view = null),
			(this.filmGauge = 35),
			(this.filmOffset = 0),
			this.updateProjectionMatrix();
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			(this.fov = e.fov),
			(this.zoom = e.zoom),
			(this.near = e.near),
			(this.far = e.far),
			(this.focus = e.focus),
			(this.aspect = e.aspect),
			(this.view = e.view === null ? null : Object.assign({}, e.view)),
			(this.filmGauge = e.filmGauge),
			(this.filmOffset = e.filmOffset),
			this
		);
	}
	setFocalLength(e) {
		const t = (0.5 * this.getFilmHeight()) / e;
		(this.fov = fa * 2 * Math.atan(t)), this.updateProjectionMatrix();
	}
	getFocalLength() {
		const e = Math.tan(mc * 0.5 * this.fov);
		return (0.5 * this.getFilmHeight()) / e;
	}
	getEffectiveFOV() {
		return fa * 2 * Math.atan(Math.tan(mc * 0.5 * this.fov) / this.zoom);
	}
	getFilmWidth() {
		return this.filmGauge * Math.min(this.aspect, 1);
	}
	getFilmHeight() {
		return this.filmGauge / Math.max(this.aspect, 1);
	}
	setViewOffset(e, t, i, s, r, o) {
		(this.aspect = e / t),
			this.view === null &&
				(this.view = {enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1}),
			(this.view.enabled = !0),
			(this.view.fullWidth = e),
			(this.view.fullHeight = t),
			(this.view.offsetX = i),
			(this.view.offsetY = s),
			(this.view.width = r),
			(this.view.height = o),
			this.updateProjectionMatrix();
	}
	clearViewOffset() {
		this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
	}
	updateProjectionMatrix() {
		const e = this.near;
		let t = (e * Math.tan(mc * 0.5 * this.fov)) / this.zoom,
			i = 2 * t,
			s = this.aspect * i,
			r = -0.5 * s;
		const o = this.view;
		if (this.view !== null && this.view.enabled) {
			const c = o.fullWidth,
				l = o.fullHeight;
			(r += (o.offsetX * s) / c), (t -= (o.offsetY * i) / l), (s *= o.width / c), (i *= o.height / l);
		}
		const a = this.filmOffset;
		a !== 0 && (r += (e * a) / this.getFilmWidth()),
			this.projectionMatrix.makePerspective(r, r + s, t, t - i, e, this.far, this.coordinateSystem),
			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
	}
	toJSON(e) {
		const t = super.toJSON(e);
		return (
			(t.object.fov = this.fov),
			(t.object.zoom = this.zoom),
			(t.object.near = this.near),
			(t.object.far = this.far),
			(t.object.focus = this.focus),
			(t.object.aspect = this.aspect),
			this.view !== null && (t.object.view = Object.assign({}, this.view)),
			(t.object.filmGauge = this.filmGauge),
			(t.object.filmOffset = this.filmOffset),
			t
		);
	}
}
const Mo = -90,
	To = 1;
class DT extends kt {
	constructor(e, t, i) {
		super(),
			(this.type = 'CubeCamera'),
			(this.renderTarget = i),
			(this.coordinateSystem = null),
			(this.activeMipmapLevel = 0);
		const s = new Rn(Mo, To, e, t);
		(s.layers = this.layers), this.add(s);
		const r = new Rn(Mo, To, e, t);
		(r.layers = this.layers), this.add(r);
		const o = new Rn(Mo, To, e, t);
		(o.layers = this.layers), this.add(o);
		const a = new Rn(Mo, To, e, t);
		(a.layers = this.layers), this.add(a);
		const c = new Rn(Mo, To, e, t);
		(c.layers = this.layers), this.add(c);
		const l = new Rn(Mo, To, e, t);
		(l.layers = this.layers), this.add(l);
	}
	updateCoordinateSystem() {
		const e = this.coordinateSystem,
			t = this.children.concat(),
			[i, s, r, o, a, c] = t;
		for (const l of t) this.remove(l);
		if (e === Ts)
			i.up.set(0, 1, 0),
				i.lookAt(1, 0, 0),
				s.up.set(0, 1, 0),
				s.lookAt(-1, 0, 0),
				r.up.set(0, 0, -1),
				r.lookAt(0, 1, 0),
				o.up.set(0, 0, 1),
				o.lookAt(0, -1, 0),
				a.up.set(0, 1, 0),
				a.lookAt(0, 0, 1),
				c.up.set(0, 1, 0),
				c.lookAt(0, 0, -1);
		else if (e === qu)
			i.up.set(0, -1, 0),
				i.lookAt(-1, 0, 0),
				s.up.set(0, -1, 0),
				s.lookAt(1, 0, 0),
				r.up.set(0, 0, 1),
				r.lookAt(0, 1, 0),
				o.up.set(0, 0, -1),
				o.lookAt(0, -1, 0),
				a.up.set(0, -1, 0),
				a.lookAt(0, 0, 1),
				c.up.set(0, -1, 0),
				c.lookAt(0, 0, -1);
		else throw new Error('THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + e);
		for (const l of t) this.add(l), l.updateMatrixWorld();
	}
	update(e, t) {
		this.parent === null && this.updateMatrixWorld();
		const {renderTarget: i, activeMipmapLevel: s} = this;
		this.coordinateSystem !== e.coordinateSystem &&
			((this.coordinateSystem = e.coordinateSystem), this.updateCoordinateSystem());
		const [r, o, a, c, l, u] = this.children,
			h = e.getRenderTarget(),
			d = e.getActiveCubeFace(),
			p = e.getActiveMipmapLevel(),
			m = e.xr.enabled;
		e.xr.enabled = !1;
		const g = i.texture.generateMipmaps;
		(i.texture.generateMipmaps = !1),
			e.setRenderTarget(i, 0, s),
			e.render(t, r),
			e.setRenderTarget(i, 1, s),
			e.render(t, o),
			e.setRenderTarget(i, 2, s),
			e.render(t, a),
			e.setRenderTarget(i, 3, s),
			e.render(t, c),
			e.setRenderTarget(i, 4, s),
			e.render(t, l),
			(i.texture.generateMipmaps = g),
			e.setRenderTarget(i, 5, s),
			e.render(t, u),
			e.setRenderTarget(h, d, p),
			(e.xr.enabled = m),
			(i.texture.needsPMREMUpdate = !0);
	}
}
class Vb extends In {
	constructor(e, t, i, s, r, o, a, c, l, u) {
		(e = e !== void 0 ? e : []),
			(t = t !== void 0 ? t : Yr),
			super(e, t, i, s, r, o, a, c, l, u),
			(this.isCubeTexture = !0),
			(this.flipY = !1);
	}
	get images() {
		return this.image;
	}
	set images(e) {
		this.image = e;
	}
}
class LT extends Gi {
	constructor(e = 1, t = {}) {
		super(e, e, t), (this.isWebGLCubeRenderTarget = !0);
		const i = {width: e, height: e, depth: 1},
			s = [i, i, i, i, i, i];
		t.encoding !== void 0 &&
			(vc('THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.'),
			(t.colorSpace = t.encoding === jr ? en : tn)),
			(this.texture = new Vb(
				s,
				t.mapping,
				t.wrapS,
				t.wrapT,
				t.magFilter,
				t.minFilter,
				t.format,
				t.type,
				t.anisotropy,
				t.colorSpace
			)),
			(this.texture.isRenderTargetTexture = !0),
			(this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1),
			(this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : Yt);
	}
	fromEquirectangularTexture(e, t) {
		(this.texture.type = t.type),
			(this.texture.colorSpace = t.colorSpace),
			(this.texture.generateMipmaps = t.generateMipmaps),
			(this.texture.minFilter = t.minFilter),
			(this.texture.magFilter = t.magFilter);
		const i = {
				uniforms: {tEquirect: {value: null}},
				vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
				fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`,
			},
			s = new Qr(5, 5, 5),
			r = new ti({
				name: 'CubemapFromEquirect',
				uniforms: _a(i.uniforms),
				vertexShader: i.vertexShader,
				fragmentShader: i.fragmentShader,
				side: fn,
				blending: Ps,
			});
		r.uniforms.tEquirect.value = t;
		const o = new On(s, r),
			a = t.minFilter;
		return (
			t.minFilter === pa && (t.minFilter = Yt),
			new DT(1, 10, this).update(e, o),
			(t.minFilter = a),
			o.geometry.dispose(),
			o.material.dispose(),
			this
		);
	}
	clear(e, t, i, s) {
		const r = e.getRenderTarget();
		for (let o = 0; o < 6; o++) e.setRenderTarget(this, o), e.clear(t, i, s);
		e.setRenderTarget(r);
	}
}
const Md = new w(),
	UT = new w(),
	FT = new ut();
class es {
	constructor(e = new w(1, 0, 0), t = 0) {
		(this.isPlane = !0), (this.normal = e), (this.constant = t);
	}
	set(e, t) {
		return this.normal.copy(e), (this.constant = t), this;
	}
	setComponents(e, t, i, s) {
		return this.normal.set(e, t, i), (this.constant = s), this;
	}
	setFromNormalAndCoplanarPoint(e, t) {
		return this.normal.copy(e), (this.constant = -t.dot(this.normal)), this;
	}
	setFromCoplanarPoints(e, t, i) {
		const s = Md.subVectors(i, t).cross(UT.subVectors(e, t)).normalize();
		return this.setFromNormalAndCoplanarPoint(s, e), this;
	}
	copy(e) {
		return this.normal.copy(e.normal), (this.constant = e.constant), this;
	}
	normalize() {
		const e = 1 / this.normal.length();
		return this.normal.multiplyScalar(e), (this.constant *= e), this;
	}
	negate() {
		return (this.constant *= -1), this.normal.negate(), this;
	}
	distanceToPoint(e) {
		return this.normal.dot(e) + this.constant;
	}
	distanceToSphere(e) {
		return this.distanceToPoint(e.center) - e.radius;
	}
	projectPoint(e, t) {
		return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
	}
	intersectLine(e, t) {
		const i = e.delta(Md),
			s = this.normal.dot(i);
		if (s === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
		const r = -(e.start.dot(this.normal) + this.constant) / s;
		return r < 0 || r > 1 ? null : t.copy(e.start).addScaledVector(i, r);
	}
	intersectsLine(e) {
		const t = this.distanceToPoint(e.start),
			i = this.distanceToPoint(e.end);
		return (t < 0 && i > 0) || (i < 0 && t > 0);
	}
	intersectsBox(e) {
		return e.intersectsPlane(this);
	}
	intersectsSphere(e) {
		return e.intersectsPlane(this);
	}
	coplanarPoint(e) {
		return e.copy(this.normal).multiplyScalar(-this.constant);
	}
	applyMatrix4(e, t) {
		const i = t || FT.getNormalMatrix(e),
			s = this.coplanarPoint(Md).applyMatrix4(e),
			r = this.normal.applyMatrix3(i).normalize();
		return (this.constant = -s.dot(r)), this;
	}
	translate(e) {
		return (this.constant -= e.dot(this.normal)), this;
	}
	equals(e) {
		return e.normal.equals(this.normal) && e.constant === this.constant;
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
const wr = new Fs(),
	Ml = new w();
class g_ {
	constructor(e = new es(), t = new es(), i = new es(), s = new es(), r = new es(), o = new es()) {
		this.planes = [e, t, i, s, r, o];
	}
	set(e, t, i, s, r, o) {
		const a = this.planes;
		return a[0].copy(e), a[1].copy(t), a[2].copy(i), a[3].copy(s), a[4].copy(r), a[5].copy(o), this;
	}
	copy(e) {
		const t = this.planes;
		for (let i = 0; i < 6; i++) t[i].copy(e.planes[i]);
		return this;
	}
	setFromProjectionMatrix(e, t = Ts) {
		const i = this.planes,
			s = e.elements,
			r = s[0],
			o = s[1],
			a = s[2],
			c = s[3],
			l = s[4],
			u = s[5],
			h = s[6],
			d = s[7],
			p = s[8],
			m = s[9],
			g = s[10],
			_ = s[11],
			f = s[12],
			y = s[13],
			v = s[14],
			A = s[15];
		if (
			(i[0].setComponents(c - r, d - l, _ - p, A - f).normalize(),
			i[1].setComponents(c + r, d + l, _ + p, A + f).normalize(),
			i[2].setComponents(c + o, d + u, _ + m, A + y).normalize(),
			i[3].setComponents(c - o, d - u, _ - m, A - y).normalize(),
			i[4].setComponents(c - a, d - h, _ - g, A - v).normalize(),
			t === Ts)
		)
			i[5].setComponents(c + a, d + h, _ + g, A + v).normalize();
		else if (t === qu) i[5].setComponents(a, h, g, v).normalize();
		else throw new Error('THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + t);
		return this;
	}
	intersectsObject(e) {
		if (e.boundingSphere !== void 0)
			e.boundingSphere === null && e.computeBoundingSphere(),
				wr.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
		else {
			const t = e.geometry;
			t.boundingSphere === null && t.computeBoundingSphere(),
				wr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
		}
		return this.intersectsSphere(wr);
	}
	intersectsSprite(e) {
		return (
			wr.center.set(0, 0, 0),
			(wr.radius = 0.7071067811865476),
			wr.applyMatrix4(e.matrixWorld),
			this.intersectsSphere(wr)
		);
	}
	intersectsSphere(e) {
		const t = this.planes,
			i = e.center,
			s = -e.radius;
		for (let r = 0; r < 6; r++) if (t[r].distanceToPoint(i) < s) return !1;
		return !0;
	}
	intersectsBox(e) {
		const t = this.planes;
		for (let i = 0; i < 6; i++) {
			const s = t[i];
			if (
				((Ml.x = s.normal.x > 0 ? e.max.x : e.min.x),
				(Ml.y = s.normal.y > 0 ? e.max.y : e.min.y),
				(Ml.z = s.normal.z > 0 ? e.max.z : e.min.z),
				s.distanceToPoint(Ml) < 0)
			)
				return !1;
		}
		return !0;
	}
	containsPoint(e) {
		const t = this.planes;
		for (let i = 0; i < 6; i++) if (t[i].distanceToPoint(e) < 0) return !1;
		return !0;
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
function Gb() {
	let n = null,
		e = !1,
		t = null,
		i = null;
	function s(r, o) {
		t(r, o), (i = n.requestAnimationFrame(s));
	}
	return {
		start: function () {
			e !== !0 && t !== null && ((i = n.requestAnimationFrame(s)), (e = !0));
		},
		stop: function () {
			n.cancelAnimationFrame(i), (e = !1);
		},
		setAnimationLoop: function (r) {
			t = r;
		},
		setContext: function (r) {
			n = r;
		},
	};
}
function BT(n, e) {
	const t = e.isWebGL2,
		i = new WeakMap();
	function s(l, u) {
		const h = l.array,
			d = l.usage,
			p = h.byteLength,
			m = n.createBuffer();
		n.bindBuffer(u, m), n.bufferData(u, h, d), l.onUploadCallback();
		let g;
		if (h instanceof Float32Array) g = n.FLOAT;
		else if (h instanceof Uint16Array)
			if (l.isFloat16BufferAttribute)
				if (t) g = n.HALF_FLOAT;
				else throw new Error('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');
			else g = n.UNSIGNED_SHORT;
		else if (h instanceof Int16Array) g = n.SHORT;
		else if (h instanceof Uint32Array) g = n.UNSIGNED_INT;
		else if (h instanceof Int32Array) g = n.INT;
		else if (h instanceof Int8Array) g = n.BYTE;
		else if (h instanceof Uint8Array) g = n.UNSIGNED_BYTE;
		else if (h instanceof Uint8ClampedArray) g = n.UNSIGNED_BYTE;
		else throw new Error('THREE.WebGLAttributes: Unsupported buffer data format: ' + h);
		return {buffer: m, type: g, bytesPerElement: h.BYTES_PER_ELEMENT, version: l.version, size: p};
	}
	function r(l, u, h) {
		const d = u.array,
			p = u._updateRange,
			m = u.updateRanges;
		if ((n.bindBuffer(h, l), p.count === -1 && m.length === 0 && n.bufferSubData(h, 0, d), m.length !== 0)) {
			for (let g = 0, _ = m.length; g < _; g++) {
				const f = m[g];
				t
					? n.bufferSubData(h, f.start * d.BYTES_PER_ELEMENT, d, f.start, f.count)
					: n.bufferSubData(h, f.start * d.BYTES_PER_ELEMENT, d.subarray(f.start, f.start + f.count));
			}
			u.clearUpdateRanges();
		}
		p.count !== -1 &&
			(t
				? n.bufferSubData(h, p.offset * d.BYTES_PER_ELEMENT, d, p.offset, p.count)
				: n.bufferSubData(h, p.offset * d.BYTES_PER_ELEMENT, d.subarray(p.offset, p.offset + p.count)),
			(p.count = -1)),
			u.onUploadCallback();
	}
	function o(l) {
		return l.isInterleavedBufferAttribute && (l = l.data), i.get(l);
	}
	function a(l) {
		l.isInterleavedBufferAttribute && (l = l.data);
		const u = i.get(l);
		u && (n.deleteBuffer(u.buffer), i.delete(l));
	}
	function c(l, u) {
		if (l.isGLBufferAttribute) {
			const d = i.get(l);
			(!d || d.version < l.version) &&
				i.set(l, {buffer: l.buffer, type: l.type, bytesPerElement: l.elementSize, version: l.version});
			return;
		}
		l.isInterleavedBufferAttribute && (l = l.data);
		const h = i.get(l);
		if (h === void 0) i.set(l, s(l, u));
		else if (h.version < l.version) {
			if (h.size !== l.array.byteLength)
				throw new Error(
					"THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported."
				);
			r(h.buffer, l, u), (h.version = l.version);
		}
	}
	return {get: o, remove: a, update: c};
}
class xh extends qn {
	constructor(e = 1, t = 1, i = 1, s = 1) {
		super(),
			(this.type = 'PlaneGeometry'),
			(this.parameters = {width: e, height: t, widthSegments: i, heightSegments: s});
		const r = e / 2,
			o = t / 2,
			a = Math.floor(i),
			c = Math.floor(s),
			l = a + 1,
			u = c + 1,
			h = e / a,
			d = t / c,
			p = [],
			m = [],
			g = [],
			_ = [];
		for (let f = 0; f < u; f++) {
			const y = f * d - o;
			for (let v = 0; v < l; v++) {
				const A = v * h - r;
				m.push(A, -y, 0), g.push(0, 0, 1), _.push(v / a), _.push(1 - f / c);
			}
		}
		for (let f = 0; f < c; f++)
			for (let y = 0; y < a; y++) {
				const v = y + l * f,
					A = y + l * (f + 1),
					S = y + 1 + l * (f + 1),
					T = y + 1 + l * f;
				p.push(v, A, T), p.push(A, S, T);
			}
		this.setIndex(p),
			this.setAttribute('position', new Kt(m, 3)),
			this.setAttribute('normal', new Kt(g, 3)),
			this.setAttribute('uv', new Kt(_, 2));
	}
	copy(e) {
		return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
	}
	static fromJSON(e) {
		return new xh(e.width, e.height, e.widthSegments, e.heightSegments);
	}
}
var kT = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,
	VT = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,
	GT = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,
	zT = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,
	HT = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,
	WT = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,
	jT = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,
	XT = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,
	$T = `#ifdef USE_BATCHING
	attribute float batchId;
	uniform highp sampler2D batchingTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,
	qT = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( batchId );
#endif`,
	YT = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,
	KT = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,
	ZT = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,
	QT = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,
	JT = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,
	eR = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,
	tR = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,
	nR = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,
	iR = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,
	sR = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,
	rR = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,
	oR = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,
	aR = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,
	cR = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,
	lR = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,
	uR = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,
	hR = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,
	dR = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,
	pR = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,
	fR = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,
	_R = 'gl_FragColor = linearToOutputTexel( gl_FragColor );',
	mR = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`,
	gR = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,
	vR = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,
	ER = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,
	CR = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,
	yR = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,
	bR = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,
	SR = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`,
	AR = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,
	xR = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,
	MR = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,
	TR = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,
	RR = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,
	wR = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,
	OR = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,
	PR = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,
	NR = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,
	IR = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,
	DR = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,
	LR = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,
	UR = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,
	FR = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,
	BR = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,
	kR = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,
	VR = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,
	GR = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,
	zR = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,
	HR = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,
	WR = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,
	jR = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,
	XR = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,
	$R = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`,
	qR = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,
	YR = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,
	KR = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,
	ZR = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,
	QR = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,
	JR = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,
	ew = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,
	tw = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,
	nw = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,
	iw = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,
	sw = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,
	rw = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,
	ow = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,
	aw = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,
	cw = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,
	lw = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,
	uw = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,
	hw = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,
	dw = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,
	pw = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,
	fw = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,
	_w = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,
	mw = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,
	gw = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,
	vw = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,
	Ew = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,
	Cw = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,
	yw = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,
	bw = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,
	Sw = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,
	Aw = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,
	xw = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,
	Mw = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,
	Tw = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,
	Rw = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,
	ww = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,
	Ow = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,
	Pw = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,
	Nw = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,
	Iw = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,
	Dw = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,
	Lw = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,
	Uw = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,
	Fw = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const Bw = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,
	kw = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
	Vw = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,
	Gw = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
	zw = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,
	Hw = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
	Ww = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,
	jw = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,
	Xw = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,
	$w = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,
	qw = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,
	Yw = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,
	Kw = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,
	Zw = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,
	Qw = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,
	Jw = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
	eO = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
	tO = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
	nO = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,
	iO = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
	sO = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,
	rO = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,
	oO = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
	aO = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
	cO = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,
	lO = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
	uO = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
	hO = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,
	dO = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,
	pO = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,
	fO = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,
	_O = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,
	mO = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,
	gO = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,
	lt = {
		alphahash_fragment: kT,
		alphahash_pars_fragment: VT,
		alphamap_fragment: GT,
		alphamap_pars_fragment: zT,
		alphatest_fragment: HT,
		alphatest_pars_fragment: WT,
		aomap_fragment: jT,
		aomap_pars_fragment: XT,
		batching_pars_vertex: $T,
		batching_vertex: qT,
		begin_vertex: YT,
		beginnormal_vertex: KT,
		bsdfs: ZT,
		iridescence_fragment: QT,
		bumpmap_pars_fragment: JT,
		clipping_planes_fragment: eR,
		clipping_planes_pars_fragment: tR,
		clipping_planes_pars_vertex: nR,
		clipping_planes_vertex: iR,
		color_fragment: sR,
		color_pars_fragment: rR,
		color_pars_vertex: oR,
		color_vertex: aR,
		common: cR,
		cube_uv_reflection_fragment: lR,
		defaultnormal_vertex: uR,
		displacementmap_pars_vertex: hR,
		displacementmap_vertex: dR,
		emissivemap_fragment: pR,
		emissivemap_pars_fragment: fR,
		colorspace_fragment: _R,
		colorspace_pars_fragment: mR,
		envmap_fragment: gR,
		envmap_common_pars_fragment: vR,
		envmap_pars_fragment: ER,
		envmap_pars_vertex: CR,
		envmap_physical_pars_fragment: NR,
		envmap_vertex: yR,
		fog_vertex: bR,
		fog_pars_vertex: SR,
		fog_fragment: AR,
		fog_pars_fragment: xR,
		gradientmap_pars_fragment: MR,
		lightmap_fragment: TR,
		lightmap_pars_fragment: RR,
		lights_lambert_fragment: wR,
		lights_lambert_pars_fragment: OR,
		lights_pars_begin: PR,
		lights_toon_fragment: IR,
		lights_toon_pars_fragment: DR,
		lights_phong_fragment: LR,
		lights_phong_pars_fragment: UR,
		lights_physical_fragment: FR,
		lights_physical_pars_fragment: BR,
		lights_fragment_begin: kR,
		lights_fragment_maps: VR,
		lights_fragment_end: GR,
		logdepthbuf_fragment: zR,
		logdepthbuf_pars_fragment: HR,
		logdepthbuf_pars_vertex: WR,
		logdepthbuf_vertex: jR,
		map_fragment: XR,
		map_pars_fragment: $R,
		map_particle_fragment: qR,
		map_particle_pars_fragment: YR,
		metalnessmap_fragment: KR,
		metalnessmap_pars_fragment: ZR,
		morphcolor_vertex: QR,
		morphnormal_vertex: JR,
		morphtarget_pars_vertex: ew,
		morphtarget_vertex: tw,
		normal_fragment_begin: nw,
		normal_fragment_maps: iw,
		normal_pars_fragment: sw,
		normal_pars_vertex: rw,
		normal_vertex: ow,
		normalmap_pars_fragment: aw,
		clearcoat_normal_fragment_begin: cw,
		clearcoat_normal_fragment_maps: lw,
		clearcoat_pars_fragment: uw,
		iridescence_pars_fragment: hw,
		opaque_fragment: dw,
		packing: pw,
		premultiplied_alpha_fragment: fw,
		project_vertex: _w,
		dithering_fragment: mw,
		dithering_pars_fragment: gw,
		roughnessmap_fragment: vw,
		roughnessmap_pars_fragment: Ew,
		shadowmap_pars_fragment: Cw,
		shadowmap_pars_vertex: yw,
		shadowmap_vertex: bw,
		shadowmask_pars_fragment: Sw,
		skinbase_vertex: Aw,
		skinning_pars_vertex: xw,
		skinning_vertex: Mw,
		skinnormal_vertex: Tw,
		specularmap_fragment: Rw,
		specularmap_pars_fragment: ww,
		tonemapping_fragment: Ow,
		tonemapping_pars_fragment: Pw,
		transmission_fragment: Nw,
		transmission_pars_fragment: Iw,
		uv_pars_fragment: Dw,
		uv_pars_vertex: Lw,
		uv_vertex: Uw,
		worldpos_vertex: Fw,
		background_vert: Bw,
		background_frag: kw,
		backgroundCube_vert: Vw,
		backgroundCube_frag: Gw,
		cube_vert: zw,
		cube_frag: Hw,
		depth_vert: Ww,
		depth_frag: jw,
		distanceRGBA_vert: Xw,
		distanceRGBA_frag: $w,
		equirect_vert: qw,
		equirect_frag: Yw,
		linedashed_vert: Kw,
		linedashed_frag: Zw,
		meshbasic_vert: Qw,
		meshbasic_frag: Jw,
		meshlambert_vert: eO,
		meshlambert_frag: tO,
		meshmatcap_vert: nO,
		meshmatcap_frag: iO,
		meshnormal_vert: sO,
		meshnormal_frag: rO,
		meshphong_vert: oO,
		meshphong_frag: aO,
		meshphysical_vert: cO,
		meshphysical_frag: lO,
		meshtoon_vert: uO,
		meshtoon_frag: hO,
		points_vert: dO,
		points_frag: pO,
		shadow_vert: fO,
		shadow_frag: _O,
		sprite_vert: mO,
		sprite_frag: gO,
	},
	we = {
		common: {
			diffuse: {value: new Ee(16777215)},
			opacity: {value: 1},
			map: {value: null},
			mapTransform: {value: new ut()},
			alphaMap: {value: null},
			alphaMapTransform: {value: new ut()},
			alphaTest: {value: 0},
		},
		specularmap: {specularMap: {value: null}, specularMapTransform: {value: new ut()}},
		envmap: {
			envMap: {value: null},
			flipEnvMap: {value: -1},
			reflectivity: {value: 1},
			ior: {value: 1.5},
			refractionRatio: {value: 0.98},
		},
		aomap: {aoMap: {value: null}, aoMapIntensity: {value: 1}, aoMapTransform: {value: new ut()}},
		lightmap: {lightMap: {value: null}, lightMapIntensity: {value: 1}, lightMapTransform: {value: new ut()}},
		bumpmap: {bumpMap: {value: null}, bumpMapTransform: {value: new ut()}, bumpScale: {value: 1}},
		normalmap: {
			normalMap: {value: null},
			normalMapTransform: {value: new ut()},
			normalScale: {value: new re(1, 1)},
		},
		displacementmap: {
			displacementMap: {value: null},
			displacementMapTransform: {value: new ut()},
			displacementScale: {value: 1},
			displacementBias: {value: 0},
		},
		emissivemap: {emissiveMap: {value: null}, emissiveMapTransform: {value: new ut()}},
		metalnessmap: {metalnessMap: {value: null}, metalnessMapTransform: {value: new ut()}},
		roughnessmap: {roughnessMap: {value: null}, roughnessMapTransform: {value: new ut()}},
		gradientmap: {gradientMap: {value: null}},
		fog: {
			fogDensity: {value: 25e-5},
			fogNear: {value: 1},
			fogFar: {value: 2e3},
			fogColor: {value: new Ee(16777215)},
		},
		lights: {
			ambientLightColor: {value: []},
			lightProbe: {value: []},
			directionalLights: {value: [], properties: {direction: {}, color: {}}},
			directionalLightShadows: {
				value: [],
				properties: {shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}},
			},
			directionalShadowMap: {value: []},
			directionalShadowMatrix: {value: []},
			spotLights: {
				value: [],
				properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {},
				},
			},
			spotLightShadows: {
				value: [],
				properties: {shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}},
			},
			spotLightMap: {value: []},
			spotShadowMap: {value: []},
			spotLightMatrix: {value: []},
			pointLights: {value: [], properties: {color: {}, position: {}, decay: {}, distance: {}}},
			pointLightShadows: {
				value: [],
				properties: {
					shadowBias: {},
					shadowNormalBias: {},
					shadowRadius: {},
					shadowMapSize: {},
					shadowCameraNear: {},
					shadowCameraFar: {},
				},
			},
			pointShadowMap: {value: []},
			pointShadowMatrix: {value: []},
			hemisphereLights: {value: [], properties: {direction: {}, skyColor: {}, groundColor: {}}},
			rectAreaLights: {value: [], properties: {color: {}, position: {}, width: {}, height: {}}},
			ltc_1: {value: null},
			ltc_2: {value: null},
		},
		points: {
			diffuse: {value: new Ee(16777215)},
			opacity: {value: 1},
			size: {value: 1},
			scale: {value: 1},
			map: {value: null},
			alphaMap: {value: null},
			alphaMapTransform: {value: new ut()},
			alphaTest: {value: 0},
			uvTransform: {value: new ut()},
		},
		sprite: {
			diffuse: {value: new Ee(16777215)},
			opacity: {value: 1},
			center: {value: new re(0.5, 0.5)},
			rotation: {value: 0},
			map: {value: null},
			mapTransform: {value: new ut()},
			alphaMap: {value: null},
			alphaMapTransform: {value: new ut()},
			alphaTest: {value: 0},
		},
	},
	ts = {
		basic: {
			uniforms: Wn([we.common, we.specularmap, we.envmap, we.aomap, we.lightmap, we.fog]),
			vertexShader: lt.meshbasic_vert,
			fragmentShader: lt.meshbasic_frag,
		},
		lambert: {
			uniforms: Wn([
				we.common,
				we.specularmap,
				we.envmap,
				we.aomap,
				we.lightmap,
				we.emissivemap,
				we.bumpmap,
				we.normalmap,
				we.displacementmap,
				we.fog,
				we.lights,
				{emissive: {value: new Ee(0)}},
			]),
			vertexShader: lt.meshlambert_vert,
			fragmentShader: lt.meshlambert_frag,
		},
		phong: {
			uniforms: Wn([
				we.common,
				we.specularmap,
				we.envmap,
				we.aomap,
				we.lightmap,
				we.emissivemap,
				we.bumpmap,
				we.normalmap,
				we.displacementmap,
				we.fog,
				we.lights,
				{emissive: {value: new Ee(0)}, specular: {value: new Ee(1118481)}, shininess: {value: 30}},
			]),
			vertexShader: lt.meshphong_vert,
			fragmentShader: lt.meshphong_frag,
		},
		standard: {
			uniforms: Wn([
				we.common,
				we.envmap,
				we.aomap,
				we.lightmap,
				we.emissivemap,
				we.bumpmap,
				we.normalmap,
				we.displacementmap,
				we.roughnessmap,
				we.metalnessmap,
				we.fog,
				we.lights,
				{
					emissive: {value: new Ee(0)},
					roughness: {value: 1},
					metalness: {value: 0},
					envMapIntensity: {value: 1},
				},
			]),
			vertexShader: lt.meshphysical_vert,
			fragmentShader: lt.meshphysical_frag,
		},
		toon: {
			uniforms: Wn([
				we.common,
				we.aomap,
				we.lightmap,
				we.emissivemap,
				we.bumpmap,
				we.normalmap,
				we.displacementmap,
				we.gradientmap,
				we.fog,
				we.lights,
				{emissive: {value: new Ee(0)}},
			]),
			vertexShader: lt.meshtoon_vert,
			fragmentShader: lt.meshtoon_frag,
		},
		matcap: {
			uniforms: Wn([we.common, we.bumpmap, we.normalmap, we.displacementmap, we.fog, {matcap: {value: null}}]),
			vertexShader: lt.meshmatcap_vert,
			fragmentShader: lt.meshmatcap_frag,
		},
		points: {uniforms: Wn([we.points, we.fog]), vertexShader: lt.points_vert, fragmentShader: lt.points_frag},
		dashed: {
			uniforms: Wn([we.common, we.fog, {scale: {value: 1}, dashSize: {value: 1}, totalSize: {value: 2}}]),
			vertexShader: lt.linedashed_vert,
			fragmentShader: lt.linedashed_frag,
		},
		depth: {
			uniforms: Wn([we.common, we.displacementmap]),
			vertexShader: lt.depth_vert,
			fragmentShader: lt.depth_frag,
		},
		normal: {
			uniforms: Wn([we.common, we.bumpmap, we.normalmap, we.displacementmap, {opacity: {value: 1}}]),
			vertexShader: lt.meshnormal_vert,
			fragmentShader: lt.meshnormal_frag,
		},
		sprite: {uniforms: Wn([we.sprite, we.fog]), vertexShader: lt.sprite_vert, fragmentShader: lt.sprite_frag},
		background: {
			uniforms: {uvTransform: {value: new ut()}, t2D: {value: null}, backgroundIntensity: {value: 1}},
			vertexShader: lt.background_vert,
			fragmentShader: lt.background_frag,
		},
		backgroundCube: {
			uniforms: {
				envMap: {value: null},
				flipEnvMap: {value: -1},
				backgroundBlurriness: {value: 0},
				backgroundIntensity: {value: 1},
			},
			vertexShader: lt.backgroundCube_vert,
			fragmentShader: lt.backgroundCube_frag,
		},
		cube: {
			uniforms: {tCube: {value: null}, tFlip: {value: -1}, opacity: {value: 1}},
			vertexShader: lt.cube_vert,
			fragmentShader: lt.cube_frag,
		},
		equirect: {
			uniforms: {tEquirect: {value: null}},
			vertexShader: lt.equirect_vert,
			fragmentShader: lt.equirect_frag,
		},
		distanceRGBA: {
			uniforms: Wn([
				we.common,
				we.displacementmap,
				{referencePosition: {value: new w()}, nearDistance: {value: 1}, farDistance: {value: 1e3}},
			]),
			vertexShader: lt.distanceRGBA_vert,
			fragmentShader: lt.distanceRGBA_frag,
		},
		shadow: {
			uniforms: Wn([we.lights, we.fog, {color: {value: new Ee(0)}, opacity: {value: 1}}]),
			vertexShader: lt.shadow_vert,
			fragmentShader: lt.shadow_frag,
		},
	};
ts.physical = {
	uniforms: Wn([
		ts.standard.uniforms,
		{
			clearcoat: {value: 0},
			clearcoatMap: {value: null},
			clearcoatMapTransform: {value: new ut()},
			clearcoatNormalMap: {value: null},
			clearcoatNormalMapTransform: {value: new ut()},
			clearcoatNormalScale: {value: new re(1, 1)},
			clearcoatRoughness: {value: 0},
			clearcoatRoughnessMap: {value: null},
			clearcoatRoughnessMapTransform: {value: new ut()},
			iridescence: {value: 0},
			iridescenceMap: {value: null},
			iridescenceMapTransform: {value: new ut()},
			iridescenceIOR: {value: 1.3},
			iridescenceThicknessMinimum: {value: 100},
			iridescenceThicknessMaximum: {value: 400},
			iridescenceThicknessMap: {value: null},
			iridescenceThicknessMapTransform: {value: new ut()},
			sheen: {value: 0},
			sheenColor: {value: new Ee(0)},
			sheenColorMap: {value: null},
			sheenColorMapTransform: {value: new ut()},
			sheenRoughness: {value: 1},
			sheenRoughnessMap: {value: null},
			sheenRoughnessMapTransform: {value: new ut()},
			transmission: {value: 0},
			transmissionMap: {value: null},
			transmissionMapTransform: {value: new ut()},
			transmissionSamplerSize: {value: new re()},
			transmissionSamplerMap: {value: null},
			thickness: {value: 0},
			thicknessMap: {value: null},
			thicknessMapTransform: {value: new ut()},
			attenuationDistance: {value: 0},
			attenuationColor: {value: new Ee(0)},
			specularColor: {value: new Ee(1, 1, 1)},
			specularColorMap: {value: null},
			specularColorMapTransform: {value: new ut()},
			specularIntensity: {value: 1},
			specularIntensityMap: {value: null},
			specularIntensityMapTransform: {value: new ut()},
			anisotropyVector: {value: new re()},
			anisotropyMap: {value: null},
			anisotropyMapTransform: {value: new ut()},
		},
	]),
	vertexShader: lt.meshphysical_vert,
	fragmentShader: lt.meshphysical_frag,
};
const Tl = {r: 0, b: 0, g: 0};
function vO(n, e, t, i, s, r, o) {
	const a = new Ee(0);
	let c = r === !0 ? 0 : 1,
		l,
		u,
		h = null,
		d = 0,
		p = null;
	function m(_, f) {
		let y = !1,
			v = f.isScene === !0 ? f.background : null;
		v && v.isTexture && (v = (f.backgroundBlurriness > 0 ? t : e).get(v)),
			v === null ? g(a, c) : v && v.isColor && (g(v, 1), (y = !0));
		const A = n.xr.getEnvironmentBlendMode();
		A === 'additive'
			? i.buffers.color.setClear(0, 0, 0, 1, o)
			: A === 'alpha-blend' && i.buffers.color.setClear(0, 0, 0, 0, o),
			(n.autoClear || y) && n.clear(n.autoClearColor, n.autoClearDepth, n.autoClearStencil),
			v && (v.isCubeTexture || v.mapping === xa)
				? (u === void 0 &&
						((u = new On(
							new Qr(1, 1, 1),
							new ti({
								name: 'BackgroundCubeMaterial',
								uniforms: _a(ts.backgroundCube.uniforms),
								vertexShader: ts.backgroundCube.vertexShader,
								fragmentShader: ts.backgroundCube.fragmentShader,
								side: fn,
								depthTest: !1,
								depthWrite: !1,
								fog: !1,
							})
						)),
						u.geometry.deleteAttribute('normal'),
						u.geometry.deleteAttribute('uv'),
						(u.onBeforeRender = function (S, T, R) {
							this.matrixWorld.copyPosition(R.matrixWorld);
						}),
						Object.defineProperty(u.material, 'envMap', {
							get: function () {
								return this.uniforms.envMap.value;
							},
						}),
						s.update(u)),
				  (u.material.uniforms.envMap.value = v),
				  (u.material.uniforms.flipEnvMap.value = v.isCubeTexture && v.isRenderTargetTexture === !1 ? -1 : 1),
				  (u.material.uniforms.backgroundBlurriness.value = f.backgroundBlurriness),
				  (u.material.uniforms.backgroundIntensity.value = f.backgroundIntensity),
				  (u.material.toneMapped = Mt.getTransfer(v.colorSpace) !== Dt),
				  (h !== v || d !== v.version || p !== n.toneMapping) &&
						((u.material.needsUpdate = !0), (h = v), (d = v.version), (p = n.toneMapping)),
				  u.layers.enableAll(),
				  _.unshift(u, u.geometry, u.material, 0, 0, null))
				: v &&
				  v.isTexture &&
				  (l === void 0 &&
						((l = new On(
							new xh(2, 2),
							new ti({
								name: 'BackgroundMaterial',
								uniforms: _a(ts.background.uniforms),
								vertexShader: ts.background.vertexShader,
								fragmentShader: ts.background.fragmentShader,
								side: Ln,
								depthTest: !1,
								depthWrite: !1,
								fog: !1,
							})
						)),
						l.geometry.deleteAttribute('normal'),
						Object.defineProperty(l.material, 'map', {
							get: function () {
								return this.uniforms.t2D.value;
							},
						}),
						s.update(l)),
				  (l.material.uniforms.t2D.value = v),
				  (l.material.uniforms.backgroundIntensity.value = f.backgroundIntensity),
				  (l.material.toneMapped = Mt.getTransfer(v.colorSpace) !== Dt),
				  v.matrixAutoUpdate === !0 && v.updateMatrix(),
				  l.material.uniforms.uvTransform.value.copy(v.matrix),
				  (h !== v || d !== v.version || p !== n.toneMapping) &&
						((l.material.needsUpdate = !0), (h = v), (d = v.version), (p = n.toneMapping)),
				  l.layers.enableAll(),
				  _.unshift(l, l.geometry, l.material, 0, 0, null));
	}
	function g(_, f) {
		_.getRGB(Tl, Fb(n)), i.buffers.color.setClear(Tl.r, Tl.g, Tl.b, f, o);
	}
	return {
		getClearColor: function () {
			return a;
		},
		setClearColor: function (_, f = 1) {
			a.set(_), (c = f), g(a, c);
		},
		getClearAlpha: function () {
			return c;
		},
		setClearAlpha: function (_) {
			(c = _), g(a, c);
		},
		render: m,
	};
}
function EO(n, e, t, i) {
	const s = n.getParameter(n.MAX_VERTEX_ATTRIBS),
		r = i.isWebGL2 ? null : e.get('OES_vertex_array_object'),
		o = i.isWebGL2 || r !== null,
		a = {},
		c = _(null);
	let l = c,
		u = !1;
	function h(F, X, Z, Q, he) {
		let ie = !1;
		if (o) {
			const oe = g(Q, Z, X);
			l !== oe && ((l = oe), p(l.object)), (ie = f(F, Q, Z, he)), ie && y(F, Q, Z, he);
		} else {
			const oe = X.wireframe === !0;
			(l.geometry !== Q.id || l.program !== Z.id || l.wireframe !== oe) &&
				((l.geometry = Q.id), (l.program = Z.id), (l.wireframe = oe), (ie = !0));
		}
		he !== null && t.update(he, n.ELEMENT_ARRAY_BUFFER),
			(ie || u) &&
				((u = !1), D(F, X, Z, Q), he !== null && n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t.get(he).buffer));
	}
	function d() {
		return i.isWebGL2 ? n.createVertexArray() : r.createVertexArrayOES();
	}
	function p(F) {
		return i.isWebGL2 ? n.bindVertexArray(F) : r.bindVertexArrayOES(F);
	}
	function m(F) {
		return i.isWebGL2 ? n.deleteVertexArray(F) : r.deleteVertexArrayOES(F);
	}
	function g(F, X, Z) {
		const Q = Z.wireframe === !0;
		let he = a[F.id];
		he === void 0 && ((he = {}), (a[F.id] = he));
		let ie = he[X.id];
		ie === void 0 && ((ie = {}), (he[X.id] = ie));
		let oe = ie[Q];
		return oe === void 0 && ((oe = _(d())), (ie[Q] = oe)), oe;
	}
	function _(F) {
		const X = [],
			Z = [],
			Q = [];
		for (let he = 0; he < s; he++) (X[he] = 0), (Z[he] = 0), (Q[he] = 0);
		return {
			geometry: null,
			program: null,
			wireframe: !1,
			newAttributes: X,
			enabledAttributes: Z,
			attributeDivisors: Q,
			object: F,
			attributes: {},
			index: null,
		};
	}
	function f(F, X, Z, Q) {
		const he = l.attributes,
			ie = X.attributes;
		let oe = 0;
		const de = Z.getAttributes();
		for (const Te in de)
			if (de[Te].location >= 0) {
				const ae = he[Te];
				let Oe = ie[Te];
				if (
					(Oe === void 0 &&
						(Te === 'instanceMatrix' && F.instanceMatrix && (Oe = F.instanceMatrix),
						Te === 'instanceColor' && F.instanceColor && (Oe = F.instanceColor)),
					ae === void 0 || ae.attribute !== Oe || (Oe && ae.data !== Oe.data))
				)
					return !0;
				oe++;
			}
		return l.attributesNum !== oe || l.index !== Q;
	}
	function y(F, X, Z, Q) {
		const he = {},
			ie = X.attributes;
		let oe = 0;
		const de = Z.getAttributes();
		for (const Te in de)
			if (de[Te].location >= 0) {
				let ae = ie[Te];
				ae === void 0 &&
					(Te === 'instanceMatrix' && F.instanceMatrix && (ae = F.instanceMatrix),
					Te === 'instanceColor' && F.instanceColor && (ae = F.instanceColor));
				const Oe = {};
				(Oe.attribute = ae), ae && ae.data && (Oe.data = ae.data), (he[Te] = Oe), oe++;
			}
		(l.attributes = he), (l.attributesNum = oe), (l.index = Q);
	}
	function v() {
		const F = l.newAttributes;
		for (let X = 0, Z = F.length; X < Z; X++) F[X] = 0;
	}
	function A(F) {
		S(F, 0);
	}
	function S(F, X) {
		const Z = l.newAttributes,
			Q = l.enabledAttributes,
			he = l.attributeDivisors;
		(Z[F] = 1),
			Q[F] === 0 && (n.enableVertexAttribArray(F), (Q[F] = 1)),
			he[F] !== X &&
				((i.isWebGL2 ? n : e.get('ANGLE_instanced_arrays'))[
					i.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'
				](F, X),
				(he[F] = X));
	}
	function T() {
		const F = l.newAttributes,
			X = l.enabledAttributes;
		for (let Z = 0, Q = X.length; Z < Q; Z++) X[Z] !== F[Z] && (n.disableVertexAttribArray(Z), (X[Z] = 0));
	}
	function R(F, X, Z, Q, he, ie, oe) {
		oe === !0 ? n.vertexAttribIPointer(F, X, Z, he, ie) : n.vertexAttribPointer(F, X, Z, Q, he, ie);
	}
	function D(F, X, Z, Q) {
		if (
			i.isWebGL2 === !1 &&
			(F.isInstancedMesh || Q.isInstancedBufferGeometry) &&
			e.get('ANGLE_instanced_arrays') === null
		)
			return;
		v();
		const he = Q.attributes,
			ie = Z.getAttributes(),
			oe = X.defaultAttributeValues;
		for (const de in ie) {
			const Te = ie[de];
			if (Te.location >= 0) {
				let ee = he[de];
				if (
					(ee === void 0 &&
						(de === 'instanceMatrix' && F.instanceMatrix && (ee = F.instanceMatrix),
						de === 'instanceColor' && F.instanceColor && (ee = F.instanceColor)),
					ee !== void 0)
				) {
					const ae = ee.normalized,
						Oe = ee.itemSize,
						be = t.get(ee);
					if (be === void 0) continue;
					const Ue = be.buffer,
						He = be.type,
						Je = be.bytesPerElement,
						Ye = i.isWebGL2 === !0 && (He === n.INT || He === n.UNSIGNED_INT || ee.gpuType === o_);
					if (ee.isInterleavedBufferAttribute) {
						const tt = ee.data,
							q = tt.stride,
							on = ee.offset;
						if (tt.isInstancedInterleavedBuffer) {
							for (let ke = 0; ke < Te.locationSize; ke++) S(Te.location + ke, tt.meshPerAttribute);
							F.isInstancedMesh !== !0 &&
								Q._maxInstanceCount === void 0 &&
								(Q._maxInstanceCount = tt.meshPerAttribute * tt.count);
						} else for (let ke = 0; ke < Te.locationSize; ke++) A(Te.location + ke);
						n.bindBuffer(n.ARRAY_BUFFER, Ue);
						for (let ke = 0; ke < Te.locationSize; ke++)
							R(
								Te.location + ke,
								Oe / Te.locationSize,
								He,
								ae,
								q * Je,
								(on + (Oe / Te.locationSize) * ke) * Je,
								Ye
							);
					} else {
						if (ee.isInstancedBufferAttribute) {
							for (let tt = 0; tt < Te.locationSize; tt++) S(Te.location + tt, ee.meshPerAttribute);
							F.isInstancedMesh !== !0 &&
								Q._maxInstanceCount === void 0 &&
								(Q._maxInstanceCount = ee.meshPerAttribute * ee.count);
						} else for (let tt = 0; tt < Te.locationSize; tt++) A(Te.location + tt);
						n.bindBuffer(n.ARRAY_BUFFER, Ue);
						for (let tt = 0; tt < Te.locationSize; tt++)
							R(
								Te.location + tt,
								Oe / Te.locationSize,
								He,
								ae,
								Oe * Je,
								(Oe / Te.locationSize) * tt * Je,
								Ye
							);
					}
				} else if (oe !== void 0) {
					const ae = oe[de];
					if (ae !== void 0)
						switch (ae.length) {
							case 2:
								n.vertexAttrib2fv(Te.location, ae);
								break;
							case 3:
								n.vertexAttrib3fv(Te.location, ae);
								break;
							case 4:
								n.vertexAttrib4fv(Te.location, ae);
								break;
							default:
								n.vertexAttrib1fv(Te.location, ae);
						}
				}
			}
		}
		T();
	}
	function E() {
		B();
		for (const F in a) {
			const X = a[F];
			for (const Z in X) {
				const Q = X[Z];
				for (const he in Q) m(Q[he].object), delete Q[he];
				delete X[Z];
			}
			delete a[F];
		}
	}
	function x(F) {
		if (a[F.id] === void 0) return;
		const X = a[F.id];
		for (const Z in X) {
			const Q = X[Z];
			for (const he in Q) m(Q[he].object), delete Q[he];
			delete X[Z];
		}
		delete a[F.id];
	}
	function z(F) {
		for (const X in a) {
			const Z = a[X];
			if (Z[F.id] === void 0) continue;
			const Q = Z[F.id];
			for (const he in Q) m(Q[he].object), delete Q[he];
			delete Z[F.id];
		}
	}
	function B() {
		W(), (u = !0), l !== c && ((l = c), p(l.object));
	}
	function W() {
		(c.geometry = null), (c.program = null), (c.wireframe = !1);
	}
	return {
		setup: h,
		reset: B,
		resetDefaultState: W,
		dispose: E,
		releaseStatesOfGeometry: x,
		releaseStatesOfProgram: z,
		initAttributes: v,
		enableAttribute: A,
		disableUnusedAttributes: T,
	};
}
function CO(n, e, t, i) {
	const s = i.isWebGL2;
	let r;
	function o(u) {
		r = u;
	}
	function a(u, h) {
		n.drawArrays(r, u, h), t.update(h, r, 1);
	}
	function c(u, h, d) {
		if (d === 0) return;
		let p, m;
		if (s) (p = n), (m = 'drawArraysInstanced');
		else if (((p = e.get('ANGLE_instanced_arrays')), (m = 'drawArraysInstancedANGLE'), p === null)) {
			console.error(
				'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
			);
			return;
		}
		p[m](r, u, h, d), t.update(h, r, d);
	}
	function l(u, h, d) {
		if (d === 0) return;
		const p = e.get('WEBGL_multi_draw');
		if (p === null) for (let m = 0; m < d; m++) this.render(u[m], h[m]);
		else {
			p.multiDrawArraysWEBGL(r, u, 0, h, 0, d);
			let m = 0;
			for (let g = 0; g < d; g++) m += h[g];
			t.update(m, r, 1);
		}
	}
	(this.setMode = o), (this.render = a), (this.renderInstances = c), (this.renderMultiDraw = l);
}
function yO(n, e, t) {
	let i;
	function s() {
		if (i !== void 0) return i;
		if (e.has('EXT_texture_filter_anisotropic') === !0) {
			const R = e.get('EXT_texture_filter_anisotropic');
			i = n.getParameter(R.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else i = 0;
		return i;
	}
	function r(R) {
		if (R === 'highp') {
			if (
				n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.HIGH_FLOAT).precision > 0 &&
				n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.HIGH_FLOAT).precision > 0
			)
				return 'highp';
			R = 'mediump';
		}
		return R === 'mediump' &&
			n.getShaderPrecisionFormat(n.VERTEX_SHADER, n.MEDIUM_FLOAT).precision > 0 &&
			n.getShaderPrecisionFormat(n.FRAGMENT_SHADER, n.MEDIUM_FLOAT).precision > 0
			? 'mediump'
			: 'lowp';
	}
	const o = typeof WebGL2RenderingContext < 'u' && n.constructor.name === 'WebGL2RenderingContext';
	let a = t.precision !== void 0 ? t.precision : 'highp';
	const c = r(a);
	c !== a && (console.warn('THREE.WebGLRenderer:', a, 'not supported, using', c, 'instead.'), (a = c));
	const l = o || e.has('WEBGL_draw_buffers'),
		u = t.logarithmicDepthBuffer === !0,
		h = n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS),
		d = n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
		p = n.getParameter(n.MAX_TEXTURE_SIZE),
		m = n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE),
		g = n.getParameter(n.MAX_VERTEX_ATTRIBS),
		_ = n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS),
		f = n.getParameter(n.MAX_VARYING_VECTORS),
		y = n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS),
		v = d > 0,
		A = o || e.has('OES_texture_float'),
		S = v && A,
		T = o ? n.getParameter(n.MAX_SAMPLES) : 0;
	return {
		isWebGL2: o,
		drawBuffers: l,
		getMaxAnisotropy: s,
		getMaxPrecision: r,
		precision: a,
		logarithmicDepthBuffer: u,
		maxTextures: h,
		maxVertexTextures: d,
		maxTextureSize: p,
		maxCubemapSize: m,
		maxAttributes: g,
		maxVertexUniforms: _,
		maxVaryings: f,
		maxFragmentUniforms: y,
		vertexTextures: v,
		floatFragmentTextures: A,
		floatVertexTextures: S,
		maxSamples: T,
	};
}
function bO(n) {
	const e = this;
	let t = null,
		i = 0,
		s = !1,
		r = !1;
	const o = new es(),
		a = new ut(),
		c = {value: null, needsUpdate: !1};
	(this.uniform = c),
		(this.numPlanes = 0),
		(this.numIntersection = 0),
		(this.init = function (h, d) {
			const p = h.length !== 0 || d || i !== 0 || s;
			return (s = d), (i = h.length), p;
		}),
		(this.beginShadows = function () {
			(r = !0), u(null);
		}),
		(this.endShadows = function () {
			r = !1;
		}),
		(this.setGlobalState = function (h, d) {
			t = u(h, d, 0);
		}),
		(this.setState = function (h, d, p) {
			const m = h.clippingPlanes,
				g = h.clipIntersection,
				_ = h.clipShadows,
				f = n.get(h);
			if (!s || m === null || m.length === 0 || (r && !_)) r ? u(null) : l();
			else {
				const y = r ? 0 : i,
					v = y * 4;
				let A = f.clippingState || null;
				(c.value = A), (A = u(m, d, v, p));
				for (let S = 0; S !== v; ++S) A[S] = t[S];
				(f.clippingState = A), (this.numIntersection = g ? this.numPlanes : 0), (this.numPlanes += y);
			}
		});
	function l() {
		c.value !== t && ((c.value = t), (c.needsUpdate = i > 0)), (e.numPlanes = i), (e.numIntersection = 0);
	}
	function u(h, d, p, m) {
		const g = h !== null ? h.length : 0;
		let _ = null;
		if (g !== 0) {
			if (((_ = c.value), m !== !0 || _ === null)) {
				const f = p + g * 4,
					y = d.matrixWorldInverse;
				a.getNormalMatrix(y), (_ === null || _.length < f) && (_ = new Float32Array(f));
				for (let v = 0, A = p; v !== g; ++v, A += 4)
					o.copy(h[v]).applyMatrix4(y, a), o.normal.toArray(_, A), (_[A + 3] = o.constant);
			}
			(c.value = _), (c.needsUpdate = !0);
		}
		return (e.numPlanes = g), (e.numIntersection = 0), _;
	}
}
function SO(n) {
	let e = new WeakMap();
	function t(o, a) {
		return a === zu ? (o.mapping = Yr) : a === Hu && (o.mapping = Kr), o;
	}
	function i(o) {
		if (o && o.isTexture) {
			const a = o.mapping;
			if (a === zu || a === Hu)
				if (e.has(o)) {
					const c = e.get(o).texture;
					return t(c, o.mapping);
				} else {
					const c = o.image;
					if (c && c.height > 0) {
						const l = new LT(c.height / 2);
						return (
							l.fromEquirectangularTexture(n, o),
							e.set(o, l),
							o.addEventListener('dispose', s),
							t(l.texture, o.mapping)
						);
					} else return null;
				}
		}
		return o;
	}
	function s(o) {
		const a = o.target;
		a.removeEventListener('dispose', s);
		const c = e.get(a);
		c !== void 0 && (e.delete(a), c.dispose());
	}
	function r() {
		e = new WeakMap();
	}
	return {get: i, dispose: r};
}
class zb extends kb {
	constructor(e = -1, t = 1, i = 1, s = -1, r = 0.1, o = 2e3) {
		super(),
			(this.isOrthographicCamera = !0),
			(this.type = 'OrthographicCamera'),
			(this.zoom = 1),
			(this.view = null),
			(this.left = e),
			(this.right = t),
			(this.top = i),
			(this.bottom = s),
			(this.near = r),
			(this.far = o),
			this.updateProjectionMatrix();
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			(this.left = e.left),
			(this.right = e.right),
			(this.top = e.top),
			(this.bottom = e.bottom),
			(this.near = e.near),
			(this.far = e.far),
			(this.zoom = e.zoom),
			(this.view = e.view === null ? null : Object.assign({}, e.view)),
			this
		);
	}
	setViewOffset(e, t, i, s, r, o) {
		this.view === null &&
			(this.view = {enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1}),
			(this.view.enabled = !0),
			(this.view.fullWidth = e),
			(this.view.fullHeight = t),
			(this.view.offsetX = i),
			(this.view.offsetY = s),
			(this.view.width = r),
			(this.view.height = o),
			this.updateProjectionMatrix();
	}
	clearViewOffset() {
		this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
	}
	updateProjectionMatrix() {
		const e = (this.right - this.left) / (2 * this.zoom),
			t = (this.top - this.bottom) / (2 * this.zoom),
			i = (this.right + this.left) / 2,
			s = (this.top + this.bottom) / 2;
		let r = i - e,
			o = i + e,
			a = s + t,
			c = s - t;
		if (this.view !== null && this.view.enabled) {
			const l = (this.right - this.left) / this.view.fullWidth / this.zoom,
				u = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
			(r += l * this.view.offsetX),
				(o = r + l * this.view.width),
				(a -= u * this.view.offsetY),
				(c = a - u * this.view.height);
		}
		this.projectionMatrix.makeOrthographic(r, o, a, c, this.near, this.far, this.coordinateSystem),
			this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
	}
	toJSON(e) {
		const t = super.toJSON(e);
		return (
			(t.object.zoom = this.zoom),
			(t.object.left = this.left),
			(t.object.right = this.right),
			(t.object.top = this.top),
			(t.object.bottom = this.bottom),
			(t.object.near = this.near),
			(t.object.far = this.far),
			this.view !== null && (t.object.view = Object.assign({}, this.view)),
			t
		);
	}
}
const na = 4,
	iv = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
	Gr = 20,
	Td = new zb(),
	sv = new Ee();
let Rd = null,
	wd = 0,
	Od = 0;
const Dr = (1 + Math.sqrt(5)) / 2,
	Ro = 1 / Dr,
	rv = [
		new w(1, 1, 1),
		new w(-1, 1, 1),
		new w(1, 1, -1),
		new w(-1, 1, -1),
		new w(0, Dr, Ro),
		new w(0, Dr, -Ro),
		new w(Ro, 0, Dr),
		new w(-Ro, 0, Dr),
		new w(Dr, Ro, 0),
		new w(-Dr, Ro, 0),
	];
class Qp {
	constructor(e) {
		(this._renderer = e),
			(this._pingPongRenderTarget = null),
			(this._lodMax = 0),
			(this._cubeSize = 0),
			(this._lodPlanes = []),
			(this._sizeLods = []),
			(this._sigmas = []),
			(this._blurMaterial = null),
			(this._cubemapMaterial = null),
			(this._equirectMaterial = null),
			this._compileMaterial(this._blurMaterial);
	}
	fromScene(e, t = 0, i = 0.1, s = 100) {
		(Rd = this._renderer.getRenderTarget()),
			(wd = this._renderer.getActiveCubeFace()),
			(Od = this._renderer.getActiveMipmapLevel()),
			this._setSize(256);
		const r = this._allocateTargets();
		return (
			(r.depthBuffer = !0),
			this._sceneToCubeUV(e, i, s, r),
			t > 0 && this._blur(r, 0, 0, t),
			this._applyPMREM(r),
			this._cleanup(r),
			r
		);
	}
	fromEquirectangular(e, t = null) {
		return this._fromTexture(e, t);
	}
	fromCubemap(e, t = null) {
		return this._fromTexture(e, t);
	}
	compileCubemapShader() {
		this._cubemapMaterial === null &&
			((this._cubemapMaterial = cv()), this._compileMaterial(this._cubemapMaterial));
	}
	compileEquirectangularShader() {
		this._equirectMaterial === null &&
			((this._equirectMaterial = av()), this._compileMaterial(this._equirectMaterial));
	}
	dispose() {
		this._dispose(),
			this._cubemapMaterial !== null && this._cubemapMaterial.dispose(),
			this._equirectMaterial !== null && this._equirectMaterial.dispose();
	}
	_setSize(e) {
		(this._lodMax = Math.floor(Math.log2(e))), (this._cubeSize = Math.pow(2, this._lodMax));
	}
	_dispose() {
		this._blurMaterial !== null && this._blurMaterial.dispose(),
			this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
		for (let e = 0; e < this._lodPlanes.length; e++) this._lodPlanes[e].dispose();
	}
	_cleanup(e) {
		this._renderer.setRenderTarget(Rd, wd, Od), (e.scissorTest = !1), Rl(e, 0, 0, e.width, e.height);
	}
	_fromTexture(e, t) {
		e.mapping === Yr || e.mapping === Kr
			? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width)
			: this._setSize(e.image.width / 4),
			(Rd = this._renderer.getRenderTarget()),
			(wd = this._renderer.getActiveCubeFace()),
			(Od = this._renderer.getActiveMipmapLevel());
		const i = t || this._allocateTargets();
		return this._textureToCubeUV(e, i), this._applyPMREM(i), this._cleanup(i), i;
	}
	_allocateTargets() {
		const e = 3 * Math.max(this._cubeSize, 112),
			t = 4 * this._cubeSize,
			i = {
				magFilter: Yt,
				minFilter: Yt,
				generateMipmaps: !1,
				type: ki,
				format: wn,
				colorSpace: $n,
				depthBuffer: !1,
			},
			s = ov(e, t, i);
		if (
			this._pingPongRenderTarget === null ||
			this._pingPongRenderTarget.width !== e ||
			this._pingPongRenderTarget.height !== t
		) {
			this._pingPongRenderTarget !== null && this._dispose(), (this._pingPongRenderTarget = ov(e, t, i));
			const {_lodMax: r} = this;
			({sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas} = AO(r)),
				(this._blurMaterial = xO(r, e, t));
		}
		return s;
	}
	_compileMaterial(e) {
		const t = new On(this._lodPlanes[0], e);
		this._renderer.compile(t, Td);
	}
	_sceneToCubeUV(e, t, i, s) {
		const a = new Rn(90, 1, t, i),
			c = [1, -1, 1, 1, 1, 1],
			l = [1, 1, 1, -1, -1, -1],
			u = this._renderer,
			h = u.autoClear,
			d = u.toneMapping;
		u.getClearColor(sv), (u.toneMapping = Ci), (u.autoClear = !1);
		const p = new Ah({name: 'PMREM.Background', side: fn, depthWrite: !1, depthTest: !1}),
			m = new On(new Qr(), p);
		let g = !1;
		const _ = e.background;
		_ ? _.isColor && (p.color.copy(_), (e.background = null), (g = !0)) : (p.color.copy(sv), (g = !0));
		for (let f = 0; f < 6; f++) {
			const y = f % 3;
			y === 0
				? (a.up.set(0, c[f], 0), a.lookAt(l[f], 0, 0))
				: y === 1
				? (a.up.set(0, 0, c[f]), a.lookAt(0, l[f], 0))
				: (a.up.set(0, c[f], 0), a.lookAt(0, 0, l[f]));
			const v = this._cubeSize;
			Rl(s, y * v, f > 2 ? v : 0, v, v), u.setRenderTarget(s), g && u.render(m, a), u.render(e, a);
		}
		m.geometry.dispose(), m.material.dispose(), (u.toneMapping = d), (u.autoClear = h), (e.background = _);
	}
	_textureToCubeUV(e, t) {
		const i = this._renderer,
			s = e.mapping === Yr || e.mapping === Kr;
		s
			? (this._cubemapMaterial === null && (this._cubemapMaterial = cv()),
			  (this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1))
			: this._equirectMaterial === null && (this._equirectMaterial = av());
		const r = s ? this._cubemapMaterial : this._equirectMaterial,
			o = new On(this._lodPlanes[0], r),
			a = r.uniforms;
		a.envMap.value = e;
		const c = this._cubeSize;
		Rl(t, 0, 0, 3 * c, 2 * c), i.setRenderTarget(t), i.render(o, Td);
	}
	_applyPMREM(e) {
		const t = this._renderer,
			i = t.autoClear;
		t.autoClear = !1;
		for (let s = 1; s < this._lodPlanes.length; s++) {
			const r = Math.sqrt(this._sigmas[s] * this._sigmas[s] - this._sigmas[s - 1] * this._sigmas[s - 1]),
				o = rv[(s - 1) % rv.length];
			this._blur(e, s - 1, s, r, o);
		}
		t.autoClear = i;
	}
	_blur(e, t, i, s, r) {
		const o = this._pingPongRenderTarget;
		this._halfBlur(e, o, t, i, s, 'latitudinal', r), this._halfBlur(o, e, i, i, s, 'longitudinal', r);
	}
	_halfBlur(e, t, i, s, r, o, a) {
		const c = this._renderer,
			l = this._blurMaterial;
		o !== 'latitudinal' &&
			o !== 'longitudinal' &&
			console.error('blur direction must be either latitudinal or longitudinal!');
		const u = 3,
			h = new On(this._lodPlanes[s], l),
			d = l.uniforms,
			p = this._sizeLods[i] - 1,
			m = isFinite(r) ? Math.PI / (2 * p) : (2 * Math.PI) / (2 * Gr - 1),
			g = r / m,
			_ = isFinite(r) ? 1 + Math.floor(u * g) : Gr;
		_ > Gr &&
			console.warn(
				`sigmaRadians, ${r}, is too large and will clip, as it requested ${_} samples when the maximum is set to ${Gr}`
			);
		const f = [];
		let y = 0;
		for (let R = 0; R < Gr; ++R) {
			const D = R / g,
				E = Math.exp((-D * D) / 2);
			f.push(E), R === 0 ? (y += E) : R < _ && (y += 2 * E);
		}
		for (let R = 0; R < f.length; R++) f[R] = f[R] / y;
		(d.envMap.value = e.texture),
			(d.samples.value = _),
			(d.weights.value = f),
			(d.latitudinal.value = o === 'latitudinal'),
			a && (d.poleAxis.value = a);
		const {_lodMax: v} = this;
		(d.dTheta.value = m), (d.mipInt.value = v - i);
		const A = this._sizeLods[s],
			S = 3 * A * (s > v - na ? s - v + na : 0),
			T = 4 * (this._cubeSize - A);
		Rl(t, S, T, 3 * A, 2 * A), c.setRenderTarget(t), c.render(h, Td);
	}
}
function AO(n) {
	const e = [],
		t = [],
		i = [];
	let s = n;
	const r = n - na + 1 + iv.length;
	for (let o = 0; o < r; o++) {
		const a = Math.pow(2, s);
		t.push(a);
		let c = 1 / a;
		o > n - na ? (c = iv[o - n + na - 1]) : o === 0 && (c = 0), i.push(c);
		const l = 1 / (a - 2),
			u = -l,
			h = 1 + l,
			d = [u, u, h, u, h, h, u, u, h, h, u, h],
			p = 6,
			m = 6,
			g = 3,
			_ = 2,
			f = 1,
			y = new Float32Array(g * m * p),
			v = new Float32Array(_ * m * p),
			A = new Float32Array(f * m * p);
		for (let T = 0; T < p; T++) {
			const R = ((T % 3) * 2) / 3 - 1,
				D = T > 2 ? 0 : -1,
				E = [R, D, 0, R + 2 / 3, D, 0, R + 2 / 3, D + 1, 0, R, D, 0, R + 2 / 3, D + 1, 0, R, D + 1, 0];
			y.set(E, g * m * T), v.set(d, _ * m * T);
			const x = [T, T, T, T, T, T];
			A.set(x, f * m * T);
		}
		const S = new qn();
		S.setAttribute('position', new kn(y, g)),
			S.setAttribute('uv', new kn(v, _)),
			S.setAttribute('faceIndex', new kn(A, f)),
			e.push(S),
			s > na && s--;
	}
	return {lodPlanes: e, sizeLods: t, sigmas: i};
}
function ov(n, e, t) {
	const i = new Gi(n, e, t);
	return (i.texture.mapping = xa), (i.texture.name = 'PMREM.cubeUv'), (i.scissorTest = !0), i;
}
function Rl(n, e, t, i, s) {
	n.viewport.set(e, t, i, s), n.scissor.set(e, t, i, s);
}
function xO(n, e, t) {
	const i = new Float32Array(Gr),
		s = new w(0, 1, 0);
	return new ti({
		name: 'SphericalGaussianBlur',
		defines: {n: Gr, CUBEUV_TEXEL_WIDTH: 1 / e, CUBEUV_TEXEL_HEIGHT: 1 / t, CUBEUV_MAX_MIP: `${n}.0`},
		uniforms: {
			envMap: {value: null},
			samples: {value: 1},
			weights: {value: i},
			latitudinal: {value: !1},
			dTheta: {value: 0},
			mipInt: {value: 0},
			poleAxis: {value: s},
		},
		vertexShader: v_(),
		fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
		blending: Ps,
		depthTest: !1,
		depthWrite: !1,
	});
}
function av() {
	return new ti({
		name: 'EquirectangularToCubeUV',
		uniforms: {envMap: {value: null}},
		vertexShader: v_(),
		fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,
		blending: Ps,
		depthTest: !1,
		depthWrite: !1,
	});
}
function cv() {
	return new ti({
		name: 'CubemapToCubeUV',
		uniforms: {envMap: {value: null}, flipEnvMap: {value: -1}},
		vertexShader: v_(),
		fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,
		blending: Ps,
		depthTest: !1,
		depthWrite: !1,
	});
}
function v_() {
	return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function MO(n) {
	let e = new WeakMap(),
		t = null;
	function i(a) {
		if (a && a.isTexture) {
			const c = a.mapping,
				l = c === zu || c === Hu,
				u = c === Yr || c === Kr;
			if (l || u)
				if (a.isRenderTargetTexture && a.needsPMREMUpdate === !0) {
					a.needsPMREMUpdate = !1;
					let h = e.get(a);
					return (
						t === null && (t = new Qp(n)),
						(h = l ? t.fromEquirectangular(a, h) : t.fromCubemap(a, h)),
						e.set(a, h),
						h.texture
					);
				} else {
					if (e.has(a)) return e.get(a).texture;
					{
						const h = a.image;
						if ((l && h && h.height > 0) || (u && h && s(h))) {
							t === null && (t = new Qp(n));
							const d = l ? t.fromEquirectangular(a) : t.fromCubemap(a);
							return e.set(a, d), a.addEventListener('dispose', r), d.texture;
						} else return null;
					}
				}
		}
		return a;
	}
	function s(a) {
		let c = 0;
		const l = 6;
		for (let u = 0; u < l; u++) a[u] !== void 0 && c++;
		return c === l;
	}
	function r(a) {
		const c = a.target;
		c.removeEventListener('dispose', r);
		const l = e.get(c);
		l !== void 0 && (e.delete(c), l.dispose());
	}
	function o() {
		(e = new WeakMap()), t !== null && (t.dispose(), (t = null));
	}
	return {get: i, dispose: o};
}
function TO(n) {
	const e = {};
	function t(i) {
		if (e[i] !== void 0) return e[i];
		let s;
		switch (i) {
			case 'WEBGL_depth_texture':
				s =
					n.getExtension('WEBGL_depth_texture') ||
					n.getExtension('MOZ_WEBGL_depth_texture') ||
					n.getExtension('WEBKIT_WEBGL_depth_texture');
				break;
			case 'EXT_texture_filter_anisotropic':
				s =
					n.getExtension('EXT_texture_filter_anisotropic') ||
					n.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
					n.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
				break;
			case 'WEBGL_compressed_texture_s3tc':
				s =
					n.getExtension('WEBGL_compressed_texture_s3tc') ||
					n.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
					n.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
				break;
			case 'WEBGL_compressed_texture_pvrtc':
				s =
					n.getExtension('WEBGL_compressed_texture_pvrtc') ||
					n.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
				break;
			default:
				s = n.getExtension(i);
		}
		return (e[i] = s), s;
	}
	return {
		has: function (i) {
			return t(i) !== null;
		},
		init: function (i) {
			i.isWebGL2
				? t('EXT_color_buffer_float')
				: (t('WEBGL_depth_texture'),
				  t('OES_texture_float'),
				  t('OES_texture_half_float'),
				  t('OES_texture_half_float_linear'),
				  t('OES_standard_derivatives'),
				  t('OES_element_index_uint'),
				  t('OES_vertex_array_object'),
				  t('ANGLE_instanced_arrays')),
				t('OES_texture_float_linear'),
				t('EXT_color_buffer_half_float'),
				t('WEBGL_multisampled_render_to_texture');
		},
		get: function (i) {
			const s = t(i);
			return s === null && console.warn('THREE.WebGLRenderer: ' + i + ' extension not supported.'), s;
		},
	};
}
function RO(n, e, t, i) {
	const s = {},
		r = new WeakMap();
	function o(h) {
		const d = h.target;
		d.index !== null && e.remove(d.index);
		for (const m in d.attributes) e.remove(d.attributes[m]);
		for (const m in d.morphAttributes) {
			const g = d.morphAttributes[m];
			for (let _ = 0, f = g.length; _ < f; _++) e.remove(g[_]);
		}
		d.removeEventListener('dispose', o), delete s[d.id];
		const p = r.get(d);
		p && (e.remove(p), r.delete(d)),
			i.releaseStatesOfGeometry(d),
			d.isInstancedBufferGeometry === !0 && delete d._maxInstanceCount,
			t.memory.geometries--;
	}
	function a(h, d) {
		return s[d.id] === !0 || (d.addEventListener('dispose', o), (s[d.id] = !0), t.memory.geometries++), d;
	}
	function c(h) {
		const d = h.attributes;
		for (const m in d) e.update(d[m], n.ARRAY_BUFFER);
		const p = h.morphAttributes;
		for (const m in p) {
			const g = p[m];
			for (let _ = 0, f = g.length; _ < f; _++) e.update(g[_], n.ARRAY_BUFFER);
		}
	}
	function l(h) {
		const d = [],
			p = h.index,
			m = h.attributes.position;
		let g = 0;
		if (p !== null) {
			const y = p.array;
			g = p.version;
			for (let v = 0, A = y.length; v < A; v += 3) {
				const S = y[v + 0],
					T = y[v + 1],
					R = y[v + 2];
				d.push(S, T, T, R, R, S);
			}
		} else if (m !== void 0) {
			const y = m.array;
			g = m.version;
			for (let v = 0, A = y.length / 3 - 1; v < A; v += 3) {
				const S = v + 0,
					T = v + 1,
					R = v + 2;
				d.push(S, T, T, R, R, S);
			}
		} else return;
		const _ = new (Ob(d) ? Ub : Lb)(d, 1);
		_.version = g;
		const f = r.get(h);
		f && e.remove(f), r.set(h, _);
	}
	function u(h) {
		const d = r.get(h);
		if (d) {
			const p = h.index;
			p !== null && d.version < p.version && l(h);
		} else l(h);
		return r.get(h);
	}
	return {get: a, update: c, getWireframeAttribute: u};
}
function wO(n, e, t, i) {
	const s = i.isWebGL2;
	let r;
	function o(p) {
		r = p;
	}
	let a, c;
	function l(p) {
		(a = p.type), (c = p.bytesPerElement);
	}
	function u(p, m) {
		n.drawElements(r, m, a, p * c), t.update(m, r, 1);
	}
	function h(p, m, g) {
		if (g === 0) return;
		let _, f;
		if (s) (_ = n), (f = 'drawElementsInstanced');
		else if (((_ = e.get('ANGLE_instanced_arrays')), (f = 'drawElementsInstancedANGLE'), _ === null)) {
			console.error(
				'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
			);
			return;
		}
		_[f](r, m, a, p * c, g), t.update(m, r, g);
	}
	function d(p, m, g) {
		if (g === 0) return;
		const _ = e.get('WEBGL_multi_draw');
		if (_ === null) for (let f = 0; f < g; f++) this.render(p[f] / c, m[f]);
		else {
			_.multiDrawElementsWEBGL(r, m, 0, a, p, 0, g);
			let f = 0;
			for (let y = 0; y < g; y++) f += m[y];
			t.update(f, r, 1);
		}
	}
	(this.setMode = o), (this.setIndex = l), (this.render = u), (this.renderInstances = h), (this.renderMultiDraw = d);
}
function OO(n) {
	const e = {geometries: 0, textures: 0},
		t = {frame: 0, calls: 0, triangles: 0, points: 0, lines: 0};
	function i(r, o, a) {
		switch ((t.calls++, o)) {
			case n.TRIANGLES:
				t.triangles += a * (r / 3);
				break;
			case n.LINES:
				t.lines += a * (r / 2);
				break;
			case n.LINE_STRIP:
				t.lines += a * (r - 1);
				break;
			case n.LINE_LOOP:
				t.lines += a * r;
				break;
			case n.POINTS:
				t.points += a * r;
				break;
			default:
				console.error('THREE.WebGLInfo: Unknown draw mode:', o);
				break;
		}
	}
	function s() {
		(t.calls = 0), (t.triangles = 0), (t.points = 0), (t.lines = 0);
	}
	return {memory: e, render: t, programs: null, autoReset: !0, reset: s, update: i};
}
function PO(n, e) {
	return n[0] - e[0];
}
function NO(n, e) {
	return Math.abs(e[1]) - Math.abs(n[1]);
}
function IO(n, e, t) {
	const i = {},
		s = new Float32Array(8),
		r = new WeakMap(),
		o = new Ke(),
		a = [];
	for (let l = 0; l < 8; l++) a[l] = [l, 0];
	function c(l, u, h) {
		const d = l.morphTargetInfluences;
		if (e.isWebGL2 === !0) {
			const p = u.morphAttributes.position || u.morphAttributes.normal || u.morphAttributes.color,
				m = p !== void 0 ? p.length : 0;
			let g = r.get(u);
			if (g === void 0 || g.count !== m) {
				let F = function () {
					B.dispose(), r.delete(u), u.removeEventListener('dispose', F);
				};
				g !== void 0 && g.texture.dispose();
				const y = u.morphAttributes.position !== void 0,
					v = u.morphAttributes.normal !== void 0,
					A = u.morphAttributes.color !== void 0,
					S = u.morphAttributes.position || [],
					T = u.morphAttributes.normal || [],
					R = u.morphAttributes.color || [];
				let D = 0;
				y === !0 && (D = 1), v === !0 && (D = 2), A === !0 && (D = 3);
				let E = u.attributes.position.count * D,
					x = 1;
				E > e.maxTextureSize && ((x = Math.ceil(E / e.maxTextureSize)), (E = e.maxTextureSize));
				const z = new Float32Array(E * x * 4 * m),
					B = new Ib(z, E, x, m);
				(B.type = jn), (B.needsUpdate = !0);
				const W = D * 4;
				for (let X = 0; X < m; X++) {
					const Z = S[X],
						Q = T[X],
						he = R[X],
						ie = E * x * 4 * X;
					for (let oe = 0; oe < Z.count; oe++) {
						const de = oe * W;
						y === !0 &&
							(o.fromBufferAttribute(Z, oe),
							(z[ie + de + 0] = o.x),
							(z[ie + de + 1] = o.y),
							(z[ie + de + 2] = o.z),
							(z[ie + de + 3] = 0)),
							v === !0 &&
								(o.fromBufferAttribute(Q, oe),
								(z[ie + de + 4] = o.x),
								(z[ie + de + 5] = o.y),
								(z[ie + de + 6] = o.z),
								(z[ie + de + 7] = 0)),
							A === !0 &&
								(o.fromBufferAttribute(he, oe),
								(z[ie + de + 8] = o.x),
								(z[ie + de + 9] = o.y),
								(z[ie + de + 10] = o.z),
								(z[ie + de + 11] = he.itemSize === 4 ? o.w : 1));
					}
				}
				(g = {count: m, texture: B, size: new re(E, x)}), r.set(u, g), u.addEventListener('dispose', F);
			}
			let _ = 0;
			for (let y = 0; y < d.length; y++) _ += d[y];
			const f = u.morphTargetsRelative ? 1 : 1 - _;
			h.getUniforms().setValue(n, 'morphTargetBaseInfluence', f),
				h.getUniforms().setValue(n, 'morphTargetInfluences', d),
				h.getUniforms().setValue(n, 'morphTargetsTexture', g.texture, t),
				h.getUniforms().setValue(n, 'morphTargetsTextureSize', g.size);
		} else {
			const p = d === void 0 ? 0 : d.length;
			let m = i[u.id];
			if (m === void 0 || m.length !== p) {
				m = [];
				for (let v = 0; v < p; v++) m[v] = [v, 0];
				i[u.id] = m;
			}
			for (let v = 0; v < p; v++) {
				const A = m[v];
				(A[0] = v), (A[1] = d[v]);
			}
			m.sort(NO);
			for (let v = 0; v < 8; v++)
				v < p && m[v][1]
					? ((a[v][0] = m[v][0]), (a[v][1] = m[v][1]))
					: ((a[v][0] = Number.MAX_SAFE_INTEGER), (a[v][1] = 0));
			a.sort(PO);
			const g = u.morphAttributes.position,
				_ = u.morphAttributes.normal;
			let f = 0;
			for (let v = 0; v < 8; v++) {
				const A = a[v],
					S = A[0],
					T = A[1];
				S !== Number.MAX_SAFE_INTEGER && T
					? (g && u.getAttribute('morphTarget' + v) !== g[S] && u.setAttribute('morphTarget' + v, g[S]),
					  _ && u.getAttribute('morphNormal' + v) !== _[S] && u.setAttribute('morphNormal' + v, _[S]),
					  (s[v] = T),
					  (f += T))
					: (g && u.hasAttribute('morphTarget' + v) === !0 && u.deleteAttribute('morphTarget' + v),
					  _ && u.hasAttribute('morphNormal' + v) === !0 && u.deleteAttribute('morphNormal' + v),
					  (s[v] = 0));
			}
			const y = u.morphTargetsRelative ? 1 : 1 - f;
			h.getUniforms().setValue(n, 'morphTargetBaseInfluence', y),
				h.getUniforms().setValue(n, 'morphTargetInfluences', s);
		}
	}
	return {update: c};
}
function DO(n, e, t, i) {
	let s = new WeakMap();
	function r(c) {
		const l = i.render.frame,
			u = c.geometry,
			h = e.get(c, u);
		if (
			(s.get(h) !== l && (e.update(h), s.set(h, l)),
			c.isInstancedMesh &&
				(c.hasEventListener('dispose', a) === !1 && c.addEventListener('dispose', a),
				s.get(c) !== l &&
					(t.update(c.instanceMatrix, n.ARRAY_BUFFER),
					c.instanceColor !== null && t.update(c.instanceColor, n.ARRAY_BUFFER),
					s.set(c, l))),
			c.isSkinnedMesh)
		) {
			const d = c.skeleton;
			s.get(d) !== l && (d.update(), s.set(d, l));
		}
		return h;
	}
	function o() {
		s = new WeakMap();
	}
	function a(c) {
		const l = c.target;
		l.removeEventListener('dispose', a),
			t.remove(l.instanceMatrix),
			l.instanceColor !== null && t.remove(l.instanceColor);
	}
	return {update: r, dispose: o};
}
class E_ extends In {
	constructor(e, t, i, s, r, o, a, c, l, u) {
		if (((u = u !== void 0 ? u : dr), u !== dr && u !== Zr))
			throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
		i === void 0 && u === dr && (i = Ms),
			i === void 0 && u === Zr && (i = Ns),
			super(null, s, r, o, a, c, u, i, l),
			(this.isDepthTexture = !0),
			(this.image = {width: e, height: t}),
			(this.magFilter = a !== void 0 ? a : qt),
			(this.minFilter = c !== void 0 ? c : qt),
			(this.flipY = !1),
			(this.generateMipmaps = !1),
			(this.compareFunction = null);
	}
	copy(e) {
		return super.copy(e), (this.compareFunction = e.compareFunction), this;
	}
	toJSON(e) {
		const t = super.toJSON(e);
		return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
	}
}
const Hb = new In(),
	Wb = new E_(1, 1);
Wb.compareFunction = wb;
const jb = new Ib(),
	Xb = new _T(),
	$b = new Vb(),
	lv = [],
	uv = [],
	hv = new Float32Array(16),
	dv = new Float32Array(9),
	pv = new Float32Array(4);
function Ra(n, e, t) {
	const i = n[0];
	if (i <= 0 || i > 0) return n;
	const s = e * t;
	let r = lv[s];
	if ((r === void 0 && ((r = new Float32Array(s)), (lv[s] = r)), e !== 0)) {
		i.toArray(r, 0);
		for (let o = 1, a = 0; o !== e; ++o) (a += t), n[o].toArray(r, a);
	}
	return r;
}
function gn(n, e) {
	if (n.length !== e.length) return !1;
	for (let t = 0, i = n.length; t < i; t++) if (n[t] !== e[t]) return !1;
	return !0;
}
function vn(n, e) {
	for (let t = 0, i = e.length; t < i; t++) n[t] = e[t];
}
function Mh(n, e) {
	let t = uv[e];
	t === void 0 && ((t = new Int32Array(e)), (uv[e] = t));
	for (let i = 0; i !== e; ++i) t[i] = n.allocateTextureUnit();
	return t;
}
function LO(n, e) {
	const t = this.cache;
	t[0] !== e && (n.uniform1f(this.addr, e), (t[0] = e));
}
function UO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y) && (n.uniform2f(this.addr, e.x, e.y), (t[0] = e.x), (t[1] = e.y));
	else {
		if (gn(t, e)) return;
		n.uniform2fv(this.addr, e), vn(t, e);
	}
}
function FO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) &&
			(n.uniform3f(this.addr, e.x, e.y, e.z), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z));
	else if (e.r !== void 0)
		(t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) &&
			(n.uniform3f(this.addr, e.r, e.g, e.b), (t[0] = e.r), (t[1] = e.g), (t[2] = e.b));
	else {
		if (gn(t, e)) return;
		n.uniform3fv(this.addr, e), vn(t, e);
	}
}
function BO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) &&
			(n.uniform4f(this.addr, e.x, e.y, e.z, e.w), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z), (t[3] = e.w));
	else {
		if (gn(t, e)) return;
		n.uniform4fv(this.addr, e), vn(t, e);
	}
}
function kO(n, e) {
	const t = this.cache,
		i = e.elements;
	if (i === void 0) {
		if (gn(t, e)) return;
		n.uniformMatrix2fv(this.addr, !1, e), vn(t, e);
	} else {
		if (gn(t, i)) return;
		pv.set(i), n.uniformMatrix2fv(this.addr, !1, pv), vn(t, i);
	}
}
function VO(n, e) {
	const t = this.cache,
		i = e.elements;
	if (i === void 0) {
		if (gn(t, e)) return;
		n.uniformMatrix3fv(this.addr, !1, e), vn(t, e);
	} else {
		if (gn(t, i)) return;
		dv.set(i), n.uniformMatrix3fv(this.addr, !1, dv), vn(t, i);
	}
}
function GO(n, e) {
	const t = this.cache,
		i = e.elements;
	if (i === void 0) {
		if (gn(t, e)) return;
		n.uniformMatrix4fv(this.addr, !1, e), vn(t, e);
	} else {
		if (gn(t, i)) return;
		hv.set(i), n.uniformMatrix4fv(this.addr, !1, hv), vn(t, i);
	}
}
function zO(n, e) {
	const t = this.cache;
	t[0] !== e && (n.uniform1i(this.addr, e), (t[0] = e));
}
function HO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y) && (n.uniform2i(this.addr, e.x, e.y), (t[0] = e.x), (t[1] = e.y));
	else {
		if (gn(t, e)) return;
		n.uniform2iv(this.addr, e), vn(t, e);
	}
}
function WO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) &&
			(n.uniform3i(this.addr, e.x, e.y, e.z), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z));
	else {
		if (gn(t, e)) return;
		n.uniform3iv(this.addr, e), vn(t, e);
	}
}
function jO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) &&
			(n.uniform4i(this.addr, e.x, e.y, e.z, e.w), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z), (t[3] = e.w));
	else {
		if (gn(t, e)) return;
		n.uniform4iv(this.addr, e), vn(t, e);
	}
}
function XO(n, e) {
	const t = this.cache;
	t[0] !== e && (n.uniform1ui(this.addr, e), (t[0] = e));
}
function $O(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y) && (n.uniform2ui(this.addr, e.x, e.y), (t[0] = e.x), (t[1] = e.y));
	else {
		if (gn(t, e)) return;
		n.uniform2uiv(this.addr, e), vn(t, e);
	}
}
function qO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) &&
			(n.uniform3ui(this.addr, e.x, e.y, e.z), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z));
	else {
		if (gn(t, e)) return;
		n.uniform3uiv(this.addr, e), vn(t, e);
	}
}
function YO(n, e) {
	const t = this.cache;
	if (e.x !== void 0)
		(t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) &&
			(n.uniform4ui(this.addr, e.x, e.y, e.z, e.w), (t[0] = e.x), (t[1] = e.y), (t[2] = e.z), (t[3] = e.w));
	else {
		if (gn(t, e)) return;
		n.uniform4uiv(this.addr, e), vn(t, e);
	}
}
function KO(n, e, t) {
	const i = this.cache,
		s = t.allocateTextureUnit();
	i[0] !== s && (n.uniform1i(this.addr, s), (i[0] = s));
	const r = this.type === n.SAMPLER_2D_SHADOW ? Wb : Hb;
	t.setTexture2D(e || r, s);
}
function ZO(n, e, t) {
	const i = this.cache,
		s = t.allocateTextureUnit();
	i[0] !== s && (n.uniform1i(this.addr, s), (i[0] = s)), t.setTexture3D(e || Xb, s);
}
function QO(n, e, t) {
	const i = this.cache,
		s = t.allocateTextureUnit();
	i[0] !== s && (n.uniform1i(this.addr, s), (i[0] = s)), t.setTextureCube(e || $b, s);
}
function JO(n, e, t) {
	const i = this.cache,
		s = t.allocateTextureUnit();
	i[0] !== s && (n.uniform1i(this.addr, s), (i[0] = s)), t.setTexture2DArray(e || jb, s);
}
function eP(n) {
	switch (n) {
		case 5126:
			return LO;
		case 35664:
			return UO;
		case 35665:
			return FO;
		case 35666:
			return BO;
		case 35674:
			return kO;
		case 35675:
			return VO;
		case 35676:
			return GO;
		case 5124:
		case 35670:
			return zO;
		case 35667:
		case 35671:
			return HO;
		case 35668:
		case 35672:
			return WO;
		case 35669:
		case 35673:
			return jO;
		case 5125:
			return XO;
		case 36294:
			return $O;
		case 36295:
			return qO;
		case 36296:
			return YO;
		case 35678:
		case 36198:
		case 36298:
		case 36306:
		case 35682:
			return KO;
		case 35679:
		case 36299:
		case 36307:
			return ZO;
		case 35680:
		case 36300:
		case 36308:
		case 36293:
			return QO;
		case 36289:
		case 36303:
		case 36311:
		case 36292:
			return JO;
	}
}
function tP(n, e) {
	n.uniform1fv(this.addr, e);
}
function nP(n, e) {
	const t = Ra(e, this.size, 2);
	n.uniform2fv(this.addr, t);
}
function iP(n, e) {
	const t = Ra(e, this.size, 3);
	n.uniform3fv(this.addr, t);
}
function sP(n, e) {
	const t = Ra(e, this.size, 4);
	n.uniform4fv(this.addr, t);
}
function rP(n, e) {
	const t = Ra(e, this.size, 4);
	n.uniformMatrix2fv(this.addr, !1, t);
}
function oP(n, e) {
	const t = Ra(e, this.size, 9);
	n.uniformMatrix3fv(this.addr, !1, t);
}
function aP(n, e) {
	const t = Ra(e, this.size, 16);
	n.uniformMatrix4fv(this.addr, !1, t);
}
function cP(n, e) {
	n.uniform1iv(this.addr, e);
}
function lP(n, e) {
	n.uniform2iv(this.addr, e);
}
function uP(n, e) {
	n.uniform3iv(this.addr, e);
}
function hP(n, e) {
	n.uniform4iv(this.addr, e);
}
function dP(n, e) {
	n.uniform1uiv(this.addr, e);
}
function pP(n, e) {
	n.uniform2uiv(this.addr, e);
}
function fP(n, e) {
	n.uniform3uiv(this.addr, e);
}
function _P(n, e) {
	n.uniform4uiv(this.addr, e);
}
function mP(n, e, t) {
	const i = this.cache,
		s = e.length,
		r = Mh(t, s);
	gn(i, r) || (n.uniform1iv(this.addr, r), vn(i, r));
	for (let o = 0; o !== s; ++o) t.setTexture2D(e[o] || Hb, r[o]);
}
function gP(n, e, t) {
	const i = this.cache,
		s = e.length,
		r = Mh(t, s);
	gn(i, r) || (n.uniform1iv(this.addr, r), vn(i, r));
	for (let o = 0; o !== s; ++o) t.setTexture3D(e[o] || Xb, r[o]);
}
function vP(n, e, t) {
	const i = this.cache,
		s = e.length,
		r = Mh(t, s);
	gn(i, r) || (n.uniform1iv(this.addr, r), vn(i, r));
	for (let o = 0; o !== s; ++o) t.setTextureCube(e[o] || $b, r[o]);
}
function EP(n, e, t) {
	const i = this.cache,
		s = e.length,
		r = Mh(t, s);
	gn(i, r) || (n.uniform1iv(this.addr, r), vn(i, r));
	for (let o = 0; o !== s; ++o) t.setTexture2DArray(e[o] || jb, r[o]);
}
function CP(n) {
	switch (n) {
		case 5126:
			return tP;
		case 35664:
			return nP;
		case 35665:
			return iP;
		case 35666:
			return sP;
		case 35674:
			return rP;
		case 35675:
			return oP;
		case 35676:
			return aP;
		case 5124:
		case 35670:
			return cP;
		case 35667:
		case 35671:
			return lP;
		case 35668:
		case 35672:
			return uP;
		case 35669:
		case 35673:
			return hP;
		case 5125:
			return dP;
		case 36294:
			return pP;
		case 36295:
			return fP;
		case 36296:
			return _P;
		case 35678:
		case 36198:
		case 36298:
		case 36306:
		case 35682:
			return mP;
		case 35679:
		case 36299:
		case 36307:
			return gP;
		case 35680:
		case 36300:
		case 36308:
		case 36293:
			return vP;
		case 36289:
		case 36303:
		case 36311:
		case 36292:
			return EP;
	}
}
class yP {
	constructor(e, t, i) {
		(this.id = e), (this.addr = i), (this.cache = []), (this.type = t.type), (this.setValue = eP(t.type));
	}
}
class bP {
	constructor(e, t, i) {
		(this.id = e),
			(this.addr = i),
			(this.cache = []),
			(this.type = t.type),
			(this.size = t.size),
			(this.setValue = CP(t.type));
	}
}
class SP {
	constructor(e) {
		(this.id = e), (this.seq = []), (this.map = {});
	}
	setValue(e, t, i) {
		const s = this.seq;
		for (let r = 0, o = s.length; r !== o; ++r) {
			const a = s[r];
			a.setValue(e, t[a.id], i);
		}
	}
}
const Pd = /(\w+)(\])?(\[|\.)?/g;
function fv(n, e) {
	n.seq.push(e), (n.map[e.id] = e);
}
function AP(n, e, t) {
	const i = n.name,
		s = i.length;
	for (Pd.lastIndex = 0; ; ) {
		const r = Pd.exec(i),
			o = Pd.lastIndex;
		let a = r[1];
		const c = r[2] === ']',
			l = r[3];
		if ((c && (a = a | 0), l === void 0 || (l === '[' && o + 2 === s))) {
			fv(t, l === void 0 ? new yP(a, n, e) : new bP(a, n, e));
			break;
		} else {
			let h = t.map[a];
			h === void 0 && ((h = new SP(a)), fv(t, h)), (t = h);
		}
	}
}
class Mu {
	constructor(e, t) {
		(this.seq = []), (this.map = {});
		const i = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
		for (let s = 0; s < i; ++s) {
			const r = e.getActiveUniform(t, s),
				o = e.getUniformLocation(t, r.name);
			AP(r, o, this);
		}
	}
	setValue(e, t, i, s) {
		const r = this.map[t];
		r !== void 0 && r.setValue(e, i, s);
	}
	setOptional(e, t, i) {
		const s = t[i];
		s !== void 0 && this.setValue(e, i, s);
	}
	static upload(e, t, i, s) {
		for (let r = 0, o = t.length; r !== o; ++r) {
			const a = t[r],
				c = i[a.id];
			c.needsUpdate !== !1 && a.setValue(e, c.value, s);
		}
	}
	static seqWithValue(e, t) {
		const i = [];
		for (let s = 0, r = e.length; s !== r; ++s) {
			const o = e[s];
			o.id in t && i.push(o);
		}
		return i;
	}
}
function _v(n, e, t) {
	const i = n.createShader(e);
	return n.shaderSource(i, t), n.compileShader(i), i;
}
const xP = 37297;
let MP = 0;
function TP(n, e) {
	const t = n.split(`
`),
		i = [],
		s = Math.max(e - 6, 0),
		r = Math.min(e + 6, t.length);
	for (let o = s; o < r; o++) {
		const a = o + 1;
		i.push(`${a === e ? '>' : ' '} ${a}: ${t[o]}`);
	}
	return i.join(`
`);
}
function RP(n) {
	const e = Mt.getPrimaries(Mt.workingColorSpace),
		t = Mt.getPrimaries(n);
	let i;
	switch (
		(e === t
			? (i = '')
			: e === $u && t === Xu
			? (i = 'LinearDisplayP3ToLinearSRGB')
			: e === Xu && t === $u && (i = 'LinearSRGBToLinearDisplayP3'),
		n)
	) {
		case $n:
		case yr:
			return [i, 'LinearTransferOETF'];
		case en:
		case io:
			return [i, 'sRGBTransferOETF'];
		default:
			return console.warn('THREE.WebGLProgram: Unsupported color space:', n), [i, 'LinearTransferOETF'];
	}
}
function mv(n, e, t) {
	const i = n.getShaderParameter(e, n.COMPILE_STATUS),
		s = n.getShaderInfoLog(e).trim();
	if (i && s === '') return '';
	const r = /ERROR: 0:(\d+)/.exec(s);
	if (r) {
		const o = parseInt(r[1]);
		return (
			t.toUpperCase() +
			`

` +
			s +
			`

` +
			TP(n.getShaderSource(e), o)
		);
	} else return s;
}
function wP(n, e) {
	const t = RP(e);
	return `vec4 ${n}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function OP(n, e) {
	let t;
	switch (e) {
		case vb:
			t = 'Linear';
			break;
		case Eb:
			t = 'Reinhard';
			break;
		case Cb:
			t = 'OptimizedCineon';
			break;
		case yb:
			t = 'ACESFilmic';
			break;
		case DM:
			t = 'Custom';
			break;
		default:
			console.warn('THREE.WebGLProgram: Unsupported toneMapping:', e), (t = 'Linear');
	}
	return 'vec3 ' + n + '( vec3 color ) { return ' + t + 'ToneMapping( color ); }';
}
function PP(n) {
	return [
		n.extensionDerivatives ||
		n.envMapCubeUVHeight ||
		n.bumpMap ||
		n.normalMapTangentSpace ||
		n.clearcoatNormalMap ||
		n.flatShading ||
		n.shaderID === 'physical'
			? '#extension GL_OES_standard_derivatives : enable'
			: '',
		(n.extensionFragDepth || n.logarithmicDepthBuffer) && n.rendererExtensionFragDepth
			? '#extension GL_EXT_frag_depth : enable'
			: '',
		n.extensionDrawBuffers && n.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '',
		(n.extensionShaderTextureLOD || n.envMap || n.transmission) && n.rendererExtensionShaderTextureLod
			? '#extension GL_EXT_shader_texture_lod : enable'
			: '',
	].filter(lc).join(`
`);
}
function NP(n) {
	const e = [];
	for (const t in n) {
		const i = n[t];
		i !== !1 && e.push('#define ' + t + ' ' + i);
	}
	return e.join(`
`);
}
function IP(n, e) {
	const t = {},
		i = n.getProgramParameter(e, n.ACTIVE_ATTRIBUTES);
	for (let s = 0; s < i; s++) {
		const r = n.getActiveAttrib(e, s),
			o = r.name;
		let a = 1;
		r.type === n.FLOAT_MAT2 && (a = 2),
			r.type === n.FLOAT_MAT3 && (a = 3),
			r.type === n.FLOAT_MAT4 && (a = 4),
			(t[o] = {type: r.type, location: n.getAttribLocation(e, o), locationSize: a});
	}
	return t;
}
function lc(n) {
	return n !== '';
}
function gv(n, e) {
	const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
	return n
		.replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
		.replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
		.replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps)
		.replace(/NUM_SPOT_LIGHT_COORDS/g, t)
		.replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
		.replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
		.replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
		.replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows)
		.replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps)
		.replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows)
		.replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function vv(n, e) {
	return n
		.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes)
		.replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const DP = /^[ \t]*#include +<([\w\d./]+)>/gm;
function Jp(n) {
	return n.replace(DP, UP);
}
const LP = new Map([
	['encodings_fragment', 'colorspace_fragment'],
	['encodings_pars_fragment', 'colorspace_pars_fragment'],
	['output_fragment', 'opaque_fragment'],
]);
function UP(n, e) {
	let t = lt[e];
	if (t === void 0) {
		const i = LP.get(e);
		if (i !== void 0)
			(t = lt[i]),
				console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, i);
		else throw new Error('Can not resolve #include <' + e + '>');
	}
	return Jp(t);
}
const FP =
	/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function Ev(n) {
	return n.replace(FP, BP);
}
function BP(n, e, t, i) {
	let s = '';
	for (let r = parseInt(e); r < parseInt(t); r++)
		s += i.replace(/\[\s*i\s*\]/g, '[ ' + r + ' ]').replace(/UNROLLED_LOOP_INDEX/g, r);
	return s;
}
function Cv(n) {
	let e =
		'precision ' +
		n.precision +
		` float;
precision ` +
		n.precision +
		' int;';
	return (
		n.precision === 'highp'
			? (e += `
#define HIGH_PRECISION`)
			: n.precision === 'mediump'
			? (e += `
#define MEDIUM_PRECISION`)
			: n.precision === 'lowp' &&
			  (e += `
#define LOW_PRECISION`),
		e
	);
}
function kP(n) {
	let e = 'SHADOWMAP_TYPE_BASIC';
	return (
		n.shadowMapType === r_
			? (e = 'SHADOWMAP_TYPE_PCF')
			: n.shadowMapType === gb
			? (e = 'SHADOWMAP_TYPE_PCF_SOFT')
			: n.shadowMapType === Ki && (e = 'SHADOWMAP_TYPE_VSM'),
		e
	);
}
function VP(n) {
	let e = 'ENVMAP_TYPE_CUBE';
	if (n.envMap)
		switch (n.envMapMode) {
			case Yr:
			case Kr:
				e = 'ENVMAP_TYPE_CUBE';
				break;
			case xa:
				e = 'ENVMAP_TYPE_CUBE_UV';
				break;
		}
	return e;
}
function GP(n) {
	let e = 'ENVMAP_MODE_REFLECTION';
	if (n.envMap)
		switch (n.envMapMode) {
			case Kr:
				e = 'ENVMAP_MODE_REFRACTION';
				break;
		}
	return e;
}
function zP(n) {
	let e = 'ENVMAP_BLENDING_NONE';
	if (n.envMap)
		switch (n.combine) {
			case yh:
				e = 'ENVMAP_BLENDING_MULTIPLY';
				break;
			case NM:
				e = 'ENVMAP_BLENDING_MIX';
				break;
			case IM:
				e = 'ENVMAP_BLENDING_ADD';
				break;
		}
	return e;
}
function HP(n) {
	const e = n.envMapCubeUVHeight;
	if (e === null) return null;
	const t = Math.log2(e) - 2,
		i = 1 / e;
	return {texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: i, maxMip: t};
}
function WP(n, e, t, i) {
	const s = n.getContext(),
		r = t.defines;
	let o = t.vertexShader,
		a = t.fragmentShader;
	const c = kP(t),
		l = VP(t),
		u = GP(t),
		h = zP(t),
		d = HP(t),
		p = t.isWebGL2 ? '' : PP(t),
		m = NP(r),
		g = s.createProgram();
	let _,
		f,
		y = t.glslVersion
			? '#version ' +
			  t.glslVersion +
			  `
`
			: '';
	t.isRawShaderMaterial
		? ((_ = ['#define SHADER_TYPE ' + t.shaderType, '#define SHADER_NAME ' + t.shaderName, m].filter(lc).join(`
`)),
		  _.length > 0 &&
				(_ += `
`),
		  (f = [p, '#define SHADER_TYPE ' + t.shaderType, '#define SHADER_NAME ' + t.shaderName, m].filter(lc).join(`
`)),
		  f.length > 0 &&
				(f += `
`))
		: ((_ = [
				Cv(t),
				'#define SHADER_TYPE ' + t.shaderType,
				'#define SHADER_NAME ' + t.shaderName,
				m,
				t.batching ? '#define USE_BATCHING' : '',
				t.instancing ? '#define USE_INSTANCING' : '',
				t.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
				t.useFog && t.fog ? '#define USE_FOG' : '',
				t.useFog && t.fogExp2 ? '#define FOG_EXP2' : '',
				t.map ? '#define USE_MAP' : '',
				t.envMap ? '#define USE_ENVMAP' : '',
				t.envMap ? '#define ' + u : '',
				t.lightMap ? '#define USE_LIGHTMAP' : '',
				t.aoMap ? '#define USE_AOMAP' : '',
				t.bumpMap ? '#define USE_BUMPMAP' : '',
				t.normalMap ? '#define USE_NORMALMAP' : '',
				t.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
				t.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
				t.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',
				t.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				t.anisotropy ? '#define USE_ANISOTROPY' : '',
				t.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',
				t.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
				t.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
				t.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
				t.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
				t.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',
				t.specularMap ? '#define USE_SPECULARMAP' : '',
				t.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
				t.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',
				t.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				t.metalnessMap ? '#define USE_METALNESSMAP' : '',
				t.alphaMap ? '#define USE_ALPHAMAP' : '',
				t.alphaHash ? '#define USE_ALPHAHASH' : '',
				t.transmission ? '#define USE_TRANSMISSION' : '',
				t.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
				t.thicknessMap ? '#define USE_THICKNESSMAP' : '',
				t.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
				t.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',
				t.mapUv ? '#define MAP_UV ' + t.mapUv : '',
				t.alphaMapUv ? '#define ALPHAMAP_UV ' + t.alphaMapUv : '',
				t.lightMapUv ? '#define LIGHTMAP_UV ' + t.lightMapUv : '',
				t.aoMapUv ? '#define AOMAP_UV ' + t.aoMapUv : '',
				t.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + t.emissiveMapUv : '',
				t.bumpMapUv ? '#define BUMPMAP_UV ' + t.bumpMapUv : '',
				t.normalMapUv ? '#define NORMALMAP_UV ' + t.normalMapUv : '',
				t.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + t.displacementMapUv : '',
				t.metalnessMapUv ? '#define METALNESSMAP_UV ' + t.metalnessMapUv : '',
				t.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + t.roughnessMapUv : '',
				t.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + t.anisotropyMapUv : '',
				t.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + t.clearcoatMapUv : '',
				t.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + t.clearcoatNormalMapUv : '',
				t.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + t.clearcoatRoughnessMapUv : '',
				t.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + t.iridescenceMapUv : '',
				t.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + t.iridescenceThicknessMapUv : '',
				t.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + t.sheenColorMapUv : '',
				t.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + t.sheenRoughnessMapUv : '',
				t.specularMapUv ? '#define SPECULARMAP_UV ' + t.specularMapUv : '',
				t.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + t.specularColorMapUv : '',
				t.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + t.specularIntensityMapUv : '',
				t.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + t.transmissionMapUv : '',
				t.thicknessMapUv ? '#define THICKNESSMAP_UV ' + t.thicknessMapUv : '',
				t.vertexTangents && t.flatShading === !1 ? '#define USE_TANGENT' : '',
				t.vertexColors ? '#define USE_COLOR' : '',
				t.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
				t.vertexUv1s ? '#define USE_UV1' : '',
				t.vertexUv2s ? '#define USE_UV2' : '',
				t.vertexUv3s ? '#define USE_UV3' : '',
				t.pointsUvs ? '#define USE_POINTS_UV' : '',
				t.flatShading ? '#define FLAT_SHADED' : '',
				t.skinning ? '#define USE_SKINNING' : '',
				t.morphTargets ? '#define USE_MORPHTARGETS' : '',
				t.morphNormals && t.flatShading === !1 ? '#define USE_MORPHNORMALS' : '',
				t.morphColors && t.isWebGL2 ? '#define USE_MORPHCOLORS' : '',
				t.morphTargetsCount > 0 && t.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '',
				t.morphTargetsCount > 0 && t.isWebGL2
					? '#define MORPHTARGETS_TEXTURE_STRIDE ' + t.morphTextureStride
					: '',
				t.morphTargetsCount > 0 && t.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + t.morphTargetsCount : '',
				t.doubleSided ? '#define DOUBLE_SIDED' : '',
				t.flipSided ? '#define FLIP_SIDED' : '',
				t.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				t.shadowMapEnabled ? '#define ' + c : '',
				t.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
				t.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',
				t.useLegacyLights ? '#define LEGACY_LIGHTS' : '',
				t.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',
				'#ifdef USE_INSTANCING',
				'	attribute mat4 instanceMatrix;',
				'#endif',
				'#ifdef USE_INSTANCING_COLOR',
				'	attribute vec3 instanceColor;',
				'#endif',
				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',
				'#ifdef USE_UV1',
				'	attribute vec2 uv1;',
				'#endif',
				'#ifdef USE_UV2',
				'	attribute vec2 uv2;',
				'#endif',
				'#ifdef USE_UV3',
				'	attribute vec2 uv3;',
				'#endif',
				'#ifdef USE_TANGENT',
				'	attribute vec4 tangent;',
				'#endif',
				'#if defined( USE_COLOR_ALPHA )',
				'	attribute vec4 color;',
				'#elif defined( USE_COLOR )',
				'	attribute vec3 color;',
				'#endif',
				'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',
				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',
				'	#ifdef USE_MORPHNORMALS',
				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',
				'	#else',
				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',
				'	#endif',
				'#endif',
				'#ifdef USE_SKINNING',
				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',
				'#endif',
				`
`,
		  ].filter(lc).join(`
`)),
		  (f = [
				p,
				Cv(t),
				'#define SHADER_TYPE ' + t.shaderType,
				'#define SHADER_NAME ' + t.shaderName,
				m,
				t.useFog && t.fog ? '#define USE_FOG' : '',
				t.useFog && t.fogExp2 ? '#define FOG_EXP2' : '',
				t.map ? '#define USE_MAP' : '',
				t.matcap ? '#define USE_MATCAP' : '',
				t.envMap ? '#define USE_ENVMAP' : '',
				t.envMap ? '#define ' + l : '',
				t.envMap ? '#define ' + u : '',
				t.envMap ? '#define ' + h : '',
				d ? '#define CUBEUV_TEXEL_WIDTH ' + d.texelWidth : '',
				d ? '#define CUBEUV_TEXEL_HEIGHT ' + d.texelHeight : '',
				d ? '#define CUBEUV_MAX_MIP ' + d.maxMip + '.0' : '',
				t.lightMap ? '#define USE_LIGHTMAP' : '',
				t.aoMap ? '#define USE_AOMAP' : '',
				t.bumpMap ? '#define USE_BUMPMAP' : '',
				t.normalMap ? '#define USE_NORMALMAP' : '',
				t.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
				t.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
				t.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				t.anisotropy ? '#define USE_ANISOTROPY' : '',
				t.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',
				t.clearcoat ? '#define USE_CLEARCOAT' : '',
				t.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
				t.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
				t.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
				t.iridescence ? '#define USE_IRIDESCENCE' : '',
				t.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
				t.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',
				t.specularMap ? '#define USE_SPECULARMAP' : '',
				t.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
				t.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',
				t.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				t.metalnessMap ? '#define USE_METALNESSMAP' : '',
				t.alphaMap ? '#define USE_ALPHAMAP' : '',
				t.alphaTest ? '#define USE_ALPHATEST' : '',
				t.alphaHash ? '#define USE_ALPHAHASH' : '',
				t.sheen ? '#define USE_SHEEN' : '',
				t.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
				t.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',
				t.transmission ? '#define USE_TRANSMISSION' : '',
				t.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
				t.thicknessMap ? '#define USE_THICKNESSMAP' : '',
				t.vertexTangents && t.flatShading === !1 ? '#define USE_TANGENT' : '',
				t.vertexColors || t.instancingColor ? '#define USE_COLOR' : '',
				t.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
				t.vertexUv1s ? '#define USE_UV1' : '',
				t.vertexUv2s ? '#define USE_UV2' : '',
				t.vertexUv3s ? '#define USE_UV3' : '',
				t.pointsUvs ? '#define USE_POINTS_UV' : '',
				t.gradientMap ? '#define USE_GRADIENTMAP' : '',
				t.flatShading ? '#define FLAT_SHADED' : '',
				t.doubleSided ? '#define DOUBLE_SIDED' : '',
				t.flipSided ? '#define FLIP_SIDED' : '',
				t.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				t.shadowMapEnabled ? '#define ' + c : '',
				t.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
				t.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',
				t.useLegacyLights ? '#define LEGACY_LIGHTS' : '',
				t.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',
				t.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',
				t.toneMapping !== Ci ? '#define TONE_MAPPING' : '',
				t.toneMapping !== Ci ? lt.tonemapping_pars_fragment : '',
				t.toneMapping !== Ci ? OP('toneMapping', t.toneMapping) : '',
				t.dithering ? '#define DITHERING' : '',
				t.opaque ? '#define OPAQUE' : '',
				lt.colorspace_pars_fragment,
				wP('linearToOutputTexel', t.outputColorSpace),
				t.useDepthPacking ? '#define DEPTH_PACKING ' + t.depthPacking : '',
				`
`,
		  ].filter(lc).join(`
`))),
		(o = Jp(o)),
		(o = gv(o, t)),
		(o = vv(o, t)),
		(a = Jp(a)),
		(a = gv(a, t)),
		(a = vv(a, t)),
		(o = Ev(o)),
		(a = Ev(a)),
		t.isWebGL2 &&
			t.isRawShaderMaterial !== !0 &&
			((y = `#version 300 es
`),
			(_ =
				[
					'precision mediump sampler2DArray;',
					'#define attribute in',
					'#define varying out',
					'#define texture2D texture',
				].join(`
`) +
				`
` +
				_),
			(f =
				[
					'precision mediump sampler2DArray;',
					'#define varying in',
					t.glslVersion === Bg ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
					t.glslVersion === Bg ? '' : '#define gl_FragColor pc_fragColor',
					'#define gl_FragDepthEXT gl_FragDepth',
					'#define texture2D texture',
					'#define textureCube texture',
					'#define texture2DProj textureProj',
					'#define texture2DLodEXT textureLod',
					'#define texture2DProjLodEXT textureProjLod',
					'#define textureCubeLodEXT textureLod',
					'#define texture2DGradEXT textureGrad',
					'#define texture2DProjGradEXT textureProjGrad',
					'#define textureCubeGradEXT textureGrad',
				].join(`
`) +
				`
` +
				f));
	const v = y + _ + o,
		A = y + f + a,
		S = _v(s, s.VERTEX_SHADER, v),
		T = _v(s, s.FRAGMENT_SHADER, A);
	s.attachShader(g, S),
		s.attachShader(g, T),
		t.index0AttributeName !== void 0
			? s.bindAttribLocation(g, 0, t.index0AttributeName)
			: t.morphTargets === !0 && s.bindAttribLocation(g, 0, 'position'),
		s.linkProgram(g);
	function R(z) {
		if (n.debug.checkShaderErrors) {
			const B = s.getProgramInfoLog(g).trim(),
				W = s.getShaderInfoLog(S).trim(),
				F = s.getShaderInfoLog(T).trim();
			let X = !0,
				Z = !0;
			if (s.getProgramParameter(g, s.LINK_STATUS) === !1)
				if (((X = !1), typeof n.debug.onShaderError == 'function')) n.debug.onShaderError(s, g, S, T);
				else {
					const Q = mv(s, S, 'vertex'),
						he = mv(s, T, 'fragment');
					console.error(
						'THREE.WebGLProgram: Shader Error ' +
							s.getError() +
							' - VALIDATE_STATUS ' +
							s.getProgramParameter(g, s.VALIDATE_STATUS) +
							`

Program Info Log: ` +
							B +
							`
` +
							Q +
							`
` +
							he
					);
				}
			else
				B !== ''
					? console.warn('THREE.WebGLProgram: Program Info Log:', B)
					: (W === '' || F === '') && (Z = !1);
			Z &&
				(z.diagnostics = {
					runnable: X,
					programLog: B,
					vertexShader: {log: W, prefix: _},
					fragmentShader: {log: F, prefix: f},
				});
		}
		s.deleteShader(S), s.deleteShader(T), (D = new Mu(s, g)), (E = IP(s, g));
	}
	let D;
	this.getUniforms = function () {
		return D === void 0 && R(this), D;
	};
	let E;
	this.getAttributes = function () {
		return E === void 0 && R(this), E;
	};
	let x = t.rendererExtensionParallelShaderCompile === !1;
	return (
		(this.isReady = function () {
			return x === !1 && (x = s.getProgramParameter(g, xP)), x;
		}),
		(this.destroy = function () {
			i.releaseStatesOfProgram(this), s.deleteProgram(g), (this.program = void 0);
		}),
		(this.type = t.shaderType),
		(this.name = t.shaderName),
		(this.id = MP++),
		(this.cacheKey = e),
		(this.usedTimes = 1),
		(this.program = g),
		(this.vertexShader = S),
		(this.fragmentShader = T),
		this
	);
}
let jP = 0;
class XP {
	constructor() {
		(this.shaderCache = new Map()), (this.materialCache = new Map());
	}
	update(e) {
		const t = e.vertexShader,
			i = e.fragmentShader,
			s = this._getShaderStage(t),
			r = this._getShaderStage(i),
			o = this._getShaderCacheForMaterial(e);
		return o.has(s) === !1 && (o.add(s), s.usedTimes++), o.has(r) === !1 && (o.add(r), r.usedTimes++), this;
	}
	remove(e) {
		const t = this.materialCache.get(e);
		for (const i of t) i.usedTimes--, i.usedTimes === 0 && this.shaderCache.delete(i.code);
		return this.materialCache.delete(e), this;
	}
	getVertexShaderID(e) {
		return this._getShaderStage(e.vertexShader).id;
	}
	getFragmentShaderID(e) {
		return this._getShaderStage(e.fragmentShader).id;
	}
	dispose() {
		this.shaderCache.clear(), this.materialCache.clear();
	}
	_getShaderCacheForMaterial(e) {
		const t = this.materialCache;
		let i = t.get(e);
		return i === void 0 && ((i = new Set()), t.set(e, i)), i;
	}
	_getShaderStage(e) {
		const t = this.shaderCache;
		let i = t.get(e);
		return i === void 0 && ((i = new $P(e)), t.set(e, i)), i;
	}
}
class $P {
	constructor(e) {
		(this.id = jP++), (this.code = e), (this.usedTimes = 0);
	}
}
function qP(n, e, t, i, s, r, o) {
	const a = new m_(),
		c = new XP(),
		l = [],
		u = s.isWebGL2,
		h = s.logarithmicDepthBuffer,
		d = s.vertexTextures;
	let p = s.precision;
	const m = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'toon',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		MeshMatcapMaterial: 'matcap',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow',
		SpriteMaterial: 'sprite',
	};
	function g(E) {
		return E === 0 ? 'uv' : `uv${E}`;
	}
	function _(E, x, z, B, W) {
		const F = B.fog,
			X = W.geometry,
			Z = E.isMeshStandardMaterial ? B.environment : null,
			Q = (E.isMeshStandardMaterial ? t : e).get(E.envMap || Z),
			he = Q && Q.mapping === xa ? Q.image.height : null,
			ie = m[E.type];
		E.precision !== null &&
			((p = s.getMaxPrecision(E.precision)),
			p !== E.precision &&
				console.warn('THREE.WebGLProgram.getParameters:', E.precision, 'not supported, using', p, 'instead.'));
		const oe = X.morphAttributes.position || X.morphAttributes.normal || X.morphAttributes.color,
			de = oe !== void 0 ? oe.length : 0;
		let Te = 0;
		X.morphAttributes.position !== void 0 && (Te = 1),
			X.morphAttributes.normal !== void 0 && (Te = 2),
			X.morphAttributes.color !== void 0 && (Te = 3);
		let ee, ae, Oe, be;
		if (ie) {
			const It = ts[ie];
			(ee = It.vertexShader), (ae = It.fragmentShader);
		} else
			(ee = E.vertexShader),
				(ae = E.fragmentShader),
				c.update(E),
				(Oe = c.getVertexShaderID(E)),
				(be = c.getFragmentShaderID(E));
		const Ue = n.getRenderTarget(),
			He = W.isInstancedMesh === !0,
			Je = W.isBatchedMesh === !0,
			Ye = !!E.map,
			tt = !!E.matcap,
			q = !!Q,
			on = !!E.aoMap,
			ke = !!E.lightMap,
			st = !!E.bumpMap,
			Xe = !!E.normalMap,
			At = !!E.displacementMap,
			ot = !!E.emissiveMap,
			nt = !!E.metalnessMap,
			mt = !!E.roughnessMap,
			Wt = E.anisotropy > 0,
			Pt = E.clearcoat > 0,
			U = E.iridescence > 0,
			O = E.sheen > 0,
			Y = E.transmission > 0,
			ve = Wt && !!E.anisotropyMap,
			pe = Pt && !!E.clearcoatMap,
			Ce = Pt && !!E.clearcoatNormalMap,
			Fe = Pt && !!E.clearcoatRoughnessMap,
			Se = U && !!E.iridescenceMap,
			Ne = U && !!E.iridescenceThicknessMap,
			$e = O && !!E.sheenColorMap,
			at = O && !!E.sheenRoughnessMap,
			L = !!E.specularMap,
			ye = !!E.specularColorMap,
			De = !!E.specularIntensityMap,
			Re = Y && !!E.transmissionMap,
			Ae = Y && !!E.thicknessMap,
			Pe = !!E.gradientMap,
			se = !!E.alphaMap,
			H = E.alphaTest > 0,
			Ie = !!E.alphaHash,
			_e = !!E.extensions,
			te = !!X.attributes.uv1,
			me = !!X.attributes.uv2,
			ze = !!X.attributes.uv3;
		let ht = Ci;
		return (
			E.toneMapped && (Ue === null || Ue.isXRRenderTarget === !0) && (ht = n.toneMapping),
			{
				isWebGL2: u,
				shaderID: ie,
				shaderType: E.type,
				shaderName: E.name,
				vertexShader: ee,
				fragmentShader: ae,
				defines: E.defines,
				customVertexShaderID: Oe,
				customFragmentShaderID: be,
				isRawShaderMaterial: E.isRawShaderMaterial === !0,
				glslVersion: E.glslVersion,
				precision: p,
				batching: Je,
				instancing: He,
				instancingColor: He && W.instanceColor !== null,
				supportsVertexTextures: d,
				outputColorSpace:
					Ue === null ? n.outputColorSpace : Ue.isXRRenderTarget === !0 ? Ue.texture.colorSpace : $n,
				map: Ye,
				matcap: tt,
				envMap: q,
				envMapMode: q && Q.mapping,
				envMapCubeUVHeight: he,
				aoMap: on,
				lightMap: ke,
				bumpMap: st,
				normalMap: Xe,
				displacementMap: d && At,
				emissiveMap: ot,
				normalMapObjectSpace: Xe && E.normalMapType === f_,
				normalMapTangentSpace: Xe && E.normalMapType === Us,
				metalnessMap: nt,
				roughnessMap: mt,
				anisotropy: Wt,
				anisotropyMap: ve,
				clearcoat: Pt,
				clearcoatMap: pe,
				clearcoatNormalMap: Ce,
				clearcoatRoughnessMap: Fe,
				iridescence: U,
				iridescenceMap: Se,
				iridescenceThicknessMap: Ne,
				sheen: O,
				sheenColorMap: $e,
				sheenRoughnessMap: at,
				specularMap: L,
				specularColorMap: ye,
				specularIntensityMap: De,
				transmission: Y,
				transmissionMap: Re,
				thicknessMap: Ae,
				gradientMap: Pe,
				opaque: E.transparent === !1 && E.blending === hr,
				alphaMap: se,
				alphaTest: H,
				alphaHash: Ie,
				combine: E.combine,
				mapUv: Ye && g(E.map.channel),
				aoMapUv: on && g(E.aoMap.channel),
				lightMapUv: ke && g(E.lightMap.channel),
				bumpMapUv: st && g(E.bumpMap.channel),
				normalMapUv: Xe && g(E.normalMap.channel),
				displacementMapUv: At && g(E.displacementMap.channel),
				emissiveMapUv: ot && g(E.emissiveMap.channel),
				metalnessMapUv: nt && g(E.metalnessMap.channel),
				roughnessMapUv: mt && g(E.roughnessMap.channel),
				anisotropyMapUv: ve && g(E.anisotropyMap.channel),
				clearcoatMapUv: pe && g(E.clearcoatMap.channel),
				clearcoatNormalMapUv: Ce && g(E.clearcoatNormalMap.channel),
				clearcoatRoughnessMapUv: Fe && g(E.clearcoatRoughnessMap.channel),
				iridescenceMapUv: Se && g(E.iridescenceMap.channel),
				iridescenceThicknessMapUv: Ne && g(E.iridescenceThicknessMap.channel),
				sheenColorMapUv: $e && g(E.sheenColorMap.channel),
				sheenRoughnessMapUv: at && g(E.sheenRoughnessMap.channel),
				specularMapUv: L && g(E.specularMap.channel),
				specularColorMapUv: ye && g(E.specularColorMap.channel),
				specularIntensityMapUv: De && g(E.specularIntensityMap.channel),
				transmissionMapUv: Re && g(E.transmissionMap.channel),
				thicknessMapUv: Ae && g(E.thicknessMap.channel),
				alphaMapUv: se && g(E.alphaMap.channel),
				vertexTangents: !!X.attributes.tangent && (Xe || Wt),
				vertexColors: E.vertexColors,
				vertexAlphas: E.vertexColors === !0 && !!X.attributes.color && X.attributes.color.itemSize === 4,
				vertexUv1s: te,
				vertexUv2s: me,
				vertexUv3s: ze,
				pointsUvs: W.isPoints === !0 && !!X.attributes.uv && (Ye || se),
				fog: !!F,
				useFog: E.fog === !0,
				fogExp2: F && F.isFogExp2,
				flatShading: E.flatShading === !0,
				sizeAttenuation: E.sizeAttenuation === !0,
				logarithmicDepthBuffer: h,
				skinning: W.isSkinnedMesh === !0,
				morphTargets: X.morphAttributes.position !== void 0,
				morphNormals: X.morphAttributes.normal !== void 0,
				morphColors: X.morphAttributes.color !== void 0,
				morphTargetsCount: de,
				morphTextureStride: Te,
				numDirLights: x.directional.length,
				numPointLights: x.point.length,
				numSpotLights: x.spot.length,
				numSpotLightMaps: x.spotLightMap.length,
				numRectAreaLights: x.rectArea.length,
				numHemiLights: x.hemi.length,
				numDirLightShadows: x.directionalShadowMap.length,
				numPointLightShadows: x.pointShadowMap.length,
				numSpotLightShadows: x.spotShadowMap.length,
				numSpotLightShadowsWithMaps: x.numSpotLightShadowsWithMaps,
				numLightProbes: x.numLightProbes,
				numClippingPlanes: o.numPlanes,
				numClipIntersection: o.numIntersection,
				dithering: E.dithering,
				shadowMapEnabled: n.shadowMap.enabled && z.length > 0,
				shadowMapType: n.shadowMap.type,
				toneMapping: ht,
				useLegacyLights: n._useLegacyLights,
				decodeVideoTexture: Ye && E.map.isVideoTexture === !0 && Mt.getTransfer(E.map.colorSpace) === Dt,
				premultipliedAlpha: E.premultipliedAlpha,
				doubleSided: E.side === Zn,
				flipSided: E.side === fn,
				useDepthPacking: E.depthPacking >= 0,
				depthPacking: E.depthPacking || 0,
				index0AttributeName: E.index0AttributeName,
				extensionDerivatives: _e && E.extensions.derivatives === !0,
				extensionFragDepth: _e && E.extensions.fragDepth === !0,
				extensionDrawBuffers: _e && E.extensions.drawBuffers === !0,
				extensionShaderTextureLOD: _e && E.extensions.shaderTextureLOD === !0,
				rendererExtensionFragDepth: u || i.has('EXT_frag_depth'),
				rendererExtensionDrawBuffers: u || i.has('WEBGL_draw_buffers'),
				rendererExtensionShaderTextureLod: u || i.has('EXT_shader_texture_lod'),
				rendererExtensionParallelShaderCompile: i.has('KHR_parallel_shader_compile'),
				customProgramCacheKey: E.customProgramCacheKey(),
			}
		);
	}
	function f(E) {
		const x = [];
		if (
			(E.shaderID ? x.push(E.shaderID) : (x.push(E.customVertexShaderID), x.push(E.customFragmentShaderID)),
			E.defines !== void 0)
		)
			for (const z in E.defines) x.push(z), x.push(E.defines[z]);
		return (
			E.isRawShaderMaterial === !1 && (y(x, E), v(x, E), x.push(n.outputColorSpace)),
			x.push(E.customProgramCacheKey),
			x.join()
		);
	}
	function y(E, x) {
		E.push(x.precision),
			E.push(x.outputColorSpace),
			E.push(x.envMapMode),
			E.push(x.envMapCubeUVHeight),
			E.push(x.mapUv),
			E.push(x.alphaMapUv),
			E.push(x.lightMapUv),
			E.push(x.aoMapUv),
			E.push(x.bumpMapUv),
			E.push(x.normalMapUv),
			E.push(x.displacementMapUv),
			E.push(x.emissiveMapUv),
			E.push(x.metalnessMapUv),
			E.push(x.roughnessMapUv),
			E.push(x.anisotropyMapUv),
			E.push(x.clearcoatMapUv),
			E.push(x.clearcoatNormalMapUv),
			E.push(x.clearcoatRoughnessMapUv),
			E.push(x.iridescenceMapUv),
			E.push(x.iridescenceThicknessMapUv),
			E.push(x.sheenColorMapUv),
			E.push(x.sheenRoughnessMapUv),
			E.push(x.specularMapUv),
			E.push(x.specularColorMapUv),
			E.push(x.specularIntensityMapUv),
			E.push(x.transmissionMapUv),
			E.push(x.thicknessMapUv),
			E.push(x.combine),
			E.push(x.fogExp2),
			E.push(x.sizeAttenuation),
			E.push(x.morphTargetsCount),
			E.push(x.morphAttributeCount),
			E.push(x.numDirLights),
			E.push(x.numPointLights),
			E.push(x.numSpotLights),
			E.push(x.numSpotLightMaps),
			E.push(x.numHemiLights),
			E.push(x.numRectAreaLights),
			E.push(x.numDirLightShadows),
			E.push(x.numPointLightShadows),
			E.push(x.numSpotLightShadows),
			E.push(x.numSpotLightShadowsWithMaps),
			E.push(x.numLightProbes),
			E.push(x.shadowMapType),
			E.push(x.toneMapping),
			E.push(x.numClippingPlanes),
			E.push(x.numClipIntersection),
			E.push(x.depthPacking);
	}
	function v(E, x) {
		a.disableAll(),
			x.isWebGL2 && a.enable(0),
			x.supportsVertexTextures && a.enable(1),
			x.instancing && a.enable(2),
			x.instancingColor && a.enable(3),
			x.matcap && a.enable(4),
			x.envMap && a.enable(5),
			x.normalMapObjectSpace && a.enable(6),
			x.normalMapTangentSpace && a.enable(7),
			x.clearcoat && a.enable(8),
			x.iridescence && a.enable(9),
			x.alphaTest && a.enable(10),
			x.vertexColors && a.enable(11),
			x.vertexAlphas && a.enable(12),
			x.vertexUv1s && a.enable(13),
			x.vertexUv2s && a.enable(14),
			x.vertexUv3s && a.enable(15),
			x.vertexTangents && a.enable(16),
			x.anisotropy && a.enable(17),
			x.alphaHash && a.enable(18),
			x.batching && a.enable(19),
			E.push(a.mask),
			a.disableAll(),
			x.fog && a.enable(0),
			x.useFog && a.enable(1),
			x.flatShading && a.enable(2),
			x.logarithmicDepthBuffer && a.enable(3),
			x.skinning && a.enable(4),
			x.morphTargets && a.enable(5),
			x.morphNormals && a.enable(6),
			x.morphColors && a.enable(7),
			x.premultipliedAlpha && a.enable(8),
			x.shadowMapEnabled && a.enable(9),
			x.useLegacyLights && a.enable(10),
			x.doubleSided && a.enable(11),
			x.flipSided && a.enable(12),
			x.useDepthPacking && a.enable(13),
			x.dithering && a.enable(14),
			x.transmission && a.enable(15),
			x.sheen && a.enable(16),
			x.opaque && a.enable(17),
			x.pointsUvs && a.enable(18),
			x.decodeVideoTexture && a.enable(19),
			E.push(a.mask);
	}
	function A(E) {
		const x = m[E.type];
		let z;
		if (x) {
			const B = ts[x];
			z = Bb.clone(B.uniforms);
		} else z = E.uniforms;
		return z;
	}
	function S(E, x) {
		let z;
		for (let B = 0, W = l.length; B < W; B++) {
			const F = l[B];
			if (F.cacheKey === x) {
				(z = F), ++z.usedTimes;
				break;
			}
		}
		return z === void 0 && ((z = new WP(n, x, E, r)), l.push(z)), z;
	}
	function T(E) {
		if (--E.usedTimes === 0) {
			const x = l.indexOf(E);
			(l[x] = l[l.length - 1]), l.pop(), E.destroy();
		}
	}
	function R(E) {
		c.remove(E);
	}
	function D() {
		c.dispose();
	}
	return {
		getParameters: _,
		getProgramCacheKey: f,
		getUniforms: A,
		acquireProgram: S,
		releaseProgram: T,
		releaseShaderCache: R,
		programs: l,
		dispose: D,
	};
}
function YP() {
	let n = new WeakMap();
	function e(r) {
		let o = n.get(r);
		return o === void 0 && ((o = {}), n.set(r, o)), o;
	}
	function t(r) {
		n.delete(r);
	}
	function i(r, o, a) {
		n.get(r)[o] = a;
	}
	function s() {
		n = new WeakMap();
	}
	return {get: e, remove: t, update: i, dispose: s};
}
function KP(n, e) {
	return n.groupOrder !== e.groupOrder
		? n.groupOrder - e.groupOrder
		: n.renderOrder !== e.renderOrder
		? n.renderOrder - e.renderOrder
		: n.material.id !== e.material.id
		? n.material.id - e.material.id
		: n.z !== e.z
		? n.z - e.z
		: n.id - e.id;
}
function yv(n, e) {
	return n.groupOrder !== e.groupOrder
		? n.groupOrder - e.groupOrder
		: n.renderOrder !== e.renderOrder
		? n.renderOrder - e.renderOrder
		: n.z !== e.z
		? e.z - n.z
		: n.id - e.id;
}
function bv() {
	const n = [];
	let e = 0;
	const t = [],
		i = [],
		s = [];
	function r() {
		(e = 0), (t.length = 0), (i.length = 0), (s.length = 0);
	}
	function o(h, d, p, m, g, _) {
		let f = n[e];
		return (
			f === void 0
				? ((f = {
						id: h.id,
						object: h,
						geometry: d,
						material: p,
						groupOrder: m,
						renderOrder: h.renderOrder,
						z: g,
						group: _,
				  }),
				  (n[e] = f))
				: ((f.id = h.id),
				  (f.object = h),
				  (f.geometry = d),
				  (f.material = p),
				  (f.groupOrder = m),
				  (f.renderOrder = h.renderOrder),
				  (f.z = g),
				  (f.group = _)),
			e++,
			f
		);
	}
	function a(h, d, p, m, g, _) {
		const f = o(h, d, p, m, g, _);
		p.transmission > 0 ? i.push(f) : p.transparent === !0 ? s.push(f) : t.push(f);
	}
	function c(h, d, p, m, g, _) {
		const f = o(h, d, p, m, g, _);
		p.transmission > 0 ? i.unshift(f) : p.transparent === !0 ? s.unshift(f) : t.unshift(f);
	}
	function l(h, d) {
		t.length > 1 && t.sort(h || KP), i.length > 1 && i.sort(d || yv), s.length > 1 && s.sort(d || yv);
	}
	function u() {
		for (let h = e, d = n.length; h < d; h++) {
			const p = n[h];
			if (p.id === null) break;
			(p.id = null), (p.object = null), (p.geometry = null), (p.material = null), (p.group = null);
		}
	}
	return {opaque: t, transmissive: i, transparent: s, init: r, push: a, unshift: c, finish: u, sort: l};
}
function ZP() {
	let n = new WeakMap();
	function e(i, s) {
		const r = n.get(i);
		let o;
		return (
			r === void 0 ? ((o = new bv()), n.set(i, [o])) : s >= r.length ? ((o = new bv()), r.push(o)) : (o = r[s]), o
		);
	}
	function t() {
		n = new WeakMap();
	}
	return {get: e, dispose: t};
}
function QP() {
	const n = {};
	return {
		get: function (e) {
			if (n[e.id] !== void 0) return n[e.id];
			let t;
			switch (e.type) {
				case 'DirectionalLight':
					t = {direction: new w(), color: new Ee()};
					break;
				case 'SpotLight':
					t = {
						position: new w(),
						direction: new w(),
						color: new Ee(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0,
					};
					break;
				case 'PointLight':
					t = {position: new w(), color: new Ee(), distance: 0, decay: 0};
					break;
				case 'HemisphereLight':
					t = {direction: new w(), skyColor: new Ee(), groundColor: new Ee()};
					break;
				case 'RectAreaLight':
					t = {color: new Ee(), position: new w(), halfWidth: new w(), halfHeight: new w()};
					break;
			}
			return (n[e.id] = t), t;
		},
	};
}
function JP() {
	const n = {};
	return {
		get: function (e) {
			if (n[e.id] !== void 0) return n[e.id];
			let t;
			switch (e.type) {
				case 'DirectionalLight':
					t = {shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new re()};
					break;
				case 'SpotLight':
					t = {shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new re()};
					break;
				case 'PointLight':
					t = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new re(),
						shadowCameraNear: 1,
						shadowCameraFar: 1e3,
					};
					break;
			}
			return (n[e.id] = t), t;
		},
	};
}
let eN = 0;
function tN(n, e) {
	return (e.castShadow ? 2 : 0) - (n.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (n.map ? 1 : 0);
}
function nN(n, e) {
	const t = new QP(),
		i = JP(),
		s = {
			version: 0,
			hash: {
				directionalLength: -1,
				pointLength: -1,
				spotLength: -1,
				rectAreaLength: -1,
				hemiLength: -1,
				numDirectionalShadows: -1,
				numPointShadows: -1,
				numSpotShadows: -1,
				numSpotMaps: -1,
				numLightProbes: -1,
			},
			ambient: [0, 0, 0],
			probe: [],
			directional: [],
			directionalShadow: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotLightMap: [],
			spotShadow: [],
			spotShadowMap: [],
			spotLightMatrix: [],
			rectArea: [],
			rectAreaLTC1: null,
			rectAreaLTC2: null,
			point: [],
			pointShadow: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],
			numSpotLightShadowsWithMaps: 0,
			numLightProbes: 0,
		};
	for (let u = 0; u < 9; u++) s.probe.push(new w());
	const r = new w(),
		o = new Qe(),
		a = new Qe();
	function c(u, h) {
		let d = 0,
			p = 0,
			m = 0;
		for (let B = 0; B < 9; B++) s.probe[B].set(0, 0, 0);
		let g = 0,
			_ = 0,
			f = 0,
			y = 0,
			v = 0,
			A = 0,
			S = 0,
			T = 0,
			R = 0,
			D = 0,
			E = 0;
		u.sort(tN);
		const x = h === !0 ? Math.PI : 1;
		for (let B = 0, W = u.length; B < W; B++) {
			const F = u[B],
				X = F.color,
				Z = F.intensity,
				Q = F.distance,
				he = F.shadow && F.shadow.map ? F.shadow.map.texture : null;
			if (F.isAmbientLight) (d += X.r * Z * x), (p += X.g * Z * x), (m += X.b * Z * x);
			else if (F.isLightProbe) {
				for (let ie = 0; ie < 9; ie++) s.probe[ie].addScaledVector(F.sh.coefficients[ie], Z);
				E++;
			} else if (F.isDirectionalLight) {
				const ie = t.get(F);
				if ((ie.color.copy(F.color).multiplyScalar(F.intensity * x), F.castShadow)) {
					const oe = F.shadow,
						de = i.get(F);
					(de.shadowBias = oe.bias),
						(de.shadowNormalBias = oe.normalBias),
						(de.shadowRadius = oe.radius),
						(de.shadowMapSize = oe.mapSize),
						(s.directionalShadow[g] = de),
						(s.directionalShadowMap[g] = he),
						(s.directionalShadowMatrix[g] = F.shadow.matrix),
						A++;
				}
				(s.directional[g] = ie), g++;
			} else if (F.isSpotLight) {
				const ie = t.get(F);
				ie.position.setFromMatrixPosition(F.matrixWorld),
					ie.color.copy(X).multiplyScalar(Z * x),
					(ie.distance = Q),
					(ie.coneCos = Math.cos(F.angle)),
					(ie.penumbraCos = Math.cos(F.angle * (1 - F.penumbra))),
					(ie.decay = F.decay),
					(s.spot[f] = ie);
				const oe = F.shadow;
				if (
					(F.map && ((s.spotLightMap[R] = F.map), R++, oe.updateMatrices(F), F.castShadow && D++),
					(s.spotLightMatrix[f] = oe.matrix),
					F.castShadow)
				) {
					const de = i.get(F);
					(de.shadowBias = oe.bias),
						(de.shadowNormalBias = oe.normalBias),
						(de.shadowRadius = oe.radius),
						(de.shadowMapSize = oe.mapSize),
						(s.spotShadow[f] = de),
						(s.spotShadowMap[f] = he),
						T++;
				}
				f++;
			} else if (F.isRectAreaLight) {
				const ie = t.get(F);
				ie.color.copy(X).multiplyScalar(Z),
					ie.halfWidth.set(F.width * 0.5, 0, 0),
					ie.halfHeight.set(0, F.height * 0.5, 0),
					(s.rectArea[y] = ie),
					y++;
			} else if (F.isPointLight) {
				const ie = t.get(F);
				if (
					(ie.color.copy(F.color).multiplyScalar(F.intensity * x),
					(ie.distance = F.distance),
					(ie.decay = F.decay),
					F.castShadow)
				) {
					const oe = F.shadow,
						de = i.get(F);
					(de.shadowBias = oe.bias),
						(de.shadowNormalBias = oe.normalBias),
						(de.shadowRadius = oe.radius),
						(de.shadowMapSize = oe.mapSize),
						(de.shadowCameraNear = oe.camera.near),
						(de.shadowCameraFar = oe.camera.far),
						(s.pointShadow[_] = de),
						(s.pointShadowMap[_] = he),
						(s.pointShadowMatrix[_] = F.shadow.matrix),
						S++;
				}
				(s.point[_] = ie), _++;
			} else if (F.isHemisphereLight) {
				const ie = t.get(F);
				ie.skyColor.copy(F.color).multiplyScalar(Z * x),
					ie.groundColor.copy(F.groundColor).multiplyScalar(Z * x),
					(s.hemi[v] = ie),
					v++;
			}
		}
		y > 0 &&
			(e.isWebGL2 || n.has('OES_texture_float_linear') === !0
				? ((s.rectAreaLTC1 = we.LTC_FLOAT_1), (s.rectAreaLTC2 = we.LTC_FLOAT_2))
				: n.has('OES_texture_half_float_linear') === !0
				? ((s.rectAreaLTC1 = we.LTC_HALF_1), (s.rectAreaLTC2 = we.LTC_HALF_2))
				: console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.')),
			(s.ambient[0] = d),
			(s.ambient[1] = p),
			(s.ambient[2] = m);
		const z = s.hash;
		(z.directionalLength !== g ||
			z.pointLength !== _ ||
			z.spotLength !== f ||
			z.rectAreaLength !== y ||
			z.hemiLength !== v ||
			z.numDirectionalShadows !== A ||
			z.numPointShadows !== S ||
			z.numSpotShadows !== T ||
			z.numSpotMaps !== R ||
			z.numLightProbes !== E) &&
			((s.directional.length = g),
			(s.spot.length = f),
			(s.rectArea.length = y),
			(s.point.length = _),
			(s.hemi.length = v),
			(s.directionalShadow.length = A),
			(s.directionalShadowMap.length = A),
			(s.pointShadow.length = S),
			(s.pointShadowMap.length = S),
			(s.spotShadow.length = T),
			(s.spotShadowMap.length = T),
			(s.directionalShadowMatrix.length = A),
			(s.pointShadowMatrix.length = S),
			(s.spotLightMatrix.length = T + R - D),
			(s.spotLightMap.length = R),
			(s.numSpotLightShadowsWithMaps = D),
			(s.numLightProbes = E),
			(z.directionalLength = g),
			(z.pointLength = _),
			(z.spotLength = f),
			(z.rectAreaLength = y),
			(z.hemiLength = v),
			(z.numDirectionalShadows = A),
			(z.numPointShadows = S),
			(z.numSpotShadows = T),
			(z.numSpotMaps = R),
			(z.numLightProbes = E),
			(s.version = eN++));
	}
	function l(u, h) {
		let d = 0,
			p = 0,
			m = 0,
			g = 0,
			_ = 0;
		const f = h.matrixWorldInverse;
		for (let y = 0, v = u.length; y < v; y++) {
			const A = u[y];
			if (A.isDirectionalLight) {
				const S = s.directional[d];
				S.direction.setFromMatrixPosition(A.matrixWorld),
					r.setFromMatrixPosition(A.target.matrixWorld),
					S.direction.sub(r),
					S.direction.transformDirection(f),
					d++;
			} else if (A.isSpotLight) {
				const S = s.spot[m];
				S.position.setFromMatrixPosition(A.matrixWorld),
					S.position.applyMatrix4(f),
					S.direction.setFromMatrixPosition(A.matrixWorld),
					r.setFromMatrixPosition(A.target.matrixWorld),
					S.direction.sub(r),
					S.direction.transformDirection(f),
					m++;
			} else if (A.isRectAreaLight) {
				const S = s.rectArea[g];
				S.position.setFromMatrixPosition(A.matrixWorld),
					S.position.applyMatrix4(f),
					a.identity(),
					o.copy(A.matrixWorld),
					o.premultiply(f),
					a.extractRotation(o),
					S.halfWidth.set(A.width * 0.5, 0, 0),
					S.halfHeight.set(0, A.height * 0.5, 0),
					S.halfWidth.applyMatrix4(a),
					S.halfHeight.applyMatrix4(a),
					g++;
			} else if (A.isPointLight) {
				const S = s.point[p];
				S.position.setFromMatrixPosition(A.matrixWorld), S.position.applyMatrix4(f), p++;
			} else if (A.isHemisphereLight) {
				const S = s.hemi[_];
				S.direction.setFromMatrixPosition(A.matrixWorld), S.direction.transformDirection(f), _++;
			}
		}
	}
	return {setup: c, setupView: l, state: s};
}
function Sv(n, e) {
	const t = new nN(n, e),
		i = [],
		s = [];
	function r() {
		(i.length = 0), (s.length = 0);
	}
	function o(h) {
		i.push(h);
	}
	function a(h) {
		s.push(h);
	}
	function c(h) {
		t.setup(i, h);
	}
	function l(h) {
		t.setupView(i, h);
	}
	return {
		init: r,
		state: {lightsArray: i, shadowsArray: s, lights: t},
		setupLights: c,
		setupLightsView: l,
		pushLight: o,
		pushShadow: a,
	};
}
function iN(n, e) {
	let t = new WeakMap();
	function i(r, o = 0) {
		const a = t.get(r);
		let c;
		return (
			a === void 0
				? ((c = new Sv(n, e)), t.set(r, [c]))
				: o >= a.length
				? ((c = new Sv(n, e)), a.push(c))
				: (c = a[o]),
			c
		);
	}
	function s() {
		t = new WeakMap();
	}
	return {get: i, dispose: s};
}
class C_ extends An {
	constructor(e) {
		super(),
			(this.isMeshDepthMaterial = !0),
			(this.type = 'MeshDepthMaterial'),
			(this.depthPacking = GM),
			(this.map = null),
			(this.alphaMap = null),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.depthPacking = e.depthPacking),
			(this.map = e.map),
			(this.alphaMap = e.alphaMap),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			this
		);
	}
}
class y_ extends An {
	constructor(e) {
		super(),
			(this.isMeshDistanceMaterial = !0),
			(this.type = 'MeshDistanceMaterial'),
			(this.map = null),
			(this.alphaMap = null),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.map = e.map),
			(this.alphaMap = e.alphaMap),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			this
		);
	}
}
const sN = `void main() {
	gl_Position = vec4( position, 1.0 );
}`,
	rN = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function oN(n, e, t) {
	let i = new g_();
	const s = new re(),
		r = new re(),
		o = new Ke(),
		a = new C_({depthPacking: zM}),
		c = new y_(),
		l = {},
		u = t.maxTextureSize,
		h = {[Ln]: fn, [fn]: Ln, [Zn]: Zn},
		d = new ti({
			defines: {VSM_SAMPLES: 8},
			uniforms: {shadow_pass: {value: null}, resolution: {value: new re()}, radius: {value: 4}},
			vertexShader: sN,
			fragmentShader: rN,
		}),
		p = d.clone();
	p.defines.HORIZONTAL_PASS = 1;
	const m = new qn();
	m.setAttribute('position', new kn(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
	const g = new On(m, d),
		_ = this;
	(this.enabled = !1), (this.autoUpdate = !0), (this.needsUpdate = !1), (this.type = r_);
	let f = this.type;
	this.render = function (S, T, R) {
		if (_.enabled === !1 || (_.autoUpdate === !1 && _.needsUpdate === !1) || S.length === 0) return;
		const D = n.getRenderTarget(),
			E = n.getActiveCubeFace(),
			x = n.getActiveMipmapLevel(),
			z = n.state;
		z.setBlending(Ps), z.buffers.color.setClear(1, 1, 1, 1), z.buffers.depth.setTest(!0), z.setScissorTest(!1);
		const B = f !== Ki && this.type === Ki,
			W = f === Ki && this.type !== Ki;
		for (let F = 0, X = S.length; F < X; F++) {
			const Z = S[F],
				Q = Z.shadow;
			if (Q === void 0) {
				console.warn('THREE.WebGLShadowMap:', Z, 'has no shadow.');
				continue;
			}
			if (Q.autoUpdate === !1 && Q.needsUpdate === !1) continue;
			s.copy(Q.mapSize);
			const he = Q.getFrameExtents();
			if (
				(s.multiply(he),
				r.copy(Q.mapSize),
				(s.x > u || s.y > u) &&
					(s.x > u && ((r.x = Math.floor(u / he.x)), (s.x = r.x * he.x), (Q.mapSize.x = r.x)),
					s.y > u && ((r.y = Math.floor(u / he.y)), (s.y = r.y * he.y), (Q.mapSize.y = r.y))),
				Q.map === null || B === !0 || W === !0)
			) {
				const oe = this.type !== Ki ? {minFilter: qt, magFilter: qt} : {};
				Q.map !== null && Q.map.dispose(),
					(Q.map = new Gi(s.x, s.y, oe)),
					(Q.map.texture.name = Z.name + '.shadowMap'),
					Q.camera.updateProjectionMatrix();
			}
			n.setRenderTarget(Q.map), n.clear();
			const ie = Q.getViewportCount();
			for (let oe = 0; oe < ie; oe++) {
				const de = Q.getViewport(oe);
				o.set(r.x * de.x, r.y * de.y, r.x * de.z, r.y * de.w),
					z.viewport(o),
					Q.updateMatrices(Z, oe),
					(i = Q.getFrustum()),
					A(T, R, Q.camera, Z, this.type);
			}
			Q.isPointLightShadow !== !0 && this.type === Ki && y(Q, R), (Q.needsUpdate = !1);
		}
		(f = this.type), (_.needsUpdate = !1), n.setRenderTarget(D, E, x);
	};
	function y(S, T) {
		const R = e.update(g);
		d.defines.VSM_SAMPLES !== S.blurSamples &&
			((d.defines.VSM_SAMPLES = S.blurSamples),
			(p.defines.VSM_SAMPLES = S.blurSamples),
			(d.needsUpdate = !0),
			(p.needsUpdate = !0)),
			S.mapPass === null && (S.mapPass = new Gi(s.x, s.y)),
			(d.uniforms.shadow_pass.value = S.map.texture),
			(d.uniforms.resolution.value = S.mapSize),
			(d.uniforms.radius.value = S.radius),
			n.setRenderTarget(S.mapPass),
			n.clear(),
			n.renderBufferDirect(T, null, R, d, g, null),
			(p.uniforms.shadow_pass.value = S.mapPass.texture),
			(p.uniforms.resolution.value = S.mapSize),
			(p.uniforms.radius.value = S.radius),
			n.setRenderTarget(S.map),
			n.clear(),
			n.renderBufferDirect(T, null, R, p, g, null);
	}
	function v(S, T, R, D) {
		let E = null;
		const x = R.isPointLight === !0 ? S.customDistanceMaterial : S.customDepthMaterial;
		if (x !== void 0) E = x;
		else if (
			((E = R.isPointLight === !0 ? c : a),
			(n.localClippingEnabled &&
				T.clipShadows === !0 &&
				Array.isArray(T.clippingPlanes) &&
				T.clippingPlanes.length !== 0) ||
				(T.displacementMap && T.displacementScale !== 0) ||
				(T.alphaMap && T.alphaTest > 0) ||
				(T.map && T.alphaTest > 0))
		) {
			const z = E.uuid,
				B = T.uuid;
			let W = l[z];
			W === void 0 && ((W = {}), (l[z] = W));
			let F = W[B];
			F === void 0 && ((F = E.clone()), (W[B] = F)), (E = F);
		}
		if (
			((E.visible = T.visible),
			(E.wireframe = T.wireframe),
			D === Ki
				? (E.side = T.shadowSide !== null ? T.shadowSide : T.side)
				: (E.side = T.shadowSide !== null ? T.shadowSide : h[T.side]),
			(E.alphaMap = T.alphaMap),
			(E.alphaTest = T.alphaTest),
			(E.map = T.map),
			(E.clipShadows = T.clipShadows),
			(E.clippingPlanes = T.clippingPlanes),
			(E.clipIntersection = T.clipIntersection),
			(E.displacementMap = T.displacementMap),
			(E.displacementScale = T.displacementScale),
			(E.displacementBias = T.displacementBias),
			(E.wireframeLinewidth = T.wireframeLinewidth),
			(E.linewidth = T.linewidth),
			R.isPointLight === !0 && E.isMeshDistanceMaterial === !0)
		) {
			const z = n.properties.get(E);
			z.light = R;
		}
		return E;
	}
	function A(S, T, R, D, E) {
		if (S.visible === !1) return;
		if (
			S.layers.test(T.layers) &&
			(S.isMesh || S.isLine || S.isPoints) &&
			(S.castShadow || (S.receiveShadow && E === Ki)) &&
			(!S.frustumCulled || i.intersectsObject(S))
		) {
			S.modelViewMatrix.multiplyMatrices(R.matrixWorldInverse, S.matrixWorld);
			const B = e.update(S),
				W = S.material;
			if (Array.isArray(W)) {
				const F = B.groups;
				for (let X = 0, Z = F.length; X < Z; X++) {
					const Q = F[X],
						he = W[Q.materialIndex];
					if (he && he.visible) {
						const ie = v(S, he, D, E);
						S.onBeforeShadow(n, S, T, R, B, ie, Q),
							n.renderBufferDirect(R, null, B, ie, S, Q),
							S.onAfterShadow(n, S, T, R, B, ie, Q);
					}
				}
			} else if (W.visible) {
				const F = v(S, W, D, E);
				S.onBeforeShadow(n, S, T, R, B, F, null),
					n.renderBufferDirect(R, null, B, F, S, null),
					S.onAfterShadow(n, S, T, R, B, F, null);
			}
		}
		const z = S.children;
		for (let B = 0, W = z.length; B < W; B++) A(z[B], T, R, D, E);
	}
}
function aN(n, e, t) {
	const i = t.isWebGL2;
	function s() {
		let H = !1;
		const Ie = new Ke();
		let _e = null;
		const te = new Ke(0, 0, 0, 0);
		return {
			setMask: function (me) {
				_e !== me && !H && (n.colorMask(me, me, me, me), (_e = me));
			},
			setLocked: function (me) {
				H = me;
			},
			setClear: function (me, ze, ht, Nt, It) {
				It === !0 && ((me *= Nt), (ze *= Nt), (ht *= Nt)),
					Ie.set(me, ze, ht, Nt),
					te.equals(Ie) === !1 && (n.clearColor(me, ze, ht, Nt), te.copy(Ie));
			},
			reset: function () {
				(H = !1), (_e = null), te.set(-1, 0, 0, 0);
			},
		};
	}
	function r() {
		let H = !1,
			Ie = null,
			_e = null,
			te = null;
		return {
			setTest: function (me) {
				me ? Je(n.DEPTH_TEST) : Ye(n.DEPTH_TEST);
			},
			setMask: function (me) {
				Ie !== me && !H && (n.depthMask(me), (Ie = me));
			},
			setFunc: function (me) {
				if (_e !== me) {
					switch (me) {
						case xM:
							n.depthFunc(n.NEVER);
							break;
						case MM:
							n.depthFunc(n.ALWAYS);
							break;
						case TM:
							n.depthFunc(n.LESS);
							break;
						case Gu:
							n.depthFunc(n.LEQUAL);
							break;
						case RM:
							n.depthFunc(n.EQUAL);
							break;
						case wM:
							n.depthFunc(n.GEQUAL);
							break;
						case OM:
							n.depthFunc(n.GREATER);
							break;
						case PM:
							n.depthFunc(n.NOTEQUAL);
							break;
						default:
							n.depthFunc(n.LEQUAL);
					}
					_e = me;
				}
			},
			setLocked: function (me) {
				H = me;
			},
			setClear: function (me) {
				te !== me && (n.clearDepth(me), (te = me));
			},
			reset: function () {
				(H = !1), (Ie = null), (_e = null), (te = null);
			},
		};
	}
	function o() {
		let H = !1,
			Ie = null,
			_e = null,
			te = null,
			me = null,
			ze = null,
			ht = null,
			Nt = null,
			It = null;
		return {
			setTest: function (gt) {
				H || (gt ? Je(n.STENCIL_TEST) : Ye(n.STENCIL_TEST));
			},
			setMask: function (gt) {
				Ie !== gt && !H && (n.stencilMask(gt), (Ie = gt));
			},
			setFunc: function (gt, dn, ui) {
				(_e !== gt || te !== dn || me !== ui) && (n.stencilFunc(gt, dn, ui), (_e = gt), (te = dn), (me = ui));
			},
			setOp: function (gt, dn, ui) {
				(ze !== gt || ht !== dn || Nt !== ui) && (n.stencilOp(gt, dn, ui), (ze = gt), (ht = dn), (Nt = ui));
			},
			setLocked: function (gt) {
				H = gt;
			},
			setClear: function (gt) {
				It !== gt && (n.clearStencil(gt), (It = gt));
			},
			reset: function () {
				(H = !1),
					(Ie = null),
					(_e = null),
					(te = null),
					(me = null),
					(ze = null),
					(ht = null),
					(Nt = null),
					(It = null);
			},
		};
	}
	const a = new s(),
		c = new r(),
		l = new o(),
		u = new WeakMap(),
		h = new WeakMap();
	let d = {},
		p = {},
		m = new WeakMap(),
		g = [],
		_ = null,
		f = !1,
		y = null,
		v = null,
		A = null,
		S = null,
		T = null,
		R = null,
		D = null,
		E = new Ee(0, 0, 0),
		x = 0,
		z = !1,
		B = null,
		W = null,
		F = null,
		X = null,
		Z = null;
	const Q = n.getParameter(n.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
	let he = !1,
		ie = 0;
	const oe = n.getParameter(n.VERSION);
	oe.indexOf('WebGL') !== -1
		? ((ie = parseFloat(/^WebGL (\d)/.exec(oe)[1])), (he = ie >= 1))
		: oe.indexOf('OpenGL ES') !== -1 && ((ie = parseFloat(/^OpenGL ES (\d)/.exec(oe)[1])), (he = ie >= 2));
	let de = null,
		Te = {};
	const ee = n.getParameter(n.SCISSOR_BOX),
		ae = n.getParameter(n.VIEWPORT),
		Oe = new Ke().fromArray(ee),
		be = new Ke().fromArray(ae);
	function Ue(H, Ie, _e, te) {
		const me = new Uint8Array(4),
			ze = n.createTexture();
		n.bindTexture(H, ze),
			n.texParameteri(H, n.TEXTURE_MIN_FILTER, n.NEAREST),
			n.texParameteri(H, n.TEXTURE_MAG_FILTER, n.NEAREST);
		for (let ht = 0; ht < _e; ht++)
			i && (H === n.TEXTURE_3D || H === n.TEXTURE_2D_ARRAY)
				? n.texImage3D(Ie, 0, n.RGBA, 1, 1, te, 0, n.RGBA, n.UNSIGNED_BYTE, me)
				: n.texImage2D(Ie + ht, 0, n.RGBA, 1, 1, 0, n.RGBA, n.UNSIGNED_BYTE, me);
		return ze;
	}
	const He = {};
	(He[n.TEXTURE_2D] = Ue(n.TEXTURE_2D, n.TEXTURE_2D, 1)),
		(He[n.TEXTURE_CUBE_MAP] = Ue(n.TEXTURE_CUBE_MAP, n.TEXTURE_CUBE_MAP_POSITIVE_X, 6)),
		i &&
			((He[n.TEXTURE_2D_ARRAY] = Ue(n.TEXTURE_2D_ARRAY, n.TEXTURE_2D_ARRAY, 1, 1)),
			(He[n.TEXTURE_3D] = Ue(n.TEXTURE_3D, n.TEXTURE_3D, 1, 1))),
		a.setClear(0, 0, 0, 1),
		c.setClear(1),
		l.setClear(0),
		Je(n.DEPTH_TEST),
		c.setFunc(Gu),
		ot(!1),
		nt(sg),
		Je(n.CULL_FACE),
		Xe(Ps);
	function Je(H) {
		d[H] !== !0 && (n.enable(H), (d[H] = !0));
	}
	function Ye(H) {
		d[H] !== !1 && (n.disable(H), (d[H] = !1));
	}
	function tt(H, Ie) {
		return p[H] !== Ie
			? (n.bindFramebuffer(H, Ie),
			  (p[H] = Ie),
			  i &&
					(H === n.DRAW_FRAMEBUFFER && (p[n.FRAMEBUFFER] = Ie),
					H === n.FRAMEBUFFER && (p[n.DRAW_FRAMEBUFFER] = Ie)),
			  !0)
			: !1;
	}
	function q(H, Ie) {
		let _e = g,
			te = !1;
		if (H)
			if (((_e = m.get(Ie)), _e === void 0 && ((_e = []), m.set(Ie, _e)), H.isWebGLMultipleRenderTargets)) {
				const me = H.texture;
				if (_e.length !== me.length || _e[0] !== n.COLOR_ATTACHMENT0) {
					for (let ze = 0, ht = me.length; ze < ht; ze++) _e[ze] = n.COLOR_ATTACHMENT0 + ze;
					(_e.length = me.length), (te = !0);
				}
			} else _e[0] !== n.COLOR_ATTACHMENT0 && ((_e[0] = n.COLOR_ATTACHMENT0), (te = !0));
		else _e[0] !== n.BACK && ((_e[0] = n.BACK), (te = !0));
		te && (t.isWebGL2 ? n.drawBuffers(_e) : e.get('WEBGL_draw_buffers').drawBuffersWEBGL(_e));
	}
	function on(H) {
		return _ !== H ? (n.useProgram(H), (_ = H), !0) : !1;
	}
	const ke = {[Vr]: n.FUNC_ADD, [uM]: n.FUNC_SUBTRACT, [hM]: n.FUNC_REVERSE_SUBTRACT};
	if (i) (ke[rg] = n.MIN), (ke[og] = n.MAX);
	else {
		const H = e.get('EXT_blend_minmax');
		H !== null && ((ke[rg] = H.MIN_EXT), (ke[og] = H.MAX_EXT));
	}
	const st = {
		[dM]: n.ZERO,
		[pM]: n.ONE,
		[fM]: n.SRC_COLOR,
		[qp]: n.SRC_ALPHA,
		[CM]: n.SRC_ALPHA_SATURATE,
		[vM]: n.DST_COLOR,
		[mM]: n.DST_ALPHA,
		[_M]: n.ONE_MINUS_SRC_COLOR,
		[Yp]: n.ONE_MINUS_SRC_ALPHA,
		[EM]: n.ONE_MINUS_DST_COLOR,
		[gM]: n.ONE_MINUS_DST_ALPHA,
		[yM]: n.CONSTANT_COLOR,
		[bM]: n.ONE_MINUS_CONSTANT_COLOR,
		[SM]: n.CONSTANT_ALPHA,
		[AM]: n.ONE_MINUS_CONSTANT_ALPHA,
	};
	function Xe(H, Ie, _e, te, me, ze, ht, Nt, It, gt) {
		if (H === Ps) {
			f === !0 && (Ye(n.BLEND), (f = !1));
			return;
		}
		if ((f === !1 && (Je(n.BLEND), (f = !0)), H !== lM)) {
			if (H !== y || gt !== z) {
				if (((v !== Vr || T !== Vr) && (n.blendEquation(n.FUNC_ADD), (v = Vr), (T = Vr)), gt))
					switch (H) {
						case hr:
							n.blendFuncSeparate(n.ONE, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
							break;
						case jp:
							n.blendFunc(n.ONE, n.ONE);
							break;
						case Xp:
							n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
							break;
						case $p:
							n.blendFuncSeparate(n.ZERO, n.SRC_COLOR, n.ZERO, n.SRC_ALPHA);
							break;
						default:
							console.error('THREE.WebGLState: Invalid blending: ', H);
							break;
					}
				else
					switch (H) {
						case hr:
							n.blendFuncSeparate(n.SRC_ALPHA, n.ONE_MINUS_SRC_ALPHA, n.ONE, n.ONE_MINUS_SRC_ALPHA);
							break;
						case jp:
							n.blendFunc(n.SRC_ALPHA, n.ONE);
							break;
						case Xp:
							n.blendFuncSeparate(n.ZERO, n.ONE_MINUS_SRC_COLOR, n.ZERO, n.ONE);
							break;
						case $p:
							n.blendFunc(n.ZERO, n.SRC_COLOR);
							break;
						default:
							console.error('THREE.WebGLState: Invalid blending: ', H);
							break;
					}
				(A = null), (S = null), (R = null), (D = null), E.set(0, 0, 0), (x = 0), (y = H), (z = gt);
			}
			return;
		}
		(me = me || Ie),
			(ze = ze || _e),
			(ht = ht || te),
			(Ie !== v || me !== T) && (n.blendEquationSeparate(ke[Ie], ke[me]), (v = Ie), (T = me)),
			(_e !== A || te !== S || ze !== R || ht !== D) &&
				(n.blendFuncSeparate(st[_e], st[te], st[ze], st[ht]), (A = _e), (S = te), (R = ze), (D = ht)),
			(Nt.equals(E) === !1 || It !== x) && (n.blendColor(Nt.r, Nt.g, Nt.b, It), E.copy(Nt), (x = It)),
			(y = H),
			(z = !1);
	}
	function At(H, Ie) {
		H.side === Zn ? Ye(n.CULL_FACE) : Je(n.CULL_FACE);
		let _e = H.side === fn;
		Ie && (_e = !_e),
			ot(_e),
			H.blending === hr && H.transparent === !1
				? Xe(Ps)
				: Xe(
						H.blending,
						H.blendEquation,
						H.blendSrc,
						H.blendDst,
						H.blendEquationAlpha,
						H.blendSrcAlpha,
						H.blendDstAlpha,
						H.blendColor,
						H.blendAlpha,
						H.premultipliedAlpha
				  ),
			c.setFunc(H.depthFunc),
			c.setTest(H.depthTest),
			c.setMask(H.depthWrite),
			a.setMask(H.colorWrite);
		const te = H.stencilWrite;
		l.setTest(te),
			te &&
				(l.setMask(H.stencilWriteMask),
				l.setFunc(H.stencilFunc, H.stencilRef, H.stencilFuncMask),
				l.setOp(H.stencilFail, H.stencilZFail, H.stencilZPass)),
			Wt(H.polygonOffset, H.polygonOffsetFactor, H.polygonOffsetUnits),
			H.alphaToCoverage === !0 ? Je(n.SAMPLE_ALPHA_TO_COVERAGE) : Ye(n.SAMPLE_ALPHA_TO_COVERAGE);
	}
	function ot(H) {
		B !== H && (H ? n.frontFace(n.CW) : n.frontFace(n.CCW), (B = H));
	}
	function nt(H) {
		H !== oM
			? (Je(n.CULL_FACE),
			  H !== W &&
					(H === sg ? n.cullFace(n.BACK) : H === aM ? n.cullFace(n.FRONT) : n.cullFace(n.FRONT_AND_BACK)))
			: Ye(n.CULL_FACE),
			(W = H);
	}
	function mt(H) {
		H !== F && (he && n.lineWidth(H), (F = H));
	}
	function Wt(H, Ie, _e) {
		H
			? (Je(n.POLYGON_OFFSET_FILL), (X !== Ie || Z !== _e) && (n.polygonOffset(Ie, _e), (X = Ie), (Z = _e)))
			: Ye(n.POLYGON_OFFSET_FILL);
	}
	function Pt(H) {
		H ? Je(n.SCISSOR_TEST) : Ye(n.SCISSOR_TEST);
	}
	function U(H) {
		H === void 0 && (H = n.TEXTURE0 + Q - 1), de !== H && (n.activeTexture(H), (de = H));
	}
	function O(H, Ie, _e) {
		_e === void 0 && (de === null ? (_e = n.TEXTURE0 + Q - 1) : (_e = de));
		let te = Te[_e];
		te === void 0 && ((te = {type: void 0, texture: void 0}), (Te[_e] = te)),
			(te.type !== H || te.texture !== Ie) &&
				(de !== _e && (n.activeTexture(_e), (de = _e)),
				n.bindTexture(H, Ie || He[H]),
				(te.type = H),
				(te.texture = Ie));
	}
	function Y() {
		const H = Te[de];
		H !== void 0 && H.type !== void 0 && (n.bindTexture(H.type, null), (H.type = void 0), (H.texture = void 0));
	}
	function ve() {
		try {
			n.compressedTexImage2D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function pe() {
		try {
			n.compressedTexImage3D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function Ce() {
		try {
			n.texSubImage2D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function Fe() {
		try {
			n.texSubImage3D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function Se() {
		try {
			n.compressedTexSubImage2D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function Ne() {
		try {
			n.compressedTexSubImage3D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function $e() {
		try {
			n.texStorage2D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function at() {
		try {
			n.texStorage3D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function L() {
		try {
			n.texImage2D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function ye() {
		try {
			n.texImage3D.apply(n, arguments);
		} catch (H) {
			console.error('THREE.WebGLState:', H);
		}
	}
	function De(H) {
		Oe.equals(H) === !1 && (n.scissor(H.x, H.y, H.z, H.w), Oe.copy(H));
	}
	function Re(H) {
		be.equals(H) === !1 && (n.viewport(H.x, H.y, H.z, H.w), be.copy(H));
	}
	function Ae(H, Ie) {
		let _e = h.get(Ie);
		_e === void 0 && ((_e = new WeakMap()), h.set(Ie, _e));
		let te = _e.get(H);
		te === void 0 && ((te = n.getUniformBlockIndex(Ie, H.name)), _e.set(H, te));
	}
	function Pe(H, Ie) {
		const te = h.get(Ie).get(H);
		u.get(Ie) !== te && (n.uniformBlockBinding(Ie, te, H.__bindingPointIndex), u.set(Ie, te));
	}
	function se() {
		n.disable(n.BLEND),
			n.disable(n.CULL_FACE),
			n.disable(n.DEPTH_TEST),
			n.disable(n.POLYGON_OFFSET_FILL),
			n.disable(n.SCISSOR_TEST),
			n.disable(n.STENCIL_TEST),
			n.disable(n.SAMPLE_ALPHA_TO_COVERAGE),
			n.blendEquation(n.FUNC_ADD),
			n.blendFunc(n.ONE, n.ZERO),
			n.blendFuncSeparate(n.ONE, n.ZERO, n.ONE, n.ZERO),
			n.blendColor(0, 0, 0, 0),
			n.colorMask(!0, !0, !0, !0),
			n.clearColor(0, 0, 0, 0),
			n.depthMask(!0),
			n.depthFunc(n.LESS),
			n.clearDepth(1),
			n.stencilMask(4294967295),
			n.stencilFunc(n.ALWAYS, 0, 4294967295),
			n.stencilOp(n.KEEP, n.KEEP, n.KEEP),
			n.clearStencil(0),
			n.cullFace(n.BACK),
			n.frontFace(n.CCW),
			n.polygonOffset(0, 0),
			n.activeTexture(n.TEXTURE0),
			n.bindFramebuffer(n.FRAMEBUFFER, null),
			i === !0 && (n.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), n.bindFramebuffer(n.READ_FRAMEBUFFER, null)),
			n.useProgram(null),
			n.lineWidth(1),
			n.scissor(0, 0, n.canvas.width, n.canvas.height),
			n.viewport(0, 0, n.canvas.width, n.canvas.height),
			(d = {}),
			(de = null),
			(Te = {}),
			(p = {}),
			(m = new WeakMap()),
			(g = []),
			(_ = null),
			(f = !1),
			(y = null),
			(v = null),
			(A = null),
			(S = null),
			(T = null),
			(R = null),
			(D = null),
			(E = new Ee(0, 0, 0)),
			(x = 0),
			(z = !1),
			(B = null),
			(W = null),
			(F = null),
			(X = null),
			(Z = null),
			Oe.set(0, 0, n.canvas.width, n.canvas.height),
			be.set(0, 0, n.canvas.width, n.canvas.height),
			a.reset(),
			c.reset(),
			l.reset();
	}
	return {
		buffers: {color: a, depth: c, stencil: l},
		enable: Je,
		disable: Ye,
		bindFramebuffer: tt,
		drawBuffers: q,
		useProgram: on,
		setBlending: Xe,
		setMaterial: At,
		setFlipSided: ot,
		setCullFace: nt,
		setLineWidth: mt,
		setPolygonOffset: Wt,
		setScissorTest: Pt,
		activeTexture: U,
		bindTexture: O,
		unbindTexture: Y,
		compressedTexImage2D: ve,
		compressedTexImage3D: pe,
		texImage2D: L,
		texImage3D: ye,
		updateUBOMapping: Ae,
		uniformBlockBinding: Pe,
		texStorage2D: $e,
		texStorage3D: at,
		texSubImage2D: Ce,
		texSubImage3D: Fe,
		compressedTexSubImage2D: Se,
		compressedTexSubImage3D: Ne,
		scissor: De,
		viewport: Re,
		reset: se,
	};
}
function cN(n, e, t, i, s, r, o) {
	const a = s.isWebGL2,
		c = s.maxTextures,
		l = s.maxCubemapSize,
		u = s.maxTextureSize,
		h = s.maxSamples,
		d = e.has('WEBGL_multisampled_render_to_texture') ? e.get('WEBGL_multisampled_render_to_texture') : null,
		p = typeof navigator > 'u' ? !1 : /OculusBrowser/g.test(navigator.userAgent),
		m = new WeakMap();
	let g;
	const _ = new WeakMap();
	let f = !1;
	try {
		f = typeof OffscreenCanvas < 'u' && new OffscreenCanvas(1, 1).getContext('2d') !== null;
	} catch {}
	function y(U, O) {
		return f ? new OffscreenCanvas(U, O) : Nc('canvas');
	}
	function v(U, O, Y, ve) {
		let pe = 1;
		if (((U.width > ve || U.height > ve) && (pe = ve / Math.max(U.width, U.height)), pe < 1 || O === !0))
			if (
				(typeof HTMLImageElement < 'u' && U instanceof HTMLImageElement) ||
				(typeof HTMLCanvasElement < 'u' && U instanceof HTMLCanvasElement) ||
				(typeof ImageBitmap < 'u' && U instanceof ImageBitmap)
			) {
				const Ce = O ? Yu : Math.floor,
					Fe = Ce(pe * U.width),
					Se = Ce(pe * U.height);
				g === void 0 && (g = y(Fe, Se));
				const Ne = Y ? y(Fe, Se) : g;
				return (
					(Ne.width = Fe),
					(Ne.height = Se),
					Ne.getContext('2d').drawImage(U, 0, 0, Fe, Se),
					console.warn(
						'THREE.WebGLRenderer: Texture has been resized from (' +
							U.width +
							'x' +
							U.height +
							') to (' +
							Fe +
							'x' +
							Se +
							').'
					),
					Ne
				);
			} else
				return (
					'data' in U &&
						console.warn(
							'THREE.WebGLRenderer: Image in DataTexture is too big (' + U.width + 'x' + U.height + ').'
						),
					U
				);
		return U;
	}
	function A(U) {
		return Zp(U.width) && Zp(U.height);
	}
	function S(U) {
		return a ? !1 : U.wrapS !== Qn || U.wrapT !== Qn || (U.minFilter !== qt && U.minFilter !== Yt);
	}
	function T(U, O) {
		return U.generateMipmaps && O && U.minFilter !== qt && U.minFilter !== Yt;
	}
	function R(U) {
		n.generateMipmap(U);
	}
	function D(U, O, Y, ve, pe = !1) {
		if (a === !1) return O;
		if (U !== null) {
			if (n[U] !== void 0) return n[U];
			console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + U + "'");
		}
		let Ce = O;
		if (
			(O === n.RED &&
				(Y === n.FLOAT && (Ce = n.R32F),
				Y === n.HALF_FLOAT && (Ce = n.R16F),
				Y === n.UNSIGNED_BYTE && (Ce = n.R8)),
			O === n.RED_INTEGER &&
				(Y === n.UNSIGNED_BYTE && (Ce = n.R8UI),
				Y === n.UNSIGNED_SHORT && (Ce = n.R16UI),
				Y === n.UNSIGNED_INT && (Ce = n.R32UI),
				Y === n.BYTE && (Ce = n.R8I),
				Y === n.SHORT && (Ce = n.R16I),
				Y === n.INT && (Ce = n.R32I)),
			O === n.RG &&
				(Y === n.FLOAT && (Ce = n.RG32F),
				Y === n.HALF_FLOAT && (Ce = n.RG16F),
				Y === n.UNSIGNED_BYTE && (Ce = n.RG8)),
			O === n.RGBA)
		) {
			const Fe = pe ? ju : Mt.getTransfer(ve);
			Y === n.FLOAT && (Ce = n.RGBA32F),
				Y === n.HALF_FLOAT && (Ce = n.RGBA16F),
				Y === n.UNSIGNED_BYTE && (Ce = Fe === Dt ? n.SRGB8_ALPHA8 : n.RGBA8),
				Y === n.UNSIGNED_SHORT_4_4_4_4 && (Ce = n.RGBA4),
				Y === n.UNSIGNED_SHORT_5_5_5_1 && (Ce = n.RGB5_A1);
		}
		return (
			(Ce === n.R16F ||
				Ce === n.R32F ||
				Ce === n.RG16F ||
				Ce === n.RG32F ||
				Ce === n.RGBA16F ||
				Ce === n.RGBA32F) &&
				e.get('EXT_color_buffer_float'),
			Ce
		);
	}
	function E(U, O, Y) {
		return T(U, Y) === !0 || (U.isFramebufferTexture && U.minFilter !== qt && U.minFilter !== Yt)
			? Math.log2(Math.max(O.width, O.height)) + 1
			: U.mipmaps !== void 0 && U.mipmaps.length > 0
			? U.mipmaps.length
			: U.isCompressedTexture && Array.isArray(U.image)
			? O.mipmaps.length
			: 1;
	}
	function x(U) {
		return U === qt || U === ag || U === sd ? n.NEAREST : n.LINEAR;
	}
	function z(U) {
		const O = U.target;
		O.removeEventListener('dispose', z), W(O), O.isVideoTexture && m.delete(O);
	}
	function B(U) {
		const O = U.target;
		O.removeEventListener('dispose', B), X(O);
	}
	function W(U) {
		const O = i.get(U);
		if (O.__webglInit === void 0) return;
		const Y = U.source,
			ve = _.get(Y);
		if (ve) {
			const pe = ve[O.__cacheKey];
			pe.usedTimes--, pe.usedTimes === 0 && F(U), Object.keys(ve).length === 0 && _.delete(Y);
		}
		i.remove(U);
	}
	function F(U) {
		const O = i.get(U);
		n.deleteTexture(O.__webglTexture);
		const Y = U.source,
			ve = _.get(Y);
		delete ve[O.__cacheKey], o.memory.textures--;
	}
	function X(U) {
		const O = U.texture,
			Y = i.get(U),
			ve = i.get(O);
		if (
			(ve.__webglTexture !== void 0 && (n.deleteTexture(ve.__webglTexture), o.memory.textures--),
			U.depthTexture && U.depthTexture.dispose(),
			U.isWebGLCubeRenderTarget)
		)
			for (let pe = 0; pe < 6; pe++) {
				if (Array.isArray(Y.__webglFramebuffer[pe]))
					for (let Ce = 0; Ce < Y.__webglFramebuffer[pe].length; Ce++)
						n.deleteFramebuffer(Y.__webglFramebuffer[pe][Ce]);
				else n.deleteFramebuffer(Y.__webglFramebuffer[pe]);
				Y.__webglDepthbuffer && n.deleteRenderbuffer(Y.__webglDepthbuffer[pe]);
			}
		else {
			if (Array.isArray(Y.__webglFramebuffer))
				for (let pe = 0; pe < Y.__webglFramebuffer.length; pe++) n.deleteFramebuffer(Y.__webglFramebuffer[pe]);
			else n.deleteFramebuffer(Y.__webglFramebuffer);
			if (
				(Y.__webglDepthbuffer && n.deleteRenderbuffer(Y.__webglDepthbuffer),
				Y.__webglMultisampledFramebuffer && n.deleteFramebuffer(Y.__webglMultisampledFramebuffer),
				Y.__webglColorRenderbuffer)
			)
				for (let pe = 0; pe < Y.__webglColorRenderbuffer.length; pe++)
					Y.__webglColorRenderbuffer[pe] && n.deleteRenderbuffer(Y.__webglColorRenderbuffer[pe]);
			Y.__webglDepthRenderbuffer && n.deleteRenderbuffer(Y.__webglDepthRenderbuffer);
		}
		if (U.isWebGLMultipleRenderTargets)
			for (let pe = 0, Ce = O.length; pe < Ce; pe++) {
				const Fe = i.get(O[pe]);
				Fe.__webglTexture && (n.deleteTexture(Fe.__webglTexture), o.memory.textures--), i.remove(O[pe]);
			}
		i.remove(O), i.remove(U);
	}
	let Z = 0;
	function Q() {
		Z = 0;
	}
	function he() {
		const U = Z;
		return (
			U >= c &&
				console.warn(
					'THREE.WebGLTextures: Trying to use ' + U + ' texture units while this GPU supports only ' + c
				),
			(Z += 1),
			U
		);
	}
	function ie(U) {
		const O = [];
		return (
			O.push(U.wrapS),
			O.push(U.wrapT),
			O.push(U.wrapR || 0),
			O.push(U.magFilter),
			O.push(U.minFilter),
			O.push(U.anisotropy),
			O.push(U.internalFormat),
			O.push(U.format),
			O.push(U.type),
			O.push(U.generateMipmaps),
			O.push(U.premultiplyAlpha),
			O.push(U.flipY),
			O.push(U.unpackAlignment),
			O.push(U.colorSpace),
			O.join()
		);
	}
	function oe(U, O) {
		const Y = i.get(U);
		if ((U.isVideoTexture && Wt(U), U.isRenderTargetTexture === !1 && U.version > 0 && Y.__version !== U.version)) {
			const ve = U.image;
			if (ve === null) console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');
			else if (ve.complete === !1)
				console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
			else {
				Je(Y, U, O);
				return;
			}
		}
		t.bindTexture(n.TEXTURE_2D, Y.__webglTexture, n.TEXTURE0 + O);
	}
	function de(U, O) {
		const Y = i.get(U);
		if (U.version > 0 && Y.__version !== U.version) {
			Je(Y, U, O);
			return;
		}
		t.bindTexture(n.TEXTURE_2D_ARRAY, Y.__webglTexture, n.TEXTURE0 + O);
	}
	function Te(U, O) {
		const Y = i.get(U);
		if (U.version > 0 && Y.__version !== U.version) {
			Je(Y, U, O);
			return;
		}
		t.bindTexture(n.TEXTURE_3D, Y.__webglTexture, n.TEXTURE0 + O);
	}
	function ee(U, O) {
		const Y = i.get(U);
		if (U.version > 0 && Y.__version !== U.version) {
			Ye(Y, U, O);
			return;
		}
		t.bindTexture(n.TEXTURE_CUBE_MAP, Y.__webglTexture, n.TEXTURE0 + O);
	}
	const ae = {[Pc]: n.REPEAT, [Qn]: n.CLAMP_TO_EDGE, [Wu]: n.MIRRORED_REPEAT},
		Oe = {
			[qt]: n.NEAREST,
			[ag]: n.NEAREST_MIPMAP_NEAREST,
			[sd]: n.NEAREST_MIPMAP_LINEAR,
			[Yt]: n.LINEAR,
			[FM]: n.LINEAR_MIPMAP_NEAREST,
			[pa]: n.LINEAR_MIPMAP_LINEAR,
		},
		be = {
			[HM]: n.NEVER,
			[YM]: n.ALWAYS,
			[WM]: n.LESS,
			[wb]: n.LEQUAL,
			[jM]: n.EQUAL,
			[qM]: n.GEQUAL,
			[XM]: n.GREATER,
			[$M]: n.NOTEQUAL,
		};
	function Ue(U, O, Y) {
		if (
			(Y
				? (n.texParameteri(U, n.TEXTURE_WRAP_S, ae[O.wrapS]),
				  n.texParameteri(U, n.TEXTURE_WRAP_T, ae[O.wrapT]),
				  (U === n.TEXTURE_3D || U === n.TEXTURE_2D_ARRAY) && n.texParameteri(U, n.TEXTURE_WRAP_R, ae[O.wrapR]),
				  n.texParameteri(U, n.TEXTURE_MAG_FILTER, Oe[O.magFilter]),
				  n.texParameteri(U, n.TEXTURE_MIN_FILTER, Oe[O.minFilter]))
				: (n.texParameteri(U, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE),
				  n.texParameteri(U, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE),
				  (U === n.TEXTURE_3D || U === n.TEXTURE_2D_ARRAY) &&
						n.texParameteri(U, n.TEXTURE_WRAP_R, n.CLAMP_TO_EDGE),
				  (O.wrapS !== Qn || O.wrapT !== Qn) &&
						console.warn(
							'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.'
						),
				  n.texParameteri(U, n.TEXTURE_MAG_FILTER, x(O.magFilter)),
				  n.texParameteri(U, n.TEXTURE_MIN_FILTER, x(O.minFilter)),
				  O.minFilter !== qt &&
						O.minFilter !== Yt &&
						console.warn(
							'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.'
						)),
			O.compareFunction &&
				(n.texParameteri(U, n.TEXTURE_COMPARE_MODE, n.COMPARE_REF_TO_TEXTURE),
				n.texParameteri(U, n.TEXTURE_COMPARE_FUNC, be[O.compareFunction])),
			e.has('EXT_texture_filter_anisotropic') === !0)
		) {
			const ve = e.get('EXT_texture_filter_anisotropic');
			if (
				O.magFilter === qt ||
				(O.minFilter !== sd && O.minFilter !== pa) ||
				(O.type === jn && e.has('OES_texture_float_linear') === !1) ||
				(a === !1 && O.type === ki && e.has('OES_texture_half_float_linear') === !1)
			)
				return;
			(O.anisotropy > 1 || i.get(O).__currentAnisotropy) &&
				(n.texParameterf(U, ve.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(O.anisotropy, s.getMaxAnisotropy())),
				(i.get(O).__currentAnisotropy = O.anisotropy));
		}
	}
	function He(U, O) {
		let Y = !1;
		U.__webglInit === void 0 && ((U.__webglInit = !0), O.addEventListener('dispose', z));
		const ve = O.source;
		let pe = _.get(ve);
		pe === void 0 && ((pe = {}), _.set(ve, pe));
		const Ce = ie(O);
		if (Ce !== U.__cacheKey) {
			pe[Ce] === void 0 && ((pe[Ce] = {texture: n.createTexture(), usedTimes: 0}), o.memory.textures++, (Y = !0)),
				pe[Ce].usedTimes++;
			const Fe = pe[U.__cacheKey];
			Fe !== void 0 && (pe[U.__cacheKey].usedTimes--, Fe.usedTimes === 0 && F(O)),
				(U.__cacheKey = Ce),
				(U.__webglTexture = pe[Ce].texture);
		}
		return Y;
	}
	function Je(U, O, Y) {
		let ve = n.TEXTURE_2D;
		(O.isDataArrayTexture || O.isCompressedArrayTexture) && (ve = n.TEXTURE_2D_ARRAY),
			O.isData3DTexture && (ve = n.TEXTURE_3D);
		const pe = He(U, O),
			Ce = O.source;
		t.bindTexture(ve, U.__webglTexture, n.TEXTURE0 + Y);
		const Fe = i.get(Ce);
		if (Ce.version !== Fe.__version || pe === !0) {
			t.activeTexture(n.TEXTURE0 + Y);
			const Se = Mt.getPrimaries(Mt.workingColorSpace),
				Ne = O.colorSpace === tn ? null : Mt.getPrimaries(O.colorSpace),
				$e = O.colorSpace === tn || Se === Ne ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
			n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, O.flipY),
				n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha),
				n.pixelStorei(n.UNPACK_ALIGNMENT, O.unpackAlignment),
				n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, $e);
			const at = S(O) && A(O.image) === !1;
			let L = v(O.image, at, !1, u);
			L = Pt(O, L);
			const ye = A(L) || a,
				De = r.convert(O.format, O.colorSpace);
			let Re = r.convert(O.type),
				Ae = D(O.internalFormat, De, Re, O.colorSpace, O.isVideoTexture);
			Ue(ve, O, ye);
			let Pe;
			const se = O.mipmaps,
				H = a && O.isVideoTexture !== !0 && Ae !== Tb,
				Ie = Fe.__version === void 0 || pe === !0,
				_e = E(O, L, ye);
			if (O.isDepthTexture)
				(Ae = n.DEPTH_COMPONENT),
					a
						? O.type === jn
							? (Ae = n.DEPTH_COMPONENT32F)
							: O.type === Ms
							? (Ae = n.DEPTH_COMPONENT24)
							: O.type === Ns
							? (Ae = n.DEPTH24_STENCIL8)
							: (Ae = n.DEPTH_COMPONENT16)
						: O.type === jn &&
						  console.error('WebGLRenderer: Floating point depth texture requires WebGL2.'),
					O.format === dr &&
						Ae === n.DEPTH_COMPONENT &&
						O.type !== Sh &&
						O.type !== Ms &&
						(console.warn(
							'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.'
						),
						(O.type = Ms),
						(Re = r.convert(O.type))),
					O.format === Zr &&
						Ae === n.DEPTH_COMPONENT &&
						((Ae = n.DEPTH_STENCIL),
						O.type !== Ns &&
							(console.warn(
								'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.'
							),
							(O.type = Ns),
							(Re = r.convert(O.type)))),
					Ie &&
						(H
							? t.texStorage2D(n.TEXTURE_2D, 1, Ae, L.width, L.height)
							: t.texImage2D(n.TEXTURE_2D, 0, Ae, L.width, L.height, 0, De, Re, null));
			else if (O.isDataTexture)
				if (se.length > 0 && ye) {
					H && Ie && t.texStorage2D(n.TEXTURE_2D, _e, Ae, se[0].width, se[0].height);
					for (let te = 0, me = se.length; te < me; te++)
						(Pe = se[te]),
							H
								? t.texSubImage2D(n.TEXTURE_2D, te, 0, 0, Pe.width, Pe.height, De, Re, Pe.data)
								: t.texImage2D(n.TEXTURE_2D, te, Ae, Pe.width, Pe.height, 0, De, Re, Pe.data);
					O.generateMipmaps = !1;
				} else
					H
						? (Ie && t.texStorage2D(n.TEXTURE_2D, _e, Ae, L.width, L.height),
						  t.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, L.width, L.height, De, Re, L.data))
						: t.texImage2D(n.TEXTURE_2D, 0, Ae, L.width, L.height, 0, De, Re, L.data);
			else if (O.isCompressedTexture)
				if (O.isCompressedArrayTexture) {
					H && Ie && t.texStorage3D(n.TEXTURE_2D_ARRAY, _e, Ae, se[0].width, se[0].height, L.depth);
					for (let te = 0, me = se.length; te < me; te++)
						(Pe = se[te]),
							O.format !== wn
								? De !== null
									? H
										? t.compressedTexSubImage3D(
												n.TEXTURE_2D_ARRAY,
												te,
												0,
												0,
												0,
												Pe.width,
												Pe.height,
												L.depth,
												De,
												Pe.data,
												0,
												0
										  )
										: t.compressedTexImage3D(
												n.TEXTURE_2D_ARRAY,
												te,
												Ae,
												Pe.width,
												Pe.height,
												L.depth,
												0,
												Pe.data,
												0,
												0
										  )
									: console.warn(
											'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()'
									  )
								: H
								? t.texSubImage3D(
										n.TEXTURE_2D_ARRAY,
										te,
										0,
										0,
										0,
										Pe.width,
										Pe.height,
										L.depth,
										De,
										Re,
										Pe.data
								  )
								: t.texImage3D(
										n.TEXTURE_2D_ARRAY,
										te,
										Ae,
										Pe.width,
										Pe.height,
										L.depth,
										0,
										De,
										Re,
										Pe.data
								  );
				} else {
					H && Ie && t.texStorage2D(n.TEXTURE_2D, _e, Ae, se[0].width, se[0].height);
					for (let te = 0, me = se.length; te < me; te++)
						(Pe = se[te]),
							O.format !== wn
								? De !== null
									? H
										? t.compressedTexSubImage2D(
												n.TEXTURE_2D,
												te,
												0,
												0,
												Pe.width,
												Pe.height,
												De,
												Pe.data
										  )
										: t.compressedTexImage2D(n.TEXTURE_2D, te, Ae, Pe.width, Pe.height, 0, Pe.data)
									: console.warn(
											'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()'
									  )
								: H
								? t.texSubImage2D(n.TEXTURE_2D, te, 0, 0, Pe.width, Pe.height, De, Re, Pe.data)
								: t.texImage2D(n.TEXTURE_2D, te, Ae, Pe.width, Pe.height, 0, De, Re, Pe.data);
				}
			else if (O.isDataArrayTexture)
				H
					? (Ie && t.texStorage3D(n.TEXTURE_2D_ARRAY, _e, Ae, L.width, L.height, L.depth),
					  t.texSubImage3D(n.TEXTURE_2D_ARRAY, 0, 0, 0, 0, L.width, L.height, L.depth, De, Re, L.data))
					: t.texImage3D(n.TEXTURE_2D_ARRAY, 0, Ae, L.width, L.height, L.depth, 0, De, Re, L.data);
			else if (O.isData3DTexture)
				H
					? (Ie && t.texStorage3D(n.TEXTURE_3D, _e, Ae, L.width, L.height, L.depth),
					  t.texSubImage3D(n.TEXTURE_3D, 0, 0, 0, 0, L.width, L.height, L.depth, De, Re, L.data))
					: t.texImage3D(n.TEXTURE_3D, 0, Ae, L.width, L.height, L.depth, 0, De, Re, L.data);
			else if (O.isFramebufferTexture) {
				if (Ie)
					if (H) t.texStorage2D(n.TEXTURE_2D, _e, Ae, L.width, L.height);
					else {
						let te = L.width,
							me = L.height;
						for (let ze = 0; ze < _e; ze++)
							t.texImage2D(n.TEXTURE_2D, ze, Ae, te, me, 0, De, Re, null), (te >>= 1), (me >>= 1);
					}
			} else if (se.length > 0 && ye) {
				H && Ie && t.texStorage2D(n.TEXTURE_2D, _e, Ae, se[0].width, se[0].height);
				for (let te = 0, me = se.length; te < me; te++)
					(Pe = se[te]),
						H
							? t.texSubImage2D(n.TEXTURE_2D, te, 0, 0, De, Re, Pe)
							: t.texImage2D(n.TEXTURE_2D, te, Ae, De, Re, Pe);
				O.generateMipmaps = !1;
			} else
				H
					? (Ie && t.texStorage2D(n.TEXTURE_2D, _e, Ae, L.width, L.height),
					  t.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, De, Re, L))
					: t.texImage2D(n.TEXTURE_2D, 0, Ae, De, Re, L);
			T(O, ye) && R(ve), (Fe.__version = Ce.version), O.onUpdate && O.onUpdate(O);
		}
		U.__version = O.version;
	}
	function Ye(U, O, Y) {
		if (O.image.length !== 6) return;
		const ve = He(U, O),
			pe = O.source;
		t.bindTexture(n.TEXTURE_CUBE_MAP, U.__webglTexture, n.TEXTURE0 + Y);
		const Ce = i.get(pe);
		if (pe.version !== Ce.__version || ve === !0) {
			t.activeTexture(n.TEXTURE0 + Y);
			const Fe = Mt.getPrimaries(Mt.workingColorSpace),
				Se = O.colorSpace === tn ? null : Mt.getPrimaries(O.colorSpace),
				Ne = O.colorSpace === tn || Fe === Se ? n.NONE : n.BROWSER_DEFAULT_WEBGL;
			n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL, O.flipY),
				n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha),
				n.pixelStorei(n.UNPACK_ALIGNMENT, O.unpackAlignment),
				n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL, Ne);
			const $e = O.isCompressedTexture || O.image[0].isCompressedTexture,
				at = O.image[0] && O.image[0].isDataTexture,
				L = [];
			for (let te = 0; te < 6; te++)
				!$e && !at ? (L[te] = v(O.image[te], !1, !0, l)) : (L[te] = at ? O.image[te].image : O.image[te]),
					(L[te] = Pt(O, L[te]));
			const ye = L[0],
				De = A(ye) || a,
				Re = r.convert(O.format, O.colorSpace),
				Ae = r.convert(O.type),
				Pe = D(O.internalFormat, Re, Ae, O.colorSpace),
				se = a && O.isVideoTexture !== !0,
				H = Ce.__version === void 0 || ve === !0;
			let Ie = E(O, ye, De);
			Ue(n.TEXTURE_CUBE_MAP, O, De);
			let _e;
			if ($e) {
				se && H && t.texStorage2D(n.TEXTURE_CUBE_MAP, Ie, Pe, ye.width, ye.height);
				for (let te = 0; te < 6; te++) {
					_e = L[te].mipmaps;
					for (let me = 0; me < _e.length; me++) {
						const ze = _e[me];
						O.format !== wn
							? Re !== null
								? se
									? t.compressedTexSubImage2D(
											n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
											me,
											0,
											0,
											ze.width,
											ze.height,
											Re,
											ze.data
									  )
									: t.compressedTexImage2D(
											n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
											me,
											Pe,
											ze.width,
											ze.height,
											0,
											ze.data
									  )
								: console.warn(
										'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()'
								  )
							: se
							? t.texSubImage2D(
									n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
									me,
									0,
									0,
									ze.width,
									ze.height,
									Re,
									Ae,
									ze.data
							  )
							: t.texImage2D(
									n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
									me,
									Pe,
									ze.width,
									ze.height,
									0,
									Re,
									Ae,
									ze.data
							  );
					}
				}
			} else {
				(_e = O.mipmaps),
					se &&
						H &&
						(_e.length > 0 && Ie++, t.texStorage2D(n.TEXTURE_CUBE_MAP, Ie, Pe, L[0].width, L[0].height));
				for (let te = 0; te < 6; te++)
					if (at) {
						se
							? t.texSubImage2D(
									n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
									0,
									0,
									0,
									L[te].width,
									L[te].height,
									Re,
									Ae,
									L[te].data
							  )
							: t.texImage2D(
									n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
									0,
									Pe,
									L[te].width,
									L[te].height,
									0,
									Re,
									Ae,
									L[te].data
							  );
						for (let me = 0; me < _e.length; me++) {
							const ht = _e[me].image[te].image;
							se
								? t.texSubImage2D(
										n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
										me + 1,
										0,
										0,
										ht.width,
										ht.height,
										Re,
										Ae,
										ht.data
								  )
								: t.texImage2D(
										n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
										me + 1,
										Pe,
										ht.width,
										ht.height,
										0,
										Re,
										Ae,
										ht.data
								  );
						}
					} else {
						se
							? t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + te, 0, 0, 0, Re, Ae, L[te])
							: t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + te, 0, Pe, Re, Ae, L[te]);
						for (let me = 0; me < _e.length; me++) {
							const ze = _e[me];
							se
								? t.texSubImage2D(
										n.TEXTURE_CUBE_MAP_POSITIVE_X + te,
										me + 1,
										0,
										0,
										Re,
										Ae,
										ze.image[te]
								  )
								: t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X + te, me + 1, Pe, Re, Ae, ze.image[te]);
						}
					}
			}
			T(O, De) && R(n.TEXTURE_CUBE_MAP), (Ce.__version = pe.version), O.onUpdate && O.onUpdate(O);
		}
		U.__version = O.version;
	}
	function tt(U, O, Y, ve, pe, Ce) {
		const Fe = r.convert(Y.format, Y.colorSpace),
			Se = r.convert(Y.type),
			Ne = D(Y.internalFormat, Fe, Se, Y.colorSpace);
		if (!i.get(O).__hasExternalTextures) {
			const at = Math.max(1, O.width >> Ce),
				L = Math.max(1, O.height >> Ce);
			pe === n.TEXTURE_3D || pe === n.TEXTURE_2D_ARRAY
				? t.texImage3D(pe, Ce, Ne, at, L, O.depth, 0, Fe, Se, null)
				: t.texImage2D(pe, Ce, Ne, at, L, 0, Fe, Se, null);
		}
		t.bindFramebuffer(n.FRAMEBUFFER, U),
			mt(O)
				? d.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, ve, pe, i.get(Y).__webglTexture, 0, nt(O))
				: (pe === n.TEXTURE_2D ||
						(pe >= n.TEXTURE_CUBE_MAP_POSITIVE_X && pe <= n.TEXTURE_CUBE_MAP_NEGATIVE_Z)) &&
				  n.framebufferTexture2D(n.FRAMEBUFFER, ve, pe, i.get(Y).__webglTexture, Ce),
			t.bindFramebuffer(n.FRAMEBUFFER, null);
	}
	function q(U, O, Y) {
		if ((n.bindRenderbuffer(n.RENDERBUFFER, U), O.depthBuffer && !O.stencilBuffer)) {
			let ve = a === !0 ? n.DEPTH_COMPONENT24 : n.DEPTH_COMPONENT16;
			if (Y || mt(O)) {
				const pe = O.depthTexture;
				pe &&
					pe.isDepthTexture &&
					(pe.type === jn ? (ve = n.DEPTH_COMPONENT32F) : pe.type === Ms && (ve = n.DEPTH_COMPONENT24));
				const Ce = nt(O);
				mt(O)
					? d.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, Ce, ve, O.width, O.height)
					: n.renderbufferStorageMultisample(n.RENDERBUFFER, Ce, ve, O.width, O.height);
			} else n.renderbufferStorage(n.RENDERBUFFER, ve, O.width, O.height);
			n.framebufferRenderbuffer(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.RENDERBUFFER, U);
		} else if (O.depthBuffer && O.stencilBuffer) {
			const ve = nt(O);
			Y && mt(O) === !1
				? n.renderbufferStorageMultisample(n.RENDERBUFFER, ve, n.DEPTH24_STENCIL8, O.width, O.height)
				: mt(O)
				? d.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, ve, n.DEPTH24_STENCIL8, O.width, O.height)
				: n.renderbufferStorage(n.RENDERBUFFER, n.DEPTH_STENCIL, O.width, O.height),
				n.framebufferRenderbuffer(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.RENDERBUFFER, U);
		} else {
			const ve = O.isWebGLMultipleRenderTargets === !0 ? O.texture : [O.texture];
			for (let pe = 0; pe < ve.length; pe++) {
				const Ce = ve[pe],
					Fe = r.convert(Ce.format, Ce.colorSpace),
					Se = r.convert(Ce.type),
					Ne = D(Ce.internalFormat, Fe, Se, Ce.colorSpace),
					$e = nt(O);
				Y && mt(O) === !1
					? n.renderbufferStorageMultisample(n.RENDERBUFFER, $e, Ne, O.width, O.height)
					: mt(O)
					? d.renderbufferStorageMultisampleEXT(n.RENDERBUFFER, $e, Ne, O.width, O.height)
					: n.renderbufferStorage(n.RENDERBUFFER, Ne, O.width, O.height);
			}
		}
		n.bindRenderbuffer(n.RENDERBUFFER, null);
	}
	function on(U, O) {
		if (O && O.isWebGLCubeRenderTarget) throw new Error('Depth Texture with cube render targets is not supported');
		if ((t.bindFramebuffer(n.FRAMEBUFFER, U), !(O.depthTexture && O.depthTexture.isDepthTexture)))
			throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
		(!i.get(O.depthTexture).__webglTexture ||
			O.depthTexture.image.width !== O.width ||
			O.depthTexture.image.height !== O.height) &&
			((O.depthTexture.image.width = O.width),
			(O.depthTexture.image.height = O.height),
			(O.depthTexture.needsUpdate = !0)),
			oe(O.depthTexture, 0);
		const ve = i.get(O.depthTexture).__webglTexture,
			pe = nt(O);
		if (O.depthTexture.format === dr)
			mt(O)
				? d.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, ve, 0, pe)
				: n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_ATTACHMENT, n.TEXTURE_2D, ve, 0);
		else if (O.depthTexture.format === Zr)
			mt(O)
				? d.framebufferTexture2DMultisampleEXT(
						n.FRAMEBUFFER,
						n.DEPTH_STENCIL_ATTACHMENT,
						n.TEXTURE_2D,
						ve,
						0,
						pe
				  )
				: n.framebufferTexture2D(n.FRAMEBUFFER, n.DEPTH_STENCIL_ATTACHMENT, n.TEXTURE_2D, ve, 0);
		else throw new Error('Unknown depthTexture format');
	}
	function ke(U) {
		const O = i.get(U),
			Y = U.isWebGLCubeRenderTarget === !0;
		if (U.depthTexture && !O.__autoAllocateDepthBuffer) {
			if (Y) throw new Error('target.depthTexture not supported in Cube render targets');
			on(O.__webglFramebuffer, U);
		} else if (Y) {
			O.__webglDepthbuffer = [];
			for (let ve = 0; ve < 6; ve++)
				t.bindFramebuffer(n.FRAMEBUFFER, O.__webglFramebuffer[ve]),
					(O.__webglDepthbuffer[ve] = n.createRenderbuffer()),
					q(O.__webglDepthbuffer[ve], U, !1);
		} else
			t.bindFramebuffer(n.FRAMEBUFFER, O.__webglFramebuffer),
				(O.__webglDepthbuffer = n.createRenderbuffer()),
				q(O.__webglDepthbuffer, U, !1);
		t.bindFramebuffer(n.FRAMEBUFFER, null);
	}
	function st(U, O, Y) {
		const ve = i.get(U);
		O !== void 0 && tt(ve.__webglFramebuffer, U, U.texture, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, 0),
			Y !== void 0 && ke(U);
	}
	function Xe(U) {
		const O = U.texture,
			Y = i.get(U),
			ve = i.get(O);
		U.addEventListener('dispose', B),
			U.isWebGLMultipleRenderTargets !== !0 &&
				(ve.__webglTexture === void 0 && (ve.__webglTexture = n.createTexture()),
				(ve.__version = O.version),
				o.memory.textures++);
		const pe = U.isWebGLCubeRenderTarget === !0,
			Ce = U.isWebGLMultipleRenderTargets === !0,
			Fe = A(U) || a;
		if (pe) {
			Y.__webglFramebuffer = [];
			for (let Se = 0; Se < 6; Se++)
				if (a && O.mipmaps && O.mipmaps.length > 0) {
					Y.__webglFramebuffer[Se] = [];
					for (let Ne = 0; Ne < O.mipmaps.length; Ne++) Y.__webglFramebuffer[Se][Ne] = n.createFramebuffer();
				} else Y.__webglFramebuffer[Se] = n.createFramebuffer();
		} else {
			if (a && O.mipmaps && O.mipmaps.length > 0) {
				Y.__webglFramebuffer = [];
				for (let Se = 0; Se < O.mipmaps.length; Se++) Y.__webglFramebuffer[Se] = n.createFramebuffer();
			} else Y.__webglFramebuffer = n.createFramebuffer();
			if (Ce)
				if (s.drawBuffers) {
					const Se = U.texture;
					for (let Ne = 0, $e = Se.length; Ne < $e; Ne++) {
						const at = i.get(Se[Ne]);
						at.__webglTexture === void 0 && ((at.__webglTexture = n.createTexture()), o.memory.textures++);
					}
				} else
					console.warn(
						'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.'
					);
			if (a && U.samples > 0 && mt(U) === !1) {
				const Se = Ce ? O : [O];
				(Y.__webglMultisampledFramebuffer = n.createFramebuffer()),
					(Y.__webglColorRenderbuffer = []),
					t.bindFramebuffer(n.FRAMEBUFFER, Y.__webglMultisampledFramebuffer);
				for (let Ne = 0; Ne < Se.length; Ne++) {
					const $e = Se[Ne];
					(Y.__webglColorRenderbuffer[Ne] = n.createRenderbuffer()),
						n.bindRenderbuffer(n.RENDERBUFFER, Y.__webglColorRenderbuffer[Ne]);
					const at = r.convert($e.format, $e.colorSpace),
						L = r.convert($e.type),
						ye = D($e.internalFormat, at, L, $e.colorSpace, U.isXRRenderTarget === !0),
						De = nt(U);
					n.renderbufferStorageMultisample(n.RENDERBUFFER, De, ye, U.width, U.height),
						n.framebufferRenderbuffer(
							n.FRAMEBUFFER,
							n.COLOR_ATTACHMENT0 + Ne,
							n.RENDERBUFFER,
							Y.__webglColorRenderbuffer[Ne]
						);
				}
				n.bindRenderbuffer(n.RENDERBUFFER, null),
					U.depthBuffer &&
						((Y.__webglDepthRenderbuffer = n.createRenderbuffer()), q(Y.__webglDepthRenderbuffer, U, !0)),
					t.bindFramebuffer(n.FRAMEBUFFER, null);
			}
		}
		if (pe) {
			t.bindTexture(n.TEXTURE_CUBE_MAP, ve.__webglTexture), Ue(n.TEXTURE_CUBE_MAP, O, Fe);
			for (let Se = 0; Se < 6; Se++)
				if (a && O.mipmaps && O.mipmaps.length > 0)
					for (let Ne = 0; Ne < O.mipmaps.length; Ne++)
						tt(
							Y.__webglFramebuffer[Se][Ne],
							U,
							O,
							n.COLOR_ATTACHMENT0,
							n.TEXTURE_CUBE_MAP_POSITIVE_X + Se,
							Ne
						);
				else tt(Y.__webglFramebuffer[Se], U, O, n.COLOR_ATTACHMENT0, n.TEXTURE_CUBE_MAP_POSITIVE_X + Se, 0);
			T(O, Fe) && R(n.TEXTURE_CUBE_MAP), t.unbindTexture();
		} else if (Ce) {
			const Se = U.texture;
			for (let Ne = 0, $e = Se.length; Ne < $e; Ne++) {
				const at = Se[Ne],
					L = i.get(at);
				t.bindTexture(n.TEXTURE_2D, L.__webglTexture),
					Ue(n.TEXTURE_2D, at, Fe),
					tt(Y.__webglFramebuffer, U, at, n.COLOR_ATTACHMENT0 + Ne, n.TEXTURE_2D, 0),
					T(at, Fe) && R(n.TEXTURE_2D);
			}
			t.unbindTexture();
		} else {
			let Se = n.TEXTURE_2D;
			if (
				((U.isWebGL3DRenderTarget || U.isWebGLArrayRenderTarget) &&
					(a
						? (Se = U.isWebGL3DRenderTarget ? n.TEXTURE_3D : n.TEXTURE_2D_ARRAY)
						: console.error(
								'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.'
						  )),
				t.bindTexture(Se, ve.__webglTexture),
				Ue(Se, O, Fe),
				a && O.mipmaps && O.mipmaps.length > 0)
			)
				for (let Ne = 0; Ne < O.mipmaps.length; Ne++)
					tt(Y.__webglFramebuffer[Ne], U, O, n.COLOR_ATTACHMENT0, Se, Ne);
			else tt(Y.__webglFramebuffer, U, O, n.COLOR_ATTACHMENT0, Se, 0);
			T(O, Fe) && R(Se), t.unbindTexture();
		}
		U.depthBuffer && ke(U);
	}
	function At(U) {
		const O = A(U) || a,
			Y = U.isWebGLMultipleRenderTargets === !0 ? U.texture : [U.texture];
		for (let ve = 0, pe = Y.length; ve < pe; ve++) {
			const Ce = Y[ve];
			if (T(Ce, O)) {
				const Fe = U.isWebGLCubeRenderTarget ? n.TEXTURE_CUBE_MAP : n.TEXTURE_2D,
					Se = i.get(Ce).__webglTexture;
				t.bindTexture(Fe, Se), R(Fe), t.unbindTexture();
			}
		}
	}
	function ot(U) {
		if (a && U.samples > 0 && mt(U) === !1) {
			const O = U.isWebGLMultipleRenderTargets ? U.texture : [U.texture],
				Y = U.width,
				ve = U.height;
			let pe = n.COLOR_BUFFER_BIT;
			const Ce = [],
				Fe = U.stencilBuffer ? n.DEPTH_STENCIL_ATTACHMENT : n.DEPTH_ATTACHMENT,
				Se = i.get(U),
				Ne = U.isWebGLMultipleRenderTargets === !0;
			if (Ne)
				for (let $e = 0; $e < O.length; $e++)
					t.bindFramebuffer(n.FRAMEBUFFER, Se.__webglMultisampledFramebuffer),
						n.framebufferRenderbuffer(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0 + $e, n.RENDERBUFFER, null),
						t.bindFramebuffer(n.FRAMEBUFFER, Se.__webglFramebuffer),
						n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + $e, n.TEXTURE_2D, null, 0);
			t.bindFramebuffer(n.READ_FRAMEBUFFER, Se.__webglMultisampledFramebuffer),
				t.bindFramebuffer(n.DRAW_FRAMEBUFFER, Se.__webglFramebuffer);
			for (let $e = 0; $e < O.length; $e++) {
				Ce.push(n.COLOR_ATTACHMENT0 + $e), U.depthBuffer && Ce.push(Fe);
				const at = Se.__ignoreDepthValues !== void 0 ? Se.__ignoreDepthValues : !1;
				if (
					(at === !1 &&
						(U.depthBuffer && (pe |= n.DEPTH_BUFFER_BIT), U.stencilBuffer && (pe |= n.STENCIL_BUFFER_BIT)),
					Ne &&
						n.framebufferRenderbuffer(
							n.READ_FRAMEBUFFER,
							n.COLOR_ATTACHMENT0,
							n.RENDERBUFFER,
							Se.__webglColorRenderbuffer[$e]
						),
					at === !0 &&
						(n.invalidateFramebuffer(n.READ_FRAMEBUFFER, [Fe]),
						n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER, [Fe])),
					Ne)
				) {
					const L = i.get(O[$e]).__webglTexture;
					n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, L, 0);
				}
				n.blitFramebuffer(0, 0, Y, ve, 0, 0, Y, ve, pe, n.NEAREST),
					p && n.invalidateFramebuffer(n.READ_FRAMEBUFFER, Ce);
			}
			if ((t.bindFramebuffer(n.READ_FRAMEBUFFER, null), t.bindFramebuffer(n.DRAW_FRAMEBUFFER, null), Ne))
				for (let $e = 0; $e < O.length; $e++) {
					t.bindFramebuffer(n.FRAMEBUFFER, Se.__webglMultisampledFramebuffer),
						n.framebufferRenderbuffer(
							n.FRAMEBUFFER,
							n.COLOR_ATTACHMENT0 + $e,
							n.RENDERBUFFER,
							Se.__webglColorRenderbuffer[$e]
						);
					const at = i.get(O[$e]).__webglTexture;
					t.bindFramebuffer(n.FRAMEBUFFER, Se.__webglFramebuffer),
						n.framebufferTexture2D(n.DRAW_FRAMEBUFFER, n.COLOR_ATTACHMENT0 + $e, n.TEXTURE_2D, at, 0);
				}
			t.bindFramebuffer(n.DRAW_FRAMEBUFFER, Se.__webglMultisampledFramebuffer);
		}
	}
	function nt(U) {
		return Math.min(h, U.samples);
	}
	function mt(U) {
		const O = i.get(U);
		return (
			a && U.samples > 0 && e.has('WEBGL_multisampled_render_to_texture') === !0 && O.__useRenderToTexture !== !1
		);
	}
	function Wt(U) {
		const O = o.render.frame;
		m.get(U) !== O && (m.set(U, O), U.update());
	}
	function Pt(U, O) {
		const Y = U.colorSpace,
			ve = U.format,
			pe = U.type;
		return (
			U.isCompressedTexture === !0 ||
				U.isVideoTexture === !0 ||
				U.format === Kp ||
				(Y !== $n &&
					Y !== tn &&
					(Mt.getTransfer(Y) === Dt
						? a === !1
							? e.has('EXT_sRGB') === !0 && ve === wn
								? ((U.format = Kp), (U.minFilter = Yt), (U.generateMipmaps = !1))
								: (O = Pb.sRGBToLinear(O))
							: (ve !== wn || pe !== is) &&
							  console.warn(
									'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.'
							  )
						: console.error('THREE.WebGLTextures: Unsupported texture color space:', Y))),
			O
		);
	}
	(this.allocateTextureUnit = he),
		(this.resetTextureUnits = Q),
		(this.setTexture2D = oe),
		(this.setTexture2DArray = de),
		(this.setTexture3D = Te),
		(this.setTextureCube = ee),
		(this.rebindTextures = st),
		(this.setupRenderTarget = Xe),
		(this.updateRenderTargetMipmap = At),
		(this.updateMultisampleRenderTarget = ot),
		(this.setupDepthRenderbuffer = ke),
		(this.setupFrameBufferTexture = tt),
		(this.useMultisampledRTT = mt);
}
function lN(n, e, t) {
	const i = t.isWebGL2;
	function s(r, o = tn) {
		let a;
		const c = Mt.getTransfer(o);
		if (r === is) return n.UNSIGNED_BYTE;
		if (r === a_) return n.UNSIGNED_SHORT_4_4_4_4;
		if (r === c_) return n.UNSIGNED_SHORT_5_5_5_1;
		if (r === bb) return n.BYTE;
		if (r === Sb) return n.SHORT;
		if (r === Sh) return n.UNSIGNED_SHORT;
		if (r === o_) return n.INT;
		if (r === Ms) return n.UNSIGNED_INT;
		if (r === jn) return n.FLOAT;
		if (r === ki)
			return i ? n.HALF_FLOAT : ((a = e.get('OES_texture_half_float')), a !== null ? a.HALF_FLOAT_OES : null);
		if (r === Ab) return n.ALPHA;
		if (r === wn) return n.RGBA;
		if (r === l_) return n.LUMINANCE;
		if (r === xb) return n.LUMINANCE_ALPHA;
		if (r === dr) return n.DEPTH_COMPONENT;
		if (r === Zr) return n.DEPTH_STENCIL;
		if (r === Kp) return (a = e.get('EXT_sRGB')), a !== null ? a.SRGB_ALPHA_EXT : null;
		if (r === u_) return n.RED;
		if (r === h_) return n.RED_INTEGER;
		if (r === Mb) return n.RG;
		if (r === d_) return n.RG_INTEGER;
		if (r === p_) return n.RGBA_INTEGER;
		if (r === rd || r === od || r === ad || r === cd)
			if (c === Dt)
				if (((a = e.get('WEBGL_compressed_texture_s3tc_srgb')), a !== null)) {
					if (r === rd) return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;
					if (r === od) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
					if (r === ad) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
					if (r === cd) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
				} else return null;
			else if (((a = e.get('WEBGL_compressed_texture_s3tc')), a !== null)) {
				if (r === rd) return a.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if (r === od) return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if (r === ad) return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if (r === cd) return a.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			} else return null;
		if (r === cg || r === lg || r === ug || r === hg)
			if (((a = e.get('WEBGL_compressed_texture_pvrtc')), a !== null)) {
				if (r === cg) return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if (r === lg) return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if (r === ug) return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if (r === hg) return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
			} else return null;
		if (r === Tb)
			return (a = e.get('WEBGL_compressed_texture_etc1')), a !== null ? a.COMPRESSED_RGB_ETC1_WEBGL : null;
		if (r === dg || r === pg)
			if (((a = e.get('WEBGL_compressed_texture_etc')), a !== null)) {
				if (r === dg) return c === Dt ? a.COMPRESSED_SRGB8_ETC2 : a.COMPRESSED_RGB8_ETC2;
				if (r === pg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : a.COMPRESSED_RGBA8_ETC2_EAC;
			} else return null;
		if (
			r === fg ||
			r === _g ||
			r === mg ||
			r === gg ||
			r === vg ||
			r === Eg ||
			r === Cg ||
			r === yg ||
			r === bg ||
			r === Sg ||
			r === Ag ||
			r === xg ||
			r === Mg ||
			r === Tg
		)
			if (((a = e.get('WEBGL_compressed_texture_astc')), a !== null)) {
				if (r === fg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : a.COMPRESSED_RGBA_ASTC_4x4_KHR;
				if (r === _g) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : a.COMPRESSED_RGBA_ASTC_5x4_KHR;
				if (r === mg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : a.COMPRESSED_RGBA_ASTC_5x5_KHR;
				if (r === gg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : a.COMPRESSED_RGBA_ASTC_6x5_KHR;
				if (r === vg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : a.COMPRESSED_RGBA_ASTC_6x6_KHR;
				if (r === Eg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : a.COMPRESSED_RGBA_ASTC_8x5_KHR;
				if (r === Cg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : a.COMPRESSED_RGBA_ASTC_8x6_KHR;
				if (r === yg) return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : a.COMPRESSED_RGBA_ASTC_8x8_KHR;
				if (r === bg)
					return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : a.COMPRESSED_RGBA_ASTC_10x5_KHR;
				if (r === Sg)
					return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : a.COMPRESSED_RGBA_ASTC_10x6_KHR;
				if (r === Ag)
					return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : a.COMPRESSED_RGBA_ASTC_10x8_KHR;
				if (r === xg)
					return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : a.COMPRESSED_RGBA_ASTC_10x10_KHR;
				if (r === Mg)
					return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : a.COMPRESSED_RGBA_ASTC_12x10_KHR;
				if (r === Tg)
					return c === Dt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : a.COMPRESSED_RGBA_ASTC_12x12_KHR;
			} else return null;
		if (r === ld || r === Rg || r === wg)
			if (((a = e.get('EXT_texture_compression_bptc')), a !== null)) {
				if (r === ld)
					return c === Dt ? a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : a.COMPRESSED_RGBA_BPTC_UNORM_EXT;
				if (r === Rg) return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
				if (r === wg) return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
			} else return null;
		if (r === VM || r === Og || r === Pg || r === Ng)
			if (((a = e.get('EXT_texture_compression_rgtc')), a !== null)) {
				if (r === ld) return a.COMPRESSED_RED_RGTC1_EXT;
				if (r === Og) return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;
				if (r === Pg) return a.COMPRESSED_RED_GREEN_RGTC2_EXT;
				if (r === Ng) return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
			} else return null;
		return r === Ns
			? i
				? n.UNSIGNED_INT_24_8
				: ((a = e.get('WEBGL_depth_texture')), a !== null ? a.UNSIGNED_INT_24_8_WEBGL : null)
			: n[r] !== void 0
			? n[r]
			: null;
	}
	return {convert: s};
}
class uN extends Rn {
	constructor(e = []) {
		super(), (this.isArrayCamera = !0), (this.cameras = e);
	}
}
class Vi extends kt {
	constructor() {
		super(), (this.isGroup = !0), (this.type = 'Group');
	}
}
const hN = {type: 'move'};
class Nd {
	constructor() {
		(this._targetRay = null), (this._grip = null), (this._hand = null);
	}
	getHandSpace() {
		return (
			this._hand === null &&
				((this._hand = new Vi()),
				(this._hand.matrixAutoUpdate = !1),
				(this._hand.visible = !1),
				(this._hand.joints = {}),
				(this._hand.inputState = {pinching: !1})),
			this._hand
		);
	}
	getTargetRaySpace() {
		return (
			this._targetRay === null &&
				((this._targetRay = new Vi()),
				(this._targetRay.matrixAutoUpdate = !1),
				(this._targetRay.visible = !1),
				(this._targetRay.hasLinearVelocity = !1),
				(this._targetRay.linearVelocity = new w()),
				(this._targetRay.hasAngularVelocity = !1),
				(this._targetRay.angularVelocity = new w())),
			this._targetRay
		);
	}
	getGripSpace() {
		return (
			this._grip === null &&
				((this._grip = new Vi()),
				(this._grip.matrixAutoUpdate = !1),
				(this._grip.visible = !1),
				(this._grip.hasLinearVelocity = !1),
				(this._grip.linearVelocity = new w()),
				(this._grip.hasAngularVelocity = !1),
				(this._grip.angularVelocity = new w())),
			this._grip
		);
	}
	dispatchEvent(e) {
		return (
			this._targetRay !== null && this._targetRay.dispatchEvent(e),
			this._grip !== null && this._grip.dispatchEvent(e),
			this._hand !== null && this._hand.dispatchEvent(e),
			this
		);
	}
	connect(e) {
		if (e && e.hand) {
			const t = this._hand;
			if (t) for (const i of e.hand.values()) this._getHandJoint(t, i);
		}
		return this.dispatchEvent({type: 'connected', data: e}), this;
	}
	disconnect(e) {
		return (
			this.dispatchEvent({type: 'disconnected', data: e}),
			this._targetRay !== null && (this._targetRay.visible = !1),
			this._grip !== null && (this._grip.visible = !1),
			this._hand !== null && (this._hand.visible = !1),
			this
		);
	}
	update(e, t, i) {
		let s = null,
			r = null,
			o = null;
		const a = this._targetRay,
			c = this._grip,
			l = this._hand;
		if (e && t.session.visibilityState !== 'visible-blurred') {
			if (l && e.hand) {
				o = !0;
				for (const g of e.hand.values()) {
					const _ = t.getJointPose(g, i),
						f = this._getHandJoint(l, g);
					_ !== null &&
						(f.matrix.fromArray(_.transform.matrix),
						f.matrix.decompose(f.position, f.rotation, f.scale),
						(f.matrixWorldNeedsUpdate = !0),
						(f.jointRadius = _.radius)),
						(f.visible = _ !== null);
				}
				const u = l.joints['index-finger-tip'],
					h = l.joints['thumb-tip'],
					d = u.position.distanceTo(h.position),
					p = 0.02,
					m = 0.005;
				l.inputState.pinching && d > p + m
					? ((l.inputState.pinching = !1),
					  this.dispatchEvent({type: 'pinchend', handedness: e.handedness, target: this}))
					: !l.inputState.pinching &&
					  d <= p - m &&
					  ((l.inputState.pinching = !0),
					  this.dispatchEvent({type: 'pinchstart', handedness: e.handedness, target: this}));
			} else
				c !== null &&
					e.gripSpace &&
					((r = t.getPose(e.gripSpace, i)),
					r !== null &&
						(c.matrix.fromArray(r.transform.matrix),
						c.matrix.decompose(c.position, c.rotation, c.scale),
						(c.matrixWorldNeedsUpdate = !0),
						r.linearVelocity
							? ((c.hasLinearVelocity = !0), c.linearVelocity.copy(r.linearVelocity))
							: (c.hasLinearVelocity = !1),
						r.angularVelocity
							? ((c.hasAngularVelocity = !0), c.angularVelocity.copy(r.angularVelocity))
							: (c.hasAngularVelocity = !1)));
			a !== null &&
				((s = t.getPose(e.targetRaySpace, i)),
				s === null && r !== null && (s = r),
				s !== null &&
					(a.matrix.fromArray(s.transform.matrix),
					a.matrix.decompose(a.position, a.rotation, a.scale),
					(a.matrixWorldNeedsUpdate = !0),
					s.linearVelocity
						? ((a.hasLinearVelocity = !0), a.linearVelocity.copy(s.linearVelocity))
						: (a.hasLinearVelocity = !1),
					s.angularVelocity
						? ((a.hasAngularVelocity = !0), a.angularVelocity.copy(s.angularVelocity))
						: (a.hasAngularVelocity = !1),
					this.dispatchEvent(hN)));
		}
		return (
			a !== null && (a.visible = s !== null),
			c !== null && (c.visible = r !== null),
			l !== null && (l.visible = o !== null),
			this
		);
	}
	_getHandJoint(e, t) {
		if (e.joints[t.jointName] === void 0) {
			const i = new Vi();
			(i.matrixAutoUpdate = !1), (i.visible = !1), (e.joints[t.jointName] = i), e.add(i);
		}
		return e.joints[t.jointName];
	}
}
class dN extends cs {
	constructor(e, t) {
		super();
		const i = this;
		let s = null,
			r = 1,
			o = null,
			a = 'local-floor',
			c = 1,
			l = null,
			u = null,
			h = null,
			d = null,
			p = null,
			m = null;
		const g = t.getContextAttributes();
		let _ = null,
			f = null;
		const y = [],
			v = [],
			A = new re();
		let S = null;
		const T = new Rn();
		T.layers.enable(1), (T.viewport = new Ke());
		const R = new Rn();
		R.layers.enable(2), (R.viewport = new Ke());
		const D = [T, R],
			E = new uN();
		E.layers.enable(1), E.layers.enable(2);
		let x = null,
			z = null;
		(this.cameraAutoUpdate = !0),
			(this.enabled = !1),
			(this.isPresenting = !1),
			(this.getController = function (ee) {
				let ae = y[ee];
				return ae === void 0 && ((ae = new Nd()), (y[ee] = ae)), ae.getTargetRaySpace();
			}),
			(this.getControllerGrip = function (ee) {
				let ae = y[ee];
				return ae === void 0 && ((ae = new Nd()), (y[ee] = ae)), ae.getGripSpace();
			}),
			(this.getHand = function (ee) {
				let ae = y[ee];
				return ae === void 0 && ((ae = new Nd()), (y[ee] = ae)), ae.getHandSpace();
			});
		function B(ee) {
			const ae = v.indexOf(ee.inputSource);
			if (ae === -1) return;
			const Oe = y[ae];
			Oe !== void 0 &&
				(Oe.update(ee.inputSource, ee.frame, l || o), Oe.dispatchEvent({type: ee.type, data: ee.inputSource}));
		}
		function W() {
			s.removeEventListener('select', B),
				s.removeEventListener('selectstart', B),
				s.removeEventListener('selectend', B),
				s.removeEventListener('squeeze', B),
				s.removeEventListener('squeezestart', B),
				s.removeEventListener('squeezeend', B),
				s.removeEventListener('end', W),
				s.removeEventListener('inputsourceschange', F);
			for (let ee = 0; ee < y.length; ee++) {
				const ae = v[ee];
				ae !== null && ((v[ee] = null), y[ee].disconnect(ae));
			}
			(x = null),
				(z = null),
				e.setRenderTarget(_),
				(p = null),
				(d = null),
				(h = null),
				(s = null),
				(f = null),
				Te.stop(),
				(i.isPresenting = !1),
				e.setPixelRatio(S),
				e.setSize(A.width, A.height, !1),
				i.dispatchEvent({type: 'sessionend'});
		}
		(this.setFramebufferScaleFactor = function (ee) {
			(r = ee),
				i.isPresenting === !0 &&
					console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
		}),
			(this.setReferenceSpaceType = function (ee) {
				(a = ee),
					i.isPresenting === !0 &&
						console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
			}),
			(this.getReferenceSpace = function () {
				return l || o;
			}),
			(this.setReferenceSpace = function (ee) {
				l = ee;
			}),
			(this.getBaseLayer = function () {
				return d !== null ? d : p;
			}),
			(this.getBinding = function () {
				return h;
			}),
			(this.getFrame = function () {
				return m;
			}),
			(this.getSession = function () {
				return s;
			}),
			(this.setSession = async function (ee) {
				if (((s = ee), s !== null)) {
					if (
						((_ = e.getRenderTarget()),
						s.addEventListener('select', B),
						s.addEventListener('selectstart', B),
						s.addEventListener('selectend', B),
						s.addEventListener('squeeze', B),
						s.addEventListener('squeezestart', B),
						s.addEventListener('squeezeend', B),
						s.addEventListener('end', W),
						s.addEventListener('inputsourceschange', F),
						g.xrCompatible !== !0 && (await t.makeXRCompatible()),
						(S = e.getPixelRatio()),
						e.getSize(A),
						s.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1)
					) {
						const ae = {
							antialias: s.renderState.layers === void 0 ? g.antialias : !0,
							alpha: !0,
							depth: g.depth,
							stencil: g.stencil,
							framebufferScaleFactor: r,
						};
						(p = new XRWebGLLayer(s, t, ae)),
							s.updateRenderState({baseLayer: p}),
							e.setPixelRatio(1),
							e.setSize(p.framebufferWidth, p.framebufferHeight, !1),
							(f = new Gi(p.framebufferWidth, p.framebufferHeight, {
								format: wn,
								type: is,
								colorSpace: e.outputColorSpace,
								stencilBuffer: g.stencil,
							}));
					} else {
						let ae = null,
							Oe = null,
							be = null;
						g.depth &&
							((be = g.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24),
							(ae = g.stencil ? Zr : dr),
							(Oe = g.stencil ? Ns : Ms));
						const Ue = {colorFormat: t.RGBA8, depthFormat: be, scaleFactor: r};
						(h = new XRWebGLBinding(s, t)),
							(d = h.createProjectionLayer(Ue)),
							s.updateRenderState({layers: [d]}),
							e.setPixelRatio(1),
							e.setSize(d.textureWidth, d.textureHeight, !1),
							(f = new Gi(d.textureWidth, d.textureHeight, {
								format: wn,
								type: is,
								depthTexture: new E_(
									d.textureWidth,
									d.textureHeight,
									Oe,
									void 0,
									void 0,
									void 0,
									void 0,
									void 0,
									void 0,
									ae
								),
								stencilBuffer: g.stencil,
								colorSpace: e.outputColorSpace,
								samples: g.antialias ? 4 : 0,
							}));
						const He = e.properties.get(f);
						He.__ignoreDepthValues = d.ignoreDepthValues;
					}
					(f.isXRRenderTarget = !0),
						this.setFoveation(c),
						(l = null),
						(o = await s.requestReferenceSpace(a)),
						Te.setContext(s),
						Te.start(),
						(i.isPresenting = !0),
						i.dispatchEvent({type: 'sessionstart'});
				}
			}),
			(this.getEnvironmentBlendMode = function () {
				if (s !== null) return s.environmentBlendMode;
			});
		function F(ee) {
			for (let ae = 0; ae < ee.removed.length; ae++) {
				const Oe = ee.removed[ae],
					be = v.indexOf(Oe);
				be >= 0 && ((v[be] = null), y[be].disconnect(Oe));
			}
			for (let ae = 0; ae < ee.added.length; ae++) {
				const Oe = ee.added[ae];
				let be = v.indexOf(Oe);
				if (be === -1) {
					for (let He = 0; He < y.length; He++)
						if (He >= v.length) {
							v.push(Oe), (be = He);
							break;
						} else if (v[He] === null) {
							(v[He] = Oe), (be = He);
							break;
						}
					if (be === -1) break;
				}
				const Ue = y[be];
				Ue && Ue.connect(Oe);
			}
		}
		const X = new w(),
			Z = new w();
		function Q(ee, ae, Oe) {
			X.setFromMatrixPosition(ae.matrixWorld), Z.setFromMatrixPosition(Oe.matrixWorld);
			const be = X.distanceTo(Z),
				Ue = ae.projectionMatrix.elements,
				He = Oe.projectionMatrix.elements,
				Je = Ue[14] / (Ue[10] - 1),
				Ye = Ue[14] / (Ue[10] + 1),
				tt = (Ue[9] + 1) / Ue[5],
				q = (Ue[9] - 1) / Ue[5],
				on = (Ue[8] - 1) / Ue[0],
				ke = (He[8] + 1) / He[0],
				st = Je * on,
				Xe = Je * ke,
				At = be / (-on + ke),
				ot = At * -on;
			ae.matrixWorld.decompose(ee.position, ee.quaternion, ee.scale),
				ee.translateX(ot),
				ee.translateZ(At),
				ee.matrixWorld.compose(ee.position, ee.quaternion, ee.scale),
				ee.matrixWorldInverse.copy(ee.matrixWorld).invert();
			const nt = Je + At,
				mt = Ye + At,
				Wt = st - ot,
				Pt = Xe + (be - ot),
				U = ((tt * Ye) / mt) * nt,
				O = ((q * Ye) / mt) * nt;
			ee.projectionMatrix.makePerspective(Wt, Pt, U, O, nt, mt),
				ee.projectionMatrixInverse.copy(ee.projectionMatrix).invert();
		}
		function he(ee, ae) {
			ae === null ? ee.matrixWorld.copy(ee.matrix) : ee.matrixWorld.multiplyMatrices(ae.matrixWorld, ee.matrix),
				ee.matrixWorldInverse.copy(ee.matrixWorld).invert();
		}
		this.updateCamera = function (ee) {
			if (s === null) return;
			(E.near = R.near = T.near = ee.near),
				(E.far = R.far = T.far = ee.far),
				(x !== E.near || z !== E.far) &&
					(s.updateRenderState({depthNear: E.near, depthFar: E.far}), (x = E.near), (z = E.far));
			const ae = ee.parent,
				Oe = E.cameras;
			he(E, ae);
			for (let be = 0; be < Oe.length; be++) he(Oe[be], ae);
			Oe.length === 2 ? Q(E, T, R) : E.projectionMatrix.copy(T.projectionMatrix), ie(ee, E, ae);
		};
		function ie(ee, ae, Oe) {
			Oe === null
				? ee.matrix.copy(ae.matrixWorld)
				: (ee.matrix.copy(Oe.matrixWorld), ee.matrix.invert(), ee.matrix.multiply(ae.matrixWorld)),
				ee.matrix.decompose(ee.position, ee.quaternion, ee.scale),
				ee.updateMatrixWorld(!0),
				ee.projectionMatrix.copy(ae.projectionMatrix),
				ee.projectionMatrixInverse.copy(ae.projectionMatrixInverse),
				ee.isPerspectiveCamera &&
					((ee.fov = fa * 2 * Math.atan(1 / ee.projectionMatrix.elements[5])), (ee.zoom = 1));
		}
		(this.getCamera = function () {
			return E;
		}),
			(this.getFoveation = function () {
				if (!(d === null && p === null)) return c;
			}),
			(this.setFoveation = function (ee) {
				(c = ee),
					d !== null && (d.fixedFoveation = ee),
					p !== null && p.fixedFoveation !== void 0 && (p.fixedFoveation = ee);
			});
		let oe = null;
		function de(ee, ae) {
			if (((u = ae.getViewerPose(l || o)), (m = ae), u !== null)) {
				const Oe = u.views;
				p !== null && (e.setRenderTargetFramebuffer(f, p.framebuffer), e.setRenderTarget(f));
				let be = !1;
				Oe.length !== E.cameras.length && ((E.cameras.length = 0), (be = !0));
				for (let Ue = 0; Ue < Oe.length; Ue++) {
					const He = Oe[Ue];
					let Je = null;
					if (p !== null) Je = p.getViewport(He);
					else {
						const tt = h.getViewSubImage(d, He);
						(Je = tt.viewport),
							Ue === 0 &&
								(e.setRenderTargetTextures(
									f,
									tt.colorTexture,
									d.ignoreDepthValues ? void 0 : tt.depthStencilTexture
								),
								e.setRenderTarget(f));
					}
					let Ye = D[Ue];
					Ye === void 0 && ((Ye = new Rn()), Ye.layers.enable(Ue), (Ye.viewport = new Ke()), (D[Ue] = Ye)),
						Ye.matrix.fromArray(He.transform.matrix),
						Ye.matrix.decompose(Ye.position, Ye.quaternion, Ye.scale),
						Ye.projectionMatrix.fromArray(He.projectionMatrix),
						Ye.projectionMatrixInverse.copy(Ye.projectionMatrix).invert(),
						Ye.viewport.set(Je.x, Je.y, Je.width, Je.height),
						Ue === 0 && (E.matrix.copy(Ye.matrix), E.matrix.decompose(E.position, E.quaternion, E.scale)),
						be === !0 && E.cameras.push(Ye);
				}
			}
			for (let Oe = 0; Oe < y.length; Oe++) {
				const be = v[Oe],
					Ue = y[Oe];
				be !== null && Ue !== void 0 && Ue.update(be, ae, l || o);
			}
			oe && oe(ee, ae), ae.detectedPlanes && i.dispatchEvent({type: 'planesdetected', data: ae}), (m = null);
		}
		const Te = new Gb();
		Te.setAnimationLoop(de),
			(this.setAnimationLoop = function (ee) {
				oe = ee;
			}),
			(this.dispose = function () {});
	}
}
function pN(n, e) {
	function t(_, f) {
		_.matrixAutoUpdate === !0 && _.updateMatrix(), f.value.copy(_.matrix);
	}
	function i(_, f) {
		f.color.getRGB(_.fogColor.value, Fb(n)),
			f.isFog
				? ((_.fogNear.value = f.near), (_.fogFar.value = f.far))
				: f.isFogExp2 && (_.fogDensity.value = f.density);
	}
	function s(_, f, y, v, A) {
		f.isMeshBasicMaterial || f.isMeshLambertMaterial
			? r(_, f)
			: f.isMeshToonMaterial
			? (r(_, f), h(_, f))
			: f.isMeshPhongMaterial
			? (r(_, f), u(_, f))
			: f.isMeshStandardMaterial
			? (r(_, f), d(_, f), f.isMeshPhysicalMaterial && p(_, f, A))
			: f.isMeshMatcapMaterial
			? (r(_, f), m(_, f))
			: f.isMeshDepthMaterial
			? r(_, f)
			: f.isMeshDistanceMaterial
			? (r(_, f), g(_, f))
			: f.isMeshNormalMaterial
			? r(_, f)
			: f.isLineBasicMaterial
			? (o(_, f), f.isLineDashedMaterial && a(_, f))
			: f.isPointsMaterial
			? c(_, f, y, v)
			: f.isSpriteMaterial
			? l(_, f)
			: f.isShadowMaterial
			? (_.color.value.copy(f.color), (_.opacity.value = f.opacity))
			: f.isShaderMaterial && (f.uniformsNeedUpdate = !1);
	}
	function r(_, f) {
		(_.opacity.value = f.opacity),
			f.color && _.diffuse.value.copy(f.color),
			f.emissive && _.emissive.value.copy(f.emissive).multiplyScalar(f.emissiveIntensity),
			f.map && ((_.map.value = f.map), t(f.map, _.mapTransform)),
			f.alphaMap && ((_.alphaMap.value = f.alphaMap), t(f.alphaMap, _.alphaMapTransform)),
			f.bumpMap &&
				((_.bumpMap.value = f.bumpMap),
				t(f.bumpMap, _.bumpMapTransform),
				(_.bumpScale.value = f.bumpScale),
				f.side === fn && (_.bumpScale.value *= -1)),
			f.normalMap &&
				((_.normalMap.value = f.normalMap),
				t(f.normalMap, _.normalMapTransform),
				_.normalScale.value.copy(f.normalScale),
				f.side === fn && _.normalScale.value.negate()),
			f.displacementMap &&
				((_.displacementMap.value = f.displacementMap),
				t(f.displacementMap, _.displacementMapTransform),
				(_.displacementScale.value = f.displacementScale),
				(_.displacementBias.value = f.displacementBias)),
			f.emissiveMap && ((_.emissiveMap.value = f.emissiveMap), t(f.emissiveMap, _.emissiveMapTransform)),
			f.specularMap && ((_.specularMap.value = f.specularMap), t(f.specularMap, _.specularMapTransform)),
			f.alphaTest > 0 && (_.alphaTest.value = f.alphaTest);
		const y = e.get(f).envMap;
		if (
			(y &&
				((_.envMap.value = y),
				(_.flipEnvMap.value = y.isCubeTexture && y.isRenderTargetTexture === !1 ? -1 : 1),
				(_.reflectivity.value = f.reflectivity),
				(_.ior.value = f.ior),
				(_.refractionRatio.value = f.refractionRatio)),
			f.lightMap)
		) {
			_.lightMap.value = f.lightMap;
			const v = n._useLegacyLights === !0 ? Math.PI : 1;
			(_.lightMapIntensity.value = f.lightMapIntensity * v), t(f.lightMap, _.lightMapTransform);
		}
		f.aoMap &&
			((_.aoMap.value = f.aoMap), (_.aoMapIntensity.value = f.aoMapIntensity), t(f.aoMap, _.aoMapTransform));
	}
	function o(_, f) {
		_.diffuse.value.copy(f.color),
			(_.opacity.value = f.opacity),
			f.map && ((_.map.value = f.map), t(f.map, _.mapTransform));
	}
	function a(_, f) {
		(_.dashSize.value = f.dashSize), (_.totalSize.value = f.dashSize + f.gapSize), (_.scale.value = f.scale);
	}
	function c(_, f, y, v) {
		_.diffuse.value.copy(f.color),
			(_.opacity.value = f.opacity),
			(_.size.value = f.size * y),
			(_.scale.value = v * 0.5),
			f.map && ((_.map.value = f.map), t(f.map, _.uvTransform)),
			f.alphaMap && ((_.alphaMap.value = f.alphaMap), t(f.alphaMap, _.alphaMapTransform)),
			f.alphaTest > 0 && (_.alphaTest.value = f.alphaTest);
	}
	function l(_, f) {
		_.diffuse.value.copy(f.color),
			(_.opacity.value = f.opacity),
			(_.rotation.value = f.rotation),
			f.map && ((_.map.value = f.map), t(f.map, _.mapTransform)),
			f.alphaMap && ((_.alphaMap.value = f.alphaMap), t(f.alphaMap, _.alphaMapTransform)),
			f.alphaTest > 0 && (_.alphaTest.value = f.alphaTest);
	}
	function u(_, f) {
		_.specular.value.copy(f.specular), (_.shininess.value = Math.max(f.shininess, 1e-4));
	}
	function h(_, f) {
		f.gradientMap && (_.gradientMap.value = f.gradientMap);
	}
	function d(_, f) {
		(_.metalness.value = f.metalness),
			f.metalnessMap && ((_.metalnessMap.value = f.metalnessMap), t(f.metalnessMap, _.metalnessMapTransform)),
			(_.roughness.value = f.roughness),
			f.roughnessMap && ((_.roughnessMap.value = f.roughnessMap), t(f.roughnessMap, _.roughnessMapTransform)),
			e.get(f).envMap && (_.envMapIntensity.value = f.envMapIntensity);
	}
	function p(_, f, y) {
		(_.ior.value = f.ior),
			f.sheen > 0 &&
				(_.sheenColor.value.copy(f.sheenColor).multiplyScalar(f.sheen),
				(_.sheenRoughness.value = f.sheenRoughness),
				f.sheenColorMap &&
					((_.sheenColorMap.value = f.sheenColorMap), t(f.sheenColorMap, _.sheenColorMapTransform)),
				f.sheenRoughnessMap &&
					((_.sheenRoughnessMap.value = f.sheenRoughnessMap),
					t(f.sheenRoughnessMap, _.sheenRoughnessMapTransform))),
			f.clearcoat > 0 &&
				((_.clearcoat.value = f.clearcoat),
				(_.clearcoatRoughness.value = f.clearcoatRoughness),
				f.clearcoatMap && ((_.clearcoatMap.value = f.clearcoatMap), t(f.clearcoatMap, _.clearcoatMapTransform)),
				f.clearcoatRoughnessMap &&
					((_.clearcoatRoughnessMap.value = f.clearcoatRoughnessMap),
					t(f.clearcoatRoughnessMap, _.clearcoatRoughnessMapTransform)),
				f.clearcoatNormalMap &&
					((_.clearcoatNormalMap.value = f.clearcoatNormalMap),
					t(f.clearcoatNormalMap, _.clearcoatNormalMapTransform),
					_.clearcoatNormalScale.value.copy(f.clearcoatNormalScale),
					f.side === fn && _.clearcoatNormalScale.value.negate())),
			f.iridescence > 0 &&
				((_.iridescence.value = f.iridescence),
				(_.iridescenceIOR.value = f.iridescenceIOR),
				(_.iridescenceThicknessMinimum.value = f.iridescenceThicknessRange[0]),
				(_.iridescenceThicknessMaximum.value = f.iridescenceThicknessRange[1]),
				f.iridescenceMap &&
					((_.iridescenceMap.value = f.iridescenceMap), t(f.iridescenceMap, _.iridescenceMapTransform)),
				f.iridescenceThicknessMap &&
					((_.iridescenceThicknessMap.value = f.iridescenceThicknessMap),
					t(f.iridescenceThicknessMap, _.iridescenceThicknessMapTransform))),
			f.transmission > 0 &&
				((_.transmission.value = f.transmission),
				(_.transmissionSamplerMap.value = y.texture),
				_.transmissionSamplerSize.value.set(y.width, y.height),
				f.transmissionMap &&
					((_.transmissionMap.value = f.transmissionMap), t(f.transmissionMap, _.transmissionMapTransform)),
				(_.thickness.value = f.thickness),
				f.thicknessMap && ((_.thicknessMap.value = f.thicknessMap), t(f.thicknessMap, _.thicknessMapTransform)),
				(_.attenuationDistance.value = f.attenuationDistance),
				_.attenuationColor.value.copy(f.attenuationColor)),
			f.anisotropy > 0 &&
				(_.anisotropyVector.value.set(
					f.anisotropy * Math.cos(f.anisotropyRotation),
					f.anisotropy * Math.sin(f.anisotropyRotation)
				),
				f.anisotropyMap &&
					((_.anisotropyMap.value = f.anisotropyMap), t(f.anisotropyMap, _.anisotropyMapTransform))),
			(_.specularIntensity.value = f.specularIntensity),
			_.specularColor.value.copy(f.specularColor),
			f.specularColorMap &&
				((_.specularColorMap.value = f.specularColorMap), t(f.specularColorMap, _.specularColorMapTransform)),
			f.specularIntensityMap &&
				((_.specularIntensityMap.value = f.specularIntensityMap),
				t(f.specularIntensityMap, _.specularIntensityMapTransform));
	}
	function m(_, f) {
		f.matcap && (_.matcap.value = f.matcap);
	}
	function g(_, f) {
		const y = e.get(f).light;
		_.referencePosition.value.setFromMatrixPosition(y.matrixWorld),
			(_.nearDistance.value = y.shadow.camera.near),
			(_.farDistance.value = y.shadow.camera.far);
	}
	return {refreshFogUniforms: i, refreshMaterialUniforms: s};
}
function fN(n, e, t, i) {
	let s = {},
		r = {},
		o = [];
	const a = t.isWebGL2 ? n.getParameter(n.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
	function c(y, v) {
		const A = v.program;
		i.uniformBlockBinding(y, A);
	}
	function l(y, v) {
		let A = s[y.id];
		A === void 0 && (m(y), (A = u(y)), (s[y.id] = A), y.addEventListener('dispose', _));
		const S = v.program;
		i.updateUBOMapping(y, S);
		const T = e.render.frame;
		r[y.id] !== T && (d(y), (r[y.id] = T));
	}
	function u(y) {
		const v = h();
		y.__bindingPointIndex = v;
		const A = n.createBuffer(),
			S = y.__size,
			T = y.usage;
		return (
			n.bindBuffer(n.UNIFORM_BUFFER, A),
			n.bufferData(n.UNIFORM_BUFFER, S, T),
			n.bindBuffer(n.UNIFORM_BUFFER, null),
			n.bindBufferBase(n.UNIFORM_BUFFER, v, A),
			A
		);
	}
	function h() {
		for (let y = 0; y < a; y++) if (o.indexOf(y) === -1) return o.push(y), y;
		return (
			console.error('THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.'), 0
		);
	}
	function d(y) {
		const v = s[y.id],
			A = y.uniforms,
			S = y.__cache;
		n.bindBuffer(n.UNIFORM_BUFFER, v);
		for (let T = 0, R = A.length; T < R; T++) {
			const D = A[T];
			if (p(D, T, S) === !0) {
				const E = D.__offset,
					x = Array.isArray(D.value) ? D.value : [D.value];
				let z = 0;
				for (let B = 0; B < x.length; B++) {
					const W = x[B],
						F = g(W);
					typeof W == 'number'
						? ((D.__data[0] = W), n.bufferSubData(n.UNIFORM_BUFFER, E + z, D.__data))
						: W.isMatrix3
						? ((D.__data[0] = W.elements[0]),
						  (D.__data[1] = W.elements[1]),
						  (D.__data[2] = W.elements[2]),
						  (D.__data[3] = W.elements[0]),
						  (D.__data[4] = W.elements[3]),
						  (D.__data[5] = W.elements[4]),
						  (D.__data[6] = W.elements[5]),
						  (D.__data[7] = W.elements[0]),
						  (D.__data[8] = W.elements[6]),
						  (D.__data[9] = W.elements[7]),
						  (D.__data[10] = W.elements[8]),
						  (D.__data[11] = W.elements[0]))
						: (W.toArray(D.__data, z), (z += F.storage / Float32Array.BYTES_PER_ELEMENT));
				}
				n.bufferSubData(n.UNIFORM_BUFFER, E, D.__data);
			}
		}
		n.bindBuffer(n.UNIFORM_BUFFER, null);
	}
	function p(y, v, A) {
		const S = y.value;
		if (A[v] === void 0) {
			if (typeof S == 'number') A[v] = S;
			else {
				const T = Array.isArray(S) ? S : [S],
					R = [];
				for (let D = 0; D < T.length; D++) R.push(T[D].clone());
				A[v] = R;
			}
			return !0;
		} else if (typeof S == 'number') {
			if (A[v] !== S) return (A[v] = S), !0;
		} else {
			const T = Array.isArray(A[v]) ? A[v] : [A[v]],
				R = Array.isArray(S) ? S : [S];
			for (let D = 0; D < T.length; D++) {
				const E = T[D];
				if (E.equals(R[D]) === !1) return E.copy(R[D]), !0;
			}
		}
		return !1;
	}
	function m(y) {
		const v = y.uniforms;
		let A = 0;
		const S = 16;
		let T = 0;
		for (let R = 0, D = v.length; R < D; R++) {
			const E = v[R],
				x = {boundary: 0, storage: 0},
				z = Array.isArray(E.value) ? E.value : [E.value];
			for (let B = 0, W = z.length; B < W; B++) {
				const F = z[B],
					X = g(F);
				(x.boundary += X.boundary), (x.storage += X.storage);
			}
			if (((E.__data = new Float32Array(x.storage / Float32Array.BYTES_PER_ELEMENT)), (E.__offset = A), R > 0)) {
				T = A % S;
				const B = S - T;
				T !== 0 && B - x.boundary < 0 && ((A += S - T), (E.__offset = A));
			}
			A += x.storage;
		}
		return (T = A % S), T > 0 && (A += S - T), (y.__size = A), (y.__cache = {}), this;
	}
	function g(y) {
		const v = {boundary: 0, storage: 0};
		return (
			typeof y == 'number'
				? ((v.boundary = 4), (v.storage = 4))
				: y.isVector2
				? ((v.boundary = 8), (v.storage = 8))
				: y.isVector3 || y.isColor
				? ((v.boundary = 16), (v.storage = 12))
				: y.isVector4
				? ((v.boundary = 16), (v.storage = 16))
				: y.isMatrix3
				? ((v.boundary = 48), (v.storage = 48))
				: y.isMatrix4
				? ((v.boundary = 64), (v.storage = 64))
				: y.isTexture
				? console.warn('THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.')
				: console.warn('THREE.WebGLRenderer: Unsupported uniform value type.', y),
			v
		);
	}
	function _(y) {
		const v = y.target;
		v.removeEventListener('dispose', _);
		const A = o.indexOf(v.__bindingPointIndex);
		o.splice(A, 1), n.deleteBuffer(s[v.id]), delete s[v.id], delete r[v.id];
	}
	function f() {
		for (const y in s) n.deleteBuffer(s[y]);
		(o = []), (s = {}), (r = {});
	}
	return {bind: c, update: l, dispose: f};
}
class ss {
	constructor(e = {}) {
		const {
			canvas: t = uT(),
			context: i = null,
			depth: s = !0,
			stencil: r = !0,
			alpha: o = !1,
			antialias: a = !1,
			premultipliedAlpha: c = !0,
			preserveDrawingBuffer: l = !1,
			powerPreference: u = 'default',
			failIfMajorPerformanceCaveat: h = !1,
		} = e;
		this.isWebGLRenderer = !0;
		let d;
		i !== null ? (d = i.getContextAttributes().alpha) : (d = o);
		const p = new Uint32Array(4),
			m = new Int32Array(4);
		let g = null,
			_ = null;
		const f = [],
			y = [];
		(this.domElement = t),
			(this.debug = {checkShaderErrors: !0, onShaderError: null}),
			(this.autoClear = !0),
			(this.autoClearColor = !0),
			(this.autoClearDepth = !0),
			(this.autoClearStencil = !0),
			(this.sortObjects = !0),
			(this.clippingPlanes = []),
			(this.localClippingEnabled = !1),
			(this._outputColorSpace = en),
			(this._useLegacyLights = !1),
			(this.toneMapping = Ci),
			(this.toneMappingExposure = 1);
		const v = this;
		let A = !1,
			S = 0,
			T = 0,
			R = null,
			D = -1,
			E = null;
		const x = new Ke(),
			z = new Ke();
		let B = null;
		const W = new Ee(0);
		let F = 0,
			X = t.width,
			Z = t.height,
			Q = 1,
			he = null,
			ie = null;
		const oe = new Ke(0, 0, X, Z),
			de = new Ke(0, 0, X, Z);
		let Te = !1;
		const ee = new g_();
		let ae = !1,
			Oe = !1,
			be = null;
		const Ue = new Qe(),
			He = new re(),
			Je = new w(),
			Ye = {background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0};
		function tt() {
			return R === null ? Q : 1;
		}
		let q = i;
		function on(C, N) {
			for (let I = 0; I < C.length; I++) {
				const k = C[I],
					G = t.getContext(k, N);
				if (G !== null) return G;
			}
			return null;
		}
		try {
			const C = {
				alpha: !0,
				depth: s,
				stencil: r,
				antialias: a,
				premultipliedAlpha: c,
				preserveDrawingBuffer: l,
				powerPreference: u,
				failIfMajorPerformanceCaveat: h,
			};
			if (
				('setAttribute' in t && t.setAttribute('data-engine', `three.js r${s_}`),
				t.addEventListener('webglcontextlost', se, !1),
				t.addEventListener('webglcontextrestored', H, !1),
				t.addEventListener('webglcontextcreationerror', Ie, !1),
				q === null)
			) {
				const N = ['webgl2', 'webgl', 'experimental-webgl'];
				if ((v.isWebGL1Renderer === !0 && N.shift(), (q = on(N, C)), q === null))
					throw on(N)
						? new Error('Error creating WebGL context with your selected attributes.')
						: new Error('Error creating WebGL context.');
			}
			typeof WebGLRenderingContext < 'u' &&
				q instanceof WebGLRenderingContext &&
				console.warn(
					'THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.'
				),
				q.getShaderPrecisionFormat === void 0 &&
					(q.getShaderPrecisionFormat = function () {
						return {rangeMin: 1, rangeMax: 1, precision: 1};
					});
		} catch (C) {
			throw (console.error('THREE.WebGLRenderer: ' + C.message), C);
		}
		let ke, st, Xe, At, ot, nt, mt, Wt, Pt, U, O, Y, ve, pe, Ce, Fe, Se, Ne, $e, at, L, ye, De, Re;
		function Ae() {
			(ke = new TO(q)),
				(st = new yO(q, ke, e)),
				ke.init(st),
				(ye = new lN(q, ke, st)),
				(Xe = new aN(q, ke, st)),
				(At = new OO(q)),
				(ot = new YP()),
				(nt = new cN(q, ke, Xe, ot, st, ye, At)),
				(mt = new SO(v)),
				(Wt = new MO(v)),
				(Pt = new BT(q, st)),
				(De = new EO(q, ke, Pt, st)),
				(U = new RO(q, Pt, At, De)),
				(O = new DO(q, U, Pt, At)),
				($e = new IO(q, st, nt)),
				(Fe = new bO(ot)),
				(Y = new qP(v, mt, Wt, ke, st, De, Fe)),
				(ve = new pN(v, ot)),
				(pe = new ZP()),
				(Ce = new iN(ke, st)),
				(Ne = new vO(v, mt, Wt, Xe, O, d, c)),
				(Se = new oN(v, O, st)),
				(Re = new fN(q, At, st, Xe)),
				(at = new CO(q, ke, At, st)),
				(L = new wO(q, ke, At, st)),
				(At.programs = Y.programs),
				(v.capabilities = st),
				(v.extensions = ke),
				(v.properties = ot),
				(v.renderLists = pe),
				(v.shadowMap = Se),
				(v.state = Xe),
				(v.info = At);
		}
		Ae();
		const Pe = new dN(v, q);
		(this.xr = Pe),
			(this.getContext = function () {
				return q;
			}),
			(this.getContextAttributes = function () {
				return q.getContextAttributes();
			}),
			(this.forceContextLoss = function () {
				const C = ke.get('WEBGL_lose_context');
				C && C.loseContext();
			}),
			(this.forceContextRestore = function () {
				const C = ke.get('WEBGL_lose_context');
				C && C.restoreContext();
			}),
			(this.getPixelRatio = function () {
				return Q;
			}),
			(this.setPixelRatio = function (C) {
				C !== void 0 && ((Q = C), this.setSize(X, Z, !1));
			}),
			(this.getSize = function (C) {
				return C.set(X, Z);
			}),
			(this.setSize = function (C, N, I = !0) {
				if (Pe.isPresenting) {
					console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
					return;
				}
				(X = C),
					(Z = N),
					(t.width = Math.floor(C * Q)),
					(t.height = Math.floor(N * Q)),
					I === !0 && ((t.style.width = C + 'px'), (t.style.height = N + 'px')),
					this.setViewport(0, 0, C, N);
			}),
			(this.getDrawingBufferSize = function (C) {
				return C.set(X * Q, Z * Q).floor();
			}),
			(this.setDrawingBufferSize = function (C, N, I) {
				(X = C),
					(Z = N),
					(Q = I),
					(t.width = Math.floor(C * I)),
					(t.height = Math.floor(N * I)),
					this.setViewport(0, 0, C, N);
			}),
			(this.getCurrentViewport = function (C) {
				return C.copy(x);
			}),
			(this.getViewport = function (C) {
				return C.copy(oe);
			}),
			(this.setViewport = function (C, N, I, k) {
				C.isVector4 ? oe.set(C.x, C.y, C.z, C.w) : oe.set(C, N, I, k),
					Xe.viewport(x.copy(oe).multiplyScalar(Q).floor());
			}),
			(this.getScissor = function (C) {
				return C.copy(de);
			}),
			(this.setScissor = function (C, N, I, k) {
				C.isVector4 ? de.set(C.x, C.y, C.z, C.w) : de.set(C, N, I, k),
					Xe.scissor(z.copy(de).multiplyScalar(Q).floor());
			}),
			(this.getScissorTest = function () {
				return Te;
			}),
			(this.setScissorTest = function (C) {
				Xe.setScissorTest((Te = C));
			}),
			(this.setOpaqueSort = function (C) {
				he = C;
			}),
			(this.setTransparentSort = function (C) {
				ie = C;
			}),
			(this.getClearColor = function (C) {
				return C.copy(Ne.getClearColor());
			}),
			(this.setClearColor = function () {
				Ne.setClearColor.apply(Ne, arguments);
			}),
			(this.getClearAlpha = function () {
				return Ne.getClearAlpha();
			}),
			(this.setClearAlpha = function () {
				Ne.setClearAlpha.apply(Ne, arguments);
			}),
			(this.clear = function (C = !0, N = !0, I = !0) {
				let k = 0;
				if (C) {
					let G = !1;
					if (R !== null) {
						const K = R.texture.format;
						G = K === p_ || K === d_ || K === h_;
					}
					if (G) {
						const K = R.texture.type,
							$ = K === is || K === Ms || K === Sh || K === Ns || K === a_ || K === c_,
							J = Ne.getClearColor(),
							ce = Ne.getClearAlpha(),
							ue = J.r,
							ge = J.g,
							xe = J.b;
						$
							? ((p[0] = ue), (p[1] = ge), (p[2] = xe), (p[3] = ce), q.clearBufferuiv(q.COLOR, 0, p))
							: ((m[0] = ue), (m[1] = ge), (m[2] = xe), (m[3] = ce), q.clearBufferiv(q.COLOR, 0, m));
					} else k |= q.COLOR_BUFFER_BIT;
				}
				N && (k |= q.DEPTH_BUFFER_BIT),
					I && ((k |= q.STENCIL_BUFFER_BIT), this.state.buffers.stencil.setMask(4294967295)),
					q.clear(k);
			}),
			(this.clearColor = function () {
				this.clear(!0, !1, !1);
			}),
			(this.clearDepth = function () {
				this.clear(!1, !0, !1);
			}),
			(this.clearStencil = function () {
				this.clear(!1, !1, !0);
			}),
			(this.dispose = function () {
				t.removeEventListener('webglcontextlost', se, !1),
					t.removeEventListener('webglcontextrestored', H, !1),
					t.removeEventListener('webglcontextcreationerror', Ie, !1),
					pe.dispose(),
					Ce.dispose(),
					ot.dispose(),
					mt.dispose(),
					Wt.dispose(),
					O.dispose(),
					De.dispose(),
					Re.dispose(),
					Y.dispose(),
					Pe.dispose(),
					Pe.removeEventListener('sessionstart', It),
					Pe.removeEventListener('sessionend', gt),
					be && (be.dispose(), (be = null)),
					dn.stop();
			});
		function se(C) {
			C.preventDefault(), console.log('THREE.WebGLRenderer: Context Lost.'), (A = !0);
		}
		function H() {
			console.log('THREE.WebGLRenderer: Context Restored.'), (A = !1);
			const C = At.autoReset,
				N = Se.enabled,
				I = Se.autoUpdate,
				k = Se.needsUpdate,
				G = Se.type;
			Ae(), (At.autoReset = C), (Se.enabled = N), (Se.autoUpdate = I), (Se.needsUpdate = k), (Se.type = G);
		}
		function Ie(C) {
			console.error('THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', C.statusMessage);
		}
		function _e(C) {
			const N = C.target;
			N.removeEventListener('dispose', _e), te(N);
		}
		function te(C) {
			me(C), ot.remove(C);
		}
		function me(C) {
			const N = ot.get(C).programs;
			N !== void 0 &&
				(N.forEach(function (I) {
					Y.releaseProgram(I);
				}),
				C.isShaderMaterial && Y.releaseShaderCache(C));
		}
		this.renderBufferDirect = function (C, N, I, k, G, K) {
			N === null && (N = Ye);
			const $ = G.isMesh && G.matrixWorld.determinant() < 0,
				J = b(C, N, I, k, G);
			Xe.setMaterial(k, $);
			let ce = I.index,
				ue = 1;
			if (k.wireframe === !0) {
				if (((ce = U.getWireframeAttribute(I)), ce === void 0)) return;
				ue = 2;
			}
			const ge = I.drawRange,
				xe = I.attributes.position;
			let Me = ge.start * ue,
				Le = (ge.start + ge.count) * ue;
			K !== null && ((Me = Math.max(Me, K.start * ue)), (Le = Math.min(Le, (K.start + K.count) * ue))),
				ce !== null
					? ((Me = Math.max(Me, 0)), (Le = Math.min(Le, ce.count)))
					: xe != null && ((Me = Math.max(Me, 0)), (Le = Math.min(Le, xe.count)));
			const Ve = Le - Me;
			if (Ve < 0 || Ve === 1 / 0) return;
			De.setup(G, k, J, I, ce);
			let Et,
				it = at;
			if ((ce !== null && ((Et = Pt.get(ce)), (it = L), it.setIndex(Et)), G.isMesh))
				k.wireframe === !0
					? (Xe.setLineWidth(k.wireframeLinewidth * tt()), it.setMode(q.LINES))
					: it.setMode(q.TRIANGLES);
			else if (G.isLine) {
				let We = k.linewidth;
				We === void 0 && (We = 1),
					Xe.setLineWidth(We * tt()),
					G.isLineSegments
						? it.setMode(q.LINES)
						: G.isLineLoop
						? it.setMode(q.LINE_LOOP)
						: it.setMode(q.LINE_STRIP);
			} else G.isPoints ? it.setMode(q.POINTS) : G.isSprite && it.setMode(q.TRIANGLES);
			if (G.isBatchedMesh) it.renderMultiDraw(G._multiDrawStarts, G._multiDrawCounts, G._multiDrawCount);
			else if (G.isInstancedMesh) it.renderInstances(Me, Ve, G.count);
			else if (I.isInstancedBufferGeometry) {
				const We = I._maxInstanceCount !== void 0 ? I._maxInstanceCount : 1 / 0,
					yt = Math.min(I.instanceCount, We);
				it.renderInstances(Me, Ve, yt);
			} else it.render(Me, Ve);
		};
		function ze(C, N, I) {
			C.transparent === !0 && C.side === Zn && C.forceSinglePass === !1
				? ((C.side = fn),
				  (C.needsUpdate = !0),
				  ct(C, N, I),
				  (C.side = Ln),
				  (C.needsUpdate = !0),
				  ct(C, N, I),
				  (C.side = Zn))
				: ct(C, N, I);
		}
		(this.compile = function (C, N, I = null) {
			I === null && (I = C),
				(_ = Ce.get(I)),
				_.init(),
				y.push(_),
				I.traverseVisible(function (G) {
					G.isLight && G.layers.test(N.layers) && (_.pushLight(G), G.castShadow && _.pushShadow(G));
				}),
				C !== I &&
					C.traverseVisible(function (G) {
						G.isLight && G.layers.test(N.layers) && (_.pushLight(G), G.castShadow && _.pushShadow(G));
					}),
				_.setupLights(v._useLegacyLights);
			const k = new Set();
			return (
				C.traverse(function (G) {
					const K = G.material;
					if (K)
						if (Array.isArray(K))
							for (let $ = 0; $ < K.length; $++) {
								const J = K[$];
								ze(J, I, G), k.add(J);
							}
						else ze(K, I, G), k.add(K);
				}),
				y.pop(),
				(_ = null),
				k
			);
		}),
			(this.compileAsync = function (C, N, I = null) {
				const k = this.compile(C, N, I);
				return new Promise((G) => {
					function K() {
						if (
							(k.forEach(function ($) {
								ot.get($).currentProgram.isReady() && k.delete($);
							}),
							k.size === 0)
						) {
							G(C);
							return;
						}
						setTimeout(K, 10);
					}
					ke.get('KHR_parallel_shader_compile') !== null ? K() : setTimeout(K, 10);
				});
			});
		let ht = null;
		function Nt(C) {
			ht && ht(C);
		}
		function It() {
			dn.stop();
		}
		function gt() {
			dn.start();
		}
		const dn = new Gb();
		dn.setAnimationLoop(Nt),
			typeof self < 'u' && dn.setContext(self),
			(this.setAnimationLoop = function (C) {
				(ht = C), Pe.setAnimationLoop(C), C === null ? dn.stop() : dn.start();
			}),
			Pe.addEventListener('sessionstart', It),
			Pe.addEventListener('sessionend', gt),
			(this.render = function (C, N) {
				if (N !== void 0 && N.isCamera !== !0) {
					console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
					return;
				}
				if (A === !0) return;
				C.matrixWorldAutoUpdate === !0 && C.updateMatrixWorld(),
					N.parent === null && N.matrixWorldAutoUpdate === !0 && N.updateMatrixWorld(),
					Pe.enabled === !0 &&
						Pe.isPresenting === !0 &&
						(Pe.cameraAutoUpdate === !0 && Pe.updateCamera(N), (N = Pe.getCamera())),
					C.isScene === !0 && C.onBeforeRender(v, C, N, R),
					(_ = Ce.get(C, y.length)),
					_.init(),
					y.push(_),
					Ue.multiplyMatrices(N.projectionMatrix, N.matrixWorldInverse),
					ee.setFromProjectionMatrix(Ue),
					(Oe = this.localClippingEnabled),
					(ae = Fe.init(this.clippingPlanes, Oe)),
					(g = pe.get(C, f.length)),
					g.init(),
					f.push(g),
					ui(C, N, 0, v.sortObjects),
					g.finish(),
					v.sortObjects === !0 && g.sort(he, ie),
					this.info.render.frame++,
					ae === !0 && Fe.beginShadows();
				const I = _.state.shadowsArray;
				if (
					(Se.render(I, C, N),
					ae === !0 && Fe.endShadows(),
					this.info.autoReset === !0 && this.info.reset(),
					Ne.render(g, C),
					_.setupLights(v._useLegacyLights),
					N.isArrayCamera)
				) {
					const k = N.cameras;
					for (let G = 0, K = k.length; G < K; G++) {
						const $ = k[G];
						xr(g, C, $, $.viewport);
					}
				} else xr(g, C, N);
				R !== null && (nt.updateMultisampleRenderTarget(R), nt.updateRenderTargetMipmap(R)),
					C.isScene === !0 && C.onAfterRender(v, C, N),
					De.resetDefaultState(),
					(D = -1),
					(E = null),
					y.pop(),
					y.length > 0 ? (_ = y[y.length - 1]) : (_ = null),
					f.pop(),
					f.length > 0 ? (g = f[f.length - 1]) : (g = null);
			});
		function ui(C, N, I, k) {
			if (C.visible === !1) return;
			if (C.layers.test(N.layers)) {
				if (C.isGroup) I = C.renderOrder;
				else if (C.isLOD) C.autoUpdate === !0 && C.update(N);
				else if (C.isLight) _.pushLight(C), C.castShadow && _.pushShadow(C);
				else if (C.isSprite) {
					if (!C.frustumCulled || ee.intersectsSprite(C)) {
						k && Je.setFromMatrixPosition(C.matrixWorld).applyMatrix4(Ue);
						const $ = O.update(C),
							J = C.material;
						J.visible && g.push(C, $, J, I, Je.z, null);
					}
				} else if ((C.isMesh || C.isLine || C.isPoints) && (!C.frustumCulled || ee.intersectsObject(C))) {
					const $ = O.update(C),
						J = C.material;
					if (
						(k &&
							(C.boundingSphere !== void 0
								? (C.boundingSphere === null && C.computeBoundingSphere(),
								  Je.copy(C.boundingSphere.center))
								: ($.boundingSphere === null && $.computeBoundingSphere(),
								  Je.copy($.boundingSphere.center)),
							Je.applyMatrix4(C.matrixWorld).applyMatrix4(Ue)),
						Array.isArray(J))
					) {
						const ce = $.groups;
						for (let ue = 0, ge = ce.length; ue < ge; ue++) {
							const xe = ce[ue],
								Me = J[xe.materialIndex];
							Me && Me.visible && g.push(C, $, Me, I, Je.z, xe);
						}
					} else J.visible && g.push(C, $, J, I, Je.z, null);
				}
			}
			const K = C.children;
			for (let $ = 0, J = K.length; $ < J; $++) ui(K[$], N, I, k);
		}
		function xr(C, N, I, k) {
			const G = C.opaque,
				K = C.transmissive,
				$ = C.transparent;
			_.setupLightsView(I),
				ae === !0 && Fe.setGlobalState(v.clippingPlanes, I),
				K.length > 0 && nd(G, K, N, I),
				k && Xe.viewport(x.copy(k)),
				G.length > 0 && Xi(G, N, I),
				K.length > 0 && Xi(K, N, I),
				$.length > 0 && Xi($, N, I),
				Xe.buffers.depth.setTest(!0),
				Xe.buffers.depth.setMask(!0),
				Xe.buffers.color.setMask(!0),
				Xe.setPolygonOffset(!1);
		}
		function nd(C, N, I, k) {
			if ((I.isScene === !0 ? I.overrideMaterial : null) !== null) return;
			const K = st.isWebGL2;
			be === null &&
				(be = new Gi(1, 1, {
					generateMipmaps: !0,
					type: ke.has('EXT_color_buffer_half_float') ? ki : is,
					minFilter: pa,
					samples: K ? 4 : 0,
				})),
				v.getDrawingBufferSize(He),
				K ? be.setSize(He.x, He.y) : be.setSize(Yu(He.x), Yu(He.y));
			const $ = v.getRenderTarget();
			v.setRenderTarget(be),
				v.getClearColor(W),
				(F = v.getClearAlpha()),
				F < 1 && v.setClearColor(16777215, 0.5),
				v.clear();
			const J = v.toneMapping;
			(v.toneMapping = Ci), Xi(C, I, k), nt.updateMultisampleRenderTarget(be), nt.updateRenderTargetMipmap(be);
			let ce = !1;
			for (let ue = 0, ge = N.length; ue < ge; ue++) {
				const xe = N[ue],
					Me = xe.object,
					Le = xe.geometry,
					Ve = xe.material,
					Et = xe.group;
				if (Ve.side === Zn && Me.layers.test(k.layers)) {
					const it = Ve.side;
					(Ve.side = fn),
						(Ve.needsUpdate = !0),
						zs(Me, I, k, Le, Ve, Et),
						(Ve.side = it),
						(Ve.needsUpdate = !0),
						(ce = !0);
				}
			}
			ce === !0 && (nt.updateMultisampleRenderTarget(be), nt.updateRenderTargetMipmap(be)),
				v.setRenderTarget($),
				v.setClearColor(W, F),
				(v.toneMapping = J);
		}
		function Xi(C, N, I) {
			const k = N.isScene === !0 ? N.overrideMaterial : null;
			for (let G = 0, K = C.length; G < K; G++) {
				const $ = C[G],
					J = $.object,
					ce = $.geometry,
					ue = k === null ? $.material : k,
					ge = $.group;
				J.layers.test(I.layers) && zs(J, N, I, ce, ue, ge);
			}
		}
		function zs(C, N, I, k, G, K) {
			C.onBeforeRender(v, N, I, k, G, K),
				C.modelViewMatrix.multiplyMatrices(I.matrixWorldInverse, C.matrixWorld),
				C.normalMatrix.getNormalMatrix(C.modelViewMatrix),
				G.onBeforeRender(v, N, I, k, C, K),
				G.transparent === !0 && G.side === Zn && G.forceSinglePass === !1
					? ((G.side = fn),
					  (G.needsUpdate = !0),
					  v.renderBufferDirect(I, N, k, G, C, K),
					  (G.side = Ln),
					  (G.needsUpdate = !0),
					  v.renderBufferDirect(I, N, k, G, C, K),
					  (G.side = Zn))
					: v.renderBufferDirect(I, N, k, G, C, K),
				C.onAfterRender(v, N, I, k, G, K);
		}
		function ct(C, N, I) {
			N.isScene !== !0 && (N = Ye);
			const k = ot.get(C),
				G = _.state.lights,
				K = _.state.shadowsArray,
				$ = G.state.version,
				J = Y.getParameters(C, G.state, K, N, I),
				ce = Y.getProgramCacheKey(J);
			let ue = k.programs;
			(k.environment = C.isMeshStandardMaterial ? N.environment : null),
				(k.fog = N.fog),
				(k.envMap = (C.isMeshStandardMaterial ? Wt : mt).get(C.envMap || k.environment)),
				ue === void 0 && (C.addEventListener('dispose', _e), (ue = new Map()), (k.programs = ue));
			let ge = ue.get(ce);
			if (ge !== void 0) {
				if (k.currentProgram === ge && k.lightsStateVersion === $) return ol(C, J), ge;
			} else
				(J.uniforms = Y.getUniforms(C)),
					C.onBuild(I, J, v),
					C.onBeforeCompile(J, v),
					(ge = Y.acquireProgram(J, ce)),
					ue.set(ce, ge),
					(k.uniforms = J.uniforms);
			const xe = k.uniforms;
			return (
				((!C.isShaderMaterial && !C.isRawShaderMaterial) || C.clipping === !0) &&
					(xe.clippingPlanes = Fe.uniform),
				ol(C, J),
				(k.needsLights = V(C)),
				(k.lightsStateVersion = $),
				k.needsLights &&
					((xe.ambientLightColor.value = G.state.ambient),
					(xe.lightProbe.value = G.state.probe),
					(xe.directionalLights.value = G.state.directional),
					(xe.directionalLightShadows.value = G.state.directionalShadow),
					(xe.spotLights.value = G.state.spot),
					(xe.spotLightShadows.value = G.state.spotShadow),
					(xe.rectAreaLights.value = G.state.rectArea),
					(xe.ltc_1.value = G.state.rectAreaLTC1),
					(xe.ltc_2.value = G.state.rectAreaLTC2),
					(xe.pointLights.value = G.state.point),
					(xe.pointLightShadows.value = G.state.pointShadow),
					(xe.hemisphereLights.value = G.state.hemi),
					(xe.directionalShadowMap.value = G.state.directionalShadowMap),
					(xe.directionalShadowMatrix.value = G.state.directionalShadowMatrix),
					(xe.spotShadowMap.value = G.state.spotShadowMap),
					(xe.spotLightMatrix.value = G.state.spotLightMatrix),
					(xe.spotLightMap.value = G.state.spotLightMap),
					(xe.pointShadowMap.value = G.state.pointShadowMap),
					(xe.pointShadowMatrix.value = G.state.pointShadowMatrix)),
				(k.currentProgram = ge),
				(k.uniformsList = null),
				ge
			);
		}
		function Va(C) {
			if (C.uniformsList === null) {
				const N = C.currentProgram.getUniforms();
				C.uniformsList = Mu.seqWithValue(N.seq, C.uniforms);
			}
			return C.uniformsList;
		}
		function ol(C, N) {
			const I = ot.get(C);
			(I.outputColorSpace = N.outputColorSpace),
				(I.batching = N.batching),
				(I.instancing = N.instancing),
				(I.instancingColor = N.instancingColor),
				(I.skinning = N.skinning),
				(I.morphTargets = N.morphTargets),
				(I.morphNormals = N.morphNormals),
				(I.morphColors = N.morphColors),
				(I.morphTargetsCount = N.morphTargetsCount),
				(I.numClippingPlanes = N.numClippingPlanes),
				(I.numIntersection = N.numClipIntersection),
				(I.vertexAlphas = N.vertexAlphas),
				(I.vertexTangents = N.vertexTangents),
				(I.toneMapping = N.toneMapping);
		}
		function b(C, N, I, k, G) {
			N.isScene !== !0 && (N = Ye), nt.resetTextureUnits();
			const K = N.fog,
				$ = k.isMeshStandardMaterial ? N.environment : null,
				J = R === null ? v.outputColorSpace : R.isXRRenderTarget === !0 ? R.texture.colorSpace : $n,
				ce = (k.isMeshStandardMaterial ? Wt : mt).get(k.envMap || $),
				ue = k.vertexColors === !0 && !!I.attributes.color && I.attributes.color.itemSize === 4,
				ge = !!I.attributes.tangent && (!!k.normalMap || k.anisotropy > 0),
				xe = !!I.morphAttributes.position,
				Me = !!I.morphAttributes.normal,
				Le = !!I.morphAttributes.color;
			let Ve = Ci;
			k.toneMapped && (R === null || R.isXRRenderTarget === !0) && (Ve = v.toneMapping);
			const Et = I.morphAttributes.position || I.morphAttributes.normal || I.morphAttributes.color,
				it = Et !== void 0 ? Et.length : 0,
				We = ot.get(k),
				yt = _.state.lights;
			if (ae === !0 && (Oe === !0 || C !== E)) {
				const jt = C === E && k.id === D;
				Fe.setState(k, C, jt);
			}
			let Ge = !1;
			k.version === We.__version
				? ((We.needsLights && We.lightsStateVersion !== yt.state.version) ||
						We.outputColorSpace !== J ||
						(G.isBatchedMesh && We.batching === !1) ||
						(!G.isBatchedMesh && We.batching === !0) ||
						(G.isInstancedMesh && We.instancing === !1) ||
						(!G.isInstancedMesh && We.instancing === !0) ||
						(G.isSkinnedMesh && We.skinning === !1) ||
						(!G.isSkinnedMesh && We.skinning === !0) ||
						(G.isInstancedMesh && We.instancingColor === !0 && G.instanceColor === null) ||
						(G.isInstancedMesh && We.instancingColor === !1 && G.instanceColor !== null) ||
						We.envMap !== ce ||
						(k.fog === !0 && We.fog !== K) ||
						(We.numClippingPlanes !== void 0 &&
							(We.numClippingPlanes !== Fe.numPlanes || We.numIntersection !== Fe.numIntersection)) ||
						We.vertexAlphas !== ue ||
						We.vertexTangents !== ge ||
						We.morphTargets !== xe ||
						We.morphNormals !== Me ||
						We.morphColors !== Le ||
						We.toneMapping !== Ve ||
						(st.isWebGL2 === !0 && We.morphTargetsCount !== it)) &&
				  (Ge = !0)
				: ((Ge = !0), (We.__version = k.version));
			let Rt = We.currentProgram;
			Ge === !0 && (Rt = ct(k, N, G));
			let Gn = !1,
				Gt = !1,
				vt = !1;
			const rt = Rt.getUniforms(),
				xn = We.uniforms;
			if (
				(Xe.useProgram(Rt.program) && ((Gn = !0), (Gt = !0), (vt = !0)),
				k.id !== D && ((D = k.id), (Gt = !0)),
				Gn || E !== C)
			) {
				rt.setValue(q, 'projectionMatrix', C.projectionMatrix),
					rt.setValue(q, 'viewMatrix', C.matrixWorldInverse);
				const jt = rt.map.cameraPosition;
				jt !== void 0 && jt.setValue(q, Je.setFromMatrixPosition(C.matrixWorld)),
					st.logarithmicDepthBuffer && rt.setValue(q, 'logDepthBufFC', 2 / (Math.log(C.far + 1) / Math.LN2)),
					(k.isMeshPhongMaterial ||
						k.isMeshToonMaterial ||
						k.isMeshLambertMaterial ||
						k.isMeshBasicMaterial ||
						k.isMeshStandardMaterial ||
						k.isShaderMaterial) &&
						rt.setValue(q, 'isOrthographic', C.isOrthographicCamera === !0),
					E !== C && ((E = C), (Gt = !0), (vt = !0));
			}
			if (G.isSkinnedMesh) {
				rt.setOptional(q, G, 'bindMatrix'), rt.setOptional(q, G, 'bindMatrixInverse');
				const jt = G.skeleton;
				jt &&
					(st.floatVertexTextures
						? (jt.boneTexture === null && jt.computeBoneTexture(),
						  rt.setValue(q, 'boneTexture', jt.boneTexture, nt))
						: console.warn(
								'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.'
						  ));
			}
			G.isBatchedMesh &&
				(rt.setOptional(q, G, 'batchingTexture'), rt.setValue(q, 'batchingTexture', G._matricesTexture, nt));
			const ds = I.morphAttributes;
			if (
				((ds.position !== void 0 || ds.normal !== void 0 || (ds.color !== void 0 && st.isWebGL2 === !0)) &&
					$e.update(G, I, Rt),
				(Gt || We.receiveShadow !== G.receiveShadow) &&
					((We.receiveShadow = G.receiveShadow), rt.setValue(q, 'receiveShadow', G.receiveShadow)),
				k.isMeshGouraudMaterial &&
					k.envMap !== null &&
					((xn.envMap.value = ce),
					(xn.flipEnvMap.value = ce.isCubeTexture && ce.isRenderTargetTexture === !1 ? -1 : 1)),
				Gt &&
					(rt.setValue(q, 'toneMappingExposure', v.toneMappingExposure),
					We.needsLights && P(xn, vt),
					K && k.fog === !0 && ve.refreshFogUniforms(xn, K),
					ve.refreshMaterialUniforms(xn, k, Q, Z, be),
					Mu.upload(q, Va(We), xn, nt)),
				k.isShaderMaterial &&
					k.uniformsNeedUpdate === !0 &&
					(Mu.upload(q, Va(We), xn, nt), (k.uniformsNeedUpdate = !1)),
				k.isSpriteMaterial && rt.setValue(q, 'center', G.center),
				rt.setValue(q, 'modelViewMatrix', G.modelViewMatrix),
				rt.setValue(q, 'normalMatrix', G.normalMatrix),
				rt.setValue(q, 'modelMatrix', G.matrixWorld),
				k.isShaderMaterial || k.isRawShaderMaterial)
			) {
				const jt = k.uniformsGroups;
				for (let Hs = 0, iM = jt.length; Hs < iM; Hs++)
					if (st.isWebGL2) {
						const ig = jt[Hs];
						Re.update(ig, Rt), Re.bind(ig, Rt);
					} else console.warn('THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.');
			}
			return Rt;
		}
		function P(C, N) {
			(C.ambientLightColor.needsUpdate = N),
				(C.lightProbe.needsUpdate = N),
				(C.directionalLights.needsUpdate = N),
				(C.directionalLightShadows.needsUpdate = N),
				(C.pointLights.needsUpdate = N),
				(C.pointLightShadows.needsUpdate = N),
				(C.spotLights.needsUpdate = N),
				(C.spotLightShadows.needsUpdate = N),
				(C.rectAreaLights.needsUpdate = N),
				(C.hemisphereLights.needsUpdate = N);
		}
		function V(C) {
			return (
				C.isMeshLambertMaterial ||
				C.isMeshToonMaterial ||
				C.isMeshPhongMaterial ||
				C.isMeshStandardMaterial ||
				C.isShadowMaterial ||
				(C.isShaderMaterial && C.lights === !0)
			);
		}
		(this.getActiveCubeFace = function () {
			return S;
		}),
			(this.getActiveMipmapLevel = function () {
				return T;
			}),
			(this.getRenderTarget = function () {
				return R;
			}),
			(this.setRenderTargetTextures = function (C, N, I) {
				(ot.get(C.texture).__webglTexture = N), (ot.get(C.depthTexture).__webglTexture = I);
				const k = ot.get(C);
				(k.__hasExternalTextures = !0),
					k.__hasExternalTextures &&
						((k.__autoAllocateDepthBuffer = I === void 0),
						k.__autoAllocateDepthBuffer ||
							(ke.has('WEBGL_multisampled_render_to_texture') === !0 &&
								(console.warn(
									'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided'
								),
								(k.__useRenderToTexture = !1))));
			}),
			(this.setRenderTargetFramebuffer = function (C, N) {
				const I = ot.get(C);
				(I.__webglFramebuffer = N), (I.__useDefaultFramebuffer = N === void 0);
			}),
			(this.setRenderTarget = function (C, N = 0, I = 0) {
				(R = C), (S = N), (T = I);
				let k = !0,
					G = null,
					K = !1,
					$ = !1;
				if (C) {
					const ce = ot.get(C);
					ce.__useDefaultFramebuffer !== void 0
						? (Xe.bindFramebuffer(q.FRAMEBUFFER, null), (k = !1))
						: ce.__webglFramebuffer === void 0
						? nt.setupRenderTarget(C)
						: ce.__hasExternalTextures &&
						  nt.rebindTextures(C, ot.get(C.texture).__webglTexture, ot.get(C.depthTexture).__webglTexture);
					const ue = C.texture;
					(ue.isData3DTexture || ue.isDataArrayTexture || ue.isCompressedArrayTexture) && ($ = !0);
					const ge = ot.get(C).__webglFramebuffer;
					C.isWebGLCubeRenderTarget
						? (Array.isArray(ge[N]) ? (G = ge[N][I]) : (G = ge[N]), (K = !0))
						: st.isWebGL2 && C.samples > 0 && nt.useMultisampledRTT(C) === !1
						? (G = ot.get(C).__webglMultisampledFramebuffer)
						: Array.isArray(ge)
						? (G = ge[I])
						: (G = ge),
						x.copy(C.viewport),
						z.copy(C.scissor),
						(B = C.scissorTest);
				} else x.copy(oe).multiplyScalar(Q).floor(), z.copy(de).multiplyScalar(Q).floor(), (B = Te);
				if (
					(Xe.bindFramebuffer(q.FRAMEBUFFER, G) && st.drawBuffers && k && Xe.drawBuffers(C, G),
					Xe.viewport(x),
					Xe.scissor(z),
					Xe.setScissorTest(B),
					K)
				) {
					const ce = ot.get(C.texture);
					q.framebufferTexture2D(
						q.FRAMEBUFFER,
						q.COLOR_ATTACHMENT0,
						q.TEXTURE_CUBE_MAP_POSITIVE_X + N,
						ce.__webglTexture,
						I
					);
				} else if ($) {
					const ce = ot.get(C.texture),
						ue = N || 0;
					q.framebufferTextureLayer(q.FRAMEBUFFER, q.COLOR_ATTACHMENT0, ce.__webglTexture, I || 0, ue);
				}
				D = -1;
			}),
			(this.readRenderTargetPixels = function (C, N, I, k, G, K, $) {
				if (!(C && C.isWebGLRenderTarget)) {
					console.error(
						'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.'
					);
					return;
				}
				let J = ot.get(C).__webglFramebuffer;
				if ((C.isWebGLCubeRenderTarget && $ !== void 0 && (J = J[$]), J)) {
					Xe.bindFramebuffer(q.FRAMEBUFFER, J);
					try {
						const ce = C.texture,
							ue = ce.format,
							ge = ce.type;
						if (ue !== wn && ye.convert(ue) !== q.getParameter(q.IMPLEMENTATION_COLOR_READ_FORMAT)) {
							console.error(
								'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.'
							);
							return;
						}
						const xe =
							ge === ki &&
							(ke.has('EXT_color_buffer_half_float') ||
								(st.isWebGL2 && ke.has('EXT_color_buffer_float')));
						if (
							ge !== is &&
							ye.convert(ge) !== q.getParameter(q.IMPLEMENTATION_COLOR_READ_TYPE) &&
							!(
								ge === jn &&
								(st.isWebGL2 || ke.has('OES_texture_float') || ke.has('WEBGL_color_buffer_float'))
							) &&
							!xe
						) {
							console.error(
								'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.'
							);
							return;
						}
						N >= 0 &&
							N <= C.width - k &&
							I >= 0 &&
							I <= C.height - G &&
							q.readPixels(N, I, k, G, ye.convert(ue), ye.convert(ge), K);
					} finally {
						const ce = R !== null ? ot.get(R).__webglFramebuffer : null;
						Xe.bindFramebuffer(q.FRAMEBUFFER, ce);
					}
				}
			}),
			(this.copyFramebufferToTexture = function (C, N, I = 0) {
				const k = Math.pow(2, -I),
					G = Math.floor(N.image.width * k),
					K = Math.floor(N.image.height * k);
				nt.setTexture2D(N, 0), q.copyTexSubImage2D(q.TEXTURE_2D, I, 0, 0, C.x, C.y, G, K), Xe.unbindTexture();
			}),
			(this.copyTextureToTexture = function (C, N, I, k = 0) {
				const G = N.image.width,
					K = N.image.height,
					$ = ye.convert(I.format),
					J = ye.convert(I.type);
				nt.setTexture2D(I, 0),
					q.pixelStorei(q.UNPACK_FLIP_Y_WEBGL, I.flipY),
					q.pixelStorei(q.UNPACK_PREMULTIPLY_ALPHA_WEBGL, I.premultiplyAlpha),
					q.pixelStorei(q.UNPACK_ALIGNMENT, I.unpackAlignment),
					N.isDataTexture
						? q.texSubImage2D(q.TEXTURE_2D, k, C.x, C.y, G, K, $, J, N.image.data)
						: N.isCompressedTexture
						? q.compressedTexSubImage2D(
								q.TEXTURE_2D,
								k,
								C.x,
								C.y,
								N.mipmaps[0].width,
								N.mipmaps[0].height,
								$,
								N.mipmaps[0].data
						  )
						: q.texSubImage2D(q.TEXTURE_2D, k, C.x, C.y, $, J, N.image),
					k === 0 && I.generateMipmaps && q.generateMipmap(q.TEXTURE_2D),
					Xe.unbindTexture();
			}),
			(this.copyTextureToTexture3D = function (C, N, I, k, G = 0) {
				if (v.isWebGL1Renderer) {
					console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
					return;
				}
				const K = C.max.x - C.min.x + 1,
					$ = C.max.y - C.min.y + 1,
					J = C.max.z - C.min.z + 1,
					ce = ye.convert(k.format),
					ue = ye.convert(k.type);
				let ge;
				if (k.isData3DTexture) nt.setTexture3D(k, 0), (ge = q.TEXTURE_3D);
				else if (k.isDataArrayTexture) nt.setTexture2DArray(k, 0), (ge = q.TEXTURE_2D_ARRAY);
				else {
					console.warn(
						'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.'
					);
					return;
				}
				q.pixelStorei(q.UNPACK_FLIP_Y_WEBGL, k.flipY),
					q.pixelStorei(q.UNPACK_PREMULTIPLY_ALPHA_WEBGL, k.premultiplyAlpha),
					q.pixelStorei(q.UNPACK_ALIGNMENT, k.unpackAlignment);
				const xe = q.getParameter(q.UNPACK_ROW_LENGTH),
					Me = q.getParameter(q.UNPACK_IMAGE_HEIGHT),
					Le = q.getParameter(q.UNPACK_SKIP_PIXELS),
					Ve = q.getParameter(q.UNPACK_SKIP_ROWS),
					Et = q.getParameter(q.UNPACK_SKIP_IMAGES),
					it = I.isCompressedTexture ? I.mipmaps[0] : I.image;
				q.pixelStorei(q.UNPACK_ROW_LENGTH, it.width),
					q.pixelStorei(q.UNPACK_IMAGE_HEIGHT, it.height),
					q.pixelStorei(q.UNPACK_SKIP_PIXELS, C.min.x),
					q.pixelStorei(q.UNPACK_SKIP_ROWS, C.min.y),
					q.pixelStorei(q.UNPACK_SKIP_IMAGES, C.min.z),
					I.isDataTexture || I.isData3DTexture
						? q.texSubImage3D(ge, G, N.x, N.y, N.z, K, $, J, ce, ue, it.data)
						: I.isCompressedArrayTexture
						? (console.warn(
								'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.'
						  ),
						  q.compressedTexSubImage3D(ge, G, N.x, N.y, N.z, K, $, J, ce, it.data))
						: q.texSubImage3D(ge, G, N.x, N.y, N.z, K, $, J, ce, ue, it),
					q.pixelStorei(q.UNPACK_ROW_LENGTH, xe),
					q.pixelStorei(q.UNPACK_IMAGE_HEIGHT, Me),
					q.pixelStorei(q.UNPACK_SKIP_PIXELS, Le),
					q.pixelStorei(q.UNPACK_SKIP_ROWS, Ve),
					q.pixelStorei(q.UNPACK_SKIP_IMAGES, Et),
					G === 0 && k.generateMipmaps && q.generateMipmap(ge),
					Xe.unbindTexture();
			}),
			(this.initTexture = function (C) {
				C.isCubeTexture
					? nt.setTextureCube(C, 0)
					: C.isData3DTexture
					? nt.setTexture3D(C, 0)
					: C.isDataArrayTexture || C.isCompressedArrayTexture
					? nt.setTexture2DArray(C, 0)
					: nt.setTexture2D(C, 0),
					Xe.unbindTexture();
			}),
			(this.resetState = function () {
				(S = 0), (T = 0), (R = null), Xe.reset(), De.reset();
			}),
			typeof __THREE_DEVTOOLS__ < 'u' &&
				__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {detail: this}));
	}
	get coordinateSystem() {
		return Ts;
	}
	get outputColorSpace() {
		return this._outputColorSpace;
	}
	set outputColorSpace(e) {
		this._outputColorSpace = e;
		const t = this.getContext();
		(t.drawingBufferColorSpace = e === io ? 'display-p3' : 'srgb'),
			(t.unpackColorSpace = Mt.workingColorSpace === yr ? 'display-p3' : 'srgb');
	}
	get physicallyCorrectLights() {
		return (
			console.warn(
				'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.'
			),
			!this.useLegacyLights
		);
	}
	set physicallyCorrectLights(e) {
		console.warn(
			'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.'
		),
			(this.useLegacyLights = !e);
	}
	get outputEncoding() {
		return (
			console.warn(
				'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.'
			),
			this.outputColorSpace === en ? jr : Rb
		);
	}
	set outputEncoding(e) {
		console.warn('THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.'),
			(this.outputColorSpace = e === jr ? en : $n);
	}
	get useLegacyLights() {
		return (
			console.warn(
				'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.'
			),
			this._useLegacyLights
		);
	}
	set useLegacyLights(e) {
		console.warn(
			'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.'
		),
			(this._useLegacyLights = e);
	}
}
class _N extends ss {}
_N.prototype.isWebGL1Renderer = !0;
class b_ {
	constructor(e, t = 25e-5) {
		(this.isFogExp2 = !0), (this.name = ''), (this.color = new Ee(e)), (this.density = t);
	}
	clone() {
		return new b_(this.color, this.density);
	}
	toJSON() {
		return {type: 'FogExp2', name: this.name, color: this.color.getHex(), density: this.density};
	}
}
class S_ {
	constructor(e, t = 1, i = 1e3) {
		(this.isFog = !0), (this.name = ''), (this.color = new Ee(e)), (this.near = t), (this.far = i);
	}
	clone() {
		return new S_(this.color, this.near, this.far);
	}
	toJSON() {
		return {type: 'Fog', name: this.name, color: this.color.getHex(), near: this.near, far: this.far};
	}
}
class Th extends kt {
	constructor() {
		super(),
			(this.isScene = !0),
			(this.type = 'Scene'),
			(this.background = null),
			(this.environment = null),
			(this.fog = null),
			(this.backgroundBlurriness = 0),
			(this.backgroundIntensity = 1),
			(this.overrideMaterial = null),
			typeof __THREE_DEVTOOLS__ < 'u' &&
				__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {detail: this}));
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			e.background !== null && (this.background = e.background.clone()),
			e.environment !== null && (this.environment = e.environment.clone()),
			e.fog !== null && (this.fog = e.fog.clone()),
			(this.backgroundBlurriness = e.backgroundBlurriness),
			(this.backgroundIntensity = e.backgroundIntensity),
			e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()),
			(this.matrixAutoUpdate = e.matrixAutoUpdate),
			this
		);
	}
	toJSON(e) {
		const t = super.toJSON(e);
		return (
			this.fog !== null && (t.object.fog = this.fog.toJSON()),
			this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness),
			this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity),
			t
		);
	}
}
class qb extends An {
	constructor(e) {
		super(),
			(this.isSpriteMaterial = !0),
			(this.type = 'SpriteMaterial'),
			(this.color = new Ee(16777215)),
			(this.map = null),
			(this.alphaMap = null),
			(this.rotation = 0),
			(this.sizeAttenuation = !0),
			(this.transparent = !0),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			(this.map = e.map),
			(this.alphaMap = e.alphaMap),
			(this.rotation = e.rotation),
			(this.sizeAttenuation = e.sizeAttenuation),
			(this.fog = e.fog),
			this
		);
	}
}
class Rh extends In {
	constructor(e = null, t = 1, i = 1, s, r, o, a, c, l = qt, u = qt, h, d) {
		super(null, o, a, c, l, u, s, r, h, d),
			(this.isDataTexture = !0),
			(this.image = {data: e, width: t, height: i}),
			(this.generateMipmaps = !1),
			(this.flipY = !1),
			(this.unpackAlignment = 1);
	}
}
class ef extends kn {
	constructor(e, t, i, s = 1) {
		super(e, t, i), (this.isInstancedBufferAttribute = !0), (this.meshPerAttribute = s);
	}
	copy(e) {
		return super.copy(e), (this.meshPerAttribute = e.meshPerAttribute), this;
	}
	toJSON() {
		const e = super.toJSON();
		return (e.meshPerAttribute = this.meshPerAttribute), (e.isInstancedBufferAttribute = !0), e;
	}
}
const wo = new Qe(),
	Av = new Qe(),
	wl = [],
	xv = new Ht(),
	mN = new Qe(),
	ja = new On(),
	Xa = new Fs();
class gN extends On {
	constructor(e, t, i) {
		super(e, t),
			(this.isInstancedMesh = !0),
			(this.instanceMatrix = new ef(new Float32Array(i * 16), 16)),
			(this.instanceColor = null),
			(this.count = i),
			(this.boundingBox = null),
			(this.boundingSphere = null);
		for (let s = 0; s < i; s++) this.setMatrixAt(s, mN);
	}
	computeBoundingBox() {
		const e = this.geometry,
			t = this.count;
		this.boundingBox === null && (this.boundingBox = new Ht()),
			e.boundingBox === null && e.computeBoundingBox(),
			this.boundingBox.makeEmpty();
		for (let i = 0; i < t; i++)
			this.getMatrixAt(i, wo), xv.copy(e.boundingBox).applyMatrix4(wo), this.boundingBox.union(xv);
	}
	computeBoundingSphere() {
		const e = this.geometry,
			t = this.count;
		this.boundingSphere === null && (this.boundingSphere = new Fs()),
			e.boundingSphere === null && e.computeBoundingSphere(),
			this.boundingSphere.makeEmpty();
		for (let i = 0; i < t; i++)
			this.getMatrixAt(i, wo), Xa.copy(e.boundingSphere).applyMatrix4(wo), this.boundingSphere.union(Xa);
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			this.instanceMatrix.copy(e.instanceMatrix),
			e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()),
			(this.count = e.count),
			e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()),
			e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()),
			this
		);
	}
	getColorAt(e, t) {
		t.fromArray(this.instanceColor.array, e * 3);
	}
	getMatrixAt(e, t) {
		t.fromArray(this.instanceMatrix.array, e * 16);
	}
	raycast(e, t) {
		const i = this.matrixWorld,
			s = this.count;
		if (
			((ja.geometry = this.geometry),
			(ja.material = this.material),
			ja.material !== void 0 &&
				(this.boundingSphere === null && this.computeBoundingSphere(),
				Xa.copy(this.boundingSphere),
				Xa.applyMatrix4(i),
				e.ray.intersectsSphere(Xa) !== !1))
		)
			for (let r = 0; r < s; r++) {
				this.getMatrixAt(r, wo), Av.multiplyMatrices(i, wo), (ja.matrixWorld = Av), ja.raycast(e, wl);
				for (let o = 0, a = wl.length; o < a; o++) {
					const c = wl[o];
					(c.instanceId = r), (c.object = this), t.push(c);
				}
				wl.length = 0;
			}
	}
	setColorAt(e, t) {
		this.instanceColor === null &&
			(this.instanceColor = new ef(new Float32Array(this.instanceMatrix.count * 3), 3)),
			t.toArray(this.instanceColor.array, e * 3);
	}
	setMatrixAt(e, t) {
		t.toArray(this.instanceMatrix.array, e * 16);
	}
	updateMorphTargets() {}
	dispose() {
		this.dispatchEvent({type: 'dispose'});
	}
}
class so extends An {
	constructor(e) {
		super(),
			(this.isLineBasicMaterial = !0),
			(this.type = 'LineBasicMaterial'),
			(this.color = new Ee(16777215)),
			(this.map = null),
			(this.linewidth = 1),
			(this.linecap = 'round'),
			(this.linejoin = 'round'),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			(this.map = e.map),
			(this.linewidth = e.linewidth),
			(this.linecap = e.linecap),
			(this.linejoin = e.linejoin),
			(this.fog = e.fog),
			this
		);
	}
}
const Mv = new w(),
	Tv = new w(),
	Rv = new Qe(),
	Id = new Ta(),
	Ol = new Fs();
class vN extends kt {
	constructor(e = new qn(), t = new so()) {
		super(),
			(this.isLine = !0),
			(this.type = 'Line'),
			(this.geometry = e),
			(this.material = t),
			this.updateMorphTargets();
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			(this.material = Array.isArray(e.material) ? e.material.slice() : e.material),
			(this.geometry = e.geometry),
			this
		);
	}
	computeLineDistances() {
		const e = this.geometry;
		if (e.index === null) {
			const t = e.attributes.position,
				i = [0];
			for (let s = 1, r = t.count; s < r; s++)
				Mv.fromBufferAttribute(t, s - 1),
					Tv.fromBufferAttribute(t, s),
					(i[s] = i[s - 1]),
					(i[s] += Mv.distanceTo(Tv));
			e.setAttribute('lineDistance', new Kt(i, 1));
		} else
			console.warn(
				'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.'
			);
		return this;
	}
	raycast(e, t) {
		const i = this.geometry,
			s = this.matrixWorld,
			r = e.params.Line.threshold,
			o = i.drawRange;
		if (
			(i.boundingSphere === null && i.computeBoundingSphere(),
			Ol.copy(i.boundingSphere),
			Ol.applyMatrix4(s),
			(Ol.radius += r),
			e.ray.intersectsSphere(Ol) === !1)
		)
			return;
		Rv.copy(s).invert(), Id.copy(e.ray).applyMatrix4(Rv);
		const a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3),
			c = a * a,
			l = new w(),
			u = new w(),
			h = new w(),
			d = new w(),
			p = this.isLineSegments ? 2 : 1,
			m = i.index,
			_ = i.attributes.position;
		if (m !== null) {
			const f = Math.max(0, o.start),
				y = Math.min(m.count, o.start + o.count);
			for (let v = f, A = y - 1; v < A; v += p) {
				const S = m.getX(v),
					T = m.getX(v + 1);
				if ((l.fromBufferAttribute(_, S), u.fromBufferAttribute(_, T), Id.distanceSqToSegment(l, u, d, h) > c))
					continue;
				d.applyMatrix4(this.matrixWorld);
				const D = e.ray.origin.distanceTo(d);
				D < e.near ||
					D > e.far ||
					t.push({
						distance: D,
						point: h.clone().applyMatrix4(this.matrixWorld),
						index: v,
						face: null,
						faceIndex: null,
						object: this,
					});
			}
		} else {
			const f = Math.max(0, o.start),
				y = Math.min(_.count, o.start + o.count);
			for (let v = f, A = y - 1; v < A; v += p) {
				if (
					(l.fromBufferAttribute(_, v),
					u.fromBufferAttribute(_, v + 1),
					Id.distanceSqToSegment(l, u, d, h) > c)
				)
					continue;
				d.applyMatrix4(this.matrixWorld);
				const T = e.ray.origin.distanceTo(d);
				T < e.near ||
					T > e.far ||
					t.push({
						distance: T,
						point: h.clone().applyMatrix4(this.matrixWorld),
						index: v,
						face: null,
						faceIndex: null,
						object: this,
					});
			}
		}
	}
	updateMorphTargets() {
		const t = this.geometry.morphAttributes,
			i = Object.keys(t);
		if (i.length > 0) {
			const s = t[i[0]];
			if (s !== void 0) {
				(this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
				for (let r = 0, o = s.length; r < o; r++) {
					const a = s[r].name || String(r);
					this.morphTargetInfluences.push(0), (this.morphTargetDictionary[a] = r);
				}
			}
		}
	}
}
const wv = new w(),
	Ov = new w();
class A_ extends vN {
	constructor(e, t) {
		super(e, t), (this.isLineSegments = !0), (this.type = 'LineSegments');
	}
	computeLineDistances() {
		const e = this.geometry;
		if (e.index === null) {
			const t = e.attributes.position,
				i = [];
			for (let s = 0, r = t.count; s < r; s += 2)
				wv.fromBufferAttribute(t, s),
					Ov.fromBufferAttribute(t, s + 1),
					(i[s] = s === 0 ? 0 : i[s - 1]),
					(i[s + 1] = i[s] + wv.distanceTo(Ov));
			e.setAttribute('lineDistance', new Kt(i, 1));
		} else
			console.warn(
				'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.'
			);
		return this;
	}
}
class wh extends An {
	constructor(e) {
		super(),
			(this.isPointsMaterial = !0),
			(this.type = 'PointsMaterial'),
			(this.color = new Ee(16777215)),
			(this.map = null),
			(this.alphaMap = null),
			(this.size = 1),
			(this.sizeAttenuation = !0),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			(this.map = e.map),
			(this.alphaMap = e.alphaMap),
			(this.size = e.size),
			(this.sizeAttenuation = e.sizeAttenuation),
			(this.fog = e.fog),
			this
		);
	}
}
const Pv = new Qe(),
	tf = new Ta(),
	Pl = new Fs(),
	Nl = new w();
class EN extends kt {
	constructor(e = new qn(), t = new wh()) {
		super(),
			(this.isPoints = !0),
			(this.type = 'Points'),
			(this.geometry = e),
			(this.material = t),
			this.updateMorphTargets();
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			(this.material = Array.isArray(e.material) ? e.material.slice() : e.material),
			(this.geometry = e.geometry),
			this
		);
	}
	raycast(e, t) {
		const i = this.geometry,
			s = this.matrixWorld,
			r = e.params.Points.threshold,
			o = i.drawRange;
		if (
			(i.boundingSphere === null && i.computeBoundingSphere(),
			Pl.copy(i.boundingSphere),
			Pl.applyMatrix4(s),
			(Pl.radius += r),
			e.ray.intersectsSphere(Pl) === !1)
		)
			return;
		Pv.copy(s).invert(), tf.copy(e.ray).applyMatrix4(Pv);
		const a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3),
			c = a * a,
			l = i.index,
			h = i.attributes.position;
		if (l !== null) {
			const d = Math.max(0, o.start),
				p = Math.min(l.count, o.start + o.count);
			for (let m = d, g = p; m < g; m++) {
				const _ = l.getX(m);
				Nl.fromBufferAttribute(h, _), Nv(Nl, _, c, s, e, t, this);
			}
		} else {
			const d = Math.max(0, o.start),
				p = Math.min(h.count, o.start + o.count);
			for (let m = d, g = p; m < g; m++) Nl.fromBufferAttribute(h, m), Nv(Nl, m, c, s, e, t, this);
		}
	}
	updateMorphTargets() {
		const t = this.geometry.morphAttributes,
			i = Object.keys(t);
		if (i.length > 0) {
			const s = t[i[0]];
			if (s !== void 0) {
				(this.morphTargetInfluences = []), (this.morphTargetDictionary = {});
				for (let r = 0, o = s.length; r < o; r++) {
					const a = s[r].name || String(r);
					this.morphTargetInfluences.push(0), (this.morphTargetDictionary[a] = r);
				}
			}
		}
	}
}
function Nv(n, e, t, i, s, r, o) {
	const a = tf.distanceSqToPoint(n);
	if (a < t) {
		const c = new w();
		tf.closestPointToPoint(n, c), c.applyMatrix4(i);
		const l = s.ray.origin.distanceTo(c);
		if (l < s.near || l > s.far) return;
		r.push({distance: l, distanceToRay: Math.sqrt(a), point: c, index: e, face: null, object: o});
	}
}
class x_ extends qn {
	constructor(e = 1, t = 1, i = 1, s = 32, r = 1, o = !1, a = 0, c = Math.PI * 2) {
		super(),
			(this.type = 'CylinderGeometry'),
			(this.parameters = {
				radiusTop: e,
				radiusBottom: t,
				height: i,
				radialSegments: s,
				heightSegments: r,
				openEnded: o,
				thetaStart: a,
				thetaLength: c,
			});
		const l = this;
		(s = Math.floor(s)), (r = Math.floor(r));
		const u = [],
			h = [],
			d = [],
			p = [];
		let m = 0;
		const g = [],
			_ = i / 2;
		let f = 0;
		y(),
			o === !1 && (e > 0 && v(!0), t > 0 && v(!1)),
			this.setIndex(u),
			this.setAttribute('position', new Kt(h, 3)),
			this.setAttribute('normal', new Kt(d, 3)),
			this.setAttribute('uv', new Kt(p, 2));
		function y() {
			const A = new w(),
				S = new w();
			let T = 0;
			const R = (t - e) / i;
			for (let D = 0; D <= r; D++) {
				const E = [],
					x = D / r,
					z = x * (t - e) + e;
				for (let B = 0; B <= s; B++) {
					const W = B / s,
						F = W * c + a,
						X = Math.sin(F),
						Z = Math.cos(F);
					(S.x = z * X),
						(S.y = -x * i + _),
						(S.z = z * Z),
						h.push(S.x, S.y, S.z),
						A.set(X, R, Z).normalize(),
						d.push(A.x, A.y, A.z),
						p.push(W, 1 - x),
						E.push(m++);
				}
				g.push(E);
			}
			for (let D = 0; D < s; D++)
				for (let E = 0; E < r; E++) {
					const x = g[E][D],
						z = g[E + 1][D],
						B = g[E + 1][D + 1],
						W = g[E][D + 1];
					u.push(x, z, W), u.push(z, B, W), (T += 6);
				}
			l.addGroup(f, T, 0), (f += T);
		}
		function v(A) {
			const S = m,
				T = new re(),
				R = new w();
			let D = 0;
			const E = A === !0 ? e : t,
				x = A === !0 ? 1 : -1;
			for (let B = 1; B <= s; B++) h.push(0, _ * x, 0), d.push(0, x, 0), p.push(0.5, 0.5), m++;
			const z = m;
			for (let B = 0; B <= s; B++) {
				const F = (B / s) * c + a,
					X = Math.cos(F),
					Z = Math.sin(F);
				(R.x = E * Z),
					(R.y = _ * x),
					(R.z = E * X),
					h.push(R.x, R.y, R.z),
					d.push(0, x, 0),
					(T.x = X * 0.5 + 0.5),
					(T.y = Z * 0.5 * x + 0.5),
					p.push(T.x, T.y),
					m++;
			}
			for (let B = 0; B < s; B++) {
				const W = S + B,
					F = z + B;
				A === !0 ? u.push(F, F + 1, W) : u.push(F + 1, F, W), (D += 3);
			}
			l.addGroup(f, D, A === !0 ? 1 : 2), (f += D);
		}
	}
	copy(e) {
		return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
	}
	static fromJSON(e) {
		return new x_(
			e.radiusTop,
			e.radiusBottom,
			e.height,
			e.radialSegments,
			e.heightSegments,
			e.openEnded,
			e.thetaStart,
			e.thetaLength
		);
	}
}
class M_ extends x_ {
	constructor(e = 1, t = 1, i = 32, s = 1, r = !1, o = 0, a = Math.PI * 2) {
		super(0, e, t, i, s, r, o, a),
			(this.type = 'ConeGeometry'),
			(this.parameters = {
				radius: e,
				height: t,
				radialSegments: i,
				heightSegments: s,
				openEnded: r,
				thetaStart: o,
				thetaLength: a,
			});
	}
	static fromJSON(e) {
		return new M_(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
	}
}
class T_ extends qn {
	constructor(e = [], t = [], i = 1, s = 0) {
		super(),
			(this.type = 'PolyhedronGeometry'),
			(this.parameters = {vertices: e, indices: t, radius: i, detail: s});
		const r = [],
			o = [];
		a(s),
			l(i),
			u(),
			this.setAttribute('position', new Kt(r, 3)),
			this.setAttribute('normal', new Kt(r.slice(), 3)),
			this.setAttribute('uv', new Kt(o, 2)),
			s === 0 ? this.computeVertexNormals() : this.normalizeNormals();
		function a(y) {
			const v = new w(),
				A = new w(),
				S = new w();
			for (let T = 0; T < t.length; T += 3) p(t[T + 0], v), p(t[T + 1], A), p(t[T + 2], S), c(v, A, S, y);
		}
		function c(y, v, A, S) {
			const T = S + 1,
				R = [];
			for (let D = 0; D <= T; D++) {
				R[D] = [];
				const E = y.clone().lerp(A, D / T),
					x = v.clone().lerp(A, D / T),
					z = T - D;
				for (let B = 0; B <= z; B++) B === 0 && D === T ? (R[D][B] = E) : (R[D][B] = E.clone().lerp(x, B / z));
			}
			for (let D = 0; D < T; D++)
				for (let E = 0; E < 2 * (T - D) - 1; E++) {
					const x = Math.floor(E / 2);
					E % 2 === 0
						? (d(R[D][x + 1]), d(R[D + 1][x]), d(R[D][x]))
						: (d(R[D][x + 1]), d(R[D + 1][x + 1]), d(R[D + 1][x]));
				}
		}
		function l(y) {
			const v = new w();
			for (let A = 0; A < r.length; A += 3)
				(v.x = r[A + 0]),
					(v.y = r[A + 1]),
					(v.z = r[A + 2]),
					v.normalize().multiplyScalar(y),
					(r[A + 0] = v.x),
					(r[A + 1] = v.y),
					(r[A + 2] = v.z);
		}
		function u() {
			const y = new w();
			for (let v = 0; v < r.length; v += 3) {
				(y.x = r[v + 0]), (y.y = r[v + 1]), (y.z = r[v + 2]);
				const A = _(y) / 2 / Math.PI + 0.5,
					S = f(y) / Math.PI + 0.5;
				o.push(A, 1 - S);
			}
			m(), h();
		}
		function h() {
			for (let y = 0; y < o.length; y += 6) {
				const v = o[y + 0],
					A = o[y + 2],
					S = o[y + 4],
					T = Math.max(v, A, S),
					R = Math.min(v, A, S);
				T > 0.9 &&
					R < 0.1 &&
					(v < 0.2 && (o[y + 0] += 1), A < 0.2 && (o[y + 2] += 1), S < 0.2 && (o[y + 4] += 1));
			}
		}
		function d(y) {
			r.push(y.x, y.y, y.z);
		}
		function p(y, v) {
			const A = y * 3;
			(v.x = e[A + 0]), (v.y = e[A + 1]), (v.z = e[A + 2]);
		}
		function m() {
			const y = new w(),
				v = new w(),
				A = new w(),
				S = new w(),
				T = new re(),
				R = new re(),
				D = new re();
			for (let E = 0, x = 0; E < r.length; E += 9, x += 6) {
				y.set(r[E + 0], r[E + 1], r[E + 2]),
					v.set(r[E + 3], r[E + 4], r[E + 5]),
					A.set(r[E + 6], r[E + 7], r[E + 8]),
					T.set(o[x + 0], o[x + 1]),
					R.set(o[x + 2], o[x + 3]),
					D.set(o[x + 4], o[x + 5]),
					S.copy(y).add(v).add(A).divideScalar(3);
				const z = _(S);
				g(T, x + 0, y, z), g(R, x + 2, v, z), g(D, x + 4, A, z);
			}
		}
		function g(y, v, A, S) {
			S < 0 && y.x === 1 && (o[v] = y.x - 1), A.x === 0 && A.z === 0 && (o[v] = S / 2 / Math.PI + 0.5);
		}
		function _(y) {
			return Math.atan2(y.z, -y.x);
		}
		function f(y) {
			return Math.atan2(-y.y, Math.sqrt(y.x * y.x + y.z * y.z));
		}
	}
	copy(e) {
		return super.copy(e), (this.parameters = Object.assign({}, e.parameters)), this;
	}
	static fromJSON(e) {
		return new T_(e.vertices, e.indices, e.radius, e.details);
	}
}
class R_ extends T_ {
	constructor(e = 1, t = 0) {
		const i = (1 + Math.sqrt(5)) / 2,
			s = [
				-1,
				i,
				0,
				1,
				i,
				0,
				-1,
				-i,
				0,
				1,
				-i,
				0,
				0,
				-1,
				i,
				0,
				1,
				i,
				0,
				-1,
				-i,
				0,
				1,
				-i,
				i,
				0,
				-1,
				i,
				0,
				1,
				-i,
				0,
				-1,
				-i,
				0,
				1,
			],
			r = [
				0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9,
				4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1,
			];
		super(s, r, e, t), (this.type = 'IcosahedronGeometry'), (this.parameters = {radius: e, detail: t});
	}
	static fromJSON(e) {
		return new R_(e.radius, e.detail);
	}
}
class Yb extends An {
	constructor(e) {
		super(),
			(this.isShadowMaterial = !0),
			(this.type = 'ShadowMaterial'),
			(this.color = new Ee(0)),
			(this.transparent = !0),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return super.copy(e), this.color.copy(e.color), (this.fog = e.fog), this;
	}
}
class Kb extends ti {
	constructor(e) {
		super(e), (this.isRawShaderMaterial = !0), (this.type = 'RawShaderMaterial');
	}
}
class ma extends An {
	constructor(e) {
		super(),
			(this.isMeshStandardMaterial = !0),
			(this.defines = {STANDARD: ''}),
			(this.type = 'MeshStandardMaterial'),
			(this.color = new Ee(16777215)),
			(this.roughness = 1),
			(this.metalness = 0),
			(this.map = null),
			(this.lightMap = null),
			(this.lightMapIntensity = 1),
			(this.aoMap = null),
			(this.aoMapIntensity = 1),
			(this.emissive = new Ee(0)),
			(this.emissiveIntensity = 1),
			(this.emissiveMap = null),
			(this.bumpMap = null),
			(this.bumpScale = 1),
			(this.normalMap = null),
			(this.normalMapType = Us),
			(this.normalScale = new re(1, 1)),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.roughnessMap = null),
			(this.metalnessMap = null),
			(this.alphaMap = null),
			(this.envMap = null),
			(this.envMapIntensity = 1),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.wireframeLinecap = 'round'),
			(this.wireframeLinejoin = 'round'),
			(this.flatShading = !1),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.defines = {STANDARD: ''}),
			this.color.copy(e.color),
			(this.roughness = e.roughness),
			(this.metalness = e.metalness),
			(this.map = e.map),
			(this.lightMap = e.lightMap),
			(this.lightMapIntensity = e.lightMapIntensity),
			(this.aoMap = e.aoMap),
			(this.aoMapIntensity = e.aoMapIntensity),
			this.emissive.copy(e.emissive),
			(this.emissiveMap = e.emissiveMap),
			(this.emissiveIntensity = e.emissiveIntensity),
			(this.bumpMap = e.bumpMap),
			(this.bumpScale = e.bumpScale),
			(this.normalMap = e.normalMap),
			(this.normalMapType = e.normalMapType),
			this.normalScale.copy(e.normalScale),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.roughnessMap = e.roughnessMap),
			(this.metalnessMap = e.metalnessMap),
			(this.alphaMap = e.alphaMap),
			(this.envMap = e.envMap),
			(this.envMapIntensity = e.envMapIntensity),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.wireframeLinecap = e.wireframeLinecap),
			(this.wireframeLinejoin = e.wireframeLinejoin),
			(this.flatShading = e.flatShading),
			(this.fog = e.fog),
			this
		);
	}
}
class Zb extends ma {
	constructor(e) {
		super(),
			(this.isMeshPhysicalMaterial = !0),
			(this.defines = {STANDARD: '', PHYSICAL: ''}),
			(this.type = 'MeshPhysicalMaterial'),
			(this.anisotropyRotation = 0),
			(this.anisotropyMap = null),
			(this.clearcoatMap = null),
			(this.clearcoatRoughness = 0),
			(this.clearcoatRoughnessMap = null),
			(this.clearcoatNormalScale = new re(1, 1)),
			(this.clearcoatNormalMap = null),
			(this.ior = 1.5),
			Object.defineProperty(this, 'reflectivity', {
				get: function () {
					return pn((2.5 * (this.ior - 1)) / (this.ior + 1), 0, 1);
				},
				set: function (t) {
					this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
				},
			}),
			(this.iridescenceMap = null),
			(this.iridescenceIOR = 1.3),
			(this.iridescenceThicknessRange = [100, 400]),
			(this.iridescenceThicknessMap = null),
			(this.sheenColor = new Ee(0)),
			(this.sheenColorMap = null),
			(this.sheenRoughness = 1),
			(this.sheenRoughnessMap = null),
			(this.transmissionMap = null),
			(this.thickness = 0),
			(this.thicknessMap = null),
			(this.attenuationDistance = 1 / 0),
			(this.attenuationColor = new Ee(1, 1, 1)),
			(this.specularIntensity = 1),
			(this.specularIntensityMap = null),
			(this.specularColor = new Ee(1, 1, 1)),
			(this.specularColorMap = null),
			(this._anisotropy = 0),
			(this._clearcoat = 0),
			(this._iridescence = 0),
			(this._sheen = 0),
			(this._transmission = 0),
			this.setValues(e);
	}
	get anisotropy() {
		return this._anisotropy;
	}
	set anisotropy(e) {
		this._anisotropy > 0 != e > 0 && this.version++, (this._anisotropy = e);
	}
	get clearcoat() {
		return this._clearcoat;
	}
	set clearcoat(e) {
		this._clearcoat > 0 != e > 0 && this.version++, (this._clearcoat = e);
	}
	get iridescence() {
		return this._iridescence;
	}
	set iridescence(e) {
		this._iridescence > 0 != e > 0 && this.version++, (this._iridescence = e);
	}
	get sheen() {
		return this._sheen;
	}
	set sheen(e) {
		this._sheen > 0 != e > 0 && this.version++, (this._sheen = e);
	}
	get transmission() {
		return this._transmission;
	}
	set transmission(e) {
		this._transmission > 0 != e > 0 && this.version++, (this._transmission = e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.defines = {STANDARD: '', PHYSICAL: ''}),
			(this.anisotropy = e.anisotropy),
			(this.anisotropyRotation = e.anisotropyRotation),
			(this.anisotropyMap = e.anisotropyMap),
			(this.clearcoat = e.clearcoat),
			(this.clearcoatMap = e.clearcoatMap),
			(this.clearcoatRoughness = e.clearcoatRoughness),
			(this.clearcoatRoughnessMap = e.clearcoatRoughnessMap),
			(this.clearcoatNormalMap = e.clearcoatNormalMap),
			this.clearcoatNormalScale.copy(e.clearcoatNormalScale),
			(this.ior = e.ior),
			(this.iridescence = e.iridescence),
			(this.iridescenceMap = e.iridescenceMap),
			(this.iridescenceIOR = e.iridescenceIOR),
			(this.iridescenceThicknessRange = [...e.iridescenceThicknessRange]),
			(this.iridescenceThicknessMap = e.iridescenceThicknessMap),
			(this.sheen = e.sheen),
			this.sheenColor.copy(e.sheenColor),
			(this.sheenColorMap = e.sheenColorMap),
			(this.sheenRoughness = e.sheenRoughness),
			(this.sheenRoughnessMap = e.sheenRoughnessMap),
			(this.transmission = e.transmission),
			(this.transmissionMap = e.transmissionMap),
			(this.thickness = e.thickness),
			(this.thicknessMap = e.thicknessMap),
			(this.attenuationDistance = e.attenuationDistance),
			this.attenuationColor.copy(e.attenuationColor),
			(this.specularIntensity = e.specularIntensity),
			(this.specularIntensityMap = e.specularIntensityMap),
			this.specularColor.copy(e.specularColor),
			(this.specularColorMap = e.specularColorMap),
			this
		);
	}
}
class Qb extends An {
	constructor(e) {
		super(),
			(this.isMeshPhongMaterial = !0),
			(this.type = 'MeshPhongMaterial'),
			(this.color = new Ee(16777215)),
			(this.specular = new Ee(1118481)),
			(this.shininess = 30),
			(this.map = null),
			(this.lightMap = null),
			(this.lightMapIntensity = 1),
			(this.aoMap = null),
			(this.aoMapIntensity = 1),
			(this.emissive = new Ee(0)),
			(this.emissiveIntensity = 1),
			(this.emissiveMap = null),
			(this.bumpMap = null),
			(this.bumpScale = 1),
			(this.normalMap = null),
			(this.normalMapType = Us),
			(this.normalScale = new re(1, 1)),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.specularMap = null),
			(this.alphaMap = null),
			(this.envMap = null),
			(this.combine = yh),
			(this.reflectivity = 1),
			(this.refractionRatio = 0.98),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.wireframeLinecap = 'round'),
			(this.wireframeLinejoin = 'round'),
			(this.flatShading = !1),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			this.specular.copy(e.specular),
			(this.shininess = e.shininess),
			(this.map = e.map),
			(this.lightMap = e.lightMap),
			(this.lightMapIntensity = e.lightMapIntensity),
			(this.aoMap = e.aoMap),
			(this.aoMapIntensity = e.aoMapIntensity),
			this.emissive.copy(e.emissive),
			(this.emissiveMap = e.emissiveMap),
			(this.emissiveIntensity = e.emissiveIntensity),
			(this.bumpMap = e.bumpMap),
			(this.bumpScale = e.bumpScale),
			(this.normalMap = e.normalMap),
			(this.normalMapType = e.normalMapType),
			this.normalScale.copy(e.normalScale),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.specularMap = e.specularMap),
			(this.alphaMap = e.alphaMap),
			(this.envMap = e.envMap),
			(this.combine = e.combine),
			(this.reflectivity = e.reflectivity),
			(this.refractionRatio = e.refractionRatio),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.wireframeLinecap = e.wireframeLinecap),
			(this.wireframeLinejoin = e.wireframeLinejoin),
			(this.flatShading = e.flatShading),
			(this.fog = e.fog),
			this
		);
	}
}
class Jb extends An {
	constructor(e) {
		super(),
			(this.isMeshToonMaterial = !0),
			(this.defines = {TOON: ''}),
			(this.type = 'MeshToonMaterial'),
			(this.color = new Ee(16777215)),
			(this.map = null),
			(this.gradientMap = null),
			(this.lightMap = null),
			(this.lightMapIntensity = 1),
			(this.aoMap = null),
			(this.aoMapIntensity = 1),
			(this.emissive = new Ee(0)),
			(this.emissiveIntensity = 1),
			(this.emissiveMap = null),
			(this.bumpMap = null),
			(this.bumpScale = 1),
			(this.normalMap = null),
			(this.normalMapType = Us),
			(this.normalScale = new re(1, 1)),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.alphaMap = null),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.wireframeLinecap = 'round'),
			(this.wireframeLinejoin = 'round'),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			(this.map = e.map),
			(this.gradientMap = e.gradientMap),
			(this.lightMap = e.lightMap),
			(this.lightMapIntensity = e.lightMapIntensity),
			(this.aoMap = e.aoMap),
			(this.aoMapIntensity = e.aoMapIntensity),
			this.emissive.copy(e.emissive),
			(this.emissiveMap = e.emissiveMap),
			(this.emissiveIntensity = e.emissiveIntensity),
			(this.bumpMap = e.bumpMap),
			(this.bumpScale = e.bumpScale),
			(this.normalMap = e.normalMap),
			(this.normalMapType = e.normalMapType),
			this.normalScale.copy(e.normalScale),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.alphaMap = e.alphaMap),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.wireframeLinecap = e.wireframeLinecap),
			(this.wireframeLinejoin = e.wireframeLinejoin),
			(this.fog = e.fog),
			this
		);
	}
}
class eS extends An {
	constructor(e) {
		super(),
			(this.isMeshNormalMaterial = !0),
			(this.type = 'MeshNormalMaterial'),
			(this.bumpMap = null),
			(this.bumpScale = 1),
			(this.normalMap = null),
			(this.normalMapType = Us),
			(this.normalScale = new re(1, 1)),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.flatShading = !1),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.bumpMap = e.bumpMap),
			(this.bumpScale = e.bumpScale),
			(this.normalMap = e.normalMap),
			(this.normalMapType = e.normalMapType),
			this.normalScale.copy(e.normalScale),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.flatShading = e.flatShading),
			this
		);
	}
}
class tS extends An {
	constructor(e) {
		super(),
			(this.isMeshLambertMaterial = !0),
			(this.type = 'MeshLambertMaterial'),
			(this.color = new Ee(16777215)),
			(this.map = null),
			(this.lightMap = null),
			(this.lightMapIntensity = 1),
			(this.aoMap = null),
			(this.aoMapIntensity = 1),
			(this.emissive = new Ee(0)),
			(this.emissiveIntensity = 1),
			(this.emissiveMap = null),
			(this.bumpMap = null),
			(this.bumpScale = 1),
			(this.normalMap = null),
			(this.normalMapType = Us),
			(this.normalScale = new re(1, 1)),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.specularMap = null),
			(this.alphaMap = null),
			(this.envMap = null),
			(this.combine = yh),
			(this.reflectivity = 1),
			(this.refractionRatio = 0.98),
			(this.wireframe = !1),
			(this.wireframeLinewidth = 1),
			(this.wireframeLinecap = 'round'),
			(this.wireframeLinejoin = 'round'),
			(this.flatShading = !1),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			this.color.copy(e.color),
			(this.map = e.map),
			(this.lightMap = e.lightMap),
			(this.lightMapIntensity = e.lightMapIntensity),
			(this.aoMap = e.aoMap),
			(this.aoMapIntensity = e.aoMapIntensity),
			this.emissive.copy(e.emissive),
			(this.emissiveMap = e.emissiveMap),
			(this.emissiveIntensity = e.emissiveIntensity),
			(this.bumpMap = e.bumpMap),
			(this.bumpScale = e.bumpScale),
			(this.normalMap = e.normalMap),
			(this.normalMapType = e.normalMapType),
			this.normalScale.copy(e.normalScale),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.specularMap = e.specularMap),
			(this.alphaMap = e.alphaMap),
			(this.envMap = e.envMap),
			(this.combine = e.combine),
			(this.reflectivity = e.reflectivity),
			(this.refractionRatio = e.refractionRatio),
			(this.wireframe = e.wireframe),
			(this.wireframeLinewidth = e.wireframeLinewidth),
			(this.wireframeLinecap = e.wireframeLinecap),
			(this.wireframeLinejoin = e.wireframeLinejoin),
			(this.flatShading = e.flatShading),
			(this.fog = e.fog),
			this
		);
	}
}
class nS extends An {
	constructor(e) {
		super(),
			(this.isMeshMatcapMaterial = !0),
			(this.defines = {MATCAP: ''}),
			(this.type = 'MeshMatcapMaterial'),
			(this.color = new Ee(16777215)),
			(this.matcap = null),
			(this.map = null),
			(this.bumpMap = null),
			(this.bumpScale = 1),
			(this.normalMap = null),
			(this.normalMapType = Us),
			(this.normalScale = new re(1, 1)),
			(this.displacementMap = null),
			(this.displacementScale = 1),
			(this.displacementBias = 0),
			(this.alphaMap = null),
			(this.flatShading = !1),
			(this.fog = !0),
			this.setValues(e);
	}
	copy(e) {
		return (
			super.copy(e),
			(this.defines = {MATCAP: ''}),
			this.color.copy(e.color),
			(this.matcap = e.matcap),
			(this.map = e.map),
			(this.bumpMap = e.bumpMap),
			(this.bumpScale = e.bumpScale),
			(this.normalMap = e.normalMap),
			(this.normalMapType = e.normalMapType),
			this.normalScale.copy(e.normalScale),
			(this.displacementMap = e.displacementMap),
			(this.displacementScale = e.displacementScale),
			(this.displacementBias = e.displacementBias),
			(this.alphaMap = e.alphaMap),
			(this.flatShading = e.flatShading),
			(this.fog = e.fog),
			this
		);
	}
}
class iS extends so {
	constructor(e) {
		super(),
			(this.isLineDashedMaterial = !0),
			(this.type = 'LineDashedMaterial'),
			(this.scale = 1),
			(this.dashSize = 3),
			(this.gapSize = 1),
			this.setValues(e);
	}
	copy(e) {
		return super.copy(e), (this.scale = e.scale), (this.dashSize = e.dashSize), (this.gapSize = e.gapSize), this;
	}
}
class CN {
	constructor(e, t, i, s) {
		(this.parameterPositions = e),
			(this._cachedIndex = 0),
			(this.resultBuffer = s !== void 0 ? s : new t.constructor(i)),
			(this.sampleValues = t),
			(this.valueSize = i),
			(this.settings = null),
			(this.DefaultSettings_ = {});
	}
	evaluate(e) {
		const t = this.parameterPositions;
		let i = this._cachedIndex,
			s = t[i],
			r = t[i - 1];
		n: {
			e: {
				let o;
				t: {
					i: if (!(e < s)) {
						for (let a = i + 2; ; ) {
							if (s === void 0) {
								if (e < r) break i;
								return (i = t.length), (this._cachedIndex = i), this.copySampleValue_(i - 1);
							}
							if (i === a) break;
							if (((r = s), (s = t[++i]), e < s)) break e;
						}
						o = t.length;
						break t;
					}
					if (!(e >= r)) {
						const a = t[1];
						e < a && ((i = 2), (r = a));
						for (let c = i - 2; ; ) {
							if (r === void 0) return (this._cachedIndex = 0), this.copySampleValue_(0);
							if (i === c) break;
							if (((s = r), (r = t[--i - 1]), e >= r)) break e;
						}
						(o = i), (i = 0);
						break t;
					}
					break n;
				}
				for (; i < o; ) {
					const a = (i + o) >>> 1;
					e < t[a] ? (o = a) : (i = a + 1);
				}
				if (((s = t[i]), (r = t[i - 1]), r === void 0))
					return (this._cachedIndex = 0), this.copySampleValue_(0);
				if (s === void 0) return (i = t.length), (this._cachedIndex = i), this.copySampleValue_(i - 1);
			}
			(this._cachedIndex = i), this.intervalChanged_(i, r, s);
		}
		return this.interpolate_(i, r, e, s);
	}
	getSettings_() {
		return this.settings || this.DefaultSettings_;
	}
	copySampleValue_(e) {
		const t = this.resultBuffer,
			i = this.sampleValues,
			s = this.valueSize,
			r = e * s;
		for (let o = 0; o !== s; ++o) t[o] = i[r + o];
		return t;
	}
	interpolate_() {
		throw new Error('call to abstract method');
	}
	intervalChanged_() {}
}
class yN extends CN {
	constructor(e, t, i, s) {
		super(e, t, i, s),
			(this._weightPrev = -0),
			(this._offsetPrev = -0),
			(this._weightNext = -0),
			(this._offsetNext = -0),
			(this.DefaultSettings_ = {endingStart: Ig, endingEnd: Ig});
	}
	intervalChanged_(e, t, i) {
		const s = this.parameterPositions;
		let r = e - 2,
			o = e + 1,
			a = s[r],
			c = s[o];
		if (a === void 0)
			switch (this.getSettings_().endingStart) {
				case Dg:
					(r = e), (a = 2 * t - i);
					break;
				case Lg:
					(r = s.length - 2), (a = t + s[r] - s[r + 1]);
					break;
				default:
					(r = e), (a = i);
			}
		if (c === void 0)
			switch (this.getSettings_().endingEnd) {
				case Dg:
					(o = e), (c = 2 * i - t);
					break;
				case Lg:
					(o = 1), (c = i + s[1] - s[0]);
					break;
				default:
					(o = e - 1), (c = t);
			}
		const l = (i - t) * 0.5,
			u = this.valueSize;
		(this._weightPrev = l / (t - a)),
			(this._weightNext = l / (c - i)),
			(this._offsetPrev = r * u),
			(this._offsetNext = o * u);
	}
	interpolate_(e, t, i, s) {
		const r = this.resultBuffer,
			o = this.sampleValues,
			a = this.valueSize,
			c = e * a,
			l = c - a,
			u = this._offsetPrev,
			h = this._offsetNext,
			d = this._weightPrev,
			p = this._weightNext,
			m = (i - t) / (s - t),
			g = m * m,
			_ = g * m,
			f = -d * _ + 2 * d * g - d * m,
			y = (1 + d) * _ + (-1.5 - 2 * d) * g + (-0.5 + d) * m + 1,
			v = (-1 - p) * _ + (1.5 + p) * g + 0.5 * m,
			A = p * _ - p * g;
		for (let S = 0; S !== a; ++S) r[S] = f * o[u + S] + y * o[l + S] + v * o[c + S] + A * o[h + S];
		return r;
	}
}
const Ku = {
	enabled: !1,
	files: {},
	add: function (n, e) {
		this.enabled !== !1 && (this.files[n] = e);
	},
	get: function (n) {
		if (this.enabled !== !1) return this.files[n];
	},
	remove: function (n) {
		delete this.files[n];
	},
	clear: function () {
		this.files = {};
	},
};
class sS {
	constructor(e, t, i) {
		const s = this;
		let r = !1,
			o = 0,
			a = 0,
			c;
		const l = [];
		(this.onStart = void 0),
			(this.onLoad = e),
			(this.onProgress = t),
			(this.onError = i),
			(this.itemStart = function (u) {
				a++, r === !1 && s.onStart !== void 0 && s.onStart(u, o, a), (r = !0);
			}),
			(this.itemEnd = function (u) {
				o++,
					s.onProgress !== void 0 && s.onProgress(u, o, a),
					o === a && ((r = !1), s.onLoad !== void 0 && s.onLoad());
			}),
			(this.itemError = function (u) {
				s.onError !== void 0 && s.onError(u);
			}),
			(this.resolveURL = function (u) {
				return c ? c(u) : u;
			}),
			(this.setURLModifier = function (u) {
				return (c = u), this;
			}),
			(this.addHandler = function (u, h) {
				return l.push(u, h), this;
			}),
			(this.removeHandler = function (u) {
				const h = l.indexOf(u);
				return h !== -1 && l.splice(h, 2), this;
			}),
			(this.getHandler = function (u) {
				for (let h = 0, d = l.length; h < d; h += 2) {
					const p = l[h],
						m = l[h + 1];
					if ((p.global && (p.lastIndex = 0), p.test(u))) return m;
				}
				return null;
			});
	}
}
const bN = new sS();
class wa {
	constructor(e) {
		(this.manager = e !== void 0 ? e : bN),
			(this.crossOrigin = 'anonymous'),
			(this.withCredentials = !1),
			(this.path = ''),
			(this.resourcePath = ''),
			(this.requestHeader = {});
	}
	load() {}
	loadAsync(e, t) {
		const i = this;
		return new Promise(function (s, r) {
			i.load(e, s, t, r);
		});
	}
	parse() {}
	setCrossOrigin(e) {
		return (this.crossOrigin = e), this;
	}
	setWithCredentials(e) {
		return (this.withCredentials = e), this;
	}
	setPath(e) {
		return (this.path = e), this;
	}
	setResourcePath(e) {
		return (this.resourcePath = e), this;
	}
	setRequestHeader(e) {
		return (this.requestHeader = e), this;
	}
}
wa.DEFAULT_MATERIAL_NAME = '__DEFAULT';
const vs = {};
class SN extends Error {
	constructor(e, t) {
		super(e), (this.response = t);
	}
}
class rS extends wa {
	constructor(e) {
		super(e);
	}
	load(e, t, i, s) {
		e === void 0 && (e = ''), this.path !== void 0 && (e = this.path + e), (e = this.manager.resolveURL(e));
		const r = Ku.get(e);
		if (r !== void 0)
			return (
				this.manager.itemStart(e),
				setTimeout(() => {
					t && t(r), this.manager.itemEnd(e);
				}, 0),
				r
			);
		if (vs[e] !== void 0) {
			vs[e].push({onLoad: t, onProgress: i, onError: s});
			return;
		}
		(vs[e] = []), vs[e].push({onLoad: t, onProgress: i, onError: s});
		const o = new Request(e, {
				headers: new Headers(this.requestHeader),
				credentials: this.withCredentials ? 'include' : 'same-origin',
			}),
			a = this.mimeType,
			c = this.responseType;
		fetch(o)
			.then((l) => {
				if (l.status === 200 || l.status === 0) {
					if (
						(l.status === 0 && console.warn('THREE.FileLoader: HTTP Status 0 received.'),
						typeof ReadableStream > 'u' || l.body === void 0 || l.body.getReader === void 0)
					)
						return l;
					const u = vs[e],
						h = l.body.getReader(),
						d = l.headers.get('Content-Length') || l.headers.get('X-File-Size'),
						p = d ? parseInt(d) : 0,
						m = p !== 0;
					let g = 0;
					const _ = new ReadableStream({
						start(f) {
							y();
							function y() {
								h.read().then(({done: v, value: A}) => {
									if (v) f.close();
									else {
										g += A.byteLength;
										const S = new ProgressEvent('progress', {
											lengthComputable: m,
											loaded: g,
											total: p,
										});
										for (let T = 0, R = u.length; T < R; T++) {
											const D = u[T];
											D.onProgress && D.onProgress(S);
										}
										f.enqueue(A), y();
									}
								});
							}
						},
					});
					return new Response(_);
				} else throw new SN(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`, l);
			})
			.then((l) => {
				switch (c) {
					case 'arraybuffer':
						return l.arrayBuffer();
					case 'blob':
						return l.blob();
					case 'document':
						return l.text().then((u) => new DOMParser().parseFromString(u, a));
					case 'json':
						return l.json();
					default:
						if (a === void 0) return l.text();
						{
							const h = /charset="?([^;"\s]*)"?/i.exec(a),
								d = h && h[1] ? h[1].toLowerCase() : void 0,
								p = new TextDecoder(d);
							return l.arrayBuffer().then((m) => p.decode(m));
						}
				}
			})
			.then((l) => {
				Ku.add(e, l);
				const u = vs[e];
				delete vs[e];
				for (let h = 0, d = u.length; h < d; h++) {
					const p = u[h];
					p.onLoad && p.onLoad(l);
				}
			})
			.catch((l) => {
				const u = vs[e];
				if (u === void 0) throw (this.manager.itemError(e), l);
				delete vs[e];
				for (let h = 0, d = u.length; h < d; h++) {
					const p = u[h];
					p.onError && p.onError(l);
				}
				this.manager.itemError(e);
			})
			.finally(() => {
				this.manager.itemEnd(e);
			}),
			this.manager.itemStart(e);
	}
	setResponseType(e) {
		return (this.responseType = e), this;
	}
	setMimeType(e) {
		return (this.mimeType = e), this;
	}
}
class AN extends wa {
	constructor(e) {
		super(e);
	}
	load(e, t, i, s) {
		this.path !== void 0 && (e = this.path + e), (e = this.manager.resolveURL(e));
		const r = this,
			o = Ku.get(e);
		if (o !== void 0)
			return (
				r.manager.itemStart(e),
				setTimeout(function () {
					t && t(o), r.manager.itemEnd(e);
				}, 0),
				o
			);
		const a = Nc('img');
		function c() {
			u(), Ku.add(e, this), t && t(this), r.manager.itemEnd(e);
		}
		function l(h) {
			u(), s && s(h), r.manager.itemError(e), r.manager.itemEnd(e);
		}
		function u() {
			a.removeEventListener('load', c, !1), a.removeEventListener('error', l, !1);
		}
		return (
			a.addEventListener('load', c, !1),
			a.addEventListener('error', l, !1),
			e.slice(0, 5) !== 'data:' && this.crossOrigin !== void 0 && (a.crossOrigin = this.crossOrigin),
			r.manager.itemStart(e),
			(a.src = e),
			a
		);
	}
}
class xN extends wa {
	constructor(e) {
		super(e);
	}
	load(e, t, i, s) {
		const r = this,
			o = new Rh(),
			a = new rS(this.manager);
		return (
			a.setResponseType('arraybuffer'),
			a.setRequestHeader(this.requestHeader),
			a.setPath(this.path),
			a.setWithCredentials(r.withCredentials),
			a.load(
				e,
				function (c) {
					let l;
					try {
						l = r.parse(c);
					} catch (u) {
						if (s !== void 0) s(u);
						else {
							console.error(u);
							return;
						}
					}
					l.image !== void 0
						? (o.image = l.image)
						: l.data !== void 0 &&
						  ((o.image.width = l.width), (o.image.height = l.height), (o.image.data = l.data)),
						(o.wrapS = l.wrapS !== void 0 ? l.wrapS : Qn),
						(o.wrapT = l.wrapT !== void 0 ? l.wrapT : Qn),
						(o.magFilter = l.magFilter !== void 0 ? l.magFilter : Yt),
						(o.minFilter = l.minFilter !== void 0 ? l.minFilter : Yt),
						(o.anisotropy = l.anisotropy !== void 0 ? l.anisotropy : 1),
						l.colorSpace !== void 0
							? (o.colorSpace = l.colorSpace)
							: l.encoding !== void 0 && (o.encoding = l.encoding),
						l.flipY !== void 0 && (o.flipY = l.flipY),
						l.format !== void 0 && (o.format = l.format),
						l.type !== void 0 && (o.type = l.type),
						l.mipmaps !== void 0 && ((o.mipmaps = l.mipmaps), (o.minFilter = pa)),
						l.mipmapCount === 1 && (o.minFilter = Yt),
						l.generateMipmaps !== void 0 && (o.generateMipmaps = l.generateMipmaps),
						(o.needsUpdate = !0),
						t && t(o, l);
				},
				i,
				s
			),
			o
		);
	}
}
class MN extends wa {
	constructor(e) {
		super(e);
	}
	load(e, t, i, s) {
		const r = new In(),
			o = new AN(this.manager);
		return (
			o.setCrossOrigin(this.crossOrigin),
			o.setPath(this.path),
			o.load(
				e,
				function (a) {
					(r.image = a), (r.needsUpdate = !0), t !== void 0 && t(r);
				},
				i,
				s
			),
			r
		);
	}
}
class w_ extends kt {
	constructor(e, t = 1) {
		super(), (this.isLight = !0), (this.type = 'Light'), (this.color = new Ee(e)), (this.intensity = t);
	}
	dispose() {}
	copy(e, t) {
		return super.copy(e, t), this.color.copy(e.color), (this.intensity = e.intensity), this;
	}
	toJSON(e) {
		const t = super.toJSON(e);
		return (
			(t.object.color = this.color.getHex()),
			(t.object.intensity = this.intensity),
			this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()),
			this.distance !== void 0 && (t.object.distance = this.distance),
			this.angle !== void 0 && (t.object.angle = this.angle),
			this.decay !== void 0 && (t.object.decay = this.decay),
			this.penumbra !== void 0 && (t.object.penumbra = this.penumbra),
			this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()),
			t
		);
	}
}
class Iv extends w_ {
	constructor(e, t, i) {
		super(e, i),
			(this.isHemisphereLight = !0),
			(this.type = 'HemisphereLight'),
			this.position.copy(kt.DEFAULT_UP),
			this.updateMatrix(),
			(this.groundColor = new Ee(t));
	}
	copy(e, t) {
		return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
	}
}
const Dd = new Qe(),
	Dv = new w(),
	Lv = new w();
class TN {
	constructor(e) {
		(this.camera = e),
			(this.bias = 0),
			(this.normalBias = 0),
			(this.radius = 1),
			(this.blurSamples = 8),
			(this.mapSize = new re(512, 512)),
			(this.map = null),
			(this.mapPass = null),
			(this.matrix = new Qe()),
			(this.autoUpdate = !0),
			(this.needsUpdate = !1),
			(this._frustum = new g_()),
			(this._frameExtents = new re(1, 1)),
			(this._viewportCount = 1),
			(this._viewports = [new Ke(0, 0, 1, 1)]);
	}
	getViewportCount() {
		return this._viewportCount;
	}
	getFrustum() {
		return this._frustum;
	}
	updateMatrices(e) {
		const t = this.camera,
			i = this.matrix;
		Dv.setFromMatrixPosition(e.matrixWorld),
			t.position.copy(Dv),
			Lv.setFromMatrixPosition(e.target.matrixWorld),
			t.lookAt(Lv),
			t.updateMatrixWorld(),
			Dd.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse),
			this._frustum.setFromProjectionMatrix(Dd),
			i.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1),
			i.multiply(Dd);
	}
	getViewport(e) {
		return this._viewports[e];
	}
	getFrameExtents() {
		return this._frameExtents;
	}
	dispose() {
		this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
	}
	copy(e) {
		return (
			(this.camera = e.camera.clone()),
			(this.bias = e.bias),
			(this.radius = e.radius),
			this.mapSize.copy(e.mapSize),
			this
		);
	}
	clone() {
		return new this.constructor().copy(this);
	}
	toJSON() {
		const e = {};
		return (
			this.bias !== 0 && (e.bias = this.bias),
			this.normalBias !== 0 && (e.normalBias = this.normalBias),
			this.radius !== 1 && (e.radius = this.radius),
			(this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()),
			(e.camera = this.camera.toJSON(!1).object),
			delete e.camera.matrix,
			e
		);
	}
}
class RN extends TN {
	constructor() {
		super(new Rn(50, 1, 0.5, 500)), (this.isSpotLightShadow = !0), (this.focus = 1);
	}
	updateMatrices(e) {
		const t = this.camera,
			i = fa * 2 * e.angle * this.focus,
			s = this.mapSize.width / this.mapSize.height,
			r = e.distance || t.far;
		(i !== t.fov || s !== t.aspect || r !== t.far) &&
			((t.fov = i), (t.aspect = s), (t.far = r), t.updateProjectionMatrix()),
			super.updateMatrices(e);
	}
	copy(e) {
		return super.copy(e), (this.focus = e.focus), this;
	}
}
class Uv extends w_ {
	constructor(e, t, i = 0, s = Math.PI / 3, r = 0, o = 2) {
		super(e, t),
			(this.isSpotLight = !0),
			(this.type = 'SpotLight'),
			this.position.copy(kt.DEFAULT_UP),
			this.updateMatrix(),
			(this.target = new kt()),
			(this.distance = i),
			(this.angle = s),
			(this.penumbra = r),
			(this.decay = o),
			(this.map = null),
			(this.shadow = new RN());
	}
	get power() {
		return this.intensity * Math.PI;
	}
	set power(e) {
		this.intensity = e / Math.PI;
	}
	dispose() {
		this.shadow.dispose();
	}
	copy(e, t) {
		return (
			super.copy(e, t),
			(this.distance = e.distance),
			(this.angle = e.angle),
			(this.penumbra = e.penumbra),
			(this.decay = e.decay),
			(this.target = e.target.clone()),
			(this.shadow = e.shadow.clone()),
			this
		);
	}
}
class Fv extends w_ {
	constructor(e, t, i = 10, s = 10) {
		super(e, t), (this.isRectAreaLight = !0), (this.type = 'RectAreaLight'), (this.width = i), (this.height = s);
	}
	get power() {
		return this.intensity * this.width * this.height * Math.PI;
	}
	set power(e) {
		this.intensity = e / (this.width * this.height * Math.PI);
	}
	copy(e) {
		return super.copy(e), (this.width = e.width), (this.height = e.height), this;
	}
	toJSON(e) {
		const t = super.toJSON(e);
		return (t.object.width = this.width), (t.object.height = this.height), t;
	}
}
class O_ extends wa {
	constructor(e) {
		super(e), (this.textures = {});
	}
	load(e, t, i, s) {
		const r = this,
			o = new rS(r.manager);
		o.setPath(r.path),
			o.setRequestHeader(r.requestHeader),
			o.setWithCredentials(r.withCredentials),
			o.load(
				e,
				function (a) {
					try {
						t(r.parse(JSON.parse(a)));
					} catch (c) {
						s ? s(c) : console.error(c), r.manager.itemError(e);
					}
				},
				i,
				s
			);
	}
	parse(e) {
		const t = this.textures;
		function i(r) {
			return t[r] === void 0 && console.warn('THREE.MaterialLoader: Undefined texture', r), t[r];
		}
		const s = O_.createMaterialFromType(e.type);
		if (
			(e.uuid !== void 0 && (s.uuid = e.uuid),
			e.name !== void 0 && (s.name = e.name),
			e.color !== void 0 && s.color !== void 0 && s.color.setHex(e.color),
			e.roughness !== void 0 && (s.roughness = e.roughness),
			e.metalness !== void 0 && (s.metalness = e.metalness),
			e.sheen !== void 0 && (s.sheen = e.sheen),
			e.sheenColor !== void 0 && (s.sheenColor = new Ee().setHex(e.sheenColor)),
			e.sheenRoughness !== void 0 && (s.sheenRoughness = e.sheenRoughness),
			e.emissive !== void 0 && s.emissive !== void 0 && s.emissive.setHex(e.emissive),
			e.specular !== void 0 && s.specular !== void 0 && s.specular.setHex(e.specular),
			e.specularIntensity !== void 0 && (s.specularIntensity = e.specularIntensity),
			e.specularColor !== void 0 && s.specularColor !== void 0 && s.specularColor.setHex(e.specularColor),
			e.shininess !== void 0 && (s.shininess = e.shininess),
			e.clearcoat !== void 0 && (s.clearcoat = e.clearcoat),
			e.clearcoatRoughness !== void 0 && (s.clearcoatRoughness = e.clearcoatRoughness),
			e.iridescence !== void 0 && (s.iridescence = e.iridescence),
			e.iridescenceIOR !== void 0 && (s.iridescenceIOR = e.iridescenceIOR),
			e.iridescenceThicknessRange !== void 0 && (s.iridescenceThicknessRange = e.iridescenceThicknessRange),
			e.transmission !== void 0 && (s.transmission = e.transmission),
			e.thickness !== void 0 && (s.thickness = e.thickness),
			e.attenuationDistance !== void 0 && (s.attenuationDistance = e.attenuationDistance),
			e.attenuationColor !== void 0 &&
				s.attenuationColor !== void 0 &&
				s.attenuationColor.setHex(e.attenuationColor),
			e.anisotropy !== void 0 && (s.anisotropy = e.anisotropy),
			e.anisotropyRotation !== void 0 && (s.anisotropyRotation = e.anisotropyRotation),
			e.fog !== void 0 && (s.fog = e.fog),
			e.flatShading !== void 0 && (s.flatShading = e.flatShading),
			e.blending !== void 0 && (s.blending = e.blending),
			e.combine !== void 0 && (s.combine = e.combine),
			e.side !== void 0 && (s.side = e.side),
			e.shadowSide !== void 0 && (s.shadowSide = e.shadowSide),
			e.opacity !== void 0 && (s.opacity = e.opacity),
			e.transparent !== void 0 && (s.transparent = e.transparent),
			e.alphaTest !== void 0 && (s.alphaTest = e.alphaTest),
			e.alphaHash !== void 0 && (s.alphaHash = e.alphaHash),
			e.depthFunc !== void 0 && (s.depthFunc = e.depthFunc),
			e.depthTest !== void 0 && (s.depthTest = e.depthTest),
			e.depthWrite !== void 0 && (s.depthWrite = e.depthWrite),
			e.colorWrite !== void 0 && (s.colorWrite = e.colorWrite),
			e.blendSrc !== void 0 && (s.blendSrc = e.blendSrc),
			e.blendDst !== void 0 && (s.blendDst = e.blendDst),
			e.blendEquation !== void 0 && (s.blendEquation = e.blendEquation),
			e.blendSrcAlpha !== void 0 && (s.blendSrcAlpha = e.blendSrcAlpha),
			e.blendDstAlpha !== void 0 && (s.blendDstAlpha = e.blendDstAlpha),
			e.blendEquationAlpha !== void 0 && (s.blendEquationAlpha = e.blendEquationAlpha),
			e.blendColor !== void 0 && s.blendColor !== void 0 && s.blendColor.setHex(e.blendColor),
			e.blendAlpha !== void 0 && (s.blendAlpha = e.blendAlpha),
			e.stencilWriteMask !== void 0 && (s.stencilWriteMask = e.stencilWriteMask),
			e.stencilFunc !== void 0 && (s.stencilFunc = e.stencilFunc),
			e.stencilRef !== void 0 && (s.stencilRef = e.stencilRef),
			e.stencilFuncMask !== void 0 && (s.stencilFuncMask = e.stencilFuncMask),
			e.stencilFail !== void 0 && (s.stencilFail = e.stencilFail),
			e.stencilZFail !== void 0 && (s.stencilZFail = e.stencilZFail),
			e.stencilZPass !== void 0 && (s.stencilZPass = e.stencilZPass),
			e.stencilWrite !== void 0 && (s.stencilWrite = e.stencilWrite),
			e.wireframe !== void 0 && (s.wireframe = e.wireframe),
			e.wireframeLinewidth !== void 0 && (s.wireframeLinewidth = e.wireframeLinewidth),
			e.wireframeLinecap !== void 0 && (s.wireframeLinecap = e.wireframeLinecap),
			e.wireframeLinejoin !== void 0 && (s.wireframeLinejoin = e.wireframeLinejoin),
			e.rotation !== void 0 && (s.rotation = e.rotation),
			e.linewidth !== void 0 && (s.linewidth = e.linewidth),
			e.dashSize !== void 0 && (s.dashSize = e.dashSize),
			e.gapSize !== void 0 && (s.gapSize = e.gapSize),
			e.scale !== void 0 && (s.scale = e.scale),
			e.polygonOffset !== void 0 && (s.polygonOffset = e.polygonOffset),
			e.polygonOffsetFactor !== void 0 && (s.polygonOffsetFactor = e.polygonOffsetFactor),
			e.polygonOffsetUnits !== void 0 && (s.polygonOffsetUnits = e.polygonOffsetUnits),
			e.dithering !== void 0 && (s.dithering = e.dithering),
			e.alphaToCoverage !== void 0 && (s.alphaToCoverage = e.alphaToCoverage),
			e.premultipliedAlpha !== void 0 && (s.premultipliedAlpha = e.premultipliedAlpha),
			e.forceSinglePass !== void 0 && (s.forceSinglePass = e.forceSinglePass),
			e.visible !== void 0 && (s.visible = e.visible),
			e.toneMapped !== void 0 && (s.toneMapped = e.toneMapped),
			e.userData !== void 0 && (s.userData = e.userData),
			e.vertexColors !== void 0 &&
				(typeof e.vertexColors == 'number'
					? (s.vertexColors = e.vertexColors > 0)
					: (s.vertexColors = e.vertexColors)),
			e.uniforms !== void 0)
		)
			for (const r in e.uniforms) {
				const o = e.uniforms[r];
				switch (((s.uniforms[r] = {}), o.type)) {
					case 't':
						s.uniforms[r].value = i(o.value);
						break;
					case 'c':
						s.uniforms[r].value = new Ee().setHex(o.value);
						break;
					case 'v2':
						s.uniforms[r].value = new re().fromArray(o.value);
						break;
					case 'v3':
						s.uniforms[r].value = new w().fromArray(o.value);
						break;
					case 'v4':
						s.uniforms[r].value = new Ke().fromArray(o.value);
						break;
					case 'm3':
						s.uniforms[r].value = new ut().fromArray(o.value);
						break;
					case 'm4':
						s.uniforms[r].value = new Qe().fromArray(o.value);
						break;
					default:
						s.uniforms[r].value = o.value;
				}
			}
		if (
			(e.defines !== void 0 && (s.defines = e.defines),
			e.vertexShader !== void 0 && (s.vertexShader = e.vertexShader),
			e.fragmentShader !== void 0 && (s.fragmentShader = e.fragmentShader),
			e.glslVersion !== void 0 && (s.glslVersion = e.glslVersion),
			e.extensions !== void 0)
		)
			for (const r in e.extensions) s.extensions[r] = e.extensions[r];
		if (
			(e.lights !== void 0 && (s.lights = e.lights),
			e.clipping !== void 0 && (s.clipping = e.clipping),
			e.size !== void 0 && (s.size = e.size),
			e.sizeAttenuation !== void 0 && (s.sizeAttenuation = e.sizeAttenuation),
			e.map !== void 0 && (s.map = i(e.map)),
			e.matcap !== void 0 && (s.matcap = i(e.matcap)),
			e.alphaMap !== void 0 && (s.alphaMap = i(e.alphaMap)),
			e.bumpMap !== void 0 && (s.bumpMap = i(e.bumpMap)),
			e.bumpScale !== void 0 && (s.bumpScale = e.bumpScale),
			e.normalMap !== void 0 && (s.normalMap = i(e.normalMap)),
			e.normalMapType !== void 0 && (s.normalMapType = e.normalMapType),
			e.normalScale !== void 0)
		) {
			let r = e.normalScale;
			Array.isArray(r) === !1 && (r = [r, r]), (s.normalScale = new re().fromArray(r));
		}
		return (
			e.displacementMap !== void 0 && (s.displacementMap = i(e.displacementMap)),
			e.displacementScale !== void 0 && (s.displacementScale = e.displacementScale),
			e.displacementBias !== void 0 && (s.displacementBias = e.displacementBias),
			e.roughnessMap !== void 0 && (s.roughnessMap = i(e.roughnessMap)),
			e.metalnessMap !== void 0 && (s.metalnessMap = i(e.metalnessMap)),
			e.emissiveMap !== void 0 && (s.emissiveMap = i(e.emissiveMap)),
			e.emissiveIntensity !== void 0 && (s.emissiveIntensity = e.emissiveIntensity),
			e.specularMap !== void 0 && (s.specularMap = i(e.specularMap)),
			e.specularIntensityMap !== void 0 && (s.specularIntensityMap = i(e.specularIntensityMap)),
			e.specularColorMap !== void 0 && (s.specularColorMap = i(e.specularColorMap)),
			e.envMap !== void 0 && (s.envMap = i(e.envMap)),
			e.envMapIntensity !== void 0 && (s.envMapIntensity = e.envMapIntensity),
			e.reflectivity !== void 0 && (s.reflectivity = e.reflectivity),
			e.refractionRatio !== void 0 && (s.refractionRatio = e.refractionRatio),
			e.lightMap !== void 0 && (s.lightMap = i(e.lightMap)),
			e.lightMapIntensity !== void 0 && (s.lightMapIntensity = e.lightMapIntensity),
			e.aoMap !== void 0 && (s.aoMap = i(e.aoMap)),
			e.aoMapIntensity !== void 0 && (s.aoMapIntensity = e.aoMapIntensity),
			e.gradientMap !== void 0 && (s.gradientMap = i(e.gradientMap)),
			e.clearcoatMap !== void 0 && (s.clearcoatMap = i(e.clearcoatMap)),
			e.clearcoatRoughnessMap !== void 0 && (s.clearcoatRoughnessMap = i(e.clearcoatRoughnessMap)),
			e.clearcoatNormalMap !== void 0 && (s.clearcoatNormalMap = i(e.clearcoatNormalMap)),
			e.clearcoatNormalScale !== void 0 && (s.clearcoatNormalScale = new re().fromArray(e.clearcoatNormalScale)),
			e.iridescenceMap !== void 0 && (s.iridescenceMap = i(e.iridescenceMap)),
			e.iridescenceThicknessMap !== void 0 && (s.iridescenceThicknessMap = i(e.iridescenceThicknessMap)),
			e.transmissionMap !== void 0 && (s.transmissionMap = i(e.transmissionMap)),
			e.thicknessMap !== void 0 && (s.thicknessMap = i(e.thicknessMap)),
			e.anisotropyMap !== void 0 && (s.anisotropyMap = i(e.anisotropyMap)),
			e.sheenColorMap !== void 0 && (s.sheenColorMap = i(e.sheenColorMap)),
			e.sheenRoughnessMap !== void 0 && (s.sheenRoughnessMap = i(e.sheenRoughnessMap)),
			s
		);
	}
	setTextures(e) {
		return (this.textures = e), this;
	}
	static createMaterialFromType(e) {
		const t = {
			ShadowMaterial: Yb,
			SpriteMaterial: qb,
			RawShaderMaterial: Kb,
			ShaderMaterial: ti,
			PointsMaterial: wh,
			MeshPhysicalMaterial: Zb,
			MeshStandardMaterial: ma,
			MeshPhongMaterial: Qb,
			MeshToonMaterial: Jb,
			MeshNormalMaterial: eS,
			MeshLambertMaterial: tS,
			MeshDepthMaterial: C_,
			MeshDistanceMaterial: y_,
			MeshBasicMaterial: Ah,
			MeshMatcapMaterial: nS,
			LineDashedMaterial: iS,
			LineBasicMaterial: so,
			Material: An,
		};
		return new t[e]();
	}
}
class wN {
	constructor(e = !0) {
		(this.autoStart = e), (this.startTime = 0), (this.oldTime = 0), (this.elapsedTime = 0), (this.running = !1);
	}
	start() {
		(this.startTime = Bv()), (this.oldTime = this.startTime), (this.elapsedTime = 0), (this.running = !0);
	}
	stop() {
		this.getElapsedTime(), (this.running = !1), (this.autoStart = !1);
	}
	getElapsedTime() {
		return this.getDelta(), this.elapsedTime;
	}
	getDelta() {
		let e = 0;
		if (this.autoStart && !this.running) return this.start(), 0;
		if (this.running) {
			const t = Bv();
			(e = (t - this.oldTime) / 1e3), (this.oldTime = t), (this.elapsedTime += e);
		}
		return e;
	}
}
function Bv() {
	return (typeof performance > 'u' ? Date : performance).now();
}
class ON {
	constructor(e, t, i = 0, s = 1 / 0) {
		(this.ray = new Ta(e, t)),
			(this.near = i),
			(this.far = s),
			(this.camera = null),
			(this.layers = new m_()),
			(this.params = {Mesh: {}, Line: {threshold: 1}, LOD: {}, Points: {threshold: 1}, Sprite: {}});
	}
	set(e, t) {
		this.ray.set(e, t);
	}
	setFromCamera(e, t) {
		t.isPerspectiveCamera
			? (this.ray.origin.setFromMatrixPosition(t.matrixWorld),
			  this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(),
			  (this.camera = t))
			: t.isOrthographicCamera
			? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t),
			  this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld),
			  (this.camera = t))
			: console.error('THREE.Raycaster: Unsupported camera type: ' + t.type);
	}
	intersectObject(e, t = !0, i = []) {
		return nf(e, this, i, t), i.sort(kv), i;
	}
	intersectObjects(e, t = !0, i = []) {
		for (let s = 0, r = e.length; s < r; s++) nf(e[s], this, i, t);
		return i.sort(kv), i;
	}
}
function kv(n, e) {
	return n.distance - e.distance;
}
function nf(n, e, t, i) {
	if ((n.layers.test(e.layers) && n.raycast(e, t), i === !0)) {
		const s = n.children;
		for (let r = 0, o = s.length; r < o; r++) nf(s[r], e, t, !0);
	}
}
class Vv {
	constructor(e = 1, t = 0, i = 0) {
		return (this.radius = e), (this.phi = t), (this.theta = i), this;
	}
	set(e, t, i) {
		return (this.radius = e), (this.phi = t), (this.theta = i), this;
	}
	copy(e) {
		return (this.radius = e.radius), (this.phi = e.phi), (this.theta = e.theta), this;
	}
	makeSafe() {
		return (this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi))), this;
	}
	setFromVector3(e) {
		return this.setFromCartesianCoords(e.x, e.y, e.z);
	}
	setFromCartesianCoords(e, t, i) {
		return (
			(this.radius = Math.sqrt(e * e + t * t + i * i)),
			this.radius === 0
				? ((this.theta = 0), (this.phi = 0))
				: ((this.theta = Math.atan2(e, i)), (this.phi = Math.acos(pn(t / this.radius, -1, 1)))),
			this
		);
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
const Gv = new w(),
	Il = new w();
class Is {
	constructor(e = new w(), t = new w()) {
		(this.start = e), (this.end = t);
	}
	set(e, t) {
		return this.start.copy(e), this.end.copy(t), this;
	}
	copy(e) {
		return this.start.copy(e.start), this.end.copy(e.end), this;
	}
	getCenter(e) {
		return e.addVectors(this.start, this.end).multiplyScalar(0.5);
	}
	delta(e) {
		return e.subVectors(this.end, this.start);
	}
	distanceSq() {
		return this.start.distanceToSquared(this.end);
	}
	distance() {
		return this.start.distanceTo(this.end);
	}
	at(e, t) {
		return this.delta(t).multiplyScalar(e).add(this.start);
	}
	closestPointToPointParameter(e, t) {
		Gv.subVectors(e, this.start), Il.subVectors(this.end, this.start);
		const i = Il.dot(Il);
		let r = Il.dot(Gv) / i;
		return t && (r = pn(r, 0, 1)), r;
	}
	closestPointToPoint(e, t, i) {
		const s = this.closestPointToPointParameter(e, t);
		return this.delta(i).multiplyScalar(s).add(this.start);
	}
	applyMatrix4(e) {
		return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
	}
	equals(e) {
		return e.start.equals(this.start) && e.end.equals(this.end);
	}
	clone() {
		return new this.constructor().copy(this);
	}
}
typeof __THREE_DEVTOOLS__ < 'u' &&
	__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {detail: {revision: s_}}));
typeof window < 'u' &&
	(window.__THREE__
		? console.warn('WARNING: Multiple instances of Three.js being imported.')
		: (window.__THREE__ = s_));
const Ld = [],
	Ud = [];
class oS {
	constructor(e = '') {
		(this._path = e), (this._graphNode = null);
	}
	graphNode() {
		return this._graphNode;
	}
	_setGraphNode(e) {
		this._graphNode = e;
	}
	path() {
		return this._path;
	}
	setPath(e) {
		this._path = e;
	}
	clone() {
		const e = new this.constructor(this._path);
		return e._setGraphNode(this._graphNode), e;
	}
}
class zi extends oS {
	setNode(e) {
		this._graphNode = e;
	}
	node() {
		return this._graphNode;
	}
	graphNodePath() {
		var e;
		return (e = this.node()) == null ? void 0 : e.path();
	}
	resolve(e, t) {
		this._graphNode = Ct.findNode(e, this._path, t);
	}
	nodeWithContext(e, t) {
		const i = this.node();
		if (!i) {
			t == null || t.set(`no node found at ${this.path()}`);
			return;
		}
		const s = i.context();
		if (s == e) return i;
		t == null || t.set(`expected ${e} node, but got a ${s}`);
	}
}
class Oh extends oS {
	setParam(e) {
		this._graphNode = e;
	}
	param() {
		return this._graphNode;
	}
	graphNodePath() {
		var e;
		return (e = this.param()) == null ? void 0 : e.path();
	}
	resolve(e, t) {
		this._graphNode = Ct.findParam(e, this._path, t);
	}
	paramWithType(e, t) {
		const i = this.param();
		if (!i) {
			t == null || t.set(`no param found at ${this.path()}`);
			return;
		}
		if (i.type() == e) return i;
		t == null || t.set(`expected ${e} node, but got a ${i.type()}`);
	}
}
const bt = class {
	static splitParentChild(n) {
		const e = n.split(bt.SEPARATOR).filter((s) => s.length > 0),
			t = e.pop();
		return {parent: e.join(bt.SEPARATOR), child: t};
	}
	static findNode(n, e, t) {
		if (!n) return null;
		const i = e.split(bt.SEPARATOR).filter((o) => o.length > 0),
			s = i[0];
		let r = null;
		if (e[0] === bt.SEPARATOR) {
			const o = e.substring(1);
			r = this.findNode(n.root(), o, t);
		} else {
			switch (s) {
				case bt.PARENT:
					(r = n.parent()), r && (t == null || t.addPathElement({path: s, node: r}));
					break;
				case bt.CURRENT:
					(r = n), t == null || t.addPathElement({path: s, node: r});
					break;
				default:
					(r = n.node(s)), r && (t == null || t.addNamedNode({name: s, node: r}));
			}
			if (r != null && i.length > 1) {
				const o = i.slice(1).join(bt.SEPARATOR);
				r = this.findNode(r, o, t);
			}
			return r;
		}
		return r;
	}
	static findParam(n, e, t) {
		if (!n) return null;
		const i = e.split(bt.SEPARATOR);
		if (i.length === 1) return n.params.get(i[0]);
		{
			let s = null;
			if (e[0] === bt.SEPARATOR && i.length == 2) s = n.root();
			else {
				const r = i.slice(0, +(i.length - 2) + 1 || void 0).join(bt.SEPARATOR);
				s = this.findNode(n, r, t);
			}
			if (s != null) {
				const r = i[i.length - 1],
					o = s.params.get(r);
				return t && o && t.addNamedNode({name: r, node: o}), o;
			} else return null;
		}
	}
	static relativePath(n, e) {
		const t = this.closestCommonParent(n, e);
		if (t) {
			const i = this.distanceToParent(n, t);
			let s = '';
			if (i > 0) {
				let l = 0;
				for (Ud.length = 0; l++ < i; ) Ud.push(bt.PARENT);
				s = Ud.join(bt.SEPARATOR) + bt.SEPARATOR;
			}
			const r = t
					.path()
					.split(bt.SEPARATOR)
					.filter((l) => l.length > 0),
				o = e
					.path()
					.split(bt.SEPARATOR)
					.filter((l) => l.length > 0);
			Ld.length = 0;
			let a = 0;
			for (const l of o) r[a] || Ld.push(l), a++;
			const c = Ld.join(bt.SEPARATOR);
			return this.sanitizePath(`${s}${c}`);
		} else return e.path();
	}
	static sanitizePath(n) {
		return n.replace(/\/\//g, '/');
	}
	static closestCommonParent(n, e) {
		const t = this.parents(n).reverse().concat([n]),
			i = this.parents(e).reverse().concat([e]),
			s = Math.min(t.length, i.length);
		let r = null;
		for (let o = 0; o < s; o++) t[o].graphNodeId() == i[o].graphNodeId() && (r = t[o]);
		return r;
	}
	static parents(n) {
		const e = [];
		let t = n.parent();
		for (; t; ) e.push(t), (t = t.parent());
		return e;
	}
	static distanceToParent(n, e) {
		let t = 0,
			i = n;
		const s = e.graphNodeId();
		for (; i && i.graphNodeId() != s; ) (t += 1), (i = i.parent());
		return i && i.graphNodeId() == s ? t : -1;
	}
	static makeAbsolutePath(n, e) {
		if (e[0] == bt.SEPARATOR) return e;
		const t = e.split(bt.SEPARATOR),
			i = t.shift();
		if (i)
			switch (i) {
				case '..': {
					const s = n.parent();
					return s
						? s == n.scene().root()
							? bt.SEPARATOR + t.join(bt.SEPARATOR)
							: this.makeAbsolutePath(s, t.join(bt.SEPARATOR))
						: null;
				}
				case '.':
					return this.makeAbsolutePath(n, t.join(bt.SEPARATOR));
				default:
					return [n.path(), e].join(bt.SEPARATOR);
			}
		else return n.path();
	}
};
let Ct = bt;
Ct.SEPARATOR = '/';
Ct.DOT = '.';
Ct.CURRENT = bt.DOT;
Ct.PARENT = '..';
Ct.CURRENT_WITH_SLASH = `${bt.CURRENT}/`;
Ct.PARENT_WITH_SLASH = `${bt.PARENT}/`;
Ct.NON_LETTER_PREFIXES = [bt.SEPARATOR, bt.DOT];
var aS = ((n) => ((n.HIGH = 'high-performance'), (n.LOW = 'low-power'), (n.DEFAULT = 'default'), n))(aS || {});
const sf = ['high-performance', 'low-power', 'default'];
var cS = ((n) => ((n.HIGH = 'highp'), (n.MEDIUM = 'mediump'), (n.LOW = 'lowp'), n))(cS || {});
const rf = ['highp', 'mediump', 'lowp'],
	of = {
		alpha: !0,
		precision: 'highp',
		premultipliedAlpha: !0,
		antialias: !0,
		preserveDrawingBuffer: !1,
		powerPreference: 'default',
		depth: !0,
		stencil: !0,
		logarithmicDepthBuffer: !1,
	},
	zv = {};
let PN = 0;
const lS = class {
	constructor(n) {
		(this.poly = n),
			(this._printDebug = !1),
			(this._requireWebGL2 = !1),
			(this._webGLContextByCanvas = new Map()),
			(this._defaultRendererByCanvas = new Map());
	}
	dispose() {
		this._webGLContextByCanvas.clear(),
			this._defaultRendererByCanvas.forEach((n) => {
				n.dispose();
			}),
			this._defaultRendererByCanvas.clear();
	}
	setPrintDebug(n = !0) {
		this._printDebug = n;
	}
	printDebug() {
		return this._printDebug;
	}
	printDebugMessage(n) {
		this._printDebug && console.warn('[Poly debug]', n);
	}
	setRequireWebGL2() {
		this._requireWebGL2 || (this._requireWebGL2 = !0);
	}
	webGL2Available(n) {
		return (
			this._webgl2_available === void 0 && (this._webgl2_available = this._getWebGL2Available(n)),
			this._webgl2_available
		);
	}
	_getWebGL2Available(n) {
		return (
			(n = n || this.poly.canvasRegister.dummyCanvas()),
			(window.WebGL2RenderingContext && n.getContext('webgl2')) != null
		);
	}
	defaultWebGLRendererForCanvas(n) {
		let e = this._defaultRendererByCanvas.get(n);
		if (!e) {
			const t = this.getRenderingContext(n);
			(e = this.createWebGLRenderer({...of, canvas: n, context: t})), this._defaultRendererByCanvas.set(n, e);
		}
		return e;
	}
	createWebGLRenderer(n) {
		const e = new ss(n);
		return (
			n.canvas != null && n.canvas instanceof HTMLCanvasElement
				? this.poly.canvasRegister.registerCanvas(n.canvas, e)
				: (console.warn('canvas not registerable'), console.log(n.canvas)),
			this.assignIdToRenderer(e),
			this.printDebugMessage(['create renderer:', n]),
			e
		);
	}
	assignIdToRenderer(n) {
		if (n._polygonId != null) return;
		const e = (PN += 1);
		n._polygonId = e;
	}
	rendererId(n) {
		const e = n._polygonId;
		if (e == null) {
			console.error('renderer has no _polygonId');
			return;
		}
		return e;
	}
	getRenderingContext(n) {
		let e = this._webGLContextByCanvas.get(n);
		return (
			e ||
			((e = this._getRenderingContextWebgl(n, !0)),
			e || console.warn('failed to create webgl2 context'),
			e || (e = this._getRenderingContextWebgl(n, !1)),
			e
				? (e._polygonjsContextId == null && (e._polygonjsContextId = lS._nextGlContextId++),
				  this._webGLContextByCanvas.set(n, e),
				  e)
				: (console.error('failed to create webgl context'), null))
		);
	}
	_getRenderingContextWebgl(n, e) {
		let t;
		this.webGL2Available(n) ? (t = 'webgl2') : (t = e ? 'webgl2' : 'webgl');
		let i = n.getContext(t, zv);
		return (
			i
				? this.printDebugMessage(`create gl context: ${t}.`)
				: ((t = e ? 'experimental-webgl2' : 'experimental-webgl'),
				  this.printDebugMessage(`create gl context: ${t}.`),
				  (i = n.getContext(t, zv))),
			i
		);
	}
	createRenderTarget(n, e, t) {
		if (this.webGL2Available()) {
			const i = new Gi(n, e, t);
			return (i.samples = 2), i;
		} else return new Gi(n, e, t);
	}
	linearRenderer() {
		return (this._linearRenderer = this._linearRenderer || this._createLinearRenderer());
	}
	_createLinearRenderer() {
		const n = this.poly.canvasRegister.findOrCreateCanvas(),
			e = this.getRenderingContext(n);
		if (!e) return;
		const t = this.createWebGLRenderer({alpha: !0, premultipliedAlpha: !0, canvas: n, context: e});
		return this.poly.canvasRegister.registerCanvas(n, t), (t.outputColorSpace = tn), (t.toneMapping = Ci), t;
	}
};
let uS = lS;
uS._nextGlContextId = 0;
class NN {
	constructor(e) {
		(this.poly = e), (this._rendererByCanvas = new Map());
	}
	findOrCreateCanvas() {
		return this._findAvailableCanvas() || this._createCanvas();
	}
	_findAvailableCanvas() {
		let e;
		return (
			this._rendererByCanvas.forEach((t, i) => {
				e == null && t == null && (e = i);
			}),
			e
		);
	}
	_createCanvas() {
		return document.createElement('canvas');
	}
	registerCanvas(e, t) {
		this._rendererByCanvas.set(e, t);
	}
	deregisterCanvas(e) {
		this._rendererByCanvas.set(e, null);
	}
	dummyCanvas() {
		return this._dummyCanvas || (this._dummyCanvas = document.createElement('canvas'));
	}
}
class IN {
	constructor() {
		(this._rootPrefix = ''),
			(this._root = '/three/js/libs'),
			(this._KTX2Path = '/ktx2'),
			(this._DRACOPath = '/draco'),
			(this._DRACOGLTFPath = '/draco/gltf'),
			(this._XATLASPath = '/xatlas'),
			(this._OCCTPath = '/occt'),
			(this._ManifoldPath = '/manifold');
	}
	root() {
		if (this._root)
			if (this._rootPrefix.length > 0) {
				const e = this._root.replace(/^(\.)/, '');
				return `${this._rootPrefix}${e}`;
			} else return this._root;
	}
	setRoot(e) {
		this._root = e;
	}
	setRootPrefix(e) {
		this._rootPrefix = e;
	}
	KTX2Path() {
		return this._KTX2Path;
	}
	DRACOPath() {
		return this._DRACOPath;
	}
	DRACOGLTFPath() {
		return this._DRACOGLTFPath;
	}
	XATLASPath() {
		return this._XATLASPath;
	}
	OCCTPath() {
		return this._OCCTPath;
	}
	ManifoldPath() {
		return this._ManifoldPath;
	}
}
class DN {
	constructor(e) {
		this.poly = e;
	}
	recording() {
		return !this.poly.playerMode();
	}
	clear() {}
	clearBlobsForNode(e) {}
	async setVirtualFile(e, t) {}
	async fetchBlobGlobal(e) {}
	traverse(e) {}
}
class LN {
	setMap(e) {
		this._map = e;
	}
	remapedUrl(e) {
		if (!this._map) return;
		const t = e.split('?'),
			i = t[0],
			s = t[1],
			r = this._map[i];
		if (r) return s ? `${r}?${s}` : r;
	}
}
class UN {
	setPerformanceManager(e) {
		this._performanceManager = e;
	}
	performanceManager() {
		return this._performanceManager || window.performance;
	}
}
class FN {
	constructor() {
		(this._scenes = new Set()), (this._registerTimeByScene = new Map());
	}
	registerScene(e) {
		if (this._scenes.has(e)) {
			console.warn('scene was already registered');
			return;
		}
		this._scenes.add(e), this._registerTimeByScene.set(e, performance.now()), this._updateCache();
	}
	deregisterScene(e) {
		this._scenes.delete(e), this._registerTimeByScene.delete(e), this._updateCache();
	}
	dispose() {
		const e = this.scenes();
		for (const t of e) t.dispose();
	}
	lastRegisteredScene() {
		return this._lastRegisteredScene;
	}
	scenes() {
		const e = [];
		return this._scenes.forEach((t) => e.push(t)), e;
	}
	_updateCache() {
		(this._lastRegisteredScene = void 0),
			this._registerTimeByScene.forEach((e, t) => {
				if (this._lastRegisteredScene == null) this._lastRegisteredScene = t;
				else {
					const i = this._registerTimeByScene.get(this._lastRegisteredScene);
					e != null && i != null && e > i && (this._lastRegisteredScene = t);
				}
			});
	}
}
class BN {
	setToken(e) {
		this._token = e;
	}
	setGetTokenFunction(e) {
		this._getTokenFunc = e;
	}
	async token() {
		if (this._token) return this._token;
		if (this._getTokenFunc) return await this._getTokenFunc();
	}
}
class kN {
	constructor() {
		this._controller = null;
	}
	setConfig(e) {
		this._config = e;
	}
	barCodeUrl(e, t) {
		if (this._config) return this._config.barcodeUrl(e, t);
	}
	barCodeTypes() {
		var e;
		return ((e = this._config) == null ? void 0 : e.barCodes.types) || [''];
	}
	config() {
		return this._config;
	}
	hasController() {
		return this._config != null;
	}
	createController(e) {
		if (!this._config) return;
		const t = this._config.createController(e);
		return (this._controller = t), t;
	}
	controller() {
		return this._controller;
	}
}
class VN {
	markerTracking() {
		return (this._markerTracking = this._markerTracking || new kN());
	}
	mapbox() {
		return (this._mapbox = this._mapbox || new BN());
	}
}
function GN(n, e) {
	const t = Object.create(null),
		i = n.split(',');
	for (let s = 0; s < i.length; s++) t[i[s]] = !0;
	return e ? (s) => !!t[s.toLowerCase()] : (s) => !!t[s];
}
const hS = () => {},
	zN = Object.prototype.hasOwnProperty,
	Ph = (n, e) => zN.call(n, e),
	rs = Array.isArray,
	Tu = (n) => dS(n) === '[object Map]',
	ga = (n) => typeof n == 'function',
	HN = (n) => typeof n == 'string',
	P_ = (n) => typeof n == 'symbol',
	Oa = (n) => n !== null && typeof n == 'object',
	WN = (n) => Oa(n) && ga(n.then) && ga(n.catch),
	jN = Object.prototype.toString,
	dS = (n) => jN.call(n),
	XN = (n) => dS(n).slice(8, -1),
	N_ = (n) => HN(n) && n !== 'NaN' && n[0] !== '-' && '' + parseInt(n, 10) === n,
	Ic = (n, e) => !Object.is(n, e);
let $N;
function qN(n, e = $N) {
	e && e.active && e.effects.push(n);
}
const I_ = (n) => {
		const e = new Set(n);
		return (e.w = 0), (e.n = 0), e;
	},
	pS = (n) => (n.w & _r) > 0,
	fS = (n) => (n.n & _r) > 0,
	YN = ({deps: n}) => {
		if (n.length) for (let e = 0; e < n.length; e++) n[e].w |= _r;
	},
	KN = (n) => {
		const {deps: e} = n;
		if (e.length) {
			let t = 0;
			for (let i = 0; i < e.length; i++) {
				const s = e[i];
				pS(s) && !fS(s) ? s.delete(n) : (e[t++] = s), (s.w &= ~_r), (s.n &= ~_r);
			}
			e.length = t;
		}
	},
	af = new WeakMap();
let uc = 0,
	_r = 1;
const cf = 30;
let Bi;
const Xr = Symbol(''),
	lf = Symbol('');
class _S {
	constructor(e, t = null, i) {
		(this.fn = e), (this.scheduler = t), (this.active = !0), (this.deps = []), (this.parent = void 0), qN(this, i);
	}
	run() {
		if (!this.active) return this.fn();
		let e = Bi,
			t = pr;
		for (; e; ) {
			if (e === this) return;
			e = e.parent;
		}
		try {
			return (
				(this.parent = Bi), (Bi = this), (pr = !0), (_r = 1 << ++uc), uc <= cf ? YN(this) : Hv(this), this.fn()
			);
		} finally {
			uc <= cf && KN(this),
				(_r = 1 << --uc),
				(Bi = this.parent),
				(pr = t),
				(this.parent = void 0),
				this.deferStop && this.stop();
		}
	}
	stop() {
		Bi === this
			? (this.deferStop = !0)
			: this.active && (Hv(this), this.onStop && this.onStop(), (this.active = !1));
	}
}
function Hv(n) {
	const {deps: e} = n;
	if (e.length) {
		for (let t = 0; t < e.length; t++) e[t].delete(n);
		e.length = 0;
	}
}
let pr = !0;
const mS = [];
function ZN() {
	mS.push(pr), (pr = !1);
}
function QN() {
	const n = mS.pop();
	pr = n === void 0 ? !0 : n;
}
function Si(n, e, t) {
	if (pr && Bi) {
		let i = af.get(n);
		i || af.set(n, (i = new Map()));
		let s = i.get(t);
		s || i.set(t, (s = I_())), gS(s);
	}
}
function gS(n, e) {
	let t = !1;
	uc <= cf ? fS(n) || ((n.n |= _r), (t = !pS(n))) : (t = !n.has(Bi)), t && (n.add(Bi), Bi.deps.push(n));
}
function mr(n, e, t, i, s, r) {
	const o = af.get(n);
	if (!o) return;
	let a = [];
	if (e === 'clear') a = [...o.values()];
	else if (t === 'length' && rs(n)) {
		const c = Number(i);
		o.forEach((l, u) => {
			(u === 'length' || u >= c) && a.push(l);
		});
	} else
		switch ((t !== void 0 && a.push(o.get(t)), e)) {
			case 'add':
				rs(n) ? N_(t) && a.push(o.get('length')) : (a.push(o.get(Xr)), Tu(n) && a.push(o.get(lf)));
				break;
			case 'delete':
				rs(n) || (a.push(o.get(Xr)), Tu(n) && a.push(o.get(lf)));
				break;
			case 'set':
				Tu(n) && a.push(o.get(Xr));
				break;
		}
	if (a.length === 1) a[0] && uf(a[0]);
	else {
		const c = [];
		for (const l of a) l && c.push(...l);
		uf(I_(c));
	}
}
function uf(n, e) {
	const t = rs(n) ? n : [...n];
	for (const i of t) i.computed && Wv(i);
	for (const i of t) i.computed || Wv(i);
}
function Wv(n, e) {
	(n !== Bi || n.allowRecurse) && (n.scheduler ? n.scheduler() : n.run());
}
const JN = GN('__proto__,__v_isRef,__isVue'),
	vS = new Set(
		Object.getOwnPropertyNames(Symbol)
			.filter((n) => n !== 'arguments' && n !== 'caller')
			.map((n) => Symbol[n])
			.filter(P_)
	),
	eI = ES(),
	tI = ES(!0),
	jv = nI();
function nI() {
	const n = {};
	return (
		['includes', 'indexOf', 'lastIndexOf'].forEach((e) => {
			n[e] = function (...t) {
				const i = Tt(this);
				for (let r = 0, o = this.length; r < o; r++) Si(i, 'get', r + '');
				const s = i[e](...t);
				return s === -1 || s === !1 ? i[e](...t.map(Tt)) : s;
			};
		}),
		['push', 'pop', 'shift', 'unshift', 'splice'].forEach((e) => {
			n[e] = function (...t) {
				ZN();
				const i = Tt(this)[e].apply(this, t);
				return QN(), i;
			};
		}),
		n
	);
}
function iI(n) {
	const e = Tt(this);
	return Si(e, 'has', n), e.hasOwnProperty(n);
}
function ES(n = !1, e = !1) {
	return function (i, s, r) {
		if (s === '__v_isReactive') return !n;
		if (s === '__v_isReadonly') return n;
		if (s === '__v_isShallow') return e;
		if (s === '__v_raw' && r === (n ? (e ? EI : bS) : e ? vI : yS).get(i)) return i;
		const o = rs(i);
		if (!n) {
			if (o && Ph(jv, s)) return Reflect.get(jv, s, r);
			if (s === 'hasOwnProperty') return iI;
		}
		const a = Reflect.get(i, s, r);
		return (P_(s) ? vS.has(s) : JN(s)) || (n || Si(i, 'get', s), e)
			? a
			: or(a)
			? o && N_(s)
				? a
				: a.value
			: Oa(a)
			? n
				? AS(a)
				: SS(a)
			: a;
	};
}
const sI = rI();
function rI(n = !1) {
	return function (t, i, s, r) {
		let o = t[i];
		if (Dc(o) && or(o) && !or(s)) return !1;
		if (!n && (!L_(s) && !Dc(s) && ((o = Tt(o)), (s = Tt(s))), !rs(t) && or(o) && !or(s))) return (o.value = s), !0;
		const a = rs(t) && N_(i) ? Number(i) < t.length : Ph(t, i),
			c = Reflect.set(t, i, s, r);
		return t === Tt(r) && (a ? Ic(s, o) && mr(t, 'set', i, s) : mr(t, 'add', i, s)), c;
	};
}
function oI(n, e) {
	const t = Ph(n, e);
	n[e];
	const i = Reflect.deleteProperty(n, e);
	return i && t && mr(n, 'delete', e, void 0), i;
}
function aI(n, e) {
	const t = Reflect.has(n, e);
	return (!P_(e) || !vS.has(e)) && Si(n, 'has', e), t;
}
function cI(n) {
	return Si(n, 'iterate', rs(n) ? 'length' : Xr), Reflect.ownKeys(n);
}
const lI = {get: eI, set: sI, deleteProperty: oI, has: aI, ownKeys: cI},
	uI = {
		get: tI,
		set(n, e) {
			return !0;
		},
		deleteProperty(n, e) {
			return !0;
		},
	},
	D_ = (n) => n,
	Nh = (n) => Reflect.getPrototypeOf(n);
function Dl(n, e, t = !1, i = !1) {
	n = n.__v_raw;
	const s = Tt(n),
		r = Tt(e);
	t || (e !== r && Si(s, 'get', e), Si(s, 'get', r));
	const {has: o} = Nh(s),
		a = i ? D_ : t ? U_ : Lc;
	if (o.call(s, e)) return a(n.get(e));
	if (o.call(s, r)) return a(n.get(r));
	n !== s && n.get(e);
}
function Ll(n, e = !1) {
	const t = this.__v_raw,
		i = Tt(t),
		s = Tt(n);
	return e || (n !== s && Si(i, 'has', n), Si(i, 'has', s)), n === s ? t.has(n) : t.has(n) || t.has(s);
}
function Ul(n, e = !1) {
	return (n = n.__v_raw), !e && Si(Tt(n), 'iterate', Xr), Reflect.get(n, 'size', n);
}
function Xv(n) {
	n = Tt(n);
	const e = Tt(this);
	return Nh(e).has.call(e, n) || (e.add(n), mr(e, 'add', n, n)), this;
}
function $v(n, e) {
	e = Tt(e);
	const t = Tt(this),
		{has: i, get: s} = Nh(t);
	let r = i.call(t, n);
	r || ((n = Tt(n)), (r = i.call(t, n)));
	const o = s.call(t, n);
	return t.set(n, e), r ? Ic(e, o) && mr(t, 'set', n, e) : mr(t, 'add', n, e), this;
}
function qv(n) {
	const e = Tt(this),
		{has: t, get: i} = Nh(e);
	let s = t.call(e, n);
	s || ((n = Tt(n)), (s = t.call(e, n))), i && i.call(e, n);
	const r = e.delete(n);
	return s && mr(e, 'delete', n, void 0), r;
}
function Yv() {
	const n = Tt(this),
		e = n.size !== 0,
		t = n.clear();
	return e && mr(n, 'clear', void 0, void 0), t;
}
function Fl(n, e) {
	return function (i, s) {
		const r = this,
			o = r.__v_raw,
			a = Tt(o),
			c = e ? D_ : n ? U_ : Lc;
		return !n && Si(a, 'iterate', Xr), o.forEach((l, u) => i.call(s, c(l), c(u), r));
	};
}
function Bl(n, e, t) {
	return function (...i) {
		const s = this.__v_raw,
			r = Tt(s),
			o = Tu(r),
			a = n === 'entries' || (n === Symbol.iterator && o),
			c = n === 'keys' && o,
			l = s[n](...i),
			u = t ? D_ : e ? U_ : Lc;
		return (
			!e && Si(r, 'iterate', c ? lf : Xr),
			{
				next() {
					const {value: h, done: d} = l.next();
					return d ? {value: h, done: d} : {value: a ? [u(h[0]), u(h[1])] : u(h), done: d};
				},
				[Symbol.iterator]() {
					return this;
				},
			}
		);
	};
}
function Ys(n) {
	return function (...e) {
		return n === 'delete' ? !1 : this;
	};
}
function hI() {
	const n = {
			get(r) {
				return Dl(this, r);
			},
			get size() {
				return Ul(this);
			},
			has: Ll,
			add: Xv,
			set: $v,
			delete: qv,
			clear: Yv,
			forEach: Fl(!1, !1),
		},
		e = {
			get(r) {
				return Dl(this, r, !1, !0);
			},
			get size() {
				return Ul(this);
			},
			has: Ll,
			add: Xv,
			set: $v,
			delete: qv,
			clear: Yv,
			forEach: Fl(!1, !0),
		},
		t = {
			get(r) {
				return Dl(this, r, !0);
			},
			get size() {
				return Ul(this, !0);
			},
			has(r) {
				return Ll.call(this, r, !0);
			},
			add: Ys('add'),
			set: Ys('set'),
			delete: Ys('delete'),
			clear: Ys('clear'),
			forEach: Fl(!0, !1),
		},
		i = {
			get(r) {
				return Dl(this, r, !0, !0);
			},
			get size() {
				return Ul(this, !0);
			},
			has(r) {
				return Ll.call(this, r, !0);
			},
			add: Ys('add'),
			set: Ys('set'),
			delete: Ys('delete'),
			clear: Ys('clear'),
			forEach: Fl(!0, !0),
		};
	return (
		['keys', 'values', 'entries', Symbol.iterator].forEach((r) => {
			(n[r] = Bl(r, !1, !1)), (t[r] = Bl(r, !0, !1)), (e[r] = Bl(r, !1, !0)), (i[r] = Bl(r, !0, !0));
		}),
		[n, t, e, i]
	);
}
const [dI, pI, fI, _I] = hI();
function CS(n, e) {
	const t = e ? (n ? _I : fI) : n ? pI : dI;
	return (i, s, r) =>
		s === '__v_isReactive'
			? !n
			: s === '__v_isReadonly'
			? n
			: s === '__v_raw'
			? i
			: Reflect.get(Ph(t, s) && s in i ? t : i, s, r);
}
const mI = {get: CS(!1, !1)},
	gI = {get: CS(!0, !1)},
	yS = new WeakMap(),
	vI = new WeakMap(),
	bS = new WeakMap(),
	EI = new WeakMap();
function CI(n) {
	switch (n) {
		case 'Object':
		case 'Array':
			return 1;
		case 'Map':
		case 'Set':
		case 'WeakMap':
		case 'WeakSet':
			return 2;
		default:
			return 0;
	}
}
function yI(n) {
	return n.__v_skip || !Object.isExtensible(n) ? 0 : CI(XN(n));
}
function SS(n) {
	return Dc(n) ? n : xS(n, !1, lI, mI, yS);
}
function AS(n) {
	return xS(n, !0, uI, gI, bS);
}
function xS(n, e, t, i, s) {
	if (!Oa(n) || (n.__v_raw && !(e && n.__v_isReactive))) return n;
	const r = s.get(n);
	if (r) return r;
	const o = yI(n);
	if (o === 0) return n;
	const a = new Proxy(n, o === 2 ? i : t);
	return s.set(n, a), a;
}
function Ru(n) {
	return Dc(n) ? Ru(n.__v_raw) : !!(n && n.__v_isReactive);
}
function Dc(n) {
	return !!(n && n.__v_isReadonly);
}
function L_(n) {
	return !!(n && n.__v_isShallow);
}
function Tt(n) {
	const e = n && n.__v_raw;
	return e ? Tt(e) : n;
}
const Lc = (n) => (Oa(n) ? SS(n) : n),
	U_ = (n) => (Oa(n) ? AS(n) : n);
function MS(n) {
	pr && Bi && ((n = Tt(n)), gS(n.dep || (n.dep = I_())));
}
function TS(n, e) {
	n = Tt(n);
	const t = n.dep;
	t && uf(t);
}
function or(n) {
	return !!(n && n.__v_isRef === !0);
}
function _i(n) {
	return bI(n, !1);
}
function bI(n, e) {
	return or(n) ? n : new SI(n, e);
}
class SI {
	constructor(e, t) {
		(this.__v_isShallow = t),
			(this.dep = void 0),
			(this.__v_isRef = !0),
			(this._rawValue = t ? e : Tt(e)),
			(this._value = t ? e : Lc(e));
	}
	get value() {
		return MS(this), this._value;
	}
	set value(e) {
		const t = this.__v_isShallow || L_(e) || Dc(e);
		(e = t ? e : Tt(e)), Ic(e, this._rawValue) && ((this._rawValue = e), (this._value = t ? e : Lc(e)), TS(this));
	}
}
class AI {
	constructor(e, t, i, s) {
		(this._setter = t),
			(this.dep = void 0),
			(this.__v_isRef = !0),
			(this.__v_isReadonly = !1),
			(this._dirty = !0),
			(this.effect = new _S(e, () => {
				this._dirty || ((this._dirty = !0), TS(this));
			})),
			(this.effect.computed = this),
			(this.effect.active = this._cacheable = !s),
			(this.__v_isReadonly = i);
	}
	get value() {
		const e = Tt(this);
		return MS(e), (e._dirty || !e._cacheable) && ((e._dirty = !1), (e._value = e.effect.run())), e._value;
	}
	set value(e) {
		this._setter(e);
	}
}
function xI(n, e, t = !1) {
	let i, s;
	const r = ga(n);
	return r ? ((i = n), (s = hS)) : ((i = n.get), (s = n.set)), new AI(i, s, r || !s, t);
}
function wu(n, e, t) {
	let i;
	try {
		i = t ? n(...t) : n();
	} catch (s) {
		RS(s, e);
	}
	return i;
}
function hf(n, e, t) {
	if (ga(n)) {
		const s = wu(n, e, t);
		return (
			s &&
				WN(s) &&
				s.catch((r) => {
					RS(r, e);
				}),
			s
		);
	}
	const i = [];
	for (let s = 0; s < n.length; s++) i.push(hf(n[s], e, t));
	return i;
}
function RS(n, e) {
	console.error(new Error(`[@vue-reactivity/watch]: ${e}`)), console.error(n);
}
function MI(n) {
	console.warn(TI(n));
}
function TI(n) {
	return new Error(`[reactivue]: ${n}`);
}
var Kv = {};
function wS(n, e, t) {
	return RI(n, e, t);
}
function RI(n, e, {immediate: t, deep: i, flush: s} = {}) {
	let r,
		o = !1,
		a = !1;
	if (
		(or(n)
			? ((r = () => n.value), (o = L_(n)))
			: Ru(n)
			? ((r = () => n), (i = !0))
			: rs(n)
			? ((a = !0),
			  (o = n.some(Ru)),
			  (r = () =>
					n.map((m) =>
						or(m) ? m.value : Ru(m) ? ia(m) : ga(m) ? wu(m, 'watch getter') : MI('invalid source')
					)))
			: ga(n)
			? e
				? (r = () => wu(n, 'watch getter'))
				: (r = () => (c && c(), hf(n, 'watch callback', [l])))
			: (r = hS),
		e && i)
	) {
		const m = r;
		r = () => ia(m());
	}
	let c,
		l = (m) => {
			c = p.onStop = () => {
				wu(m, 'watch cleanup');
			};
		},
		u = a ? [] : Kv;
	const h = () => {
		if (p.active)
			if (e) {
				const m = p.run();
				(i || o || (a ? m.some((g, _) => Ic(g, u[_])) : Ic(m, u))) &&
					(c && c(), hf(e, 'watch value', [m, u === Kv ? void 0 : u, l]), (u = m));
			} else p.run();
	};
	h.allowRecurse = !!e;
	let d;
	s === 'sync'
		? (d = h)
		: (d = () => {
				h();
		  });
	const p = new _S(r, d);
	return e ? (t ? h() : (u = p.run())) : p.run(), () => p.stop();
}
function ia(n, e = new Set()) {
	if (!Oa(n) || e.has(n)) return n;
	if ((e.add(n), rs(n))) for (let t = 0; t < n.length; t++) ia(n[t], e);
	else if (n instanceof Map)
		n.forEach((t, i) => {
			ia(n.get(i), e);
		});
	else if (n instanceof Set)
		n.forEach((t) => {
			ia(t, e);
		});
	else for (const t of Object.keys(n)) ia(n[t], e);
	return n;
}
const wI = Math.floor(Number.MAX_SAFE_INTEGER / 100);
function OI(n) {
	n.value > wI ? (n.value = 0) : (n.value += 1);
}
function yi(n, e, t) {
	n.has(e) ? n.get(e).push(t) : n.set(e, [t]);
}
function df(n, e, t, i = !0) {
	if (n.has(e)) {
		const s = n.get(e),
			r = s.indexOf(t);
		r >= 0 && (s.splice(r, 1), i && s.length == 0 && n.delete(e));
	}
}
function Ai(n, e, t) {
	if (n.has(e)) n.get(e).add(t);
	else {
		const i = new Set();
		i.add(t), n.set(e, i);
	}
}
function Zv(n, e) {
	return (
		(e.length = 0),
		n.forEach((t) => {
			e.push(t);
		}),
		e
	);
}
function Qv(n, e, t) {
	if (n.has(e)) {
		const i = n.get(e);
		i.delete(t), i.size == 0 && n.delete(e);
	}
}
let Fd = 0;
function Hi(n, e) {
	return (
		(e.length = n.size),
		(Fd = 0),
		n.forEach((t) => {
			(e[Fd] = t), Fd++;
		}),
		e
	);
}
function OS(n, e, t) {
	return t.clear(), n.forEach((i) => t.add(i)), e.forEach((i) => t.add(i)), t;
}
function PI(n, e, t) {
	return (
		t.clear(),
		n.forEach((i) => {
			e.has(i) && t.add(i);
		}),
		e.forEach((i) => {
			n.has(i) && t.add(i);
		}),
		t
	);
}
function PS(n, e, t) {
	return (
		t.clear(),
		n.forEach((i) => {
			e.has(i) || t.add(i);
		}),
		t
	);
}
function ft(n) {
	return Array.isArray(n);
}
function xi(n) {
	return n === !0 || n === !1;
}
function je(n) {
	return typeof n == 'number';
}
function Ou(n) {
	return je(n) && !isNaN(n);
}
const F_ = isNaN;
function Uc(n) {
	return n instanceof re || n instanceof w || n instanceof Ke;
}
function Fc(n) {
	return n instanceof Ee;
}
function NS(n) {
	return n instanceof br;
}
function NI(n) {
	return n instanceof Sn;
}
function qe(n) {
	return typeof n == 'string';
}
function Zu(n) {
	var e = typeof n;
	return n != null && (e == 'object' || e == 'function');
}
function B_(n) {
	var e = typeof n;
	return n != null && e == 'function';
}
class li {}
li.isNumber = je;
li.isNumberValid = Ou;
li.isVector = Uc;
li.isColor = Fc;
li.isEuler = NS;
li.isQuaternion = NI;
li.isString = qe;
li.isBoolean = xi;
li.isNaN = F_;
li.isArray = ft;
li.isObject = Zu;
li.isFunction = B_;
const II = Math.PI / 180,
	DI = 180 / Math.PI;
function LI(n, e, t) {
	return n <= e ? 0 : n >= t ? 1 : ((n = (n - e) / (t - e)), n * n * (3 - 2 * n));
}
function UI(n, e, t) {
	return n <= e ? 0 : n >= t ? 1 : ((n = (n - e) / (t - e)), n * n * n * (n * (n * 6 - 15) + 10));
}
function FI(n) {
	return n * II;
}
function BI(n) {
	return n * DI;
}
const Ih = function (n) {
		return function (e) {
			return Math.pow(e, n);
		};
	},
	Dh = function (n) {
		return function (e) {
			return 1 - Math.abs(Math.pow(e - 1, n));
		};
	},
	k_ = function (n) {
		return function (e) {
			return e < 0.5 ? Ih(n)(e * 2) / 2 : Dh(n)(e * 2 - 1) / 2 + 0.5;
		};
	},
	kI = Ih(2),
	VI = Dh(2),
	GI = k_(2),
	zI = Ih(3),
	HI = Dh(3),
	WI = k_(3),
	jI = Ih(4),
	XI = Dh(4),
	$I = k_(4);
function qI(n) {
	return 1 + Math.sin((Math.PI / 2) * n - Math.PI / 2);
}
function YI(n) {
	return Math.sin((Math.PI / 2) * n);
}
function KI(n) {
	return (1 + Math.sin(Math.PI * n - Math.PI / 2)) / 2;
}
function ZI(n) {
	return n == 0 ? 0 : (0.04 - 0.04 / n) * Math.sin(25 * n) + 1;
}
function QI(n) {
	return n == 1 ? 1 : ((0.04 * n) / --n) * Math.sin(25 * n);
}
function JI(n) {
	return n == 0.5
		? 0
		: (n -= 0.5) < 0
		? (0.02 + 0.01 / n) * Math.sin(50 * n)
		: (0.02 - 0.01 / n) * Math.sin(50 * n) + 1;
}
const IS = {
		easeI2: kI,
		easeO2: VI,
		easeIO2: GI,
		easeI3: zI,
		easeO3: HI,
		easeIO3: WI,
		easeI4: jI,
		easeO4: XI,
		easeIO4: $I,
		easeSinI: qI,
		easeSinO: YI,
		easeSinIO: KI,
		easeElasticI: ZI,
		easeElasticO: QI,
		easeElasticIO: JI,
	},
	eD = 12.9898,
	tD = 78.233,
	nD = 43758.5453,
	iD = FI,
	DS = BI;
function LS(n, e, t) {
	return n < e ? e : n > t ? t : n;
}
const sD = LI,
	rD = UI;
function V_(n, e, t, i, s) {
	const r = t - e,
		o = s - i;
	return ((n - e) / r) * o + i;
}
function oD(n, e, t) {
	return V_(n, 0, 1, e, t);
}
function aD(n, e, t, i, s) {
	const r = V_(n, e, t, i, s);
	return LS(r, i, s);
}
function cD(n, e, t) {
	return (1 - t) * n + t * e;
}
const US = (n) => n - Math.floor(n),
	FS = 136574,
	Bd = {x: 0, y: FS};
function BS(n, e = FS) {
	return (Bd.x = n), (Bd.y = e), G_(Bd);
}
function G_(n) {
	const t = (n.x * eD + n.y * tD) % Math.PI;
	return US(Math.sin(t) * nD);
}
function lD(n) {
	return je(n) ? BS(n) : G_(n);
}
function uD(n, e) {
	const t = n / e;
	return (n < 0 ? Math.ceil(t) : Math.floor(t)) * e;
}
function hD(n) {
	return 2 * Math.ceil(n * 0.5);
}
function dD(n) {
	return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));
}
function pD(n) {
	return Math.log(n) / Math.log(2);
}
new w();
new w();
function fD(n, e, t) {
	return n * (1 - t) + e * t;
}
class hn {}
hn.Easing = IS;
hn.degToRad = iD;
hn.radToDeg = DS;
hn.clamp = LS;
hn.smoothstep = sD;
hn.smootherstep = rD;
hn.fit01 = oD;
hn.fit = V_;
hn.fitClamp = aD;
hn.mix = cD;
hn.fract = US;
hn.rand = lD;
hn.round = uD;
hn.highestEven = hD;
hn.nearestPower2 = dD;
hn.pow2Inverse = pD;
hn.randFloat = BS;
hn.randVec2 = G_;
hn.lerpFloat = fD;
const Qu = new Set(),
	kS = new Set(),
	VS = new Set();
function GS(n, e, t, i) {
	e == null && ((e = n), (n = 0));
	const s = Math.floor((e - n) / t);
	i.length = s;
	for (let r = 0; r < s; r++) i[r] = n + r * t;
	return i;
}
function _D(n) {
	const e = [];
	return GS(0, n, 1, e), e;
}
function gr(n, e) {
	e.length = 0;
	for (const t of n) e.includes(t) || e.push(t);
	return e;
}
function Jr(n, e) {
	e.length = 0;
	for (const t of n) t != null && e.push(t);
	return e;
}
function mD(n) {
	let e = 0;
	for (const t of n) e += t;
	return e;
}
function gD(n, e, t) {
	OS(Rs(n, kS), Rs(e, VS), Qu), (t.length = 0);
	for (const i of Qu) t.push(i);
	return t;
}
function zS(n, e, t) {
	PS(Rs(n, kS), Rs(e, VS), Qu), (t.length = 0);
	for (const i of Qu) t.push(i);
	return t;
}
function Rs(n, e) {
	e.clear();
	for (const t of n) e.add(t);
	return e;
}
function HS(n, e) {
	if (n.length != e.length) return !1;
	const t = n.length;
	for (let i = 0; i < t; i++) if (n[i] != e[i]) return !1;
	return !0;
}
function pf(n, e) {
	if (n.length == 0) return [];
	const t = new Map(),
		i = new Set();
	for (const a of n) {
		const c = e(a);
		i.add(c), yi(t, c, a);
	}
	const s = new Array(i.size);
	let r = 0;
	i.forEach((a) => {
		(s[r] = a), r++;
	}),
		qe(s[0]) ? s.sort() : s.sort((a, c) => a - c);
	const o = new Array(n.length);
	r = 0;
	for (const a of s) {
		const c = t.get(a);
		if (c) for (const l of c) (o[r] = l), r++;
	}
	return o;
}
function ff(n) {
	return [...n];
}
function kd(n, e, t) {
	t.length = 0;
	for (const i of n) t.push(e(i));
	return t;
}
function Lh(n, e) {
	for (const t of n) e.push(t);
}
function os(n, e) {
	e.length = n.length;
	let t = 0;
	for (const i of n) (e[t] = i), t++;
}
function vD() {
	(this.__data__ = []), (this.size = 0);
}
function WS(n, e) {
	return n === e || (n !== n && e !== e);
}
function Uh(n, e) {
	for (var t = n.length; t--; ) if (WS(n[t][0], e)) return t;
	return -1;
}
var ED = Array.prototype,
	CD = ED.splice;
function yD(n) {
	var e = this.__data__,
		t = Uh(e, n);
	if (t < 0) return !1;
	var i = e.length - 1;
	return t == i ? e.pop() : CD.call(e, t, 1), --this.size, !0;
}
function bD(n) {
	var e = this.__data__,
		t = Uh(e, n);
	return t < 0 ? void 0 : e[t][1];
}
function SD(n) {
	return Uh(this.__data__, n) > -1;
}
function AD(n, e) {
	var t = this.__data__,
		i = Uh(t, n);
	return i < 0 ? (++this.size, t.push([n, e])) : (t[i][1] = e), this;
}
function Bs(n) {
	var e = -1,
		t = n == null ? 0 : n.length;
	for (this.clear(); ++e < t; ) {
		var i = n[e];
		this.set(i[0], i[1]);
	}
}
Bs.prototype.clear = vD;
Bs.prototype.delete = yD;
Bs.prototype.get = bD;
Bs.prototype.has = SD;
Bs.prototype.set = AD;
function xD() {
	(this.__data__ = new Bs()), (this.size = 0);
}
function MD(n) {
	var e = this.__data__,
		t = e.delete(n);
	return (this.size = e.size), t;
}
function TD(n) {
	return this.__data__.get(n);
}
function RD(n) {
	return this.__data__.has(n);
}
var wD = typeof global == 'object' && global && global.Object === Object && global;
const jS = wD;
var OD = typeof self == 'object' && self && self.Object === Object && self,
	PD = jS || OD || Function('return this')();
const ls = PD;
var ND = ls.Symbol;
const va = ND;
var XS = Object.prototype,
	ID = XS.hasOwnProperty,
	DD = XS.toString,
	$a = va ? va.toStringTag : void 0;
function LD(n) {
	var e = ID.call(n, $a),
		t = n[$a];
	try {
		n[$a] = void 0;
		var i = !0;
	} catch {}
	var s = DD.call(n);
	return i && (e ? (n[$a] = t) : delete n[$a]), s;
}
var UD = Object.prototype,
	FD = UD.toString;
function BD(n) {
	return FD.call(n);
}
var kD = '[object Null]',
	VD = '[object Undefined]',
	Jv = va ? va.toStringTag : void 0;
function Zc(n) {
	return n == null ? (n === void 0 ? VD : kD) : Jv && Jv in Object(n) ? LD(n) : BD(n);
}
function Qc(n) {
	var e = typeof n;
	return n != null && (e == 'object' || e == 'function');
}
var GD = '[object AsyncFunction]',
	zD = '[object Function]',
	HD = '[object GeneratorFunction]',
	WD = '[object Proxy]';
function $S(n) {
	if (!Qc(n)) return !1;
	var e = Zc(n);
	return e == zD || e == HD || e == GD || e == WD;
}
var jD = ls['__core-js_shared__'];
const Vd = jD;
var eE = (function () {
	var n = /[^.]+$/.exec((Vd && Vd.keys && Vd.keys.IE_PROTO) || '');
	return n ? 'Symbol(src)_1.' + n : '';
})();
function XD(n) {
	return !!eE && eE in n;
}
var $D = Function.prototype,
	qD = $D.toString;
function ro(n) {
	if (n != null) {
		try {
			return qD.call(n);
		} catch {}
		try {
			return n + '';
		} catch {}
	}
	return '';
}
var YD = /[\\^$.*+?()[\]{}|]/g,
	KD = /^\[object .+?Constructor\]$/,
	ZD = Function.prototype,
	QD = Object.prototype,
	JD = ZD.toString,
	eL = QD.hasOwnProperty,
	tL = RegExp(
		'^' +
			JD.call(eL)
				.replace(YD, '\\$&')
				.replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
			'$'
	);
function nL(n) {
	if (!Qc(n) || XD(n)) return !1;
	var e = $S(n) ? tL : KD;
	return e.test(ro(n));
}
function iL(n, e) {
	return n == null ? void 0 : n[e];
}
function oo(n, e) {
	var t = iL(n, e);
	return nL(t) ? t : void 0;
}
var sL = oo(ls, 'Map');
const Bc = sL;
var rL = oo(Object, 'create');
const kc = rL;
function oL() {
	(this.__data__ = kc ? kc(null) : {}), (this.size = 0);
}
function aL(n) {
	var e = this.has(n) && delete this.__data__[n];
	return (this.size -= e ? 1 : 0), e;
}
var cL = '__lodash_hash_undefined__',
	lL = Object.prototype,
	uL = lL.hasOwnProperty;
function hL(n) {
	var e = this.__data__;
	if (kc) {
		var t = e[n];
		return t === cL ? void 0 : t;
	}
	return uL.call(e, n) ? e[n] : void 0;
}
var dL = Object.prototype,
	pL = dL.hasOwnProperty;
function fL(n) {
	var e = this.__data__;
	return kc ? e[n] !== void 0 : pL.call(e, n);
}
var _L = '__lodash_hash_undefined__';
function mL(n, e) {
	var t = this.__data__;
	return (this.size += this.has(n) ? 0 : 1), (t[n] = kc && e === void 0 ? _L : e), this;
}
function eo(n) {
	var e = -1,
		t = n == null ? 0 : n.length;
	for (this.clear(); ++e < t; ) {
		var i = n[e];
		this.set(i[0], i[1]);
	}
}
eo.prototype.clear = oL;
eo.prototype.delete = aL;
eo.prototype.get = hL;
eo.prototype.has = fL;
eo.prototype.set = mL;
function gL() {
	(this.size = 0), (this.__data__ = {hash: new eo(), map: new (Bc || Bs)(), string: new eo()});
}
function vL(n) {
	var e = typeof n;
	return e == 'string' || e == 'number' || e == 'symbol' || e == 'boolean' ? n !== '__proto__' : n === null;
}
function Fh(n, e) {
	var t = n.__data__;
	return vL(e) ? t[typeof e == 'string' ? 'string' : 'hash'] : t.map;
}
function EL(n) {
	var e = Fh(this, n).delete(n);
	return (this.size -= e ? 1 : 0), e;
}
function CL(n) {
	return Fh(this, n).get(n);
}
function yL(n) {
	return Fh(this, n).has(n);
}
function bL(n, e) {
	var t = Fh(this, n),
		i = t.size;
	return t.set(n, e), (this.size += t.size == i ? 0 : 1), this;
}
function Pa(n) {
	var e = -1,
		t = n == null ? 0 : n.length;
	for (this.clear(); ++e < t; ) {
		var i = n[e];
		this.set(i[0], i[1]);
	}
}
Pa.prototype.clear = gL;
Pa.prototype.delete = EL;
Pa.prototype.get = CL;
Pa.prototype.has = yL;
Pa.prototype.set = bL;
var SL = 200;
function AL(n, e) {
	var t = this.__data__;
	if (t instanceof Bs) {
		var i = t.__data__;
		if (!Bc || i.length < SL - 1) return i.push([n, e]), (this.size = ++t.size), this;
		t = this.__data__ = new Pa(i);
	}
	return t.set(n, e), (this.size = t.size), this;
}
function Na(n) {
	var e = (this.__data__ = new Bs(n));
	this.size = e.size;
}
Na.prototype.clear = xD;
Na.prototype.delete = MD;
Na.prototype.get = TD;
Na.prototype.has = RD;
Na.prototype.set = AL;
function xL(n, e) {
	for (var t = -1, i = n == null ? 0 : n.length; ++t < i && e(n[t], t, n) !== !1; );
	return n;
}
var ML = (function () {
	try {
		var n = oo(Object, 'defineProperty');
		return n({}, '', {}), n;
	} catch {}
})();
const tE = ML;
function qS(n, e, t) {
	e == '__proto__' && tE ? tE(n, e, {configurable: !0, enumerable: !0, value: t, writable: !0}) : (n[e] = t);
}
var TL = Object.prototype,
	RL = TL.hasOwnProperty;
function YS(n, e, t) {
	var i = n[e];
	(!(RL.call(n, e) && WS(i, t)) || (t === void 0 && !(e in n))) && qS(n, e, t);
}
function Bh(n, e, t, i) {
	var s = !t;
	t || (t = {});
	for (var r = -1, o = e.length; ++r < o; ) {
		var a = e[r],
			c = i ? i(t[a], n[a], a, t, n) : void 0;
		c === void 0 && (c = n[a]), s ? qS(t, a, c) : YS(t, a, c);
	}
	return t;
}
function wL(n, e) {
	for (var t = -1, i = Array(n); ++t < n; ) i[t] = e(t);
	return i;
}
function Jc(n) {
	return n != null && typeof n == 'object';
}
var OL = '[object Arguments]';
function nE(n) {
	return Jc(n) && Zc(n) == OL;
}
var KS = Object.prototype,
	PL = KS.hasOwnProperty,
	NL = KS.propertyIsEnumerable,
	IL = nE(
		(function () {
			return arguments;
		})()
	)
		? nE
		: function (n) {
				return Jc(n) && PL.call(n, 'callee') && !NL.call(n, 'callee');
		  };
const DL = IL;
var LL = Array.isArray;
const z_ = LL;
function UL() {
	return !1;
}
var ZS = typeof exports == 'object' && exports && !exports.nodeType && exports,
	iE = ZS && typeof module == 'object' && module && !module.nodeType && module,
	FL = iE && iE.exports === ZS,
	sE = FL ? ls.Buffer : void 0,
	BL = sE ? sE.isBuffer : void 0,
	kL = BL || UL;
const QS = kL;
var VL = 9007199254740991,
	GL = /^(?:0|[1-9]\d*)$/;
function zL(n, e) {
	var t = typeof n;
	return (e = e ?? VL), !!e && (t == 'number' || (t != 'symbol' && GL.test(n))) && n > -1 && n % 1 == 0 && n < e;
}
var HL = 9007199254740991;
function JS(n) {
	return typeof n == 'number' && n > -1 && n % 1 == 0 && n <= HL;
}
var WL = '[object Arguments]',
	jL = '[object Array]',
	XL = '[object Boolean]',
	$L = '[object Date]',
	qL = '[object Error]',
	YL = '[object Function]',
	KL = '[object Map]',
	ZL = '[object Number]',
	QL = '[object Object]',
	JL = '[object RegExp]',
	e1 = '[object Set]',
	t1 = '[object String]',
	n1 = '[object WeakMap]',
	i1 = '[object ArrayBuffer]',
	s1 = '[object DataView]',
	r1 = '[object Float32Array]',
	o1 = '[object Float64Array]',
	a1 = '[object Int8Array]',
	c1 = '[object Int16Array]',
	l1 = '[object Int32Array]',
	u1 = '[object Uint8Array]',
	h1 = '[object Uint8ClampedArray]',
	d1 = '[object Uint16Array]',
	p1 = '[object Uint32Array]',
	Lt = {};
Lt[r1] = Lt[o1] = Lt[a1] = Lt[c1] = Lt[l1] = Lt[u1] = Lt[h1] = Lt[d1] = Lt[p1] = !0;
Lt[WL] =
	Lt[jL] =
	Lt[i1] =
	Lt[XL] =
	Lt[s1] =
	Lt[$L] =
	Lt[qL] =
	Lt[YL] =
	Lt[KL] =
	Lt[ZL] =
	Lt[QL] =
	Lt[JL] =
	Lt[e1] =
	Lt[t1] =
	Lt[n1] =
		!1;
function f1(n) {
	return Jc(n) && JS(n.length) && !!Lt[Zc(n)];
}
function H_(n) {
	return function (e) {
		return n(e);
	};
}
var eA = typeof exports == 'object' && exports && !exports.nodeType && exports,
	Ec = eA && typeof module == 'object' && module && !module.nodeType && module,
	_1 = Ec && Ec.exports === eA,
	Gd = _1 && jS.process,
	m1 = (function () {
		try {
			var n = Ec && Ec.require && Ec.require('util').types;
			return n || (Gd && Gd.binding && Gd.binding('util'));
		} catch {}
	})();
const Ea = m1;
var rE = Ea && Ea.isTypedArray,
	g1 = rE ? H_(rE) : f1;
const v1 = g1;
var E1 = Object.prototype,
	C1 = E1.hasOwnProperty;
function tA(n, e) {
	var t = z_(n),
		i = !t && DL(n),
		s = !t && !i && QS(n),
		r = !t && !i && !s && v1(n),
		o = t || i || s || r,
		a = o ? wL(n.length, String) : [],
		c = a.length;
	for (var l in n)
		(e || C1.call(n, l)) &&
			!(
				o &&
				(l == 'length' ||
					(s && (l == 'offset' || l == 'parent')) ||
					(r && (l == 'buffer' || l == 'byteLength' || l == 'byteOffset')) ||
					zL(l, c))
			) &&
			a.push(l);
	return a;
}
var y1 = Object.prototype;
function W_(n) {
	var e = n && n.constructor,
		t = (typeof e == 'function' && e.prototype) || y1;
	return n === t;
}
function nA(n, e) {
	return function (t) {
		return n(e(t));
	};
}
var b1 = nA(Object.keys, Object);
const S1 = b1;
var A1 = Object.prototype,
	x1 = A1.hasOwnProperty;
function M1(n) {
	if (!W_(n)) return S1(n);
	var e = [];
	for (var t in Object(n)) x1.call(n, t) && t != 'constructor' && e.push(t);
	return e;
}
function iA(n) {
	return n != null && JS(n.length) && !$S(n);
}
function j_(n) {
	return iA(n) ? tA(n) : M1(n);
}
function T1(n, e) {
	return n && Bh(e, j_(e), n);
}
function R1(n) {
	var e = [];
	if (n != null) for (var t in Object(n)) e.push(t);
	return e;
}
var w1 = Object.prototype,
	O1 = w1.hasOwnProperty;
function P1(n) {
	if (!Qc(n)) return R1(n);
	var e = W_(n),
		t = [];
	for (var i in n) (i == 'constructor' && (e || !O1.call(n, i))) || t.push(i);
	return t;
}
function X_(n) {
	return iA(n) ? tA(n, !0) : P1(n);
}
function N1(n, e) {
	return n && Bh(e, X_(e), n);
}
var sA = typeof exports == 'object' && exports && !exports.nodeType && exports,
	oE = sA && typeof module == 'object' && module && !module.nodeType && module,
	I1 = oE && oE.exports === sA,
	aE = I1 ? ls.Buffer : void 0,
	cE = aE ? aE.allocUnsafe : void 0;
function D1(n, e) {
	if (e) return n.slice();
	var t = n.length,
		i = cE ? cE(t) : new n.constructor(t);
	return n.copy(i), i;
}
function L1(n, e) {
	var t = -1,
		i = n.length;
	for (e || (e = Array(i)); ++t < i; ) e[t] = n[t];
	return e;
}
function U1(n, e) {
	for (var t = -1, i = n == null ? 0 : n.length, s = 0, r = []; ++t < i; ) {
		var o = n[t];
		e(o, t, n) && (r[s++] = o);
	}
	return r;
}
function rA() {
	return [];
}
var F1 = Object.prototype,
	B1 = F1.propertyIsEnumerable,
	lE = Object.getOwnPropertySymbols,
	k1 = lE
		? function (n) {
				return n == null
					? []
					: ((n = Object(n)),
					  U1(lE(n), function (e) {
							return B1.call(n, e);
					  }));
		  }
		: rA;
const $_ = k1;
function V1(n, e) {
	return Bh(n, $_(n), e);
}
function oA(n, e) {
	for (var t = -1, i = e.length, s = n.length; ++t < i; ) n[s + t] = e[t];
	return n;
}
var G1 = nA(Object.getPrototypeOf, Object);
const aA = G1;
var z1 = Object.getOwnPropertySymbols,
	H1 = z1
		? function (n) {
				for (var e = []; n; ) oA(e, $_(n)), (n = aA(n));
				return e;
		  }
		: rA;
const cA = H1;
function W1(n, e) {
	return Bh(n, cA(n), e);
}
function lA(n, e, t) {
	var i = e(n);
	return z_(n) ? i : oA(i, t(n));
}
function j1(n) {
	return lA(n, j_, $_);
}
function X1(n) {
	return lA(n, X_, cA);
}
var $1 = oo(ls, 'DataView');
const _f = $1;
var q1 = oo(ls, 'Promise');
const mf = q1;
var Y1 = oo(ls, 'Set');
const gf = Y1;
var K1 = oo(ls, 'WeakMap');
const vf = K1;
var uE = '[object Map]',
	Z1 = '[object Object]',
	hE = '[object Promise]',
	dE = '[object Set]',
	pE = '[object WeakMap]',
	fE = '[object DataView]',
	Q1 = ro(_f),
	J1 = ro(Bc),
	eU = ro(mf),
	tU = ro(gf),
	nU = ro(vf),
	Lr = Zc;
((_f && Lr(new _f(new ArrayBuffer(1))) != fE) ||
	(Bc && Lr(new Bc()) != uE) ||
	(mf && Lr(mf.resolve()) != hE) ||
	(gf && Lr(new gf()) != dE) ||
	(vf && Lr(new vf()) != pE)) &&
	(Lr = function (n) {
		var e = Zc(n),
			t = e == Z1 ? n.constructor : void 0,
			i = t ? ro(t) : '';
		if (i)
			switch (i) {
				case Q1:
					return fE;
				case J1:
					return uE;
				case eU:
					return hE;
				case tU:
					return dE;
				case nU:
					return pE;
			}
		return e;
	});
const q_ = Lr;
var iU = Object.prototype,
	sU = iU.hasOwnProperty;
function rU(n) {
	var e = n.length,
		t = new n.constructor(e);
	return e && typeof n[0] == 'string' && sU.call(n, 'index') && ((t.index = n.index), (t.input = n.input)), t;
}
var oU = ls.Uint8Array;
const _E = oU;
function Y_(n) {
	var e = new n.constructor(n.byteLength);
	return new _E(e).set(new _E(n)), e;
}
function aU(n, e) {
	var t = e ? Y_(n.buffer) : n.buffer;
	return new n.constructor(t, n.byteOffset, n.byteLength);
}
var cU = /\w*$/;
function lU(n) {
	var e = new n.constructor(n.source, cU.exec(n));
	return (e.lastIndex = n.lastIndex), e;
}
var mE = va ? va.prototype : void 0,
	gE = mE ? mE.valueOf : void 0;
function uU(n) {
	return gE ? Object(gE.call(n)) : {};
}
function hU(n, e) {
	var t = e ? Y_(n.buffer) : n.buffer;
	return new n.constructor(t, n.byteOffset, n.length);
}
var dU = '[object Boolean]',
	pU = '[object Date]',
	fU = '[object Map]',
	_U = '[object Number]',
	mU = '[object RegExp]',
	gU = '[object Set]',
	vU = '[object String]',
	EU = '[object Symbol]',
	CU = '[object ArrayBuffer]',
	yU = '[object DataView]',
	bU = '[object Float32Array]',
	SU = '[object Float64Array]',
	AU = '[object Int8Array]',
	xU = '[object Int16Array]',
	MU = '[object Int32Array]',
	TU = '[object Uint8Array]',
	RU = '[object Uint8ClampedArray]',
	wU = '[object Uint16Array]',
	OU = '[object Uint32Array]';
function PU(n, e, t) {
	var i = n.constructor;
	switch (e) {
		case CU:
			return Y_(n);
		case dU:
		case pU:
			return new i(+n);
		case yU:
			return aU(n, t);
		case bU:
		case SU:
		case AU:
		case xU:
		case MU:
		case TU:
		case RU:
		case wU:
		case OU:
			return hU(n, t);
		case fU:
			return new i();
		case _U:
		case vU:
			return new i(n);
		case mU:
			return lU(n);
		case gU:
			return new i();
		case EU:
			return uU(n);
	}
}
var vE = Object.create,
	NU = (function () {
		function n() {}
		return function (e) {
			if (!Qc(e)) return {};
			if (vE) return vE(e);
			n.prototype = e;
			var t = new n();
			return (n.prototype = void 0), t;
		};
	})();
const IU = NU;
function DU(n) {
	return typeof n.constructor == 'function' && !W_(n) ? IU(aA(n)) : {};
}
var LU = '[object Map]';
function UU(n) {
	return Jc(n) && q_(n) == LU;
}
var EE = Ea && Ea.isMap,
	FU = EE ? H_(EE) : UU;
const BU = FU;
var kU = '[object Set]';
function VU(n) {
	return Jc(n) && q_(n) == kU;
}
var CE = Ea && Ea.isSet,
	GU = CE ? H_(CE) : VU;
const zU = GU;
var HU = 1,
	WU = 2,
	jU = 4,
	uA = '[object Arguments]',
	XU = '[object Array]',
	$U = '[object Boolean]',
	qU = '[object Date]',
	YU = '[object Error]',
	hA = '[object Function]',
	KU = '[object GeneratorFunction]',
	ZU = '[object Map]',
	QU = '[object Number]',
	dA = '[object Object]',
	JU = '[object RegExp]',
	eF = '[object Set]',
	tF = '[object String]',
	nF = '[object Symbol]',
	iF = '[object WeakMap]',
	sF = '[object ArrayBuffer]',
	rF = '[object DataView]',
	oF = '[object Float32Array]',
	aF = '[object Float64Array]',
	cF = '[object Int8Array]',
	lF = '[object Int16Array]',
	uF = '[object Int32Array]',
	hF = '[object Uint8Array]',
	dF = '[object Uint8ClampedArray]',
	pF = '[object Uint16Array]',
	fF = '[object Uint32Array]',
	Ot = {};
Ot[uA] =
	Ot[XU] =
	Ot[sF] =
	Ot[rF] =
	Ot[$U] =
	Ot[qU] =
	Ot[oF] =
	Ot[aF] =
	Ot[cF] =
	Ot[lF] =
	Ot[uF] =
	Ot[ZU] =
	Ot[QU] =
	Ot[dA] =
	Ot[JU] =
	Ot[eF] =
	Ot[tF] =
	Ot[nF] =
	Ot[hF] =
	Ot[dF] =
	Ot[pF] =
	Ot[fF] =
		!0;
Ot[YU] = Ot[hA] = Ot[iF] = !1;
function Cc(n, e, t, i, s, r) {
	var o,
		a = e & HU,
		c = e & WU,
		l = e & jU;
	if ((t && (o = s ? t(n, i, s, r) : t(n)), o !== void 0)) return o;
	if (!Qc(n)) return n;
	var u = z_(n);
	if (u) {
		if (((o = rU(n)), !a)) return L1(n, o);
	} else {
		var h = q_(n),
			d = h == hA || h == KU;
		if (QS(n)) return D1(n, a);
		if (h == dA || h == uA || (d && !s)) {
			if (((o = c || d ? {} : DU(n)), !a)) return c ? W1(n, N1(o, n)) : V1(n, T1(o, n));
		} else {
			if (!Ot[h]) return s ? n : {};
			o = PU(n, h, a);
		}
	}
	r || (r = new Na());
	var p = r.get(n);
	if (p) return p;
	r.set(n, o),
		zU(n)
			? n.forEach(function (_) {
					o.add(Cc(_, e, t, _, n, r));
			  })
			: BU(n) &&
			  n.forEach(function (_, f) {
					o.set(f, Cc(_, e, t, f, n, r));
			  });
	var m = l ? (c ? X1 : j1) : c ? X_ : j_,
		g = u ? void 0 : m(n);
	return (
		xL(g || n, function (_, f) {
			g && ((f = _), (_ = n[f])), YS(o, f, Cc(_, e, t, f, n, r));
		}),
		o
	);
}
var _F = 1,
	mF = 4;
function gF(n) {
	return Cc(n, _F | mF);
}
var vF = 4;
function EF(n) {
	return Cc(n, vF);
}
function yE(n, e) {
	if ((xi(n) && xi(e)) || (je(n) && je(e)) || (qe(n) && qe(e))) return n == e;
	if (Zu(n) && Zu(e)) {
		const t = Object.keys(n),
			i = Object.keys(e);
		return HS(t, i) ? JSON.stringify(n) == JSON.stringify(e) : !1;
	}
	return !1;
}
function Ju(n) {
	return EF(n);
}
function ar(n) {
	return gF(n);
}
function bE(n, e, t) {
	let i = pA(n, t);
	i || ((i = []), (n.userData[t] = i));
	const s = e.graphNodeId();
	i.includes(s) || i.push(s);
}
const Ef = new WeakMap();
function SE(n, e, t) {
	let i = Ef.get(n);
	i || ((i = new Map()), Ef.set(n, i));
	let s = i.get(e);
	s || ((s = new Set()), i.set(e, s)), s.add(t);
}
function CF(n, e) {
	const t = Ef.get(n);
	if (!t) return;
	const i = t.get(e);
	if (i) for (const s of i) s(n);
}
function pA(n, e) {
	return n.userData[e];
}
function AE(n, e, t) {
	const i = e.children;
	for (const s of i)
		s.traverse((r) => {
			Cf(r, n, t);
		});
}
function Cf(n, e, t) {
	if ((CF(n, t), n.parent)) {
		const i = pA(n, t);
		if (!i) return;
		for (const s of i) {
			const r = e.graph.nodeFromId(s);
			if (r && !r.disposed())
				switch (t) {
					case 'onObjectAddHookHandlerNodeIds': {
						r.updateObjectOnAdd(n, n.parent);
						break;
					}
					case 'onObjectRemoveHookHandlerNodeIds': {
						r.updateObjectOnRemove(n, n.parent);
						break;
					}
				}
		}
	}
}
class yF {
	assignOnAddHookHandler(e, t) {
		bE(e, t, 'onObjectAddHookHandlerNodeIds');
	}
	assignOnRemoveHookHandler(e, t) {
		bE(e, t, 'onObjectRemoveHookHandlerNodeIds');
	}
	assignOnAddHookCallback(e, t) {
		SE(e, 'onObjectAddHookHandlerNodeIds', t);
	}
	assignOnRemoveHookCallback(e, t) {
		SE(e, 'onObjectRemoveHookHandlerNodeIds', t);
	}
	runOnAddHooks(e, t) {
		AE(e, t, 'onObjectAddHookHandlerNodeIds');
	}
	runOnRemoveHooks(e, t) {
		AE(e, t, 'onObjectRemoveHookHandlerNodeIds');
	}
	runOnAddHookOnObject(e, t) {
		Cf(t, e, 'onObjectAddHookHandlerNodeIds');
	}
	runOnRemoveHookOnObject(e, t) {
		Cf(t, e, 'onObjectRemoveHookHandlerNodeIds');
	}
}
class bF {
	constructor() {
		this._map = new Map();
	}
	registerHook(e, t) {
		this._map.set(e, t), this._updateCache();
	}
	unregisterHook(e) {
		this._map.delete(e), this._updateCache();
	}
	runHooks() {
		const e = this._hooks;
		if (e) for (let t of e) t();
	}
	hookedNodes() {
		return Array.from(this._map.keys());
	}
	_updateCache() {
		if (this._map.size == 0) this._hooks = void 0;
		else {
			(this._hooks = this._hooks || []), (this._hooks.length = 0);
			const e = this._hooks;
			this._map.forEach((t) => e.push(t));
		}
	}
}
class SF {
	constructor() {
		this._map = new Map();
	}
	registerHook(e, t) {
		this._map.set(e, t), this._updateCache();
	}
	_updateCache() {
		this._hooks = [];
		const e = this._hooks;
		this._map.forEach((t) => {
			e.push(t);
		});
	}
	runHooks(e, t, i, s) {
		let r = !1;
		if (this._hooks) for (let o of this._hooks) o(e, t, i, s) && (r = !0);
		return r;
	}
}
class AF {
	constructor(e, t, i) {
		(this._name = e), (this._callback = t), (this._options = i);
	}
	name() {
		return this._name;
	}
	libraryName() {
		return this._options.libraryName;
	}
	init(e) {
		this._callback(e);
	}
	toJSON() {
		return {
			name: this._name,
			libraryName: this._options.libraryName,
			libraryImportPath: this._options.libraryImportPath,
		};
	}
}
class xF {
	constructor(e) {
		(this.poly = e),
			(this._pluginsByName = new Map()),
			(this._pluginNameByNodeContextByType = new Map()),
			(this._pluginNameByOperationContextByType = new Map());
	}
	async wrapConfigurePolygonjs(e) {
		(this._configurePolygonjsPlugin =
			this._configurePolygonjsPlugin ||
			new AF('configurePolygonjs', () => {}, {libraryImportPath: '../PolyConfig', libraryName: ''})),
			(this._currentPlugin = this._configurePolygonjsPlugin),
			this._pluginsByName.set(this._currentPlugin.name(), this._currentPlugin),
			await e(),
			(this._currentPlugin = void 0);
	}
	register(e) {
		const t = this._currentPlugin;
		(this._currentPlugin = e), this._pluginsByName.set(e.name(), e), e.init(this.poly), (this._currentPlugin = t);
	}
	pluginByName(e) {
		return this._pluginsByName.get(e);
	}
	registerNode(e) {
		if (!this._currentPlugin) return;
		const t = e.context(),
			i = e.type();
		let s = this._pluginNameByNodeContextByType.get(t);
		s || ((s = new Map()), this._pluginNameByNodeContextByType.set(t, s)), s.set(i, this._currentPlugin.name());
	}
	registerOperation(e) {
		if (!this._currentPlugin) return;
		const t = e.context(),
			i = e.type();
		let s = this._pluginNameByOperationContextByType.get(t);
		s || ((s = new Map()), this._pluginNameByOperationContextByType.set(t, s)),
			s.set(i, this._currentPlugin.name());
	}
	toJson() {
		const e = {plugins: {}, nodes: {}, operations: {}};
		return (
			this._pluginsByName.forEach((t, i) => {
				e.plugins[i] = t.toJSON();
			}),
			this._pluginNameByNodeContextByType.forEach((t, i) => {
				(e.nodes[i] = {}),
					t.forEach((s, r) => {
						e.nodes[i][r] = s;
					});
			}),
			this._pluginNameByOperationContextByType.forEach((t, i) => {
				(e.operations[i] = {}),
					t.forEach((s, r) => {
						e.operations[i][r] = s;
					});
			}),
			e
		);
	}
}
class MF {
	constructor(e) {
		(this._cameraNodeTypes = []), (this._registeredViewerCreateCallbackByCamera = new Map());
	}
	registerNodeType(e) {
		this._cameraNodeTypes.includes(e) || this._cameraNodeTypes.push(e);
	}
	registeredNodeTypes() {
		return this._cameraNodeTypes;
	}
	register(e, t) {
		this._registeredViewerCreateCallbackByCamera.set(e, t);
	}
	createViewer(e) {
		const t = this._registeredViewerCreateCallbackByCamera.get(e.camera.constructor);
		if (!t) {
			console.error('no createViewer callback available'),
				console.log(
					'createViewer',
					e.camera,
					e.camera.constructor,
					this._registeredViewerCreateCallbackByCamera
				);
			return;
		}
		return t(e);
	}
	objectRegistered(e) {
		return this._registeredViewerCreateCallbackByCamera.get(e.constructor) != null;
	}
}
class TF {
	constructor(e) {
		(this.poly = e), (this._moduleByName = new Map());
	}
	register(e, t, i) {
		let s = i == null ? void 0 : i.printWarnings;
		if ((s == null && (s = !0), this._moduleByName.has(e) && s)) {
			console.warn('module already registered', e);
			return;
		}
		this._moduleByName.set(e, t), t.onRegister(this.poly);
	}
	moduleNames() {
		const e = [];
		return (
			this._moduleByName.forEach((t, i) => {
				e.push(i);
			}),
			e
		);
	}
}
class RF extends TF {}
class wF {
	constructor() {
		(this._methodsNames = []), (this._methodsByName = new Map());
	}
	register(e, t) {
		this._methodsNames.push(t), this._methodsByName.set(t, e);
	}
	getMethod(e) {
		return this._methodsByName.get(e);
	}
	availableMethods() {
		return this._methodsNames;
	}
}
class OF extends wF {
	getMethod(e) {
		return super.getMethod(e);
	}
}
var fA = ((n) => (
	(n.GL_CLOTH = 'GL_CLOTH'),
	(n.GL_LINE = 'GL_LINE'),
	(n.GL_MESH_BASIC = 'GL_MESH_BASIC'),
	(n.GL_MESH_DEPTH = 'GL_MESH_DEPTH'),
	(n.GL_MESH_DISTANCE = 'GL_MESH_DISTANCE'),
	(n.GL_MESH_LAMBERT = 'GL_MESH_LAMBERT'),
	(n.GL_MESH_PHONG = 'GL_MESH_PHONG'),
	(n.GL_MESH_PHYSICAL = 'GL_MESH_PHYSICAL'),
	(n.GL_MESH_STANDARD = 'GL_MESH_STANDARD'),
	(n.GL_MESH_TOON = 'GL_MESH_TOON'),
	(n.GL_PARTICLES = 'GL_PARTICLES'),
	(n.GL_POINTS = 'GL_POINTS'),
	(n.GL_POST = 'GL_POST'),
	(n.GL_RAYMARCHING = 'GL_RAYMARCHING'),
	(n.GL_TEXTURE = 'GL_TEXTURE'),
	(n.GL_TEXTURE_2D_ARRAY = 'GL_TEXTURE_2D_ARRAY'),
	(n.GL_VOLUME = 'GL_VOLUME'),
	(n.JS_ACTOR = 'JS_ACTOR'),
	(n.JS_ENTITY_BUILDER = 'JS_ENTITY_BUILDER'),
	(n.JS_INSTANCE_BUILDER = 'JS_INSTANCE_BUILDER'),
	(n.JS_OBJECT_BUILDER = 'JS_OBJECT_BUILDER'),
	(n.JS_POINT_BUILDER = 'JS_POINT_BUILDER'),
	(n.JS_SDF = 'JS_SDF'),
	(n.JS_SOFT_BODY = 'JS_SOFT_BODY'),
	n
))(fA || {});
class PF {
	constructor() {
		this._controllerAssemblerByName = new Map();
	}
	register(e, t, i) {
		this._controllerAssemblerByName.set(e, {controller: t, assembler: i});
	}
	unregister(e) {
		this._controllerAssemblerByName.delete(e);
	}
	traverse(e) {
		this._controllerAssemblerByName.forEach(e);
	}
}
class NF extends PF {
	assembler(e, t) {
		const i = this._controllerAssemblerByName.get(t);
		if (i) {
			const {controller: s, assembler: r} = i;
			return new s(e, r);
		}
		return i;
	}
	unregister(e) {
		const t = this._controllerAssemblerByName.get(e);
		return super.unregister(e), t;
	}
}
class ys {
	constructor(e) {
		(this.poly = e),
			(this._nodesRegister = new Map()),
			(this._nodesRegisterCategories = new Map()),
			(this._nodesRegisterOptions = new Map());
	}
	static type(e) {
		return this.filterType(e.type());
	}
	static filterType(e) {
		return e.toLowerCase();
	}
	register(e, t, i) {
		var s, r;
		const o = e.context(),
			a = ys.type(e);
		let c = i == null ? void 0 : i.printWarnings;
		c == null && (c = !0);
		let l = this._nodesRegister.get(o);
		if ((l || ((l = new Map()), this._nodesRegister.set(o, l)), l.get(a))) {
			const h =
					((r = (s = this._nodesRegisterOptions.get(o)) == null ? void 0 : s.get(a)) == null
						? void 0
						: r.polyNode) == !0,
				d = (i == null ? void 0 : i.polyNode) == !0;
			if (!(h && d)) {
				c && console.warn(`node ${o}/${a} already registered`);
				return;
			}
		}
		if ((l.set(a, e), e.onRegister && e.onRegister(this.poly), t)) {
			let h = this._nodesRegisterCategories.get(o);
			h || ((h = new Map()), this._nodesRegisterCategories.set(o, h));
			const d = ft(t) ? t : [t];
			h.set(a, d);
		}
		if (i) {
			let h = this._nodesRegisterOptions.get(o);
			h || ((h = new Map()), this._nodesRegisterOptions.set(o, h)), h.set(a, i);
		}
		this.poly.pluginsRegister.registerNode(e);
	}
	deregister(e, t) {
		var i, s, r;
		(t = ys.filterType(t)),
			(i = this._nodesRegister.get(e)) == null || i.delete(t),
			(s = this._nodesRegisterCategories.get(e)) == null || s.delete(t),
			(r = this._nodesRegisterOptions.get(e)) == null || r.delete(t);
	}
	isRegistered(e, t) {
		const i = this._nodesRegister.get(e);
		return i ? ((t = ys.filterType(t)), i.get(t) != null) : !1;
	}
	nodeOptions(e, t) {
		var i;
		return (t = ys.filterType(t)), (i = this._nodesRegisterOptions.get(e)) == null ? void 0 : i.get(t);
	}
	registeredNodesForParentNode(e) {
		var t, i;
		const s = (t = e.childrenController) == null ? void 0 : t.context;
		if (!s) return [];
		if (this._nodesRegister.get(s)) {
			const o = [];
			return (
				(i = this._nodesRegister.get(s)) == null ||
					i.forEach((a, c) => {
						o.push(a);
					}),
				o.filter((a) => {
					const c = ys.type(a),
						l = this.nodeOptions(s, c);
					if (l) {
						const u = this.nodeOptions(e.context(), e.type());
						if ((u == null ? void 0 : u.polyNode) == !0) return !0;
						const h = l.only,
							d = l.except,
							p = `${e.context()}/${e.type()}`;
						return h ? h.includes(p) : d ? !d.includes(p) : !0;
					} else return !0;
				})
			);
		} else return [];
	}
	registeredNodes(e) {
		const t = {},
			i = this.registeredNodesForParentNode(e);
		for (let s of i) {
			const r = ys.type(s);
			t[r] = s;
		}
		return t;
	}
	registeredCategory(e, t) {
		var i;
		return (t = ys.filterType(t)), (i = this._nodesRegisterCategories.get(e)) == null ? void 0 : i.get(t);
	}
	map() {
		return this._nodesRegister;
	}
}
class eh {
	constructor(e) {
		(this.poly = e), (this._operation_register = new Map());
	}
	static type(e) {
		return this.filterType(e.type());
	}
	static filterType(e) {
		return e.toLowerCase();
	}
	register(e, t) {
		let i = t == null ? void 0 : t.printWarnings;
		i == null && (i = !0);
		const s = e.context();
		let r = this._operation_register.get(s);
		r || ((r = new Map()), this._operation_register.set(s, r));
		const o = eh.type(e);
		if (r.get(o)) {
			if (i) {
				const c = `operation ${s}/${o} already registered`;
				console.warn(c);
			}
			return;
		}
		r.set(o, e), e.onRegister && e.onRegister(this.poly), this.poly.pluginsRegister.registerOperation(e);
	}
	registeredOperationsForContextAndParentType(e, t) {
		var i;
		if (this._operation_register.get(e)) {
			const r = [];
			return (
				(i = this._operation_register.get(e)) == null ||
					i.forEach((o, a) => {
						r.push(o);
					}),
				r
			);
		} else return [];
	}
	registeredOperation(e, t) {
		const i = this._operation_register.get(e);
		if (i) return (t = eh.filterType(t)), i.get(t);
	}
}
class IF {
	constructor() {
		this._functionByName = new Map();
	}
	register(e, t) {
		let i = t == null ? void 0 : t.printWarnings;
		i == null && (i = !0);
		const s = e.type();
		this._functionByName.has(s) && i && console.warn('namedFunction already registered', s),
			this._functionByName.set(s, e);
	}
}
class DF extends IF {
	getFunction(e, t, i) {
		const s = this._functionByName.get(e);
		return s || console.error(`function not registered:'${e}'`), new s(t, i);
	}
}
const LF = '1.5.78';
class K_ {
	constructor() {
		(this.renderersController = new uS(this)),
			(this.canvasRegister = new NN(this)),
			(this.scenesRegister = new FN()),
			(this.nodesRegister = new ys(this)),
			(this.operationsRegister = new eh(this)),
			(this.expressionsRegister = new OF()),
			(this.assemblersRegister = new NF()),
			(this.pluginsRegister = new xF(this)),
			(this.camerasRegister = new MF(this)),
			(this.modulesRegister = new RF(this)),
			(this.namedFunctionsRegister = new DF()),
			(this.blobs = new DN(this)),
			(this.assetUrls = new LN()),
			(this.thirdParty = new VN()),
			(this.onObjectsAddRemoveHooks = new yF()),
			(this.onSceneUpdatedHooks = new bF()),
			(this.specializedChildren = new SF()),
			(this.performance = new UN()),
			(this.scenesByUuid = {}),
			(this._playerMode = !0),
			(this._logger = null);
	}
	static _instance_() {
		if (window.__POLYGONJS_POLY_INSTANCE__) return window.__POLYGONJS_POLY_INSTANCE__;
		{
			const e = new K_();
			return (window.__POLYGONJS_POLY_INSTANCE__ = e), window.__POLYGONJS_POLY_INSTANCE__;
		}
	}
	version() {
		return LF;
	}
	setPlayerMode(e) {
		this._playerMode = e;
	}
	playerMode() {
		return this._playerMode;
	}
	dispose() {
		this.scenesRegister.dispose(), this.renderersController.dispose();
	}
	registerNode(e, t, i) {
		this.nodesRegister.register(e, t, i);
	}
	registerOperation(e, t) {
		this.operationsRegister.register(e, t);
	}
	registerNamedFunction(e, t) {
		this.namedFunctionsRegister.register(e, t);
	}
	registerCamera(e, t) {
		this.camerasRegister.register(e, t);
	}
	registerCameraNodeType(e) {
		this.camerasRegister.registerNodeType(e);
	}
	registerPlugin(e) {
		this.pluginsRegister.register(e);
	}
	wrapConfigurePolygonjs(e) {
		this.pluginsRegister.wrapConfigurePolygonjs(e);
	}
	registeredNodes(e) {
		return this.nodesRegister.registeredNodes(e);
	}
	registeredOperation(e, t) {
		return this.operationsRegister.registeredOperation(e, t);
	}
	registerModule(e, t) {
		this.modulesRegister.register(e.moduleName, e, t);
	}
	inWorkerThread() {
		return !1;
	}
	get libs() {
		return (this._libs_controller = this._libs_controller || new IN());
	}
	setEnv(e) {
		this._env = e;
	}
	env() {
		return this._env;
	}
	setLogger(e) {
		this._logger = e;
	}
	logger() {
		return this._logger;
	}
	log(e, ...t) {
		var i;
		(i = this._logger) == null || i.log(e, ...t);
	}
	warn(e, ...t) {
		var i;
		(i = this._logger) == null || i.warn(e, ...t);
	}
	error(e, ...t) {
		var i;
		(i = this._logger) == null || i.error(e, ...t);
	}
}
const le = K_._instance_();
class UF {
	constructor(e) {
		(this.node = e), (this._dirtyCount = 0), (this._dirty = !0), (this._cooker = e.scene().cooker);
	}
	dispose() {
		(this._postDirtyHooks = void 0), (this._postDirtyHookNames = void 0);
	}
	isDirty() {
		return this._dirty === !0;
	}
	dirtyTimestamp() {
		return this._dirtyTimestamp;
	}
	dirtyCount() {
		return this._dirtyCount;
	}
	hasPostDirtyHooks() {
		return this._postDirtyHookNames != null && this._postDirtyHookNames.length > 0;
	}
	addPostDirtyHook(e, t) {
		(this._postDirtyHookNames = this._postDirtyHookNames || []),
			(this._postDirtyHooks = this._postDirtyHooks || []),
			this._postDirtyHookNames.includes(e)
				? console.warn(`hook with name ${e} already exists`, this.node)
				: (this._postDirtyHookNames.push(e), this._postDirtyHooks.push(t));
	}
	removePostDirtyHook(e) {
		if (this._postDirtyHookNames && this._postDirtyHooks) {
			const t = this._postDirtyHookNames.indexOf(e);
			t >= 0 && (this._postDirtyHookNames.splice(t, 1), this._postDirtyHooks.splice(t, 1));
		}
	}
	hasHook(e) {
		return this._postDirtyHookNames ? this._postDirtyHookNames.includes(e) : !1;
	}
	removeDirtyState() {
		this._dirty = !1;
	}
	setDirty(e, t = !0) {
		e == null && (e = this.node),
			!(e == this.node && this.node.selfDirtyForbidden()) &&
				((this._dirty = !0),
				(this._dirtyTimestamp = le.performance.performanceManager().now()),
				(this._dirtyCount += 1),
				this.runPostDirtyHooks(e),
				t === !0 && this.setSuccessorsDirty(e));
	}
	runPostDirtyHooks(e) {
		if (!(this._postDirtyHooks == null || this._postDirtyHooks.length == 0))
			if (this._cooker.blocked()) this._cooker.enqueue(this.node, e);
			else for (const t of this._postDirtyHooks) t(e);
	}
	setSuccessorsDirty(e) {
		e == null && (e = this.node), this._cooker.block();
		const t = this.node.graphAllSuccessors();
		for (const i of t) i.dirtyController.setDirty(e, !1);
		this._cooker.unblock();
	}
}
class ai {
	constructor(e, t) {
		(this._scene = e),
			(this._name = t),
			(this._dirtyController = new UF(this)),
			(this._allPredecessors = []),
			(this._allSuccessors = []),
			(this._allPredecessorsDirty = !0),
			(this._allSuccessorsDirty = !0),
			(this._disposed = !1),
			(this._graphNodeId = e.graph.nextId()),
			e.graph.addNode(this),
			(this._graph = e.graph);
	}
	dispose() {
		this._dirtyController.dispose(),
			(this._allPredecessors.length = 0),
			(this._allSuccessors.length = 0),
			this.graphRemove(),
			(this._disposed = !0);
	}
	disposed() {
		return this._disposed;
	}
	name() {
		return this._name;
	}
	setName(e) {
		this._name = e;
	}
	scene() {
		return this._scene;
	}
	graphNodeId() {
		return this._graphNodeId;
	}
	get dirtyController() {
		return this._dirtyController;
	}
	setDirty(e) {
		(e = e || this), this._dirtyController.setDirty(e);
	}
	setSuccessorsDirty(e) {
		this._dirtyController.setSuccessorsDirty(e);
	}
	removeDirtyState() {
		this._dirtyController.removeDirtyState();
	}
	isDirty() {
		return this._dirtyController.isDirty();
	}
	addPostDirtyHook(e, t) {
		this._dirtyController.addPostDirtyHook(e, t);
	}
	removePostDirtyHook(e) {
		this._dirtyController.removePostDirtyHook(e);
	}
	graphRemove() {
		this._graph.removeNode(this);
	}
	addGraphInput(e, t = !0) {
		return this._graph.connect(e, this, t);
	}
	removeGraphInput(e) {
		this._graph.disconnect(e, this);
	}
	graphDisconnectPredecessors() {
		this._graph.disconnectPredecessors(this);
	}
	graphDisconnectSuccessors() {
		this._graph.disconnectSuccessors(this);
	}
	graphPredecessorIds() {
		return this._graph.predecessorIds(this._graphNodeId);
	}
	graphPredecessors() {
		return this._graph.predecessors(this);
	}
	graphSuccessorIds() {
		return this._graph.successorIds(this._graphNodeId);
	}
	graphSuccessors() {
		return this._graph.successors(this);
	}
	_clearAllPredecessors() {
		this._allPredecessorsDirty = !0;
	}
	_clearAllSuccessors() {
		this._allSuccessorsDirty = !0;
	}
	graphAllPredecessors() {
		return (
			this._allPredecessorsDirty &&
				(this._graph.allPredecessors(this, this._allPredecessors), (this._allPredecessorsDirty = !1)),
			this._allPredecessors
		);
	}
	graphAllSuccessors() {
		return (
			this._allSuccessorsDirty &&
				(this._graph.allSuccessors(this, this._allSuccessors), (this._allSuccessorsDirty = !1)),
			this._allSuccessors
		);
	}
	hasPredecessor(e) {
		return this.graphAllPredecessors().includes(e);
	}
	clearCachesWithPredecessorsAndSuccessors() {
		const e = this.graphAllPredecessors(),
			t = this.graphAllSuccessors();
		for (const i of e) i._clearAllSuccessors();
		for (const i of t) i._clearAllPredecessors();
		this._clearAllPredecessors(), this._clearAllSuccessors();
	}
	setForbiddenTriggerNodes(e) {
		this._graph.setForbiddenTriggerNodes(this, e), this._clearAllSuccessors();
	}
	clearForbiddenTriggerNodes() {
		this._graph.clearForbiddenTriggerNodes(this), this._clearAllSuccessors();
	}
	setSelfDirtyForbidden(e) {
		this._graph.setSelfDirtyForbidden(this, e);
	}
	selfDirtyForbidden() {
		return this._graph.selfDirtyForbidden(this);
	}
}
var _n = ((n) => (
		(n.VISIBLE_UPDATED = 'param_visible_updated'),
		(n.EDITABLE_UPDATED = 'param_editable_updated'),
		(n.RAW_INPUT_UPDATED = 'raw_input_updated'),
		(n.VALUE_UPDATED = 'param_value_updated'),
		(n.EXPRESSION_UPDATED = 'param_expression_update'),
		(n.ERROR_UPDATED = 'param_error_updated'),
		(n.DELETED = 'param_deleted'),
		(n.ASSET_RELOAD_REQUEST = 'param_asset_reload_request'),
		n
	))(_n || {}),
	$r = ((n) => (
		(n.NONE = 'no conversion'), (n.SRGB_TO_LINEAR = 'sRGB -> linear'), (n.LINEAR_TO_SRGB = 'linear -> sRGB'), n
	))($r || {});
const qa = 'callback',
	zd = 'callbackString',
	FF = 'computeOnDirty',
	BF = 'cook',
	kF = 'fileBrowse',
	VF = 'extensions',
	GF = 'expression',
	zF = 'forEntities',
	HF = 'label',
	xE = 'hideLabel',
	WF = 'level',
	jF = 'menu',
	XF = 'menuString',
	ME = 'entries',
	$F = 'multiline',
	qF = 'language',
	YF = 'nodeSelection',
	KF = 'context',
	ZF = 'types',
	Hd = 'objectMask',
	QF = 'inputIndex',
	TE = 'dependentOnFoundNode',
	RE = 'dependentOnFoundParam',
	JF = 'range',
	eB = 'rangeLocked',
	tB = 'step',
	nB = 'spare',
	iB = 'texture',
	sB = 'env',
	wE = 'hidden',
	rB = 'field',
	Wd = 'visibleIf',
	oB = 'conversion',
	aB = 'separatorBefore',
	cB = 'separatorAfter',
	lB = 'joinToPreviousParam',
	uB = 'asQuaternion',
	Pu = 'editable',
	hB = [Pu];
class OE {
	constructor(e) {
		(this._param = e),
			(this._programaticVisibleState = !0),
			(this._callbackAllowed = !1),
			(this._updateVisibilityAndRemoveDirtyBound = this.updateVisibilityAndRemoveDirty.bind(this)),
			(this._ui_data_dependency_set = !1);
	}
	dispose() {
		var e;
		try {
			(this._options[qa] = void 0), (this._options[zd] = void 0);
		} catch {}
		(e = this._visibility_graph_node) == null || e.dispose();
	}
	set(e) {
		qe(e) && console.warn('options input invalid', e, typeof e),
			(this._default_options = e),
			(this._options = ar(this._default_options)),
			this.postSetOptions();
	}
	copy(e) {
		(this._default_options = ar(e.default())), (this._options = ar(e.current())), this.postSetOptions();
	}
	setOption(e, t) {
		if (this._validateOption(e, t) && ((this._options[e] = t), this._param.components))
			for (const i of this._param.components) i.options.setOption(e, t);
	}
	_validateOption(e, t) {
		return e == qa ? B_(t) : !0;
	}
	postSetOptions() {
		this._handleComputeOnDirty();
	}
	param() {
		return this._param;
	}
	node() {
		return this._param.node;
	}
	default() {
		return this._default_options;
	}
	current() {
		return this._options;
	}
	hasOptionsOverridden() {
		return !yE(this._options, this._default_options);
	}
	overriddenOptions() {
		const e = {},
			t = Object.keys(this._options),
			i = [];
		zS(t, hB, i);
		for (const s of i)
			if (!yE(this._options[s], this._default_options[s])) {
				const r = ar(this._options[s]);
				Object.assign(e, {[s]: r});
			}
		return e;
	}
	overriddenOptionNames() {
		return Object.keys(this.overriddenOptions());
	}
	computeOnDirty() {
		return this._options[FF] || !1;
	}
	_handleComputeOnDirty() {
		this.computeOnDirty() &&
			(this._computeOnDirtyCallbackAdded ||
				(this.param().addPostDirtyHook('computeOnDirty', this._computeParam.bind(this)),
				(this._computeOnDirtyCallbackAdded = !0)));
	}
	async _computeParam() {
		await this.param().compute();
	}
	hasCallback() {
		return this._options[qa] != null || this._options[zd] != null;
	}
	allowCallback() {
		this._callbackAllowed = !0;
	}
	async executeCallback() {
		if (!this._callbackAllowed) return;
		const e = this.node();
		if (!e) return;
		const t = e.scene();
		if (!t) return;
		const i = this.getCallback(e, t);
		if (!i || !t.loadingController.loaded()) return;
		const s = this.param().parentParam();
		s ? s.options.executeCallback() : await i(e, this.param());
	}
	getCallback(e, t) {
		if (this.hasCallback()) return (this._options[qa] = this._options[qa] || this.createCallbackFromString(e, t));
	}
	createCallbackFromString(e, t) {
		const i = this._options[zd];
		if (i) {
			const s = new Function('node', 'scene', 'window', 'location', i);
			return () => {
				s(e, t, null, null);
			};
		}
	}
	colorConversion() {
		return this._options[oB] || $r.NONE;
	}
	makesNodeDirtyWhenDirty() {
		if (this.param().parentParam() != null) return !1;
		const e = this._options[BF];
		return e ?? !0;
	}
	fileBrowseOption() {
		return this._options[kF];
	}
	fileBrowseAllowed() {
		return this.fileBrowseOption() != null;
	}
	fileBrowseExtensions() {
		const e = this.fileBrowseOption();
		return e ? e[VF] : null;
	}
	separatorBefore() {
		return this._options[aB];
	}
	separatorAfter() {
		return this._options[cB];
	}
	joinToPreviousParam() {
		return this._options[lB];
	}
	setEditableState(e) {
		const t = this._options[Pu],
			i = this.param();
		if ((t != e && ((this._options[Pu] = e), i.emit(_n.EDITABLE_UPDATED)), i.components))
			for (const s of i.components) s.options.setEditableState(e);
	}
	editable() {
		const e = this._options[Pu];
		return e ?? !0;
	}
	isExpressionForEntities() {
		const e = this._options[GF];
		return (e && e[zF]) || !1;
	}
	level() {
		return this._options[WF] || 0;
	}
	hasMenu() {
		return this.menuOptions() != null || this.menuStringOptions() != null;
	}
	menuOptions() {
		return this._options[jF];
	}
	menuStringOptions() {
		return this._options[XF];
	}
	menuEntries() {
		const e = this.menuOptions() || this.menuStringOptions();
		return e ? e[ME] : [];
	}
	ensureValueInMenuEntries(e) {
		const t = this.menuOptions();
		if (!t) return e;
		const i = t[ME];
		if (i.length == 0) return e;
		for (const s of i) if (e == s.value) return e;
		return i[0].value;
	}
	isMultiline() {
		return this._options[$F] === !0;
	}
	language() {
		return this._options[qF];
	}
	isCode() {
		return this.language() != null;
	}
	nodeSelectionOptions() {
		return this._options[YF];
	}
	nodeSelectionContext() {
		const e = this.nodeSelectionOptions();
		if (e) return e[KF];
	}
	nodeSelectionTypes() {
		const e = this.nodeSelectionOptions();
		if (e) return e[ZF];
	}
	displayObjectMaskSelection() {
		const e = this._options[Hd];
		return e != null && e != !1;
	}
	objectMaskInputIndex() {
		const e = this._options[Hd];
		return (e != null ? e[QF] : 0) || 0;
	}
	objectMaskFromInputOnly() {
		return this._options[Hd].fromInputOnly != !1;
	}
	dependentOnFoundNode() {
		return TE in this._options ? this._options[TE] : !0;
	}
	dependentOnFoundParam() {
		return RE in this._options ? this._options[RE] : !0;
	}
	isSelectingParam() {
		return this.param().type() == j.PARAM_PATH;
	}
	range() {
		return this._options[JF] || [0, 1];
	}
	step() {
		return this._options[tB];
	}
	asQuaternion() {
		return this._options[uB] == !0;
	}
	rangeLocked() {
		return this._options[eB] || [!1, !1];
	}
	ensureInRange(e) {
		const t = this.range();
		return e >= t[0] && e <= t[1]
			? e
			: e < t[0]
			? this.rangeLocked()[0] === !0
				? t[0]
				: e
			: this.rangeLocked()[1] === !0
			? t[1]
			: e;
	}
	isSpare() {
		return this._options[nB] || !1;
	}
	textureOptions() {
		return this._options[iB];
	}
	textureAsEnv() {
		const e = this.textureOptions();
		return e != null ? e[sB] === !0 : !1;
	}
	isHidden() {
		return this._options[wE] === !0 || this._programaticVisibleState === !1;
	}
	isVisible() {
		return !this.isHidden();
	}
	setVisibleState(e) {
		(this._options[wE] = !e), this.param().emit(_n.VISIBLE_UPDATED);
	}
	label() {
		return this._options[HF];
	}
	isLabelHidden() {
		switch (this.param().type()) {
			case j.BUTTON:
				return !0;
			case j.BOOLEAN:
				return this.isFieldHidden();
			case j.RAMP:
				return this._options[xE] || !1;
			case j.STRING:
				return (this.isCode() && this._options[xE]) || !1;
		}
		return !1;
	}
	isFieldHidden() {
		return this._options[rB] === !1;
	}
	uiDataDependsOnOtherParams() {
		return Wd in this._options;
	}
	visibilityPredecessors() {
		const e = this._options[Wd];
		if (!e) return [];
		let t = [];
		ft(e) ? gr(e.map((r) => Object.keys(r)).flat(), t) : (t = Object.keys(e));
		const i = this.param().node,
			s = [];
		return (
			Jr(
				t.map((r) => {
					const o = i.params.get(r);
					if (o) return o;
					console.error(
						`param ${r} not found as visibility condition for ${this.param().name()} in node ${this.param().node.type()}`
					);
				}),
				s
			),
			s
		);
	}
	setUiDataDependency() {
		if (this._ui_data_dependency_set) return;
		this._ui_data_dependency_set = !0;
		const e = this.visibilityPredecessors();
		if (e.length > 0) {
			this._visibility_graph_node = new ai(this.param().scene(), 'param_visibility');
			for (const t of e) this._visibility_graph_node.addGraphInput(t);
			this._visibility_graph_node.addPostDirtyHook(
				'_update_visibility_and_remove_dirty',
				this._updateVisibilityAndRemoveDirtyBound
			);
		}
	}
	updateVisibilityAndRemoveDirty() {
		this.updateVisibility(), this.param().removeDirtyState();
	}
	async updateVisibility() {
		const e = this._options[Wd];
		if (e) {
			const t = this.param().node,
				i = this.visibilityPredecessors(),
				s = i.map((r) => {
					if (r.isDirty()) return r.compute();
				});
			if (((this._programaticVisibleState = !1), await Promise.all(s), ft(e)))
				for (const r of e) {
					const o = Object.keys(r),
						a = [];
					Jr(
						o.map((l) => t.params.get(l)),
						a
					),
						a.filter((l) => l.value == r[l.name()]).length == a.length &&
							(this._programaticVisibleState = !0);
				}
			else {
				const r = i.filter((o) => o.value == e[o.name()]);
				this._programaticVisibleState = r.length == i.length;
			}
			this.param().emit(_n.VISIBLE_UPDATED);
		}
	}
}
class PE {
	constructor(e) {
		(this.param = e),
			(this._blockedEmit = !1),
			(this._blockedParentEmit = !1),
			(this._countByEventName = new Map());
	}
	emitAllowed() {
		return this._blockedEmit === !0 || this.param.scene().loadingController.isLoading()
			? !1
			: this.param.scene().dispatchController.emitAllowed();
	}
	blockEmit() {
		if (((this._blockedEmit = !0), this.param.isMultiple() && this.param.components))
			for (const e of this.param.components) e.emitController.blockEmit();
		return !0;
	}
	unblockEmit() {
		if (((this._blockedEmit = !1), this.param.isMultiple() && this.param.components))
			for (const e of this.param.components) e.emitController.unblockEmit();
		return !0;
	}
	blockParentEmit() {
		return (this._blockedParentEmit = !0), !0;
	}
	unblockParentEmit() {
		return (this._blockedParentEmit = !1), !0;
	}
	incrementCount(e) {
		const t = (this._countByEventName.get(e) || 0) + 1;
		this._countByEventName.set(e, t);
	}
	eventsCount(e) {
		return this._countByEventName.get(e) || 0;
	}
	emit(e) {
		if (this.emitAllowed()) {
			this.param.emit(e);
			const t = this.param.parentParam();
			t != null && this._blockedParentEmit !== !0 && t.emit(e);
		}
	}
}
class dB {
	constructor(e) {
		this.param = e;
	}
	active() {
		var e;
		const t = this.param.scene().timeController.graphNode.graphNodeId();
		return ((e = this.param.graphPredecessorIds()) == null ? void 0 : e.includes(t)) || !1;
	}
}
class pB {
	constructor(e) {
		this.param = e;
	}
	set(e) {
		this._message != e &&
			(e ? le.error(`[${this.param.path()}] error: '${e}'`) : le.warn(`[${this.param.path()}] clear error`),
			(this._message = e),
			this.param.emitController.emit(_n.ERROR_UPDATED));
	}
	message() {
		return this._message;
	}
	clear() {
		this.set(void 0);
	}
	active() {
		return this._message != null;
	}
}
class fB {
	constructor(e) {
		(this.param = e), (this.timeDependent = new dB(this.param)), (this.error = new pB(this.param));
	}
}
class kh extends ai {
	constructor(e, t, i) {
		var s;
		super(e.scene(), 'MethodDependency'),
			(this.param = e),
			(this.pathArgs = t),
			(this.decomposedPath = i),
			(this._updateFromNameChangeBound = this._updateFromNameChange.bind(this)),
			(s = e.expressionController) == null || s.registerMethodDependency(this),
			this.addPostDirtyHook('_updateFromNameChange', this._updateFromNameChangeBound);
	}
	_updateFromNameChange(e) {
		if (e && this.decomposedPath) {
			const t = e;
			this.decomposedPath.updateFromNameChange(t);
			const i = this.decomposedPath.toPath(),
				s = this.jsep_node,
				{indexOrPath: r} = this.pathArgs;
			s && qe(r) && ((s.value = `${s.value}`.replace(`${r}`, i)), (s.raw = s.raw.replace(`${r}`, i))),
				this.param.expressionController &&
					this.param.expressionController.updateFromMethodDependencyNameChange();
		}
	}
	reset() {
		this.graphDisconnectPredecessors();
	}
	listen_for_name_changes() {
		if (this.jsep_node && this.decomposedPath) {
			const e = [];
			this.decomposedPath.namedNodes(e);
			for (const t of e)
				if (t) {
					const i = t;
					i.nameController && this.addGraphInput(i.nameController.graphNode());
				}
		}
	}
	set_jsep_node(e) {
		this.jsep_node = e;
	}
	set_resolved_graph_node(e) {
		this.resolved_graph_node = e;
	}
	set_unresolved_path(e) {
		this.unresolved_path = e;
	}
	static create(e, t, i, s) {
		const r = new kh(e, t, s);
		if (i) r.set_resolved_graph_node(i);
		else {
			const {indexOrPath: o} = t;
			qe(o) && r.set_unresolved_path(o);
		}
		return r;
	}
}
const _B = [];
class Sr extends ai {
	constructor(e, t, i) {
		super(e, 'BaseParam'),
			(this._options = new OE(this)),
			(this._emitController = new PE(this)),
			(this._isComputing = !1),
			i.serializerClass && (this._serializer = new i.serializerClass(this)),
			(this._node = t),
			this._initializeParam();
	}
	get options() {
		return (this._options = this._options || new OE(this));
	}
	get emitController() {
		return (this._emitController = this._emitController || new PE(this));
	}
	get expressionController() {
		return this._expression_controller;
	}
	expressionParsedAsString() {
		return !1;
	}
	get serializer() {
		return this._serializer;
	}
	get states() {
		return (this._states = this._states || new fB(this));
	}
	dispose() {
		var e, t;
		this.expressionController && this.hasExpression() && this.set(this.rawInputSerialized());
		const i = [],
			s = this.graphPredecessors();
		if (s) {
			os(s, i);
			for (const o of i) o instanceof kh && o.dispose();
		}
		const r = this.graphSuccessors();
		if (r) {
			os(r, i);
			for (const o of i)
				if (o instanceof Sr) {
					const a = o.rawInputSerialized();
					o.set(o.defaultValue()), o.set(a);
				} else o.setDirty();
		}
		this.scene().missingExpressionReferencesController.deregisterParam(this),
			(e = this._expression_controller) == null || e.dispose(),
			super.dispose(),
			(t = this._options) == null || t.dispose(),
			(this._node = void 0),
			(this._parent_param = void 0),
			this._runOnDisposeCallbacks();
	}
	_initializeParam() {}
	postOptionsInitialize() {}
	static type() {
		return j.FLOAT;
	}
	type() {
		return this.constructor.type();
	}
	isNumeric() {
		return !1;
	}
	setName(e) {
		super.setName(e);
	}
	get value() {
		return this._value;
	}
	copyValue(e) {
		e.type() == this.type()
			? this._copyValue(e)
			: console.warn(`cannot copy value from ${e.type()} to ${this.type()}`);
	}
	_copyValue(e) {
		throw 'abstract method param._copy_value';
	}
	valuePreConversionSerialized() {}
	convert(e) {
		return null;
	}
	static areRawInputEqual(e, t) {
		return !1;
	}
	isRawInputEqual(e) {
		return this.constructor.areRawInputEqual(this._raw_input, e);
	}
	isDefaultValueEqual(e) {
		return this.constructor.areRawInputEqual(this._default_value, e);
	}
	static areValuesEqual(e, t) {
		return !1;
	}
	isValueEqual(e) {
		return this.constructor.areValuesEqual(this.value, e);
	}
	_cloneRawInput(e) {
		return e;
	}
	set(e) {
		(this._raw_input = this._cloneRawInput(this._prefilterInvalidRawInput(e))),
			this.emitController.emit(_n.RAW_INPUT_UPDATED),
			this.processRawInput();
	}
	_prefilterInvalidRawInput(e) {
		return e;
	}
	defaultValue() {
		return this._default_value;
	}
	isDefault() {
		return this._raw_input == this._default_value;
	}
	rawInput() {
		return this._raw_input;
	}
	processRawInput() {}
	isComputing() {
		return this._isComputing;
	}
	async compute() {
		if (
			(this.scene().loadingController.isLoading() &&
				le.warn(`param attempt to compute ${this.path()} while scene is loading`),
			this.isDirty())
		) {
			if (this._isComputing)
				return new Promise((e, t) => {
					(this._computeResolves = this._computeResolves || []), this._computeResolves.push(e);
				});
			if (
				((this._isComputing = !0),
				await this.processComputation(),
				(this._isComputing = !1),
				this._computeResolves)
			) {
				const e = [...this._computeResolves];
				this._computeResolves = void 0;
				for (const t of e) t();
			}
		}
	}
	async processComputation() {}
	setInitValue(e) {
		this._default_value = this._cloneRawInput(this._prefilterInvalidRawInput(e));
	}
	_setupNodeDependencies(e) {
		var t, i;
		if (
			(e
				? (this.options.allowCallback(),
				  this.parentParam() ||
						(this.options.makesNodeDirtyWhenDirty()
							? (i = e.params.params_node) == null || i.addGraphInput(this, !1)
							: this.dirtyController.addPostDirtyHook('run callback', async () => {
									await this.compute(), await this.options.executeCallback();
							  })))
				: this._node && ((t = this._node.params.params_node) == null || t.removeGraphInput(this)),
			this.components)
		)
			for (const s of this.components) s._setupNodeDependencies(e);
	}
	get node() {
		return this._node;
	}
	parent() {
		return this.node;
	}
	set_parent_param(e) {
		e.addGraphInput(this, !1), (this._parent_param = e);
	}
	parentParam() {
		return this._parent_param;
	}
	has_parent_param() {
		return this._parent_param != null;
	}
	path() {
		var e;
		return ((e = this.node) == null ? void 0 : e.path()) + '/' + this.name();
	}
	pathRelativeTo(e) {
		if (!this._node) return this.name();
		const t = Ct.relativePath(e, this._node);
		return t.length > 0 ? Ct.sanitizePath(`${t}${Ct.SEPARATOR}${this.name()}`) : this.name();
	}
	emit(e) {
		this.emitController.emitAllowed() &&
			(this.emitController.incrementCount(e), this.scene().dispatchController.dispatch(this, e));
	}
	get components() {
		return this._components;
	}
	componentNames() {
		return _B;
	}
	isMultiple() {
		return this.componentNames().length > 0;
	}
	initComponents() {}
	hasExpression() {
		return this.expressionController != null && this.expressionController.active();
	}
	toJSON() {
		if (this._serializer) return this._serializer.toJSON();
	}
	onDispose(e) {
		(this._onDisposeCallbacks = this._onDisposeCallbacks || new Set()), this._onDisposeCallbacks.add(e);
	}
	deregisterOnDispose(e) {
		this._onDisposeCallbacks && this._onDisposeCallbacks.delete(e);
	}
	_runOnDisposeCallbacks() {
		this._onDisposeCallbacks &&
			(this._onDisposeCallbacks.forEach((e) => {
				e();
			}),
			this._onDisposeCallbacks.clear(),
			(this._onDisposeCallbacks = void 0));
	}
}
class fr {
	constructor(e = 0, t = 0) {
		(this._position = e), (this._value = t);
	}
	toJSON() {
		return {position: this._position, value: this._value};
	}
	position() {
		return this._position;
	}
	value() {
		return this._value;
	}
	copy(e) {
		(this._position = e.position()), (this._value = e.value());
	}
	clone() {
		const e = new fr();
		return e.copy(this), e;
	}
	isEqual(e) {
		return this._position == e.position() && this._value == e.value();
	}
	isEqualJSON(e) {
		return this._position == e.position && this._value == e.value;
	}
	fromJSON(e) {
		(this._position = e.position), (this._value = e.value);
	}
	static areEqualJSON(e, t) {
		return e.position == t.position && e.value == t.value;
	}
	static fromJSON(e) {
		return new fr(e.position, e.value);
	}
}
var _A = ((n) => ((n.CUBIC = 'cubic'), n))(_A || {});
class Mn {
	constructor(e = 'cubic', t = []) {
		(this._interpolation = e), (this._points = t), (this._uuid = bn.generateUUID());
	}
	uuid() {
		return this._uuid;
	}
	interpolation() {
		return this._interpolation;
	}
	points() {
		return this._points;
	}
	static createInterpolantFromValues(e, t) {
		const s = new Float32Array(1);
		return new yN(e, t, 1, s);
	}
	createInterpolant() {
		return Mn.createInterpolant(this);
	}
	static createInterpolant(e) {
		const t = e.points(),
			i = pf(t, (a) => a.position()),
			s = new Float32Array(i.length),
			r = new Float32Array(i.length);
		let o = 0;
		for (const a of i) (s[o] = a.position()), (r[o] = a.value()), o++;
		return this.createInterpolantFromValues(s, r);
	}
	static fromJSON(e) {
		const t = [];
		for (const s of e.points) t.push(fr.fromJSON(s));
		let i = e.interpolation;
		return (i == null || i == '') && (i = 'cubic'), new Mn(i, t);
	}
	toJSON() {
		return {interpolation: this._interpolation, points: this._points.map((e) => e.toJSON())};
	}
	clone() {
		const e = new Mn();
		return e.copy(this), e;
	}
	copy(e) {
		this._interpolation = e.interpolation();
		const t = e.points().length,
			i = this._points.length;
		if (i > t) {
			const r = i - t,
				o = i - r;
			this._points.splice(o, r);
		}
		let s = 0;
		for (const r of e.points()) {
			const o = this._points[s];
			o ? o.copy(r) : this._points.push(r.clone()), (s += 1);
		}
	}
	isEqual(e) {
		if (this._interpolation != e.interpolation()) return !1;
		const t = e.points();
		if (this._points.length != t.length) return !1;
		let i = 0;
		for (const s of this._points) {
			const r = t[i];
			if (!s.isEqual(r)) return !1;
			i += 1;
		}
		return !0;
	}
	isEqualJSON(e) {
		if (this._interpolation != e.interpolation || this._points.length != e.points.length) return !1;
		let t = 0;
		for (const i of this._points) {
			const s = e.points[t];
			if (!i.isEqualJSON(s)) return !1;
			t += 1;
		}
		return !0;
	}
	static are_json_equal(e, t) {
		if (e.interpolation != t.interpolation || e.points.length != t.points.length) return !1;
		let i = 0;
		for (const s of e.points) {
			const r = t.points[i];
			if (!fr.areEqualJSON(s, r)) return !1;
			i += 1;
		}
		return !0;
	}
	fromJSON(e) {
		this._interpolation = e.interpolation;
		const t = e.points.length,
			i = this._points.length;
		if (i > t) {
			const r = i - t,
				o = i - r;
			this._points.splice(o, r);
		}
		let s = 0;
		for (const r of e.points) {
			const o = this._points[s];
			o ? o.fromJSON(r) : this._points.push(fr.fromJSON(r)), (s += 1);
		}
	}
}
const NE = 4,
	yf = 1024,
	mA = 1,
	IE = yf * mA,
	mB = 1,
	gA = class extends Sr {
		constructor() {
			super(...arguments),
				(this._textureData = new Float32Array(NE * IE)),
				(this._rampTexture = new Rh(this._textureData, yf, mA, wn, jn));
		}
		static type() {
			return j.RAMP;
		}
		defaultValueSerialized() {
			return this._default_value instanceof Mn ? this._default_value.toJSON() : this._default_value;
		}
		_cloneRawInput(n) {
			return n instanceof Mn ? n.clone() : Mn.fromJSON(n).toJSON();
		}
		rawInputSerialized() {
			return this._raw_input instanceof Mn ? this._raw_input.toJSON() : Mn.fromJSON(this._raw_input).toJSON();
		}
		valueSerialized() {
			return this.value.toJSON();
		}
		_copyValue(n) {
			this.set(n.valueSerialized());
		}
		static areRawInputEqual(n, e) {
			return n instanceof Mn
				? e instanceof Mn
					? n.isEqual(e)
					: n.isEqualJSON(e)
				: e instanceof Mn
				? e.isEqualJSON(n)
				: Mn.are_json_equal(n, e);
		}
		static areValuesEqual(n, e) {
			return n.isEqual(e);
		}
		isDefault() {
			return this._default_value instanceof Mn
				? this.value.isEqual(this._default_value)
				: this.value.isEqualJSON(this._default_value);
		}
		processRawInput() {
			this._raw_input instanceof Mn
				? this._value
					? this._value.copy(this._raw_input)
					: (this._value = this._raw_input)
				: this._value
				? this._value.fromJSON(this._raw_input)
				: (this._value = Mn.fromJSON(this._raw_input)),
				this._resetRampInterpolant(),
				this._updateRampTexture(),
				this.options.executeCallback(),
				this.emitController.emit(_n.VALUE_UPDATED),
				this.setSuccessorsDirty(this);
		}
		hasExpression() {
			return !1;
		}
		_resetRampInterpolant() {
			this._rampInterpolant = void 0;
		}
		rampTexture() {
			return this._rampTexture;
		}
		_updateRampTexture() {
			this._updateRampTextureData(), (this.rampTexture().needsUpdate = !0);
		}
		_updateRampTextureData() {
			let n = 0,
				e = 0,
				t = 0;
			for (var i = 0; i < IE; i++)
				(n = i * NE),
					(e = i / yf),
					(t = this.valueAtPosition(e)),
					(this._textureData[n + 0] = t * mB),
					(this._textureData[n + 1] = 0),
					(this._textureData[n + 2] = 0);
		}
		interpolant() {
			return (this._rampInterpolant = this._rampInterpolant || this._createInterpolant());
		}
		_createInterpolant() {
			return this.value.createInterpolant();
		}
		valueAtPosition(n) {
			return this.interpolant().evaluate(n)[0];
		}
	};
let ns = gA;
ns.DEFAULT_VALUE = new Mn(_A.CUBIC, [new fr(0, 0), new fr(1, 1)]);
ns.DEFAULT_VALUE_JSON = gA.DEFAULT_VALUE.toJSON();
class Kn {
	constructor(e, t, i) {
		(this.type = e), (this.init_value = t), (this.options = i);
	}
}
class M {
	static BUTTON(e, t) {
		return new Kn(j.BUTTON, e, t);
	}
	static BOOLEAN(e, t) {
		return new Kn(j.BOOLEAN, e, t);
	}
	static COLOR(e, t) {
		return e instanceof Ee && (e = e.toArray()), new Kn(j.COLOR, e, t);
	}
	static FLOAT(e, t) {
		return new Kn(j.FLOAT, e, t);
	}
	static FOLDER(e = null, t) {
		return new Kn(j.FOLDER, e, t);
	}
	static INTEGER(e, t) {
		return new Kn(j.INTEGER, e, t);
	}
	static RAMP(e = ns.DEFAULT_VALUE, t) {
		return new Kn(j.RAMP, e, t);
	}
	static STRING(e = '', t) {
		return new Kn(j.STRING, e, t);
	}
	static VECTOR2(e, t) {
		return e instanceof re && (e = e.toArray()), new Kn(j.VECTOR2, e, t);
	}
	static VECTOR3(e, t) {
		return e instanceof w && (e = e.toArray()), new Kn(j.VECTOR3, e, t);
	}
	static VECTOR4(e, t) {
		return e instanceof Ke && (e = e.toArray()), new Kn(j.VECTOR4, e, t);
	}
	static NODE_PATH(e, t) {
		return new Kn(j.NODE_PATH, e, t);
	}
	static PARAM_PATH(e, t) {
		return new Kn(j.PARAM_PATH, e, t);
	}
}
class nn {}
class gB extends nn {
	constructor() {
		super(...arguments), (this.group = M.STRING('*', {objectMask: !0}));
	}
}
class DE {
	constructor(e) {
		(this.nodes = e),
			(this._remaining = new Set()),
			Oc.debugLoadProgress() && console.log(e),
			(this.totalCount = e.length),
			(this._processed = new Set()),
			Rs(e, this._remaining);
	}
	markNodeAsProcessed(e) {
		this._processed.add(e),
			this._remaining.delete(e),
			Oc.debugLoadProgress() &&
				console.log('markNodeAsProcessed', e.path(), {
					processed: Hi(this._processed, []).map((t) => t.path()),
					remaining: Hi(this._remaining, []).map((t) => t.path()),
				});
	}
	isNodeProcessed(e) {
		return this._processed.has(e);
	}
	processedCount() {
		return this._processed.size;
	}
}
function vB(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.nodesMask = M.STRING('*/image* */envMap*', {cook: !1, separatorBefore: !0, objectMask: !1})),
				(this.printNodes = M.BUTTON(null, {
					cook: !1,
					callback: (t) => {
						to.PARAM_CALLBACK_printResolve(t);
					},
				}));
		}
	};
}
class to {
	constructor(e) {
		this.node = e;
	}
	static async PARAM_CALLBACK_printResolve(e) {
		const t = await e.loadProgress.resolvedNodes();
		console.log(t);
		const i = t.map((s) => s.path()).sort();
		console.log(i);
	}
	async resolvedNodes() {
		const e = this.node.p.nodesMask;
		e.isDirty() && (await e.compute());
		const t = e.value,
			s = this.node.scene().nodesController.nodesFromMask(t || ''),
			r = await this._loadDisplayNodes(),
			o = [];
		return gr(s.concat(r), o), o;
	}
	async _loadDisplayNodes() {
		const e = this.node.scene(),
			i = le.camerasRegister
				.registeredNodeTypes()
				.map((c) => e.nodesByType(c))
				.flat(),
			s = this._displayNodes(),
			r = i.concat(s),
			o = await this.cameraCreatorNode();
		o && r.push(o);
		const a = [];
		return gr(r, a), a;
	}
	_displayNodes() {
		const e = this._objectNodesWithDisplayNodeController(),
			t = [];
		return (
			Jr(
				e.map((i) => i.displayNodeController.firstNonBypassedDisplayNode()),
				t
			),
			t
		);
	}
	_objectNodesWithDisplayNodeController() {
		return this.node
			.scene()
			.root()
			.children()
			.filter((i) => i.displayNodeController != null)
			.filter((i) => {
				var s, r;
				return (r = (s = i.flags) == null ? void 0 : s.display) == null ? void 0 : r.active();
			});
	}
	cameraCreatorNode() {
		return this.node.mainCameraController.cameraCreatorNode();
	}
	_runCallback(e, t) {
		this._debug2('_runCallback', {progress: e, nodeTrigger: t}),
			this._onProgressUpdateCallback &&
				this._nodeGroups &&
				(this._debug2('_onProgressUpdateCallback', this._nodeGroups),
				this._onProgressUpdateCallback(e, {
					scene: this.node.scene(),
					triggerNode: void 0,
					groups: this._nodeGroups,
				}));
	}
	_updateProgressAndRunCallback(e) {
		if (!(this._onProgressUpdateCallback && this._nodeGroups)) return;
		const t = this._nodeGroups.toCook.totalCount + this._nodeGroups.sopGroupToUpdate.totalCount,
			s = (this._nodeGroups.toCook.processedCount() + this._nodeGroups.sopGroupToUpdate.processedCount()) / t;
		this._runCallback(s, e);
	}
	async watchNodesProgress(e) {
		this._onProgressUpdateCallback = e;
		const i = (await this.resolvedNodes()).filter((o) => o.isDirty());
		this._debug({nodesToCook: i});
		const s = this._objectNodesWithDisplayNodeController()
			.filter((o) => {
				var a;
				const c = o.displayNodeController.displayNode();
				return c != null && !((a = c.flags.bypass) != null && a.active());
			})
			.filter((o) => o.isDirty());
		this._debug({nodesToUpdateSopGroup: s}), (this._nodeGroups = {toCook: new DE(i), sopGroupToUpdate: new DE(s)});
		const r = this._nodeGroups.toCook.totalCount + this._nodeGroups.sopGroupToUpdate.totalCount;
		if ((this._debug({totalNodesCount: r}), r == 0)) {
			this._runCallback(1);
			return;
		}
		this._watchNodesWithSopGroup(), this._watchNodesToCook();
	}
	async _watchNodesToCook() {
		var e;
		const t = (e = this._nodeGroups) == null ? void 0 : e.toCook;
		if (!t) return;
		const i = 'RootLoadProgressController',
			s = (r) => {
				t.isNodeProcessed(r) ||
					(t.markNodeAsProcessed(r),
					this._updateProgressAndRunCallback(r),
					r.cookController.deregisterOnCookEnd(i));
			};
		for (const r of t.nodes)
			r.cookController.registerOnCookEnd(i, () => {
				this._debug2('nodeToCook - completed', r.path()), s(r);
			}),
				this._debug2('nodeToCook - start', r.path()),
				r.compute();
	}
	_watchNodesWithSopGroup() {
		var e;
		const t = (e = this._nodeGroups) == null ? void 0 : e.sopGroupToUpdate;
		if (!t) return;
		const i = 'RootLoadProgressController',
			s = (r) => {
				t.isNodeProcessed(r) ||
					(t.markNodeAsProcessed(r),
					this._updateProgressAndRunCallback(r),
					r.childrenDisplayController.deregisterOnSopGroupUpdated(i));
			};
		for (const r of t.nodes) {
			const o = r.childrenDisplayController;
			this._debug2('nodeWithSopGroup - watch', r.path()),
				o.registerOnSopGroupUpdated(i, () => {
					this._debug2('nodeWithSopGroup - completed', r.path()), s(r);
				});
		}
	}
	static debugActive() {
		return Oc.debugLoadProgress();
	}
	static debug(e) {
		this.debugActive() && console.log(e);
	}
	static debug2(e, t) {
		this.debugActive() && console.log(e, t);
	}
	_debug(e) {
		to.debug(e);
	}
	_debug2(e, t) {
		to.debug2(e, t);
	}
}
var Ur = ((n) => (
	(n.MAX_FRAME_UPDATED = 'scene_maxFrameUpdated'),
	(n.REALTIME_STATUS_UPDATED = 'scene_realtime_status_updated'),
	(n.FRAME_UPDATED = 'scene_frame_updated'),
	(n.PLAY_STATE_UPDATED = 'scene_play_state_updated'),
	n
))(Ur || {});
class Vh extends Event {
	constructor(e) {
		super(e);
	}
	get type() {
		return super.type;
	}
}
const EB = {event: new Vh(rr.SCENE_CREATED)},
	CB = {event: new Vh(rr.SCENE_READY)},
	yB = {event: new Vh(rr.SCENE_PLAY)},
	bB = {event: new Vh(rr.SCENE_PAUSE)};
class SB {
	constructor() {
		this._observersByEventType = new Map();
	}
	dispatch(e) {
		const t = e.event;
		if (!t) return;
		const i = this._observersByEventType.get(t.type);
		i &&
			i.forEach((s) => {
				s.processEvent(e);
			});
	}
	removeObserverFromAllEventTypes(e) {
		this._observersByEventType.forEach((t, i) => {
			t.delete(e);
		});
	}
	addObserver(e, t) {
		Ai(this._observersByEventType, t, e);
	}
}
const LE = 60,
	AB = 60,
	UE = 0.1,
	xB = {updateClockDelta: !1},
	Zo = class {
		constructor(n) {
			(this.scene = n),
				(this._frame = 0),
				(this._timeUniform = _i(0)),
				(this._timeDeltaUniform = _i(0)),
				(this._realtimeState = !0),
				(this._maxFrame = 600),
				(this._maxFrameLocked = !1),
				(this._playing = !1),
				(this._clock = new wN()),
				(this._playAllowedWithoutAllNodesCooked = !0),
				(this._onBeforeTickCallbacks = []),
				(this._onAfterTickCallbacks = []),
				(this._onPlayingStateChangeCallbacks = []),
				(this._graphNode = new ai(n, 'timeController'));
		}
		get graphNode() {
			return this._graphNode;
		}
		dispose() {
			this._graphNode.dispose();
		}
		updateClockDelta() {
			const n = this._clock.getDelta(),
				e = n > UE ? UE : n;
			return this.setDelta(e);
		}
		delta() {
			return this._timeDeltaUniform.value;
		}
		setDelta(n) {
			return (this._timeDeltaUniform.value = n);
		}
		frame() {
			return this._frame;
		}
		timeUniform() {
			return this._timeUniform;
		}
		timeDeltaUniform() {
			return this._timeDeltaUniform;
		}
		time() {
			return this._timeUniform.value;
		}
		maxFrame() {
			return this._maxFrame;
		}
		maxFrameLocked() {
			return this._maxFrameLocked;
		}
		realtimeState() {
			return this._realtimeState;
		}
		setMaxFrame(n) {
			(this._maxFrame = Math.floor(n)),
				this.scene.dispatchController.dispatch(this._graphNode, Ur.MAX_FRAME_UPDATED);
		}
		setMaxFrameLocked(n) {
			(this._maxFrameLocked = n), this.scene.dispatchController.dispatch(this._graphNode, Ur.MAX_FRAME_UPDATED);
		}
		setRealtimeState(n) {
			(this._realtimeState = n),
				this.scene.dispatchController.dispatch(this._graphNode, Ur.REALTIME_STATUS_UPDATED);
		}
		setTime(n, e = !0) {
			if (n == this._timeUniform.value) return;
			(this._timeUniform.value = n), this.scene.cooker.block();
			const t = this.delta();
			for (const i of this._onBeforeTickCallbacks) i(t);
			if ((this._playing == !0 && n > 0 && this.scene.actorsManager.tick(), e)) {
				const i = Math.floor(this._timeUniform.value * LE),
					s = this._ensureFrameWithinBounds(i);
				i != s ? this.setFrame(s, !0) : (this._frame = i);
			}
			this.scene.dispatchController.dispatch(this._graphNode, Ur.FRAME_UPDATED),
				this.graphNode.setSuccessorsDirty(),
				this.scene.cooker.unblock();
			for (const i of this._onAfterTickCallbacks) i(t);
		}
		setFrame(n, e = !0) {
			n != this._frame &&
				((n = this._ensureFrameWithinBounds(n)),
				n != this._frame &&
					((this._frame = n),
					this._frame == Zo.START_FRAME && this.scene.actorsManager.runOnEventSceneReset(),
					e && this.setTime(this._frame / LE, !1)));
		}
		setFrameToStart() {
			this.setFrame(Zo.START_FRAME, !0);
		}
		incrementTimeIfPlaying(n) {
			this._playing && (this.scene.root().areChildrenCooking() || this.incrementTime(n));
		}
		incrementTime(n) {
			if (((n == null ? void 0 : n.updateClockDelta) != !1 && this.updateClockDelta(), this._realtimeState)) {
				const e = this._timeUniform.value + this.delta();
				this.setTime(e, !1), this.setFrame(this._frame + 1, !1);
			} else this.setFrame(this.frame() + 1);
		}
		_ensureFrameWithinBounds(n) {
			if (this._playing) {
				if (this._maxFrameLocked && n > this._maxFrame) return Zo.START_FRAME;
			} else {
				if (this._maxFrameLocked && n > this._maxFrame) return this._maxFrame;
				if (n < Zo.START_FRAME) return Zo.START_FRAME;
			}
			return n;
		}
		playing() {
			return this._playing === !0;
		}
		pause() {
			if (this._playing != !1) {
				(this._playing = !1),
					this.scene.dispatchController.dispatch(this._graphNode, Ur.PLAY_STATE_UPDATED),
					this.scene.actorsManager.runOnEventScenePause(),
					this.scene.eventsDispatcher.sceneEventsController.dispatch(bB);
				for (const n of this._onPlayingStateChangeCallbacks) n();
			}
		}
		play() {
			if (!this._playAllowedWithoutAllNodesCooked && !this.scene.cookController.allNodesHaveCookedAtLeastOnce()) {
				le.warn('play not allowed, some nodes have not completed cooking');
				return;
			}
			if (this._playing != !0) {
				(this._playing = !0),
					this.scene.actorsManager.runOnEventScenePlay(),
					this.scene.dispatchController.dispatch(this._graphNode, Ur.PLAY_STATE_UPDATED),
					this.scene.eventsDispatcher.sceneEventsController.dispatch(yB);
				for (const n of this._onPlayingStateChangeCallbacks) n();
			}
		}
		togglePlayPause() {
			this.playing() ? this.pause() : this.play();
		}
		forbidPlayUntilAllNodesCooked() {
			this._playAllowedWithoutAllNodesCooked = !1;
		}
		registerOnBeforeTick(n, e) {
			this._registerCallback(n, e, this.registeredBeforeTickCallbacks());
		}
		unRegisterOnBeforeTick(n) {
			this._unregisterCallback(n, this._onBeforeTickCallbacksMap);
		}
		registeredBeforeTickCallbacks() {
			return (this._onBeforeTickCallbacksMap = this._onBeforeTickCallbacksMap || new Map());
		}
		hasBeforeTickCallback(n) {
			var e;
			return ((e = this._onBeforeTickCallbacksMap) == null ? void 0 : e.has(n)) || !1;
		}
		registerOnAfterTick(n, e) {
			this._registerCallback(n, e, this.registeredAfterTickCallbacks());
		}
		unRegisterOnAfterTick(n) {
			this._unregisterCallback(n, this._onAfterTickCallbacksMap);
		}
		registeredAfterTickCallbacks() {
			return (this._onAfterTickCallbacksMap = this._onAfterTickCallbacksMap || new Map());
		}
		hasAfterTickCallback(n) {
			var e;
			return ((e = this._onAfterTickCallbacksMap) == null ? void 0 : e.has(n)) || !1;
		}
		onPlayingStateChange(n) {
			(this._onPlayingStateChangeCallbacksMap = this._onPlayingStateChangeCallbacksMap || new Set()),
				this._onPlayingStateChangeCallbacksMap.add(n),
				this._updateOnPlayingStateChangeCallbacks();
		}
		removeOnPlayingStateChange(n) {
			this._onPlayingStateChangeCallbacksMap &&
				(this._onPlayingStateChangeCallbacksMap.delete(n), this._updateOnPlayingStateChangeCallbacks());
		}
		_updateOnPlayingStateChangeCallbacks() {
			(this._onPlayingStateChangeCallbacks = []),
				this._onPlayingStateChangeCallbacksMap &&
					this._onPlayingStateChangeCallbacksMap.forEach((n) => {
						this._onPlayingStateChangeCallbacks.push(n);
					});
		}
		_registerCallback(n, e, t) {
			if (t.has(n)) {
				console.warn(`callback ${n} already registered`);
				return;
			}
			t.set(n, e), this._updateCallbacks();
		}
		_unregisterCallback(n, e) {
			e && (e.delete(n), this._updateCallbacks());
		}
		_updateCallbacks() {
			var n, e;
			(this._onBeforeTickCallbacks.length = 0),
				(n = this._onBeforeTickCallbacksMap) == null ||
					n.forEach((t) => {
						this._onBeforeTickCallbacks.push(t);
					}),
				(this._onAfterTickCallbacks.length = 0),
				(e = this._onAfterTickCallbacksMap) == null ||
					e.forEach((t) => {
						this._onAfterTickCallbacks.push(t);
					});
		}
	};
let Gh = Zo;
Gh.START_FRAME = 0;
var mn = ((n) => (
	(n.CREATED = 'node_created'),
	(n.DELETED = 'node_deleted'),
	(n.NAME_UPDATED = 'node_name_update'),
	(n.OVERRIDE_CLONABLE_STATE_UPDATE = 'node_override_clonable_state_update'),
	(n.NAMED_OUTPUTS_UPDATED = 'node_named_outputs_updated'),
	(n.NAMED_INPUTS_UPDATED = 'node_named_inputs_updated'),
	(n.INPUTS_UPDATED = 'node_inputs_updated'),
	(n.PARAMS_UPDATED = 'node_params_updated'),
	(n.UI_DATA_POSITION_UPDATED = 'node_ui_data_position_updated'),
	(n.UI_DATA_COMMENT_UPDATED = 'node_ui_data_comment_updated'),
	(n.ERROR_UPDATED = 'node_error_updated'),
	(n.FLAG_BYPASS_UPDATED = 'bypass_flag_updated'),
	(n.FLAG_DISPLAY_UPDATED = 'display_flag_updated'),
	(n.FLAG_OPTIMIZE_UPDATED = 'optimize_flag_updated'),
	(n.SELECTION_UPDATED = 'selection_updated'),
	(n.POLY_NODE_LOCK_STATE_UPDATED = 'lock_state_updated'),
	n
))(mn || {});
const MB = /[, ]/,
	vA = /\d+$/,
	TB = /^0+/,
	RB = /,| /,
	wB = '0',
	OB = ' ',
	FE = '-',
	PB = /^-?\d+\.?\d*$/;
function NB(n) {
	return n == 'true' || n == 'false';
}
function IB(n) {
	return n == 'true';
}
function DB(n) {
	return PB.test(n);
}
function LB(n) {
	return (n = n.replace(/[^A-Za-z0-9]/g, '_')), (n = n.replace(/^[0-9]/, '_')), n;
}
let jd = [];
function EA(n, e) {
	const t = n.split(MB);
	jd.length = 0;
	for (const i of t) {
		const s = i.trim();
		s.length > 0 && jd.push(s);
	}
	return gr(jd, e), e;
}
function CA(n) {
	const e = n.match(vA);
	return e ? parseInt(e[0]) : 0;
}
function UB(n) {
	const e = n.match(vA);
	if (e) {
		let t = e[0],
			i = '';
		const s = t.match(TB);
		s && (i = s[0]);
		const r = parseInt(t);
		return (
			r == 0 && i.length > 0 && i[i.length - 1] == wB && (i = i.slice(0, -1)),
			`${n.substring(0, n.length - e[0].length)}${i}${r + 1}`
		);
	} else return `${n}1`;
}
function FB(n) {
	return n[n.length - 1] !== 's' ? `${n}s` : n;
}
function BB(n) {
	const e = n.replace(/_/g, ' ').split(' ');
	let t = '';
	for (let i = 0; i < e.length; i++) {
		let s = e[i].toLowerCase();
		i > 0 && (s = Z_(s)), (t += s);
	}
	return t;
}
function Z_(n) {
	return n.length == 0 ? n : n[0].toUpperCase() + n.substring(1);
}
function kB(n) {
	return n.split(/\s|_/g).map(Z_).join(' ');
}
function VB(n, e = 2) {
	e = Math.max(e, 0);
	const t = `${n}`.split('.');
	if (e <= 0) return t[0];
	let i = t[1];
	if (i !== void 0) return i.length > e && (i = i.substring(0, e)), (i = i.padEnd(e, '0')), `${t[0]}.${i}`;
	{
		const s = `${n}.`,
			r = s.length + e;
		return s.padEnd(r, '0');
	}
}
function ln(n) {
	const e = `${n}`;
	return e.indexOf('.') >= 0 ? e : `${e}.0`;
}
function bf(n) {
	const e = `${n}`;
	return e.indexOf('.') >= 0 ? e.split('.')[0] : e;
}
function Ds(n, e) {
	if (e === '*' || n == e) return !0;
	const t = e.split(OB),
		i = [];
	for (const s of t) s.startsWith('^') && i.push(s.substring(1));
	for (const s of i) if (Ds(n, s)) return !1;
	if (t.length > 1) {
		for (const s of t) if (Ds(n, s)) return !0;
		return !1;
	}
	(e = e.split('*').join('.*')), (e = `^${e}$`);
	try {
		return new RegExp(e).test(n);
	} catch {
		return !1;
	}
}
function GB(n, e) {
	for (const t of e) if (Ds(n, t)) return !0;
	return !1;
}
let Xd = [],
	BE = [];
function yA(n, e) {
	e.length = 0;
	const t = n.split(RB);
	if (t.length > 1) {
		Xd.length = 0;
		for (const i of t) yA(i, BE), Lh(BE, Xd);
		return gr(Xd, e), e.sort((i, s) => i - s);
	} else {
		const i = t[0];
		if (i)
			if (i.indexOf(FE) > 0) {
				const s = i.split(FE),
					r = s[0],
					o = s[1],
					a = parseInt(r),
					c = parseInt(o);
				if (Ou(a) && Ou(c)) return GS(a, c + 1, 1, e);
			} else {
				const s = parseInt(i);
				if (Ou(s)) return e.push(s), e;
			}
	}
	return e;
}
function zB(n) {
	return n.replace(/(\r\n|\n|\r)/gm, '\\n');
}
class _t {}
_t.isBoolean = NB;
_t.toBoolean = IB;
_t.isNumber = DB;
_t.tailDigits = CA;
_t.increment = UB;
_t.pluralize = FB;
_t.camelCase = BB;
_t.upperFirst = Z_;
_t.titleize = kB;
_t.precision = VB;
_t.ensureFloat = ln;
_t.ensureInteger = bf;
_t.matchMask = Ds;
_t.matchesOneMask = GB;
_t.attribNames = EA;
_t.indices = yA;
_t.escapeLineBreaks = zB;
_t.sanitizeName = LB;
function zh(n) {
	return (n = n.replace(/'/g, "'")), (n = _t.escapeLineBreaks(n)), n;
}
class bA {
	constructor(e, t) {
		(this._node = e), (this.dispatcher = t);
	}
	async data(e) {
		var t, i, s, r, o, a;
		this._isRoot() || this._node.scene().nodesController.registerNodeContextSignature(this._node),
			(this._data = {type: this._node.type()}),
			this._node.polyNodeController && (this._data.polyNode = {locked: this._node.polyNodeController.locked()});
		const c = await this.nodes_data(e);
		Object.keys(c).length > 0 && (this._data.nodes = c);
		const l = this.params_data();
		if ((Object.keys(l).length > 0 && (this._data.params = l), !this._isRoot())) {
			this._node.io.inputs.maxInputsCountOverriden() &&
				(this._data.maxInputsCount = this._node.io.inputs.maxInputsCount());
			const h = this.inputs_data();
			h.length > 0 && (this._data.inputs = h);
			const d = this.connection_points_data();
			d && (this._data.connection_points = d);
		}
		if (this._node.flags) {
			const h = {};
			(this._node.flags.hasBypass() || this._node.flags.hasDisplay() || this._node.flags.hasOptimize()) &&
				(this._node.flags.hasBypass() &&
					(t = this._node.flags.bypass) != null &&
					t.active() &&
					(h.bypass = this._node.flags.bypass.active()),
				this._node.flags.hasDisplay() &&
					(((i = this._node.flags.display) != null && i.active()) ||
						!((s = this._node.parent()) != null && s.displayNodeController)) &&
					(h.display = (r = this._node.flags.display) == null ? void 0 : r.active()),
				this._node.flags.hasOptimize() &&
					(o = this._node.flags.optimize) != null &&
					o.active() &&
					(h.optimize = (a = this._node.flags.optimize) == null ? void 0 : a.active())),
				Object.keys(h).length > 0 && (this._data.flags = h);
		}
		if (this._node.io.inputs.overrideClonedStateAllowed()) {
			const h = this._node.io.inputs.clonedStateOverriden();
			h && (this._data.cloned_state_overriden = h);
		}
		if ((e.withPersistedConfig == null ? !0 : e.withPersistedConfig) == !0) {
			const h = this._node.persisted_config;
			if (h) {
				const d = e.showPolyNodesData ? await h.toData() : await h.toDataWithoutShaders();
				d && (this._data.persisted_config = d);
			}
		}
		return this.add_custom(), this._data;
	}
	uiData(e) {
		const t = this.ui_data_without_children(),
			i = this._node.children();
		if (i.length > 0) {
			const s = {};
			for (let r of i) {
				const o = this.dispatcher.dispatchNode(r);
				s[r.name()] = o.uiData(e);
			}
			t.nodes = s;
		}
		return t;
	}
	ui_data_without_children() {
		var e;
		const t = {};
		if (!this._isRoot()) {
			const i = this._node.uiData;
			t.pos = i.position().toArray();
			const s = i.comment();
			if ((s && (t.comment = zh(s)), this._node.childrenAllowed())) {
				const r = (e = this._node.childrenController) == null ? void 0 : e.selection;
				if (r && this._node.children().length > 0) {
					const o = [],
						a = {},
						c = [];
					r.nodes(c);
					for (const u of c) a[u.graphNodeId()] = !0;
					for (const u of this._node.children()) u.graphNodeId() in a && o.push(u);
					const l = o.map((u) => u.name());
					l.length > 0 && (t.selection = l);
				}
			}
		}
		return t;
	}
	async persistedConfigData(e, t, i) {
		const s = this._node.children();
		if (s.length > 0) for (let r of s) await this.dispatcher.dispatchNode(r).persistedConfigData(e, t, i);
		if (this._node.persisted_config) {
			const r = await this._node.persisted_config.toData();
			if (r) {
				if (r.shaders) {
					e[this._node.path()] = r.shaders;
					return;
				}
				if (r.functionBody != null)
					if (qe(r.functionBody)) {
						t[this._node.path()] = r.functionBody;
						return;
					} else {
						const o = {},
							a = Object.keys(r.functionBody);
						for (let c of a) o[c] = r.functionBody[c];
						t[this._node.path()] = o;
						return;
					}
				console.warn('persisted config data not handled', r);
			}
		}
	}
	_isRoot() {
		return this._node.parent() === null && this._node.graphNodeId() == this._node.root().graphNodeId();
	}
	inputs_data() {
		const e = [];
		return (
			this._node.io.inputs.inputs().forEach((t, i) => {
				var s, r;
				if (t) {
					const o = this._node.io.connections.inputConnection(i);
					if (this._node.io.inputs.hasNamedInputs()) {
						const a = this._node.io.inputs.namedInputConnectionPoints(),
							c = t.io.outputs.namedOutputConnectionPoints();
						if (a && c) {
							const l = (s = a[i]) == null ? void 0 : s.name(),
								u = o.outputIndex(),
								h = (r = c[u]) == null ? void 0 : r.name();
							h && (e[i] = {index: i, inputName: l, node: t.name(), output: h});
						}
					} else e[i] = t.name();
				}
			}),
			e
		);
	}
	connection_points_data() {
		if (
			this._node.io.has_connection_points_controller &&
			this._node.io.connection_points.initialized() &&
			(this._node.io.inputs.hasNamedInputs() || this._node.io.outputs.hasNamedOutputs())
		) {
			const e = {};
			if (this._node.io.inputs.hasNamedInputs()) {
				e.in = [];
				const t = this._node.io.inputs.namedInputConnectionPoints();
				if (t) for (let i of t) i && e.in.push(i.toJSON());
			}
			if (this._node.io.outputs.hasNamedOutputs()) {
				e.out = [];
				const t = this._node.io.outputs.namedOutputConnectionPoints();
				if (t) for (let i of t) i && e.out.push(i.toJSON());
			}
			return e;
		}
	}
	params_data() {
		const e = {};
		for (let t of this._node.params.names) {
			const i = this._node.params.get(t);
			if (i && !i.parentParam()) {
				const s = this.dispatcher.dispatchParam(i);
				if (s.required()) {
					const r = s.data();
					e[i.name()] = r;
				}
			}
		}
		return e;
	}
	async nodes_data(e) {
		const t = {};
		for (let i of this._node.children()) {
			const s = this.dispatcher.dispatchNode(i);
			t[i.name()] = await s.data(e);
		}
		return t;
	}
	add_custom() {}
}
class Ia {
	constructor(e) {
		(this._param = e), (this._complex_data = {});
	}
	required() {
		const e = this._param.options.isSpare() && !this._param.parentParam(),
			t = !this._param.isDefault();
		return e || t || this._param.options.hasOptionsOverridden();
	}
	data() {
		if (this._param.parentParam())
			throw (console.warn('no component should be saved'), 'no component should be saved');
		return this._require_data_complex() ? this._data_complex() : this._data_simple();
	}
	_data_simple() {
		return this._param.rawInputSerialized();
	}
	_data_complex() {
		if (
			((this._complex_data = {}),
			this._param.options.isSpare() &&
				!this._param.parentParam() &&
				((this._complex_data.type = this._param.type()),
				(this._complex_data.default_value = this._param.defaultValueSerialized()),
				(this._complex_data.options = this._param.options.current())),
			this._param.isDefault() || (this._complex_data.raw_input = this._param.rawInputSerialized()),
			this._param.options.hasOptionsOverridden())
		) {
			const e = {},
				t = this._param.options.overriddenOptions();
			for (let i of Object.keys(t)) {
				const s = t[i];
				qe(s) || je(s) ? (e[i] = s) : (e[i] = JSON.stringify(s));
			}
			this._complex_data.overriden_options = e;
		}
		return this._complex_data;
	}
	_require_data_complex() {
		return !!(this._param.options.isSpare() || this._param.options.hasOptionsOverridden());
	}
	add_main() {}
}
class HB extends Ia {
	add_main() {
		if (this._require_data_complex()) this._complex_data.raw_input = this._param.rawInputSerialized();
		else return this._param.rawInputSerialized();
	}
}
class WB extends Ia {
	add_main() {
		let e = this._param.rawInput();
		if (((e = zh(e)), this._require_data_complex())) this._complex_data.raw_input = e;
		else return e;
	}
}
class jB extends Ia {
	add_main() {
		let e = this._param.rawInput();
		if (((e = zh(e)), this._require_data_complex())) this._complex_data.raw_input = e;
		else return e;
	}
}
class XB extends Ia {
	add_main() {
		let e = this._param.rawInput();
		if (((e = zh(e)), this._require_data_complex())) this._complex_data.raw_input = e;
		else return e;
	}
}
class $B extends Ia {
	add_main() {
		if (this._require_data_complex()) this._complex_data.raw_input = this._param.rawInputSerialized();
		else return this._param.rawInputSerialized();
	}
}
class qB {
	add(e, t, i) {
		if (typeof arguments[0] != 'string') for (let s in arguments[0]) this.add(s, arguments[0][s], arguments[1]);
		else
			(Array.isArray(e) ? e : [e]).forEach(function (s) {
				(this[s] = this[s] || []), t && this[s][i ? 'unshift' : 'push'](t);
			}, this);
	}
	run(e, t) {
		(this[e] = this[e] || []),
			this[e].forEach(function (i) {
				i.call(t && t.context ? t.context : t, t);
			});
	}
}
class YB {
	constructor(e) {
		(this.jsep = e), (this.registered = {});
	}
	register(...e) {
		e.forEach((t) => {
			if (typeof t != 'object' || !t.name || !t.init) throw new Error('Invalid JSEP plugin format');
			this.registered[t.name] || (t.init(this.jsep), (this.registered[t.name] = t));
		});
	}
}
class ne {
	static get version() {
		return '1.0.2';
	}
	static toString() {
		return 'JavaScript Expression Parser (JSEP) v' + ne.version;
	}
	static addUnaryOp(e) {
		return (ne.max_unop_len = Math.max(e.length, ne.max_unop_len)), (ne.unary_ops[e] = 1), ne;
	}
	static addBinaryOp(e, t) {
		return (ne.max_binop_len = Math.max(e.length, ne.max_binop_len)), (ne.binary_ops[e] = t), ne;
	}
	static addIdentifierChar(e) {
		return ne.additional_identifier_chars.add(e), ne;
	}
	static addLiteral(e, t) {
		return (ne.literals[e] = t), ne;
	}
	static removeUnaryOp(e) {
		return (
			delete ne.unary_ops[e],
			e.length === ne.max_unop_len && (ne.max_unop_len = ne.getMaxKeyLen(ne.unary_ops)),
			ne
		);
	}
	static removeAllUnaryOps() {
		return (ne.unary_ops = {}), (ne.max_unop_len = 0), ne;
	}
	static removeIdentifierChar(e) {
		return ne.additional_identifier_chars.delete(e), ne;
	}
	static removeBinaryOp(e) {
		return (
			delete ne.binary_ops[e],
			e.length === ne.max_binop_len && (ne.max_binop_len = ne.getMaxKeyLen(ne.binary_ops)),
			ne
		);
	}
	static removeAllBinaryOps() {
		return (ne.binary_ops = {}), (ne.max_binop_len = 0), ne;
	}
	static removeLiteral(e) {
		return delete ne.literals[e], ne;
	}
	static removeAllLiterals() {
		return (ne.literals = {}), ne;
	}
	get char() {
		return this.expr.charAt(this.index);
	}
	get code() {
		return this.expr.charCodeAt(this.index);
	}
	constructor(e) {
		(this.expr = e), (this.index = 0);
	}
	static parse(e) {
		return new ne(e).parse();
	}
	static getMaxKeyLen(e) {
		return Math.max(0, ...Object.keys(e).map((t) => t.length));
	}
	static isDecimalDigit(e) {
		return e >= 48 && e <= 57;
	}
	static binaryPrecedence(e) {
		return ne.binary_ops[e] || 0;
	}
	static isIdentifierStart(e) {
		return (
			(e >= 65 && e <= 90) ||
			(e >= 97 && e <= 122) ||
			(e >= 128 && !ne.binary_ops[String.fromCharCode(e)]) ||
			ne.additional_identifier_chars.has(String.fromCharCode(e))
		);
	}
	static isIdentifierPart(e) {
		return ne.isIdentifierStart(e) || ne.isDecimalDigit(e);
	}
	throwError(e) {
		const t = new Error(e + ' at character ' + this.index);
		throw ((t.index = this.index), (t.description = e), t);
	}
	runHook(e, t) {
		if (ne.hooks[e]) {
			const i = {context: this, node: t};
			return ne.hooks.run(e, i), i.node;
		}
		return t;
	}
	searchHook(e) {
		if (ne.hooks[e]) {
			const t = {context: this};
			return (
				ne.hooks[e].find(function (i) {
					return i.call(t.context, t), t.node;
				}),
				t.node
			);
		}
	}
	gobbleSpaces() {
		let e = this.code;
		for (; e === ne.SPACE_CODE || e === ne.TAB_CODE || e === ne.LF_CODE || e === ne.CR_CODE; )
			e = this.expr.charCodeAt(++this.index);
		this.runHook('gobble-spaces');
	}
	parse() {
		this.runHook('before-all');
		const e = this.gobbleExpressions(),
			t = e.length === 1 ? e[0] : {type: ne.COMPOUND, body: e};
		return this.runHook('after-all', t);
	}
	gobbleExpressions(e) {
		let t = [],
			i,
			s;
		for (; this.index < this.expr.length; )
			if (((i = this.code), i === ne.SEMCOL_CODE || i === ne.COMMA_CODE)) this.index++;
			else if ((s = this.gobbleExpression())) t.push(s);
			else if (this.index < this.expr.length) {
				if (i === e) break;
				this.throwError('Unexpected "' + this.char + '"');
			}
		return t;
	}
	gobbleExpression() {
		const e = this.searchHook('gobble-expression') || this.gobbleBinaryExpression();
		return this.gobbleSpaces(), this.runHook('after-expression', e);
	}
	gobbleBinaryOp() {
		this.gobbleSpaces();
		let e = this.expr.substr(this.index, ne.max_binop_len),
			t = e.length;
		for (; t > 0; ) {
			if (
				ne.binary_ops.hasOwnProperty(e) &&
				(!ne.isIdentifierStart(this.code) ||
					(this.index + e.length < this.expr.length &&
						!ne.isIdentifierPart(this.expr.charCodeAt(this.index + e.length))))
			)
				return (this.index += t), e;
			e = e.substr(0, --t);
		}
		return !1;
	}
	gobbleBinaryExpression() {
		let e, t, i, s, r, o, a, c, l;
		if (((o = this.gobbleToken()), !o || ((t = this.gobbleBinaryOp()), !t))) return o;
		for (
			r = {value: t, prec: ne.binaryPrecedence(t)},
				a = this.gobbleToken(),
				a || this.throwError('Expected expression after ' + t),
				s = [o, r, a];
			(t = this.gobbleBinaryOp());

		) {
			if (((i = ne.binaryPrecedence(t)), i === 0)) {
				this.index -= t.length;
				break;
			}
			for (r = {value: t, prec: i}, l = t; s.length > 2 && i <= s[s.length - 2].prec; )
				(a = s.pop()),
					(t = s.pop().value),
					(o = s.pop()),
					(e = {type: ne.BINARY_EXP, operator: t, left: o, right: a}),
					s.push(e);
			(e = this.gobbleToken()), e || this.throwError('Expected expression after ' + l), s.push(r, e);
		}
		for (c = s.length - 1, e = s[c]; c > 1; )
			(e = {type: ne.BINARY_EXP, operator: s[c - 1].value, left: s[c - 2], right: e}), (c -= 2);
		return e;
	}
	gobbleToken() {
		let e, t, i, s;
		if ((this.gobbleSpaces(), (s = this.searchHook('gobble-token')), s)) return this.runHook('after-token', s);
		if (((e = this.code), ne.isDecimalDigit(e) || e === ne.PERIOD_CODE)) return this.gobbleNumericLiteral();
		if (e === ne.SQUOTE_CODE || e === ne.DQUOTE_CODE) s = this.gobbleStringLiteral();
		else if (e === ne.OBRACK_CODE) s = this.gobbleArray();
		else {
			for (t = this.expr.substr(this.index, ne.max_unop_len), i = t.length; i > 0; ) {
				if (
					ne.unary_ops.hasOwnProperty(t) &&
					(!ne.isIdentifierStart(this.code) ||
						(this.index + t.length < this.expr.length &&
							!ne.isIdentifierPart(this.expr.charCodeAt(this.index + t.length))))
				) {
					this.index += i;
					const r = this.gobbleToken();
					return (
						r || this.throwError('missing unaryOp argument'),
						this.runHook('after-token', {type: ne.UNARY_EXP, operator: t, argument: r, prefix: !0})
					);
				}
				t = t.substr(0, --i);
			}
			ne.isIdentifierStart(e)
				? ((s = this.gobbleIdentifier()),
				  ne.literals.hasOwnProperty(s.name)
						? (s = {type: ne.LITERAL, value: ne.literals[s.name], raw: s.name})
						: s.name === ne.this_str && (s = {type: ne.THIS_EXP}))
				: e === ne.OPAREN_CODE && (s = this.gobbleGroup());
		}
		return s
			? ((s = this.gobbleTokenProperty(s)), this.runHook('after-token', s))
			: this.runHook('after-token', !1);
	}
	gobbleTokenProperty(e) {
		this.gobbleSpaces();
		let t = this.code;
		for (; t === ne.PERIOD_CODE || t === ne.OBRACK_CODE || t === ne.OPAREN_CODE; )
			this.index++,
				t === ne.PERIOD_CODE
					? (this.gobbleSpaces(),
					  (e = {type: ne.MEMBER_EXP, computed: !1, object: e, property: this.gobbleIdentifier()}))
					: t === ne.OBRACK_CODE
					? ((e = {type: ne.MEMBER_EXP, computed: !0, object: e, property: this.gobbleExpression()}),
					  this.gobbleSpaces(),
					  (t = this.code),
					  t !== ne.CBRACK_CODE && this.throwError('Unclosed ['),
					  this.index++)
					: t === ne.OPAREN_CODE &&
					  (e = {type: ne.CALL_EXP, arguments: this.gobbleArguments(ne.CPAREN_CODE), callee: e}),
				this.gobbleSpaces(),
				(t = this.code);
		return e;
	}
	gobbleNumericLiteral() {
		let e = '',
			t,
			i;
		for (; ne.isDecimalDigit(this.code); ) e += this.expr.charAt(this.index++);
		if (this.code === ne.PERIOD_CODE)
			for (e += this.expr.charAt(this.index++); ne.isDecimalDigit(this.code); )
				e += this.expr.charAt(this.index++);
		if (((t = this.char), t === 'e' || t === 'E')) {
			for (
				e += this.expr.charAt(this.index++),
					t = this.char,
					(t === '+' || t === '-') && (e += this.expr.charAt(this.index++));
				ne.isDecimalDigit(this.code);

			)
				e += this.expr.charAt(this.index++);
			ne.isDecimalDigit(this.expr.charCodeAt(this.index - 1)) ||
				this.throwError('Expected exponent (' + e + this.char + ')');
		}
		return (
			(i = this.code),
			ne.isIdentifierStart(i)
				? this.throwError('Variable names cannot start with a number (' + e + this.char + ')')
				: (i === ne.PERIOD_CODE || (e.length === 1 && e.charCodeAt(0) === ne.PERIOD_CODE)) &&
				  this.throwError('Unexpected period'),
			{type: ne.LITERAL, value: parseFloat(e), raw: e}
		);
	}
	gobbleStringLiteral() {
		let e = '',
			t = this.expr.charAt(this.index++),
			i = !1;
		for (; this.index < this.expr.length; ) {
			let s = this.expr.charAt(this.index++);
			if (s === t) {
				i = !0;
				break;
			} else if (s === '\\')
				switch (((s = this.expr.charAt(this.index++)), s)) {
					case 'n':
						e += `
`;
						break;
					case 'r':
						e += '\r';
						break;
					case 't':
						e += '	';
						break;
					case 'b':
						e += '\b';
						break;
					case 'f':
						e += '\f';
						break;
					case 'v':
						e += '\v';
						break;
					default:
						e += s;
				}
			else e += s;
		}
		return i || this.throwError('Unclosed quote after "' + e + '"'), {type: ne.LITERAL, value: e, raw: t + e + t};
	}
	gobbleIdentifier() {
		let e = this.code,
			t = this.index;
		for (
			ne.isIdentifierStart(e) ? this.index++ : this.throwError('Unexpected ' + this.char);
			this.index < this.expr.length && ((e = this.code), ne.isIdentifierPart(e));

		)
			this.index++;
		return {type: ne.IDENTIFIER, name: this.expr.slice(t, this.index)};
	}
	gobbleArguments(e) {
		const t = [];
		let i = !1,
			s = 0;
		for (; this.index < this.expr.length; ) {
			this.gobbleSpaces();
			let r = this.code;
			if (r === e) {
				(i = !0),
					this.index++,
					e === ne.CPAREN_CODE &&
						s &&
						s >= t.length &&
						this.throwError('Unexpected token ' + String.fromCharCode(e));
				break;
			} else if (r === ne.COMMA_CODE) {
				if ((this.index++, s++, s !== t.length)) {
					if (e === ne.CPAREN_CODE) this.throwError('Unexpected token ,');
					else if (e === ne.CBRACK_CODE) for (let o = t.length; o < s; o++) t.push(null);
				}
			} else if (t.length !== s && s !== 0) this.throwError('Expected comma');
			else {
				const o = this.gobbleExpression();
				(!o || o.type === ne.COMPOUND) && this.throwError('Expected comma'), t.push(o);
			}
		}
		return i || this.throwError('Expected ' + String.fromCharCode(e)), t;
	}
	gobbleGroup() {
		this.index++;
		let e = this.gobbleExpressions(ne.CPAREN_CODE);
		if (this.code === ne.CPAREN_CODE)
			return this.index++, e.length === 1 ? e[0] : e.length ? {type: ne.SEQUENCE_EXP, expressions: e} : !1;
		this.throwError('Unclosed (');
	}
	gobbleArray() {
		return this.index++, {type: ne.ARRAY_EXP, elements: this.gobbleArguments(ne.CBRACK_CODE)};
	}
}
const KB = new qB();
Object.assign(ne, {
	hooks: KB,
	plugins: new YB(ne),
	COMPOUND: 'Compound',
	SEQUENCE_EXP: 'SequenceExpression',
	IDENTIFIER: 'Identifier',
	MEMBER_EXP: 'MemberExpression',
	LITERAL: 'Literal',
	THIS_EXP: 'ThisExpression',
	CALL_EXP: 'CallExpression',
	UNARY_EXP: 'UnaryExpression',
	BINARY_EXP: 'BinaryExpression',
	ARRAY_EXP: 'ArrayExpression',
	TAB_CODE: 9,
	LF_CODE: 10,
	CR_CODE: 13,
	SPACE_CODE: 32,
	PERIOD_CODE: 46,
	COMMA_CODE: 44,
	SQUOTE_CODE: 39,
	DQUOTE_CODE: 34,
	OPAREN_CODE: 40,
	CPAREN_CODE: 41,
	OBRACK_CODE: 91,
	CBRACK_CODE: 93,
	QUMARK_CODE: 63,
	SEMCOL_CODE: 59,
	COLON_CODE: 58,
	unary_ops: {'-': 1, '!': 1, '~': 1, '+': 1},
	binary_ops: {
		'||': 1,
		'&&': 2,
		'|': 3,
		'^': 4,
		'&': 5,
		'==': 6,
		'!=': 6,
		'===': 6,
		'!==': 6,
		'<': 7,
		'>': 7,
		'<=': 7,
		'>=': 7,
		'<<': 8,
		'>>': 8,
		'>>>': 8,
		'+': 9,
		'-': 9,
		'*': 10,
		'/': 10,
		'%': 10,
	},
	additional_identifier_chars: new Set(['$', '_']),
	literals: {true: !0, false: !1, null: null},
	this_str: 'this',
});
ne.max_unop_len = ne.getMaxKeyLen(ne.unary_ops);
ne.max_binop_len = ne.getMaxKeyLen(ne.binary_ops);
const vr = (n) => new ne(n).parse(),
	ZB = Object.getOwnPropertyNames(ne);
ZB.forEach((n) => {
	vr[n] === void 0 && n !== 'prototype' && (vr[n] = ne[n]);
});
vr.Jsep = ne;
const kE = 'ConditionalExpression';
var QB = {
	name: 'ternary',
	init(n) {
		n.hooks.add('after-expression', function (t) {
			if (t.node && this.code === n.QUMARK_CODE) {
				this.index++;
				const i = t.node,
					s = this.gobbleExpression();
				if ((s || this.throwError('Expected expression'), this.gobbleSpaces(), this.code === n.COLON_CODE)) {
					this.index++;
					const r = this.gobbleExpression();
					r || this.throwError('Expected expression'),
						(t.node = {type: kE, test: i, consequent: s, alternate: r});
				} else
					s.operator === ':'
						? (t.node = {type: kE, test: i, consequent: s.left, alternate: s.right})
						: this.throwError('Expected :');
			}
		});
	},
};
vr.plugins.register(QB);
vr.addUnaryOp('@');
let JB = 10;
vr.addBinaryOp('**', JB);
const ek = 'Identifier',
	tk = 'Literal',
	nk = 'CallExpression',
	ik = '`';
function SA(n) {
	return n != null ? (qe(n) ? n.split(ik) : []) : [];
}
class VE {
	constructor(e) {
		this._param = e;
	}
	node() {
		return this._node;
	}
	errorMessage() {
		return this._errorMessage;
	}
	parseExpression(e) {
		try {
			this.reset(), (this._node = vr(e));
		} catch (t) {
			const i = `could not parse the expression '${e}' (error: ${t})`;
			this._errorMessage = i;
		}
	}
	parseExpressionForStringParam(e) {
		try {
			this.reset();
			const t = SA(e),
				i = [];
			for (let s = 0; s < t.length; s++) {
				const r = t[s];
				let o;
				if (s % 2 == 1) o = vr(r);
				else {
					const a = r.replace(/\'/g, "\\'");
					(o = {type: tk, value: `'${a}'`, raw: `'${a}'`}),
						this._param.scene().missingExpressionReferencesController.registerToIgnore(o);
				}
				i.push(o);
			}
			this._node = {type: nk, arguments: i, callee: {type: ek, name: 'strConcat'}};
		} catch (t) {
			const i = `could not parse the expression '${e}' (error: ${t})`;
			this._errorMessage = i;
		}
	}
	reset() {
		(this._node = void 0), (this._errorMessage = void 0);
	}
}
class sk {
	static if(e) {
		const t = e[0],
			i = e[1],
			s = e[2];
		return `((${t}) ? (${i}) : (${s}))`;
	}
}
var Dn = ((n) => (
	(n.AMBIENT_LIGHT = 'AmbientLight'),
	(n.AREA_LIGHT = 'AreaLight'),
	(n.CUBE_CAMERA = 'CubeCamera'),
	(n.DIRECTIONAL_LIGHT = 'DirectionalLight'),
	(n.GROUP = 'Group'),
	(n.HEMISPHERE_LIGHT = 'HemisphereLight'),
	(n.INSTANCED_MESH = 'InstancedMesh'),
	(n.LIGHT_PROBE = 'LightProbe'),
	(n.LINE_SEGMENTS = 'LineSegments'),
	(n.LOD = 'LOD'),
	(n.MESH = 'Mesh'),
	(n.OBJECT3D = 'Object3D'),
	(n.ORTHOGRAPHIC_CAMERA = 'OrthographicCamera'),
	(n.PERSPECTIVE_CAMERA = 'PerspectiveCamera'),
	(n.PHYSICAL_CAMERA = 'PhysicalCamera'),
	(n.PHYSICAL_SPOT_LIGHT = 'PhysicalSpotLight'),
	(n.POINT_LIGHT = 'PointLight'),
	(n.POINTS = 'Points'),
	(n.SCENE = 'Scene'),
	(n.SHAPED_AREA_LIGHT = 'ShapedAreaLight'),
	(n.SPOT_LIGHT = 'SpotLight'),
	(n.UNKNOWN = 'Unknown'),
	(n.QUAD = 'Quad'),
	n
))(Dn || {});
const rk = {type: 'Unknown', checkFunc: (n) => 'Unknown', humanName: 'Unknown', ctor: null};
function ok() {
	const t = {objectTypeCheckFunctions: [], dataByObjectType: new Map()};
	function i(s, r, o, a) {
		xA(t, {type: s, checkFunc: r, ctor: o, humanName: a || s});
	}
	return (
		i('Object3D', (s) => (s.isObject3D ? 'Object3D' : void 0), kt, 'Object3D'),
		i('Mesh', (s) => (s.isMesh ? 'Mesh' : void 0), On, 'Mesh'),
		i('Group', (s) => (s.isGroup ? 'Group' : void 0), Vi, 'Group'),
		i('LineSegments', (s) => (s.isLineSegments ? 'LineSegments' : void 0), A_, 'LineSegments'),
		i('InstancedMesh', (s) => (s.isInstancedMesh ? 'InstancedMesh' : void 0), gN, 'InstancedMesh'),
		i('Points', (s) => (s.isPoints ? 'Points' : void 0), EN, 'Points'),
		i('Scene', (s) => (s.isScene ? 'Scene' : void 0), Th, 'Scene'),
		t
	);
}
const {objectTypeCheckFunctions: AA, dataByObjectType: th} = ok();
function xA(n, e) {
	n.objectTypeCheckFunctions.unshift(e.checkFunc), n.dataByObjectType.set(e.type, e);
}
function Hh(n) {
	xA({objectTypeCheckFunctions: AA, dataByObjectType: th}, n);
}
function ak(n) {
	return MA(n).type;
}
function MA(n) {
	for (const e of AA) {
		const t = e(n);
		if (t) return th.get(t);
	}
	return rk;
}
function GE(n) {
	const e = th.get(n);
	return e ? e.ctor : (console.warn(`no constructor found for type '${n}'`), th.get('Mesh'));
}
const ck = {
	MeshStandard: new ma({color: 16777215, side: Ln, metalness: 0.5, roughness: 0.9}),
	Mesh: new ma({color: 16777215, side: Ln, metalness: 0, roughness: 0.9}),
	Points: new wh({color: 16777215, size: 0.1, depthTest: !0}),
	LineSegments: new so({color: 16777215, linewidth: 1}),
};
var et = ((n) => (
		(n.POINT = 'point'),
		(n.VERTEX = 'vertex'),
		(n.PRIMITIVE = 'primitive'),
		(n.OBJECT = 'object'),
		(n.CORE_GROUP = 'coreGroup'),
		n
	))(et || {}),
	Bn = ((n) => ((n.NUMERIC = 'numeric'), (n.STRING = 'string'), n))(Bn || {}),
	Qo = ((n) => (
		(n[(n.FLOAT = 1)] = 'FLOAT'),
		(n[(n.VECTOR2 = 2)] = 'VECTOR2'),
		(n[(n.VECTOR3 = 3)] = 'VECTOR3'),
		(n[(n.VECTOR4 = 4)] = 'VECTOR4'),
		n
	))(Qo || {});
const Q_ = {x: 0, y: 1, z: 2, w: 3, r: 0, g: 1, b: 2},
	J_ = '.';
var St = ((n) => (
	(n.POINT_INDEX = 'ptnum'),
	(n.VERTEX_INDEX = 'vtxnum'),
	(n.PRIMITIVE_INDEX = 'primnum'),
	(n.OBJECT_INDEX = 'objnum'),
	(n.OBJECT_NAME = 'objname'),
	(n.COLOR = 'color'),
	(n.NORMAL = 'normal'),
	(n.POSITION = 'position'),
	(n.PSCALE = 'pscale'),
	(n.UP = 'up'),
	(n.UV = 'uv'),
	(n.SCALE = 'scale'),
	(n.TANGENT = 'tangent'),
	(n.ID = 'id'),
	n
))(St || {});
const lk = {P: 'position', N: 'normal', Cd: 'color'},
	kl = [],
	zE = [];
class Ut {
	static remapName(e) {
		return lk[e] || e;
	}
	static arrayToIndexedArrays(e) {
		const t = {};
		let i = 0;
		const s = [],
			r = [];
		let o = 0;
		for (; o < e.length; ) {
			const a = e[o],
				c = t[a];
			c != null ? s.push(c) : (r.push(a), s.push(i), (t[a] = i), (i += 1)), o++;
		}
		return {indices: s, values: r};
	}
	static defaultValue(e) {
		switch (e) {
			case 1:
				return 0;
			case 2:
				return new re(0, 0);
			case 3:
				return new w(0, 0, 0);
			default:
				throw `size ${e} not yet implemented`;
		}
	}
	static copy(e, t, i = !0) {
		const s = e == null ? void 0 : e.array,
			r = t == null ? void 0 : t.array;
		if (s && r) {
			const o = Math.min(s.length, r.length);
			for (let a = 0; a < o; a++) r[a] = s[a];
			i && (t.needsUpdate = !0);
		}
	}
	static attribSizeFromValue(e) {
		if (qe(e) || je(e)) return Qo.FLOAT;
		if (ft(e)) return e.length;
		switch (e.constructor) {
			case Ee:
				return Qo.VECTOR3;
			case re:
				return Qo.VECTOR2;
			case w:
				return Qo.VECTOR3;
			case Ke:
				return Qo.VECTOR4;
		}
		return null;
	}
	static attribNamesMatchingMask(e, t) {
		EA(e, zE), (kl.length = 0);
		for (const s of zE)
			for (const r of t)
				if (Ds(r, s)) kl.push(r);
				else {
					const o = Ut.remapName(s);
					r == o && kl.push(r);
				}
		return gr(kl, []);
	}
}
const TA = '$';
class RA {
	constructor(e) {
		(this.param = e), (this._set_error_from_error_bound = this._set_error_from_error.bind(this));
	}
	clearError() {
		this._errorMessage = void 0;
	}
	setError(e) {
		this._errorMessage = this._errorMessage || e;
	}
	_set_error_from_error(e) {
		qe(e) ? (this._errorMessage = e) : (this._errorMessage = e.message);
	}
	isErrored() {
		return this._errorMessage != null;
	}
	errorMessage() {
		return this._errorMessage;
	}
	reset() {
		this._errorMessage = void 0;
	}
	traverse_node(e) {
		const t = `traverse_${e.type}`;
		if (this[t]) return this[t](e);
		this.setError(`expression unknown node type: ${e.type}`);
	}
	traverse_BinaryExpression(e) {
		return `${this.traverse_node(e.left)} ${e.operator} ${this.traverse_node(e.right)}`;
	}
	traverse_MemberExpression(e) {
		return `${this.traverse_node(e.object)}.${this.traverse_node(e.property)}`;
	}
	traverse_ConditionalExpression(e) {
		return `(${this.traverse_node(e.test)}) ? (${this.traverse_node(e.consequent)}) : (${this.traverse_node(
			e.alternate
		)})`;
	}
	traverse_Compound(e) {
		const t = e.body;
		let i = [];
		for (let s = 0; s < t.length; s++) {
			const r = t[s];
			r.type == 'Identifier'
				? r.name[0] == TA
					? i.push('`${' + this.traverse_node(r) + '}`')
					: i.push(`'${r.name}'`)
				: i.push('`${' + this.traverse_node(r) + '}`');
		}
		return i.join(' + ');
	}
	traverse_Literal(e) {
		return `${e.raw}`;
	}
}
const Sf = 'geometry',
	Ya = 'entity',
	zr = 'entities',
	uk = `corePointClassFactory(${Sf})`,
	hk = 'ThreejsPoint',
	wA = 'getEntitiesAttribute',
	HE = 'getEntityAttributeValue',
	OA = 'getEntityAttributeValueFunc';
class Qi {
	constructor() {}
	reset() {
		this._attributeNames && this._attributeNames.clear();
	}
	assignAttributesLines() {
		if (this._attributeNames) {
			const e = [];
			for (const t of this._attributeNames) e.push(Qi.assignAttributeLine(t));
			return e.join(`;
`);
		} else return '';
	}
	assignArraysLines() {
		if (this._attributeNames) {
			const e = [];
			if (this._attributeNames.size > 0) {
				const t = `const ${Sf} = entities[0].object();`;
				e.push(t);
			}
			for (const t of this._attributeNames) e.push(Qi.assignItemSizeLine(t)), e.push(Qi.assignArrayLine(t));
			return e.join(`;
`);
		} else return '';
	}
	attributePresenceCheckLine() {
		if (this._attributeNames) {
			const e = [];
			for (const t of this._attributeNames) {
				const i = Qi._varAttribute(t);
				e.push(i);
			}
			if (e.length > 0) return e.join(' && ');
		}
		return 'true';
	}
	missingAttributesLine() {
		if (this._attributeNames) {
			let e = ['(()=>{', 'const missingAttributes = [];'];
			for (const t of this._attributeNames) {
				const i = Qi._varAttribute(t);
				e.push(`if( !${i} ) {	missingAttributes.push('${t}'); }`);
			}
			return e.push('return missingAttributes;', '})'), e.join('');
		}
		return '[]';
	}
	add(e) {
		(this._attributeNames = this._attributeNames || new Set()), this._attributeNames.add(e);
	}
	static assignAttributeLine(e) {
		return `const ${this._varAttribute(e)} = ${wA}(${zr},'${e}')`;
	}
	static assignItemSizeLine(e) {
		const t = this._varAttribute(e);
		return `const ${this._varAttribSize(e)} = ${t}.itemSize`;
	}
	static assignArrayLine(e) {
		const t = this._varAttribute(e),
			i = this._varArray(e),
			s = `(${zr}[0] && ${zr}[0] instanceof ${hk} && ${uk}.isAttribIndexed(${Sf}, '${e}'))`,
			r = `${zr}.map(e=>e.indexedAttribValue('${e}'))`,
			o = `${t}.array`;
		return `const ${i} = ${s} ? ${r} : ${o};`;
	}
	static _varAttribute(e) {
		return `attrib_${e}`;
	}
	static _varAttribSize(e) {
		return `attribSize_${e}`;
	}
	static _varArray(e) {
		return `array_${e}`;
	}
	varAttributeSize(e) {
		return Qi._varAttribSize(e);
	}
	varArray(e) {
		return Qi._varArray(e);
	}
}
class zt {
	static unreachable(e) {
		throw new Error("Didn't expect to get here");
	}
}
const $d = [],
	qd = [],
	Yd = [];
class PA {
	constructor(e, t) {
		(this._index = 0), t != null && (this._index = t);
	}
	index() {
		return this._index;
	}
	setIndex(e) {
		return (this._index = e), this;
	}
}
class Wh extends PA {
	constructor(e, t) {
		super(e, t), (this._object = e);
	}
	object() {
		return this._object;
	}
	static relatedPrimitiveIds(e, t, i, s) {
		i.length = 0;
	}
	static relatedVertexIds(e, t, i, s) {
		i.length = 0;
	}
	static relatedPointIds(e, t, i, s) {
		i.length = 0;
	}
	relatedPrimitiveIds(e, t) {
		this.constructor.relatedPrimitiveIds(this._object, this._index, e, t);
	}
	relatedVertexIds(e, t) {
		this.constructor.relatedVertexIds(this._object, this._index, e, t);
	}
	relatedPointIds(e, t) {
		this.constructor.relatedPointIds(this._object, this._index, e, t);
	}
	static relatedPointClass(e) {
		return this.constructor;
	}
	static relatedVertexClass(e) {
		return this.constructor;
	}
	static relatedPrimitiveClass(e) {
		return this.constructor;
	}
	static relatedObjectClass(e) {
		return this.constructor;
	}
	static relatedEntityClass(e, t) {
		switch (t) {
			case et.POINT:
				return this.relatedPointClass(e);
			case et.VERTEX:
				return this.relatedVertexClass(e);
			case et.PRIMITIVE:
				return this.relatedPrimitiveClass(e);
			case et.OBJECT:
				return this.relatedObjectClass(e);
		}
		zt.unreachable(t);
	}
	static relatedPoints(e, t, i, s) {
		this.relatedPointIds(e, t, $d, s), (i.length = $d.length);
		let r = 0;
		const o = this.relatedPointClass(e);
		for (const a of $d) (i[r] = new o(e, a)), r++;
	}
	static relatedVertices(e, t, i, s) {
		this.relatedVertexIds(e, t, qd, s), (i.length = qd.length);
		let r = 0;
		const o = this.relatedVertexClass(e);
		for (const a of qd) (i[r] = new o(e, a)), r++;
	}
	static relatedPrimitives(e, t, i, s) {
		this.relatedPrimitiveIds(e, t, Yd, s), (i.length = Yd.length);
		let r = 0;
		const o = this.relatedPrimitiveClass(e);
		for (const a of Yd) (i[r] = new o(e, a)), r++;
	}
	static relatedObjects(e, t, i, s) {
		i.length = 1;
		const r = this.relatedObjectClass(e);
		i[0] = new r(e);
	}
	relatedPoints(e, t) {
		this.constructor.relatedPoints(this._object, this._index, e, t);
	}
	relatedVertices(e, t) {
		this.constructor.relatedVertices(this._object, this._index, e, t);
	}
	relatedPrimitives(e, t) {
		this.constructor.relatedPrimitives(this._object, this._index, e, t);
	}
	relatedObjects(e, t) {
		this.constructor.relatedObjects(this._object, this._index, e, t);
	}
}
var em = ((n) => (
	(n.THREEJS = 'Object3D'),
	(n.CAD = 'CADObject'),
	(n.CSG = 'CSGObject'),
	(n.QUAD = 'QUADObject'),
	(n.SDF = 'SDFObject'),
	(n.TET = 'TetObject'),
	n
))(em || {});
function Vn(n) {
	return n instanceof kt || n.isObject3D == !0;
}
function dk(n, e, t) {
	(e.visible = n.visible),
		(e.name = n.name),
		(t == null || t.castShadow == null || t.castShadow == !0) && (e.castShadow = n.castShadow),
		(t == null || t.receiveShadow == null || t.receiveShadow == !0) && (e.receiveShadow = n.receiveShadow),
		(e.renderOrder = n.renderOrder),
		(e.frustumCulled = n.frustumCulled),
		(e.matrixAutoUpdate = n.matrixAutoUpdate),
		n.material && (t == null ? void 0 : t.material) == null && (e.material = n.material),
		(e.userData = ar(n.userData));
}
function Oo(n) {
	console.warn(`CoreVertex.${n} needs to be overloaded`);
}
class pk extends Wh {
	builder() {}
	static addAttribute(e, t, i) {
		Oo('addAttribute');
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		Oo('addNumericAttribute');
	}
	static entitiesCount(e) {
		return 0;
	}
	static attributes(e) {
		Oo('attributes');
	}
	attributes() {
		return this.constructor.attributes(this._object);
	}
	static attribute(e, t) {
		const i = this.attributes(e);
		if (i) return i[t];
	}
	attribute(e) {
		return this.constructor.attribute(this._object, e);
	}
	static indexAttribute(e) {
		Oo('indexAttribute');
	}
	static setIndexAttribute(e, t) {
		console.warn('CoreVertex.setIndexAttribute needs to be overloaded');
	}
	static renameAttribute(e, t, i) {
		const s = this.attributes(e);
		if (!s) return;
		const r = this.attribute(e, t);
		r && ((s[i] = r), delete s[t]);
	}
	static deleteAttribute(e, t) {
		const i = this.attributes(e);
		i && delete i[t];
	}
	static attribSize(e, t) {
		const i = this.attributes(e);
		return i ? ((t = Ut.remapName(t)), i[t].itemSize || 0) : -1;
	}
	attribSize(e) {
		return this.constructor.attribSize(this._object, e);
	}
	static hasAttribute(e, t) {
		return this.attribute(e, t) != null;
	}
	hasAttribute(e) {
		return this.constructor.hasAttribute(this._object, e);
	}
	static attributeNames(e) {
		const t = this.attributes(e);
		return t ? Object.keys(t) : [];
	}
	static attributeNamesMatchingMask(e, t) {
		return Ut.attribNamesMatchingMask(t, this.attributeNames(e));
	}
	static attribValue(e, t, i, s) {
		if (i === St.VERTEX_INDEX) return t;
		{
			let r = null,
				o = null;
			i[i.length - 2] === J_ && ((r = i[i.length - 1]), (o = Q_[r]), (i = i.substring(0, i.length - 2)));
			const a = Ut.remapName(i),
				c = this.attribute(e, a);
			if (c) {
				const {array: l} = c,
					u = c.itemSize,
					h = t * u;
				if (o == null)
					switch (u) {
						case 1:
							return l[h];
						case 2:
							return (s = s || new re()), s.fromArray(l, h), s;
						case 3:
							return (s = s || new w()), s.fromArray(l, h), s;
						case 4:
							return (s = s || new Ke()), s.fromArray(l, h), s;
						default:
							throw `size not valid (${u})`;
					}
				else
					switch (u) {
						case 1:
							return l[h];
						default:
							return l[h + o];
					}
			} else {
				const l = this.attributes() || {},
					u = Object.keys(l),
					h = `attrib ${i} not found. availables are: ${u.join(',')}`;
				throw (console.warn(h), h);
			}
		}
	}
	attribValue(e, t) {
		return this.constructor.attribValue(this._object, this._index, e, t);
	}
	attribValueNumber(e) {
		const t = this.attribute(e);
		return t ? t.array[this._index] : 0;
	}
	attribValueVector2(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 2), t;
	}
	attribValueVector3(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 3), t;
	}
	attribValueVector4(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 4), t;
	}
	static attribType(e, t) {
		const i = e ? this.attribute(e, t) : null;
		return i && (i == null ? void 0 : i.isString) == !0 ? Bn.STRING : Bn.NUMERIC;
	}
	attribType(e) {
		return this.constructor.attribType(this._object, e);
	}
	static stringAttribValue(e, t, i) {
		return this.attribValue(e, t, i);
	}
	stringAttribValue(e) {
		return this.attribValue(e);
	}
	position(e) {
		return Oo('position'), e;
	}
	setPosition(e) {
		this.setAttribValueFromVector3(St.POSITION, e);
	}
	normal(e) {
		return Oo('normal'), e;
	}
	setNormal(e) {
		return this.setAttribValueFromVector3(St.NORMAL, e);
	}
	setAttribValue(e, t) {
		const i = this.attribute(e);
		if (!i) {
			console.warn(`no attribute ${e}`);
			return;
		}
		const s = i.array,
			r = i.itemSize;
		if (ft(t)) {
			for (let o = 0; o < r; o++) s[this._index * r + o] = t[o];
			return;
		}
		switch (r) {
			case 1:
				s[this._index] = t;
				break;
			case 2:
				const o = t,
					a = this._index * 2;
				(s[a + 0] = o.x), (s[a + 1] = o.y);
				break;
			case 3:
				const c = t.r != null,
					l = this._index * 3;
				if (c) {
					const d = t;
					(s[l + 0] = d.r), (s[l + 1] = d.g), (s[l + 2] = d.b);
				} else {
					const d = t;
					(s[l + 0] = d.x), (s[l + 1] = d.y), (s[l + 2] = d.z);
				}
				break;
			case 4:
				const u = t,
					h = this._index * 4;
				(s[h + 0] = u.x), (s[h + 1] = u.y), (s[h + 2] = u.z), (s[h + 3] = u.w);
				break;
			default:
				throw (
					(console.warn(`CoreVertex.setAttribValue does not yet allow attrib size ${r}`),
					`attrib size ${r} not implemented`)
				);
		}
	}
	setAttribValueFromNumber(e, t) {
		const i = this.attribute(e);
		if (!i) return;
		const s = i.array;
		s[this._index] = t;
	}
	setAttribValueFromVector2(e, t) {
		const i = this.attribute(e);
		!i || i.isString == !0 || t.toArray(i.array, this._index * 2);
	}
	setAttribValueFromVector3(e, t) {
		const i = this.attribute(e);
		!i || i.isString == !0 || t.toArray(i.array, this._index * 3);
	}
	setAttribValueFromVector4(e, t) {
		const i = this.attribute(e);
		!i || i.isString == !0 || t.toArray(i.array, this._index * 4);
	}
	static relatedObjectClass(e) {
		return this.relatedPrimitiveClass(e).relatedObjectClass(e);
	}
	relatedEntities(e, t, i, s) {
		switch (e) {
			case et.POINT: {
				this.relatedPoints(i, s);
				return;
			}
			case et.VERTEX: {
				(i.length = 1), (i[0] = this);
				return;
			}
			case et.PRIMITIVE: {
				this.relatedPrimitives(i, s);
				return;
			}
			case et.OBJECT: {
				this.relatedObjects(i, s);
				return;
			}
			case et.CORE_GROUP: {
				(i.length = 1), (i[0] = t);
				return;
			}
		}
		zt.unreachable(e);
	}
}
function fk(n) {
	return QA(n).entitiesCount(n);
}
function WE(n, e, t) {
	t.length = 0;
	const i = new Map();
	for (const s of n) {
		const r = e(s);
		for (const o of r) {
			let a = i.get(o.index());
			a || ((a = o), i.set(a.index(), a));
		}
	}
	i.forEach((s) => {
		t.push(s);
	});
}
const jE = [],
	Kd = new Set();
function nh(n, e, t) {
	(t.length = 0), Kd.clear();
	for (const i of n) {
		e(i, jE);
		for (const s of jE) Kd.add(s);
	}
	Kd.forEach((i) => {
		t.push(i);
	});
}
function Vc(n) {
	return n instanceof Ee || n instanceof re || n instanceof w || n instanceof Ke;
}
function NA(n, e) {
	e instanceof Ee && n instanceof Ee && e.copy(n),
		e instanceof re && n instanceof re && e.copy(n),
		e instanceof w && n instanceof w && e.copy(n),
		e instanceof Ke && n instanceof Ke && e.copy(n);
}
function IA(n) {
	if (n instanceof Ee || n instanceof re || n instanceof w || n instanceof Ke) return n.clone();
}
function tm(n, e, t = 1, i = 0, s) {
	s.values.length = 0;
	const r = s.values,
		o = e(n);
	if (je(i)) {
		for (let a = 0; a < o; a++) for (let c = 0; c < t; c++) r.push(i);
		s.attributeAdded = !0;
	} else if (t > 1)
		if (ft(i)) {
			for (let a = 0; a < o; a++) for (let c = 0; c < t; c++) r.push(i[c]);
			s.attributeAdded = !0;
		} else {
			const a = i;
			if (t == 2 && a.x != null && a.y != null) {
				for (let h = 0; h < o; h++) r.push(a.x), r.push(a.y);
				s.attributeAdded = !0;
			}
			const c = i;
			if (t == 3 && c.x != null && c.y != null && c.z != null) {
				for (let h = 0; h < o; h++) r.push(c.x), r.push(c.y), r.push(c.z);
				s.attributeAdded = !0;
			}
			const l = i;
			if (t == 3 && l.r != null && l.g != null && l.b != null) {
				for (let h = 0; h < o; h++) r.push(l.r), r.push(l.g), r.push(l.b);
				s.attributeAdded = !0;
			}
			const u = i;
			if (t == 4 && u.x != null && u.y != null && u.z != null && u.w != null) {
				for (let h = 0; h < o; h++) r.push(u.x), r.push(u.y), r.push(u.z), r.push(u.w);
				s.attributeAdded = !0;
			}
		}
}
const Zd = {attributeAdded: !1, values: []};
class ao extends pk {
	constructor(e, t) {
		super(e, t), this._updateGeometry();
	}
	setIndex(e, t) {
		return (this._index = e), t && ((this._object = t), this._updateGeometry()), this;
	}
	_updateGeometry() {
		const e = this._object.geometry;
		e && (this._geometry = e);
	}
	geometry() {
		return this._geometry;
	}
	static addAttribute(e, t, i) {
		const s = this.attributes(e);
		s && (s[t] = i);
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		const r = this.entitiesCount(e);
		(Zd.values = new Array(r * i)), tm(e, fk, i, s, Zd);
		const o = {isString: !1, array: Zd.values, itemSize: i};
		this.addAttribute(e, t, o);
	}
	static attributes(e) {
		const t = e.geometry;
		if (t) return t.userData.vertexAttributes || (t.userData.vertexAttributes = {}), t.userData.vertexAttributes;
	}
	static indexAttribute(e) {
		const t = e.geometry;
		if (t) return t.getIndex();
	}
	static setIndexAttribute(e, t) {
		const i = e.geometry;
		i && i.setIndex(t);
	}
	static entitiesCount(e) {
		const t = e.geometry;
		if (!t) return 0;
		const i = t.getIndex();
		return i ? i.count : 0;
	}
	position(e) {
		return console.warn('CoreThreejsVertex.position not implemented'), e;
	}
	normal(e) {
		return console.warn('CoreThreejsVertex.normal not implemented'), e;
	}
	static relatedPrimitiveIds(e, t, i) {
		i.length = 1;
		const s = Math.floor(t / FV(e));
		i[0] = s;
	}
	static relatedPointIds(e, t, i) {
		i.length = 0;
		const s = e.geometry;
		if (!s) return;
		const r = s.getIndex();
		if (!r) return;
		const a = r.array[t];
		i[0] = a;
	}
	static relatedPointClass(e) {
		return Mi;
	}
	static relatedPrimitiveClass(e) {
		return Sc(e);
	}
}
function _k(n) {
	const e = n.clone();
	return n.userData && (e.userData = ar(n.userData)), e;
}
function mk(n, e, t) {
	n.forEach((i, s) => {
		((!t && i) || (t && !i)) && e.add(s.index());
	});
}
const Po = new Set(),
	No = new Set(),
	Qd = 'groups';
class jh {
	constructor(e) {
		(this._object = e), (this.selectedIndices = new Set());
	}
	attributesDictionary() {
		return jh.attributesDictionary(this._object);
	}
	static attributesDictionary(e) {
		return e.userData[Qd] || this._createAttributesDictionaryIfNone(e);
	}
	static _createAttributesDictionaryIfNone(e) {
		if (!e.userData[Qd]) return (e.userData[Qd] = {});
	}
	findOrCreateGroup(e, t) {
		const i = this.attributesDictionary();
		let s = i[e];
		s || ((s = {}), (i[e] = s));
		let r = s[t];
		return r || ((r = []), (s[t] = r)), r;
	}
	deleteGroup(e, t) {
		const i = this.attributesDictionary(),
			s = i[e];
		s && (delete s[t], Object.keys(s).length == 0 && delete i[e]);
	}
	static data(e) {
		const t = this.attributesDictionary(e),
			i = Object.keys(t),
			s = {};
		for (const r of i) {
			const o = [];
			s[r] = o;
			const a = t[r],
				c = Object.keys(a);
			for (const l of c) {
				const u = a[l],
					h = {name: l, entitiesCount: u.length};
				o.push(h);
			}
		}
		return s;
	}
	indicesSet(e, t, i) {
		const r = this.attributesDictionary()[e];
		if ((i.clear(), r)) {
			const o = r[t];
			o && Rs(o, i);
		}
	}
	updateGroup(e, t) {
		const {type: i, groupName: s, operation: r, invert: o} = e,
			a = this.findOrCreateGroup(i, s),
			c = (l) => {
				const u = this.attributesDictionary();
				let h = u[i];
				h || ((h = {}), (u[i] = h));
				const d = [];
				h[s] = Hi(l, d);
			};
		switch ((this.selectedIndices.clear(), mk(t, this.selectedIndices, o), r)) {
			case 'replace existing': {
				c(this.selectedIndices);
				return;
			}
			case 'add to existing': {
				Rs(a, Po), OS(Po, this.selectedIndices, No), c(No);
				return;
			}
			case 'subtract from existing': {
				Rs(a, Po), PS(Po, this.selectedIndices, No), c(No);
				return;
			}
			case 'intersect with existing': {
				Rs(a, Po), PI(Po, this.selectedIndices, No), c(No);
				return;
			}
		}
		zt.unreachable(r);
	}
}
function DA(n) {
	const e = Vn(n) ? n.children.length : 0,
		t = Vn(n) ? ak(n) : n.type,
		i = jh.data(n);
	return {
		type: t,
		name: n.name,
		childrenCount: e,
		groupData: i,
		verticesCount: 0,
		pointsCount: 0,
		primitivesCount: 0,
		primitiveName: 'no name',
	};
}
function gk(n) {
	const e = new Map();
	for (const i of n) {
		const s = i.attribNames();
		for (const r of s) {
			const o = i.attribSize(r);
			Ai(e, r, o);
		}
	}
	const t = {};
	return (
		e.forEach((i, s) => {
			t[s] = Hi(i, []);
		}),
		t
	);
}
function vk(n) {
	const e = new Map();
	for (const i of n) {
		const s = i.attribNames();
		for (const r of s) {
			const o = i.attribType(r);
			Ai(e, r, o);
		}
	}
	const t = {};
	return (
		e.forEach((i, s) => {
			t[s] = Hi(i, []);
		}),
		t
	);
}
function Ek(n) {
	const e = new Set();
	for (const t of n) {
		const i = t.attribNames();
		for (const s of i) e.add(s);
	}
	return Hi(e, []);
}
var fe = ((n) => (
		(n.ANIM = 'anim'),
		(n.AUDIO = 'audio'),
		(n.COP = 'cop'),
		(n.EVENT = 'event'),
		(n.GL = 'gl'),
		(n.JS = 'js'),
		(n.MANAGER = 'manager'),
		(n.MAT = 'mat'),
		(n.OBJ = 'obj'),
		(n.POST = 'post'),
		(n.ROP = 'rop'),
		(n.SOP = 'sop'),
		n
	))(fe || {}),
	Da = ((n) => (
		(n.ACTOR = 'actorsNetwork'),
		(n.ANIM = 'animationsNetwork'),
		(n.AUDIO = 'audioNetwork'),
		(n.COP = 'copNetwork'),
		(n.CSG = 'csgNetwork'),
		(n.EVENT = 'eventsNetwork'),
		(n.MAT = 'materialsNetwork'),
		(n.POST = 'postProcessNetwork'),
		(n.ROP = 'renderersNetwork'),
		(n.SOLVER = 'solver'),
		(n.SUBNET = 'subnet'),
		(n.DECOMPOSE = 'decompose'),
		n
	))(Da || {}),
	Af = ((n) => ((n.INPUT = 'subnetInput'), (n.OUTPUT = 'subnetOutput'), n))(Af || {}),
	Ca = ((n) => (
		(n.CUBE = 'cubeCamera'),
		(n.MAPBOX = 'mapboxCamera'),
		(n.ORTHOGRAPHIC = 'orthographicCamera'),
		(n.PERSPECTIVE = 'perspectiveCamera'),
		n
	))(Ca || {}),
	co = ((n) => (
		(n.CONTROLS = 'cameraControls'),
		(n.CSS_RENDERER = 'cameraCSSRenderer'),
		(n.FPS = 'cameraFPS'),
		(n.FRAME_MODE = 'cameraFrameMode'),
		(n.POST_PROCESS = 'cameraPostProcess'),
		(n.RENDER_SCENE = 'cameraRenderScene'),
		(n.RENDERER = 'cameraRenderer'),
		(n.VIEWER_CODE = 'cameraViewerCode'),
		(n.VIEW_OFFSET = 'cameraViewOffset'),
		(n.WEBXR_AR = 'cameraWebXRAR'),
		(n.WEBXR_VR = 'cameraWebXRVR'),
		(n.WEBXR_AR_MARKER_TRACKING = 'cameraWebXRARMarkerTracking'),
		n
	))(co || {}),
	LA = ((n) => (
		(n.MAP = 'cameraMapControls'),
		(n.ORBIT = 'cameraOrbitControls'),
		(n.PAN_ZOOM = 'cameraPanZoomControls'),
		(n.FIRST_PERSON = 'firstPersonControls'),
		(n.PLAYER = 'playerControls'),
		(n.MOBILE_JOYSTICK = 'mobileJoystickControls'),
		n
	))(LA || {});
class nm {
	constructor(e, t, i) {
		if (((this._type = e), (this._name = t), (this._defaultValue = i), t == '' || t == null))
			throw new Error('name must not be an empty string');
	}
	static fromParam(e) {
		return new nm(e.type(), e.name(), e.defaultValue());
	}
	type() {
		return this._type;
	}
	name() {
		return this._name;
	}
	defaultValue() {
		return this._defaultValue;
	}
	paramOptions() {
		const e = this._callback.bind(this);
		switch (this._type) {
			case j.NODE_PATH:
				return {callback: e, nodeSelection: {context: fe.COP}};
			default:
				return {callback: e};
		}
	}
	applyToNode(e) {
		if (!e.params.has(this._name)) return;
		const t = e.params.get(this._name);
		if (!t) return;
		const i = this.paramOptions(),
			s = Object.keys(i);
		for (const r of s) t.options.setOption(r, i[r]);
		this.executeCallback(e, t),
			t.type() == j.NODE_PATH &&
				setTimeout(async () => {
					t.isDirty() && (await t.compute()), t.options.executeCallback();
				}, 200);
	}
	executeCallback(e, t) {
		this._callback(e, t);
	}
	_callback(e, t) {}
}
class sa extends nm {
	constructor(e, t, i, s) {
		super(e, t, i), (this._uniformName = s);
	}
	toJSON() {
		return {type: this._type, name: this._name, defaultValue: this._defaultValue, uniformName: this._uniformName};
	}
	static fromJSON(e) {
		return new sa(e.type, e.name, e.defaultValue, e.uniformName);
	}
	uniformName() {
		return this._uniformName;
	}
	uniform() {
		return (this._uniform = this._uniform || this._createUniform());
	}
	_createUniform() {
		return sa.uniformByType(this._type);
	}
	_callback(e, t) {
		sa.callback(t, this.uniform());
	}
	static callback(e, t) {
		switch (e.type()) {
			case j.RAMP:
				t.value = e.rampTexture();
				return;
			case j.NODE_PATH:
				sa.setUniformValueFromTextureFromNodePathParam(e, t);
				return;
			default:
				t.value = e.value;
		}
	}
	static uniformByType(e) {
		switch (e) {
			case j.BOOLEAN:
				return {value: 0};
			case j.BUTTON:
				return {value: 0};
			case j.COLOR:
				return {value: new Ee(0, 0, 0)};
			case j.FLOAT:
				return {value: 0};
			case j.FOLDER:
				return {value: 0};
			case j.INTEGER:
				return {value: 0};
			case j.NODE_PATH:
				return {value: 0};
			case j.PARAM_PATH:
				return {value: 0};
			case j.RAMP:
				return {value: null};
			case j.STRING:
				return {value: null};
			case j.VECTOR2:
				return {value: new re(0, 0)};
			case j.VECTOR3:
				return {value: new w(0, 0, 0)};
			case j.VECTOR4:
				return {value: new Ke(0, 0, 0, 0)};
		}
		zt.unreachable(e);
	}
	static async setUniformValueFromTextureFromNodePathParam(e, t) {
		e.isDirty() && (await e.compute());
		const i = e.value.nodeWithContext(fe.COP);
		if (i) {
			i.isDirty() && (await i.compute());
			const r = i.containerController.container().texture();
			t.value = r;
		} else t.value = null;
	}
}
function Ck(n, e, t) {
	const i = ih.getUniforms(n);
	if (i) {
		const s = i[e];
		s ? (s.value = t.value) : (i[e] = t);
	} else ya.addAdditionalTexture(n, e, t);
}
class ih {
	static getUniforms(e) {
		var t;
		return ((t = e.userData) == null ? void 0 : t.uniforms) || e.uniforms;
	}
	static setUniforms(e, t) {
		e.userData.uniforms = t;
	}
	static removeUniforms(e) {
		const t = this.getUniforms(e);
		if (t) {
			const i = e.userData;
			delete i.uniforms;
		}
		return t;
	}
}
function xf(n, e, t) {
	ya.setData(e, t), (e.onBeforeCompile = bk(n, e));
	const i = `${e.uuid}:${performance.now()}`;
	e.customProgramCacheKey = () => i;
}
function yk(n, e) {
	const {src: t, dest: i, shareCustomUniforms: s} = e,
		r = ya.getData(t);
	if (r) {
		const a = s
			? r
			: (function (c) {
					const l = ra.toJSON(c);
					return ra.fromJSON(l);
			  })(r);
		xf(n, i, a);
	}
}
function bk(n, e) {
	return (i) => {
		const s = ya.getData(e);
		if (!s) return;
		const {
			vertexShader: r,
			fragmentShader: o,
			paramConfigs: a,
			additionalTextureUniforms: c,
			timeDependent: l,
			resolutionDependent: u,
			raymarchingLightsWorldCoordsDependent: h,
		} = s;
		(i.vertexShader = r),
			(i.fragmentShader = o),
			n.uniformsController.addUniforms(i.uniforms, {
				paramConfigs: a,
				additionalTextureUniforms: c,
				timeDependent: l,
				resolutionDependent: u,
				raymarchingLightsWorldCoordsDependent: h,
			});
		const d = e;
		(d.vertexShader = i.vertexShader), (d.fragmentShader = i.fragmentShader), ih.setUniforms(e, i.uniforms);
	};
}
class ya {
	static setData(e, t) {
		e.userData.onBeforeCompileData = t;
	}
	static addAdditionalTexture(e, t, i) {
		const s = this.getData(e);
		s
			? s.additionalTextureUniforms[t] == null && (s.additionalTextureUniforms[t] = i)
			: console.warn('no data found on material', e);
	}
	static getData(e) {
		return e.userData.onBeforeCompileData;
	}
	static removeData(e) {
		const t = this.getData(e);
		if (t) {
			const i = e.userData;
			delete i.onBeforeCompileData;
		}
		return t;
	}
}
class ra {
	static toJSON(e) {
		return {
			vertexShader: e.vertexShader,
			fragmentShader: e.fragmentShader,
			timeDependent: e.timeDependent,
			resolutionDependent: e.resolutionDependent,
			raymarchingLightsWorldCoordsDependent: e.raymarchingLightsWorldCoordsDependent,
			paramConfigs: e.paramConfigs.map((i) => i.toJSON()),
		};
	}
	static fromJSON(e) {
		return {...e, additionalTextureUniforms: {}, paramConfigs: e.paramConfigs.map((i) => sa.fromJSON(i))};
	}
}
var Nu = ((n) => (
	(n.DISTANCE = 'customDistanceMaterial'),
	(n.DEPTH = 'customDepthMaterial'),
	(n.DEPTH_DOF = 'customDepthDOFMaterial'),
	n
))(Nu || {});
const Sk = 'POLY_render_hook',
	Ak = (n, e, t, i, s, r) => {};
function im(n, e, t) {
	const i = e.clone(),
		s = e.uniforms;
	if (
		(s && (i.uniforms = Bb.clone(s)),
		yk(n, {src: e, dest: i, shareCustomUniforms: t.shareCustomUniforms}),
		e.customMaterials && t.addCustomMaterials)
	) {
		const r = Object.keys(e.customMaterials);
		r.length > 0 && (i.customMaterials = {});
		for (const o of r) {
			const a = o,
				c = e.customMaterials[a];
			if (c) {
				const l = im(n, c, {...t, addCustomMaterials: !1});
				i.customMaterials[a] = l;
			}
		}
	}
	return i;
}
function sm(n, e) {
	const t = e;
	if (t.customMaterials)
		for (const i of Object.keys(t.customMaterials)) {
			const s = i,
				r = t.customMaterials[s];
			r && ((n[s] = r), (r.needsUpdate = !0));
		}
}
function xk(n, e) {
	if (e.userData) {
		const t = e.userData[Sk];
		if (t) {
			n.onBeforeRender = (i, s, r, o, a, c) => {
				t(i, s, r, o, a, c, n);
			};
			return;
		}
	}
	n.onBeforeRender = Ak;
}
function Mk(n, e, t, i) {
	Ck(n, e, t), i && UA(n, e, t, i);
}
function UA(n, e, t, i) {
	i.addAdditionalTextureUniforms(e, t);
}
class el {
	static node(e, t) {
		return e.node(t.name);
	}
}
el.clone = im;
el.applyCustomMaterials = sm;
el.assignUniforms = Mk;
el.assignUniformForOnBeforeCompile = UA;
const rm = 0,
	Tk = 1,
	Rk = 2,
	XE = 2,
	Jd = 1.25,
	$E = 1,
	yc = 6 * 4 + 4 + 4,
	Xh = 65535,
	wk = Math.pow(2, -24),
	ep = Symbol('SKIP_GENERATION');
function Ok(n) {
	return n.index ? n.index.count : n.attributes.position.count;
}
function La(n) {
	return Ok(n) / 3;
}
function Pk(n, e = ArrayBuffer) {
	return n > 65535 ? new Uint32Array(new e(4 * n)) : new Uint16Array(new e(2 * n));
}
function Nk(n, e) {
	if (!n.index) {
		const t = n.attributes.position.count,
			i = e.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer,
			s = Pk(t, i);
		n.setIndex(new kn(s, 1));
		for (let r = 0; r < t; r++) s[r] = r;
	}
}
function FA(n) {
	const e = La(n),
		t = n.drawRange,
		i = t.start / 3,
		s = (t.start + t.count) / 3,
		r = Math.max(0, i),
		o = Math.min(e, s) - r;
	return [{offset: Math.floor(r), count: Math.floor(o)}];
}
function BA(n) {
	if (!n.groups || !n.groups.length) return FA(n);
	const e = [],
		t = new Set(),
		i = n.drawRange,
		s = i.start / 3,
		r = (i.start + i.count) / 3;
	for (const a of n.groups) {
		const c = a.start / 3,
			l = (a.start + a.count) / 3;
		t.add(Math.max(s, c)), t.add(Math.min(r, l));
	}
	const o = Array.from(t.values()).sort((a, c) => a - c);
	for (let a = 0; a < o.length - 1; a++) {
		const c = o[a],
			l = o[a + 1];
		e.push({offset: Math.floor(c), count: Math.floor(l - c)});
	}
	return e;
}
function Ik(n) {
	if (n.groups.length === 0) return !1;
	const e = La(n),
		t = BA(n).sort((r, o) => r.offset - o.offset),
		i = t[t.length - 1];
	i.count = Math.min(e - i.offset, i.count);
	let s = 0;
	return t.forEach(({count: r}) => (s += r)), e !== s;
}
function tp(n, e, t, i, s) {
	let r = 1 / 0,
		o = 1 / 0,
		a = 1 / 0,
		c = -1 / 0,
		l = -1 / 0,
		u = -1 / 0,
		h = 1 / 0,
		d = 1 / 0,
		p = 1 / 0,
		m = -1 / 0,
		g = -1 / 0,
		_ = -1 / 0;
	for (let f = e * 6, y = (e + t) * 6; f < y; f += 6) {
		const v = n[f + 0],
			A = n[f + 1],
			S = v - A,
			T = v + A;
		S < r && (r = S), T > c && (c = T), v < h && (h = v), v > m && (m = v);
		const R = n[f + 2],
			D = n[f + 3],
			E = R - D,
			x = R + D;
		E < o && (o = E), x > l && (l = x), R < d && (d = R), R > g && (g = R);
		const z = n[f + 4],
			B = n[f + 5],
			W = z - B,
			F = z + B;
		W < a && (a = W), F > u && (u = F), z < p && (p = z), z > _ && (_ = z);
	}
	(i[0] = r),
		(i[1] = o),
		(i[2] = a),
		(i[3] = c),
		(i[4] = l),
		(i[5] = u),
		(s[0] = h),
		(s[1] = d),
		(s[2] = p),
		(s[3] = m),
		(s[4] = g),
		(s[5] = _);
}
function Dk(n, e = null, t = null, i = null) {
	const s = n.attributes.position,
		r = n.index ? n.index.array : null,
		o = La(n),
		a = s.normalized;
	let c;
	e === null ? ((c = new Float32Array(o * 6 * 4)), (t = 0), (i = o)) : ((c = e), (t = t || 0), (i = i || o));
	const l = s.array,
		u = s.offset || 0;
	let h = 3;
	s.isInterleavedBufferAttribute && (h = s.data.stride);
	const d = ['getX', 'getY', 'getZ'];
	for (let p = t; p < t + i; p++) {
		const m = p * 3,
			g = p * 6;
		let _ = m + 0,
			f = m + 1,
			y = m + 2;
		r && ((_ = r[_]), (f = r[f]), (y = r[y])), a || ((_ = _ * h + u), (f = f * h + u), (y = y * h + u));
		for (let v = 0; v < 3; v++) {
			let A, S, T;
			a
				? ((A = s[d[v]](_)), (S = s[d[v]](f)), (T = s[d[v]](y)))
				: ((A = l[_ + v]), (S = l[f + v]), (T = l[y + v]));
			let R = A;
			S < R && (R = S), T < R && (R = T);
			let D = A;
			S > D && (D = S), T > D && (D = T);
			const E = (D - R) / 2,
				x = v * 2;
			(c[g + x + 0] = R + E), (c[g + x + 1] = E + (Math.abs(R) + E) * wk);
		}
	}
	return c;
}
function $t(n, e, t) {
	return (
		(t.min.x = e[n]),
		(t.min.y = e[n + 1]),
		(t.min.z = e[n + 2]),
		(t.max.x = e[n + 3]),
		(t.max.y = e[n + 4]),
		(t.max.z = e[n + 5]),
		t
	);
}
function qE(n) {
	let e = -1,
		t = -1 / 0;
	for (let i = 0; i < 3; i++) {
		const s = n[i + 3] - n[i];
		s > t && ((t = s), (e = i));
	}
	return e;
}
function YE(n, e) {
	e.set(n);
}
function KE(n, e, t) {
	let i, s;
	for (let r = 0; r < 3; r++) {
		const o = r + 3;
		(i = n[r]), (s = e[r]), (t[r] = i < s ? i : s), (i = n[o]), (s = e[o]), (t[o] = i > s ? i : s);
	}
}
function Vl(n, e, t) {
	for (let i = 0; i < 3; i++) {
		const s = e[n + 2 * i],
			r = e[n + 2 * i + 1],
			o = s - r,
			a = s + r;
		o < t[i] && (t[i] = o), a > t[i + 3] && (t[i + 3] = a);
	}
}
function Ka(n) {
	const e = n[3] - n[0],
		t = n[4] - n[1],
		i = n[5] - n[2];
	return 2 * (e * t + t * i + i * e);
}
const Cs = 32,
	Lk = (n, e) => n.candidate - e.candidate,
	Ks = new Array(Cs).fill().map(() => ({
		count: 0,
		bounds: new Float32Array(6),
		rightCacheBounds: new Float32Array(6),
		leftCacheBounds: new Float32Array(6),
		candidate: 0,
	})),
	Gl = new Float32Array(6);
function Uk(n, e, t, i, s, r) {
	let o = -1,
		a = 0;
	if (r === rm) (o = qE(e)), o !== -1 && (a = (e[o] + e[o + 3]) / 2);
	else if (r === Tk) (o = qE(n)), o !== -1 && (a = Fk(t, i, s, o));
	else if (r === Rk) {
		const c = Ka(n);
		let l = Jd * s;
		const u = i * 6,
			h = (i + s) * 6;
		for (let d = 0; d < 3; d++) {
			const p = e[d],
				_ = (e[d + 3] - p) / Cs;
			if (s < Cs / 4) {
				const f = [...Ks];
				f.length = s;
				let y = 0;
				for (let A = u; A < h; A += 6, y++) {
					const S = f[y];
					(S.candidate = t[A + 2 * d]), (S.count = 0);
					const {bounds: T, leftCacheBounds: R, rightCacheBounds: D} = S;
					for (let E = 0; E < 3; E++)
						(D[E] = 1 / 0),
							(D[E + 3] = -1 / 0),
							(R[E] = 1 / 0),
							(R[E + 3] = -1 / 0),
							(T[E] = 1 / 0),
							(T[E + 3] = -1 / 0);
					Vl(A, t, T);
				}
				f.sort(Lk);
				let v = s;
				for (let A = 0; A < v; A++) {
					const S = f[A];
					for (; A + 1 < v && f[A + 1].candidate === S.candidate; ) f.splice(A + 1, 1), v--;
				}
				for (let A = u; A < h; A += 6) {
					const S = t[A + 2 * d];
					for (let T = 0; T < v; T++) {
						const R = f[T];
						S >= R.candidate ? Vl(A, t, R.rightCacheBounds) : (Vl(A, t, R.leftCacheBounds), R.count++);
					}
				}
				for (let A = 0; A < v; A++) {
					const S = f[A],
						T = S.count,
						R = s - S.count,
						D = S.leftCacheBounds,
						E = S.rightCacheBounds;
					let x = 0;
					T !== 0 && (x = Ka(D) / c);
					let z = 0;
					R !== 0 && (z = Ka(E) / c);
					const B = $E + Jd * (x * T + z * R);
					B < l && ((o = d), (l = B), (a = S.candidate));
				}
			} else {
				for (let v = 0; v < Cs; v++) {
					const A = Ks[v];
					(A.count = 0), (A.candidate = p + _ + v * _);
					const S = A.bounds;
					for (let T = 0; T < 3; T++) (S[T] = 1 / 0), (S[T + 3] = -1 / 0);
				}
				for (let v = u; v < h; v += 6) {
					let T = ~~((t[v + 2 * d] - p) / _);
					T >= Cs && (T = Cs - 1);
					const R = Ks[T];
					R.count++, Vl(v, t, R.bounds);
				}
				const f = Ks[Cs - 1];
				YE(f.bounds, f.rightCacheBounds);
				for (let v = Cs - 2; v >= 0; v--) {
					const A = Ks[v],
						S = Ks[v + 1];
					KE(A.bounds, S.rightCacheBounds, A.rightCacheBounds);
				}
				let y = 0;
				for (let v = 0; v < Cs - 1; v++) {
					const A = Ks[v],
						S = A.count,
						T = A.bounds,
						D = Ks[v + 1].rightCacheBounds;
					S !== 0 && (y === 0 ? YE(T, Gl) : KE(T, Gl, Gl)), (y += S);
					let E = 0,
						x = 0;
					y !== 0 && (E = Ka(Gl) / c);
					const z = s - y;
					z !== 0 && (x = Ka(D) / c);
					const B = $E + Jd * (E * y + x * z);
					B < l && ((o = d), (l = B), (a = A.candidate));
				}
			}
		}
	} else console.warn(`MeshBVH: Invalid build strategy value ${r} used.`);
	return {axis: o, pos: a};
}
function Fk(n, e, t, i) {
	let s = 0;
	for (let r = e, o = e + t; r < o; r++) s += n[r * 6 + i * 2];
	return s / t;
}
class np {
	constructor() {
		this.boundingData = new Float32Array(6);
	}
}
function Bk(n, e, t, i, s, r) {
	let o = i,
		a = i + s - 1;
	const c = r.pos,
		l = r.axis * 2;
	for (;;) {
		for (; o <= a && t[o * 6 + l] < c; ) o++;
		for (; o <= a && t[a * 6 + l] >= c; ) a--;
		if (o < a) {
			for (let u = 0; u < 3; u++) {
				let h = e[o * 3 + u];
				(e[o * 3 + u] = e[a * 3 + u]), (e[a * 3 + u] = h);
			}
			for (let u = 0; u < 6; u++) {
				let h = t[o * 6 + u];
				(t[o * 6 + u] = t[a * 6 + u]), (t[a * 6 + u] = h);
			}
			o++, a--;
		} else return o;
	}
}
function kk(n, e, t, i, s, r) {
	let o = i,
		a = i + s - 1;
	const c = r.pos,
		l = r.axis * 2;
	for (;;) {
		for (; o <= a && t[o * 6 + l] < c; ) o++;
		for (; o <= a && t[a * 6 + l] >= c; ) a--;
		if (o < a) {
			let u = n[o];
			(n[o] = n[a]), (n[a] = u);
			for (let h = 0; h < 6; h++) {
				let d = t[o * 6 + h];
				(t[o * 6 + h] = t[a * 6 + h]), (t[a * 6 + h] = d);
			}
			o++, a--;
		} else return o;
	}
}
function Jn(n, e) {
	return e[n + 15] === 65535;
}
function si(n, e) {
	return e[n + 6];
}
function mi(n, e) {
	return e[n + 14];
}
function gi(n) {
	return n + 8;
}
function vi(n, e) {
	return e[n + 6];
}
function kA(n, e) {
	return e[n + 7];
}
let VA, hc, Iu, GA;
const Vk = Math.pow(2, 32);
function Mf(n) {
	return 'count' in n ? 1 : 1 + Mf(n.left) + Mf(n.right);
}
function Gk(n, e, t) {
	return (
		(VA = new Float32Array(t)),
		(hc = new Uint32Array(t)),
		(Iu = new Uint16Array(t)),
		(GA = new Uint8Array(t)),
		Tf(n, e)
	);
}
function Tf(n, e) {
	const t = n / 4,
		i = n / 2,
		s = 'count' in e,
		r = e.boundingData;
	for (let o = 0; o < 6; o++) VA[t + o] = r[o];
	if (s)
		if (e.buffer) {
			const o = e.buffer;
			GA.set(new Uint8Array(o), n);
			for (let a = n, c = n + o.byteLength; a < c; a += yc) {
				const l = a / 2;
				Jn(l, Iu) || (hc[a / 4 + 6] += t);
			}
			return n + o.byteLength;
		} else {
			const o = e.offset,
				a = e.count;
			return (hc[t + 6] = o), (Iu[i + 14] = a), (Iu[i + 15] = Xh), n + yc;
		}
	else {
		const o = e.left,
			a = e.right,
			c = e.splitAxis;
		let l;
		if (((l = Tf(n + yc, o)), l / 4 > Vk))
			throw new Error('MeshBVH: Cannot store child pointer greater than 32 bits.');
		return (hc[t + 6] = l / 4), (l = Tf(l, a)), (hc[t + 7] = c), l;
	}
}
function zk(n, e) {
	const t = (n.index ? n.index.count : n.attributes.position.count) / 3,
		i = t > 2 ** 16,
		s = i ? 4 : 2,
		r = e ? new SharedArrayBuffer(t * s) : new ArrayBuffer(t * s),
		o = i ? new Uint32Array(r) : new Uint16Array(r);
	for (let a = 0, c = o.length; a < c; a++) o[a] = a;
	return o;
}
function Hk(n, e, t, i, s) {
	const {maxDepth: r, verbose: o, maxLeafTris: a, strategy: c, onProgress: l, indirect: u} = s,
		h = n._indirectBuffer,
		d = n.geometry,
		p = d.index ? d.index.array : null,
		m = u ? kk : Bk,
		g = La(d),
		_ = new Float32Array(6);
	let f = !1;
	const y = new np();
	return tp(e, t, i, y.boundingData, _), A(y, t, i, _), y;
	function v(S) {
		l && l(S / g);
	}
	function A(S, T, R, D = null, E = 0) {
		if (
			(!f &&
				E >= r &&
				((f = !0),
				o &&
					(console.warn(
						`MeshBVH: Max depth of ${r} reached when generating BVH. Consider increasing maxDepth.`
					),
					console.warn(d))),
			R <= a || E >= r)
		)
			return v(T + R), (S.offset = T), (S.count = R), S;
		const x = Uk(S.boundingData, D, e, T, R, c);
		if (x.axis === -1) return v(T + R), (S.offset = T), (S.count = R), S;
		const z = m(h, p, e, T, R, x);
		if (z === T || z === T + R) v(T + R), (S.offset = T), (S.count = R);
		else {
			S.splitAxis = x.axis;
			const B = new np(),
				W = T,
				F = z - T;
			(S.left = B), tp(e, W, F, B.boundingData, _), A(B, W, F, _, E + 1);
			const X = new np(),
				Z = z,
				Q = R - F;
			(S.right = X), tp(e, Z, Q, X.boundingData, _), A(X, Z, Q, _, E + 1);
		}
		return S;
	}
}
function Wk(n, e) {
	const t = n.geometry;
	e.indirect &&
		((n._indirectBuffer = zk(t, e.useSharedArrayBuffer)),
		Ik(t) &&
			!e.verbose &&
			console.warn(
				'MeshBVH: Provided geometry contains groups that do not fully span the vertex contents while using the "indirect" option. BVH may incorrectly report intersections on unrendered portions of the geometry.'
			)),
		n._indirectBuffer || Nk(t, e);
	const i = e.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer,
		s = Dk(t),
		r = e.indirect ? FA(t) : BA(t);
	n._roots = r.map((o) => {
		const a = Hk(n, s, o.offset, o.count, e),
			c = Mf(a),
			l = new i(yc * c);
		return Gk(0, a, l), l;
	});
}
class Ls {
	constructor() {
		(this.min = 1 / 0), (this.max = -1 / 0);
	}
	setFromPointsField(e, t) {
		let i = 1 / 0,
			s = -1 / 0;
		for (let r = 0, o = e.length; r < o; r++) {
			const c = e[r][t];
			(i = c < i ? c : i), (s = c > s ? c : s);
		}
		(this.min = i), (this.max = s);
	}
	setFromPoints(e, t) {
		let i = 1 / 0,
			s = -1 / 0;
		for (let r = 0, o = t.length; r < o; r++) {
			const a = t[r],
				c = e.dot(a);
			(i = c < i ? c : i), (s = c > s ? c : s);
		}
		(this.min = i), (this.max = s);
	}
	isSeparated(e) {
		return this.min > e.max || e.min > this.max;
	}
}
Ls.prototype.setFromBox = (function () {
	const n = new w();
	return function (t, i) {
		const s = i.min,
			r = i.max;
		let o = 1 / 0,
			a = -1 / 0;
		for (let c = 0; c <= 1; c++)
			for (let l = 0; l <= 1; l++)
				for (let u = 0; u <= 1; u++) {
					(n.x = s.x * c + r.x * (1 - c)), (n.y = s.y * l + r.y * (1 - l)), (n.z = s.z * u + r.z * (1 - u));
					const h = t.dot(n);
					(o = Math.min(h, o)), (a = Math.max(h, a));
				}
		(this.min = o), (this.max = a);
	};
})();
const jk = (function () {
		const n = new w(),
			e = new w(),
			t = new w();
		return function (s, r, o) {
			const a = s.start,
				c = n,
				l = r.start,
				u = e;
			t.subVectors(a, l), n.subVectors(s.end, s.start), e.subVectors(r.end, r.start);
			const h = t.dot(u),
				d = u.dot(c),
				p = u.dot(u),
				m = t.dot(c),
				_ = c.dot(c) * p - d * d;
			let f, y;
			_ !== 0 ? (f = (h * d - m * p) / _) : (f = 0), (y = (h + f * d) / p), (o.x = f), (o.y = y);
		};
	})(),
	om = (function () {
		const n = new re(),
			e = new w(),
			t = new w();
		return function (s, r, o, a) {
			jk(s, r, n);
			let c = n.x,
				l = n.y;
			if (c >= 0 && c <= 1 && l >= 0 && l <= 1) {
				s.at(c, o), r.at(l, a);
				return;
			} else if (c >= 0 && c <= 1) {
				l < 0 ? r.at(0, a) : r.at(1, a), s.closestPointToPoint(a, !0, o);
				return;
			} else if (l >= 0 && l <= 1) {
				c < 0 ? s.at(0, o) : s.at(1, o), r.closestPointToPoint(o, !0, a);
				return;
			} else {
				let u;
				c < 0 ? (u = s.start) : (u = s.end);
				let h;
				l < 0 ? (h = r.start) : (h = r.end);
				const d = e,
					p = t;
				if (
					(s.closestPointToPoint(h, !0, e),
					r.closestPointToPoint(u, !0, t),
					d.distanceToSquared(h) <= p.distanceToSquared(u))
				) {
					o.copy(d), a.copy(h);
					return;
				} else {
					o.copy(u), a.copy(p);
					return;
				}
			}
		};
	})(),
	Xk = (function () {
		const n = new w(),
			e = new w(),
			t = new es(),
			i = new Is();
		return function (r, o) {
			const {radius: a, center: c} = r,
				{a: l, b: u, c: h} = o;
			if (
				((i.start = l),
				(i.end = u),
				i.closestPointToPoint(c, !0, n).distanceTo(c) <= a ||
					((i.start = l), (i.end = h), i.closestPointToPoint(c, !0, n).distanceTo(c) <= a) ||
					((i.start = u), (i.end = h), i.closestPointToPoint(c, !0, n).distanceTo(c) <= a))
			)
				return !0;
			const g = o.getPlane(t);
			if (Math.abs(g.distanceToPoint(c)) <= a) {
				const f = g.projectPoint(c, e);
				if (o.containsPoint(f)) return !0;
			}
			return !1;
		};
	})(),
	$k = 1e-15;
function ip(n) {
	return Math.abs(n) < $k;
}
class Wi extends Tn {
	constructor(...e) {
		super(...e),
			(this.isExtendedTriangle = !0),
			(this.satAxes = new Array(4).fill().map(() => new w())),
			(this.satBounds = new Array(4).fill().map(() => new Ls())),
			(this.points = [this.a, this.b, this.c]),
			(this.sphere = new Fs()),
			(this.plane = new es()),
			(this.needsUpdate = !0);
	}
	intersectsSphere(e) {
		return Xk(e, this);
	}
	update() {
		const e = this.a,
			t = this.b,
			i = this.c,
			s = this.points,
			r = this.satAxes,
			o = this.satBounds,
			a = r[0],
			c = o[0];
		this.getNormal(a), c.setFromPoints(a, s);
		const l = r[1],
			u = o[1];
		l.subVectors(e, t), u.setFromPoints(l, s);
		const h = r[2],
			d = o[2];
		h.subVectors(t, i), d.setFromPoints(h, s);
		const p = r[3],
			m = o[3];
		p.subVectors(i, e),
			m.setFromPoints(p, s),
			this.sphere.setFromPoints(this.points),
			this.plane.setFromNormalAndCoplanarPoint(a, e),
			(this.needsUpdate = !1);
	}
}
Wi.prototype.closestPointToSegment = (function () {
	const n = new w(),
		e = new w(),
		t = new Is();
	return function (s, r = null, o = null) {
		const {start: a, end: c} = s,
			l = this.points;
		let u,
			h = 1 / 0;
		for (let d = 0; d < 3; d++) {
			const p = (d + 1) % 3;
			t.start.copy(l[d]),
				t.end.copy(l[p]),
				om(t, s, n, e),
				(u = n.distanceToSquared(e)),
				u < h && ((h = u), r && r.copy(n), o && o.copy(e));
		}
		return (
			this.closestPointToPoint(a, n),
			(u = a.distanceToSquared(n)),
			u < h && ((h = u), r && r.copy(n), o && o.copy(a)),
			this.closestPointToPoint(c, n),
			(u = c.distanceToSquared(n)),
			u < h && ((h = u), r && r.copy(n), o && o.copy(c)),
			Math.sqrt(h)
		);
	};
})();
Wi.prototype.intersectsTriangle = (function () {
	const n = new Wi(),
		e = new Array(3),
		t = new Array(3),
		i = new Ls(),
		s = new Ls(),
		r = new w(),
		o = new w(),
		a = new w(),
		c = new w(),
		l = new w(),
		u = new Is(),
		h = new Is(),
		d = new Is(),
		p = new w();
	function m(g, _, f) {
		const y = g.points;
		let v = 0,
			A = -1;
		for (let S = 0; S < 3; S++) {
			const {start: T, end: R} = u;
			T.copy(y[S]), R.copy(y[(S + 1) % 3]), u.delta(o);
			const D = ip(_.distanceToPoint(T));
			if (ip(_.normal.dot(o)) && D) {
				f.copy(u), (v = 2);
				break;
			}
			const E = _.intersectLine(u, p);
			if ((!E && D && p.copy(T), (E || D) && !ip(p.distanceTo(R)))) {
				if (v <= 1) (v === 1 ? f.start : f.end).copy(p), D && (A = v);
				else if (v >= 2) {
					(A === 1 ? f.start : f.end).copy(p), (v = 2);
					break;
				}
				if ((v++, v === 2 && A === -1)) break;
			}
		}
		return v;
	}
	return function (_, f = null, y = !1) {
		this.needsUpdate && this.update(),
			_.isExtendedTriangle ? _.needsUpdate && _.update() : (n.copy(_), n.update(), (_ = n));
		const v = this.plane,
			A = _.plane;
		if (Math.abs(v.normal.dot(A.normal)) > 1 - 1e-10) {
			const S = this.satBounds,
				T = this.satAxes;
			(t[0] = _.a), (t[1] = _.b), (t[2] = _.c);
			for (let E = 0; E < 4; E++) {
				const x = S[E],
					z = T[E];
				if ((i.setFromPoints(z, t), x.isSeparated(i))) return !1;
			}
			const R = _.satBounds,
				D = _.satAxes;
			(e[0] = this.a), (e[1] = this.b), (e[2] = this.c);
			for (let E = 0; E < 4; E++) {
				const x = R[E],
					z = D[E];
				if ((i.setFromPoints(z, e), x.isSeparated(i))) return !1;
			}
			for (let E = 0; E < 4; E++) {
				const x = T[E];
				for (let z = 0; z < 4; z++) {
					const B = D[z];
					if ((r.crossVectors(x, B), i.setFromPoints(r, e), s.setFromPoints(r, t), i.isSeparated(s)))
						return !1;
				}
			}
			return (
				f &&
					(y ||
						console.warn(
							'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.'
						),
					f.start.set(0, 0, 0),
					f.end.set(0, 0, 0)),
				!0
			);
		} else {
			const S = m(this, A, h);
			if (S === 1 && _.containsPoint(h.end)) return f && (f.start.copy(h.end), f.end.copy(h.end)), !0;
			if (S !== 2) return !1;
			const T = m(_, v, d);
			if (T === 1 && this.containsPoint(d.end)) return f && (f.start.copy(d.end), f.end.copy(d.end)), !0;
			if (T !== 2) return !1;
			if ((h.delta(a), d.delta(c), a.dot(c) < 0)) {
				let W = d.start;
				(d.start = d.end), (d.end = W);
			}
			const R = h.start.dot(a),
				D = h.end.dot(a),
				E = d.start.dot(a),
				x = d.end.dot(a),
				z = D < E,
				B = R < x;
			return R !== x && E !== D && z === B
				? !1
				: (f &&
						(l.subVectors(h.start, d.start),
						l.dot(a) > 0 ? f.start.copy(h.start) : f.start.copy(d.start),
						l.subVectors(h.end, d.end),
						l.dot(a) < 0 ? f.end.copy(h.end) : f.end.copy(d.end)),
				  !0);
		}
	};
})();
Wi.prototype.distanceToPoint = (function () {
	const n = new w();
	return function (t) {
		return this.closestPointToPoint(t, n), t.distanceTo(n);
	};
})();
Wi.prototype.distanceToTriangle = (function () {
	const n = new w(),
		e = new w(),
		t = ['a', 'b', 'c'],
		i = new Is(),
		s = new Is();
	return function (o, a = null, c = null) {
		const l = a || c ? i : null;
		if (this.intersectsTriangle(o, l)) return (a || c) && (a && l.getCenter(a), c && l.getCenter(c)), 0;
		let u = 1 / 0;
		for (let h = 0; h < 3; h++) {
			let d;
			const p = t[h],
				m = o[p];
			this.closestPointToPoint(m, n),
				(d = m.distanceToSquared(n)),
				d < u && ((u = d), a && a.copy(n), c && c.copy(m));
			const g = this[p];
			o.closestPointToPoint(g, n),
				(d = g.distanceToSquared(n)),
				d < u && ((u = d), a && a.copy(g), c && c.copy(n));
		}
		for (let h = 0; h < 3; h++) {
			const d = t[h],
				p = t[(h + 1) % 3];
			i.set(this[d], this[p]);
			for (let m = 0; m < 3; m++) {
				const g = t[m],
					_ = t[(m + 1) % 3];
				s.set(o[g], o[_]), om(i, s, n, e);
				const f = n.distanceToSquared(e);
				f < u && ((u = f), a && a.copy(n), c && c.copy(e));
			}
		}
		return Math.sqrt(u);
	};
})();
class Yn {
	constructor(e, t, i) {
		(this.isOrientedBox = !0),
			(this.min = new w()),
			(this.max = new w()),
			(this.matrix = new Qe()),
			(this.invMatrix = new Qe()),
			(this.points = new Array(8).fill().map(() => new w())),
			(this.satAxes = new Array(3).fill().map(() => new w())),
			(this.satBounds = new Array(3).fill().map(() => new Ls())),
			(this.alignedSatBounds = new Array(3).fill().map(() => new Ls())),
			(this.needsUpdate = !1),
			e && this.min.copy(e),
			t && this.max.copy(t),
			i && this.matrix.copy(i);
	}
	set(e, t, i) {
		this.min.copy(e), this.max.copy(t), this.matrix.copy(i), (this.needsUpdate = !0);
	}
	copy(e) {
		this.min.copy(e.min), this.max.copy(e.max), this.matrix.copy(e.matrix), (this.needsUpdate = !0);
	}
}
Yn.prototype.update = (function () {
	return function () {
		const e = this.matrix,
			t = this.min,
			i = this.max,
			s = this.points;
		for (let l = 0; l <= 1; l++)
			for (let u = 0; u <= 1; u++)
				for (let h = 0; h <= 1; h++) {
					const d = (1 * l) | (2 * u) | (4 * h),
						p = s[d];
					(p.x = l ? i.x : t.x), (p.y = u ? i.y : t.y), (p.z = h ? i.z : t.z), p.applyMatrix4(e);
				}
		const r = this.satBounds,
			o = this.satAxes,
			a = s[0];
		for (let l = 0; l < 3; l++) {
			const u = o[l],
				h = r[l],
				d = 1 << l,
				p = s[d];
			u.subVectors(a, p), h.setFromPoints(u, s);
		}
		const c = this.alignedSatBounds;
		c[0].setFromPointsField(s, 'x'),
			c[1].setFromPointsField(s, 'y'),
			c[2].setFromPointsField(s, 'z'),
			this.invMatrix.copy(this.matrix).invert(),
			(this.needsUpdate = !1);
	};
})();
Yn.prototype.intersectsBox = (function () {
	const n = new Ls();
	return function (t) {
		this.needsUpdate && this.update();
		const i = t.min,
			s = t.max,
			r = this.satBounds,
			o = this.satAxes,
			a = this.alignedSatBounds;
		if (
			((n.min = i.x),
			(n.max = s.x),
			a[0].isSeparated(n) ||
				((n.min = i.y), (n.max = s.y), a[1].isSeparated(n)) ||
				((n.min = i.z), (n.max = s.z), a[2].isSeparated(n)))
		)
			return !1;
		for (let c = 0; c < 3; c++) {
			const l = o[c],
				u = r[c];
			if ((n.setFromBox(l, t), u.isSeparated(n))) return !1;
		}
		return !0;
	};
})();
Yn.prototype.intersectsTriangle = (function () {
	const n = new Wi(),
		e = new Array(3),
		t = new Ls(),
		i = new Ls(),
		s = new w();
	return function (o) {
		this.needsUpdate && this.update(),
			o.isExtendedTriangle ? o.needsUpdate && o.update() : (n.copy(o), n.update(), (o = n));
		const a = this.satBounds,
			c = this.satAxes;
		(e[0] = o.a), (e[1] = o.b), (e[2] = o.c);
		for (let d = 0; d < 3; d++) {
			const p = a[d],
				m = c[d];
			if ((t.setFromPoints(m, e), p.isSeparated(t))) return !1;
		}
		const l = o.satBounds,
			u = o.satAxes,
			h = this.points;
		for (let d = 0; d < 3; d++) {
			const p = l[d],
				m = u[d];
			if ((t.setFromPoints(m, h), p.isSeparated(t))) return !1;
		}
		for (let d = 0; d < 3; d++) {
			const p = c[d];
			for (let m = 0; m < 4; m++) {
				const g = u[m];
				if ((s.crossVectors(p, g), t.setFromPoints(s, e), i.setFromPoints(s, h), t.isSeparated(i))) return !1;
			}
		}
		return !0;
	};
})();
Yn.prototype.closestPointToPoint = (function () {
	return function (e, t) {
		return (
			this.needsUpdate && this.update(),
			t.copy(e).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix),
			t
		);
	};
})();
Yn.prototype.distanceToPoint = (function () {
	const n = new w();
	return function (t) {
		return this.closestPointToPoint(t, n), t.distanceTo(n);
	};
})();
Yn.prototype.distanceToBox = (function () {
	const n = ['x', 'y', 'z'],
		e = new Array(12).fill().map(() => new Is()),
		t = new Array(12).fill().map(() => new Is()),
		i = new w(),
		s = new w();
	return function (o, a = 0, c = null, l = null) {
		if ((this.needsUpdate && this.update(), this.intersectsBox(o)))
			return (
				(c || l) &&
					(o.getCenter(s),
					this.closestPointToPoint(s, i),
					o.closestPointToPoint(i, s),
					c && c.copy(i),
					l && l.copy(s)),
				0
			);
		const u = a * a,
			h = o.min,
			d = o.max,
			p = this.points;
		let m = 1 / 0;
		for (let _ = 0; _ < 8; _++) {
			const f = p[_];
			s.copy(f).clamp(h, d);
			const y = f.distanceToSquared(s);
			if (y < m && ((m = y), c && c.copy(f), l && l.copy(s), y < u)) return Math.sqrt(y);
		}
		let g = 0;
		for (let _ = 0; _ < 3; _++)
			for (let f = 0; f <= 1; f++)
				for (let y = 0; y <= 1; y++) {
					const v = (_ + 1) % 3,
						A = (_ + 2) % 3,
						S = (f << v) | (y << A),
						T = (1 << _) | (f << v) | (y << A),
						R = p[S],
						D = p[T];
					e[g].set(R, D);
					const x = n[_],
						z = n[v],
						B = n[A],
						W = t[g],
						F = W.start,
						X = W.end;
					(F[x] = h[x]),
						(F[z] = f ? h[z] : d[z]),
						(F[B] = y ? h[B] : d[z]),
						(X[x] = d[x]),
						(X[z] = f ? h[z] : d[z]),
						(X[B] = y ? h[B] : d[z]),
						g++;
				}
		for (let _ = 0; _ <= 1; _++)
			for (let f = 0; f <= 1; f++)
				for (let y = 0; y <= 1; y++) {
					(s.x = _ ? d.x : h.x), (s.y = f ? d.y : h.y), (s.z = y ? d.z : h.z), this.closestPointToPoint(s, i);
					const v = s.distanceToSquared(i);
					if (v < m && ((m = v), c && c.copy(i), l && l.copy(s), v < u)) return Math.sqrt(v);
				}
		for (let _ = 0; _ < 12; _++) {
			const f = e[_];
			for (let y = 0; y < 12; y++) {
				const v = t[y];
				om(f, v, i, s);
				const A = i.distanceToSquared(s);
				if (A < m && ((m = A), c && c.copy(i), l && l.copy(s), A < u)) return Math.sqrt(A);
			}
		}
		return Math.sqrt(m);
	};
})();
class am {
	constructor(e) {
		(this._getNewPrimitive = e), (this._primitives = []);
	}
	getPrimitive() {
		const e = this._primitives;
		return e.length === 0 ? this._getNewPrimitive() : e.pop();
	}
	releasePrimitive(e) {
		this._primitives.push(e);
	}
}
class qk extends am {
	constructor() {
		super(() => new Wi());
	}
}
const Ei = new qk();
class Yk {
	constructor() {
		(this.float32Array = null), (this.uint16Array = null), (this.uint32Array = null);
		const e = [];
		let t = null;
		(this.setBuffer = (i) => {
			t && e.push(t),
				(t = i),
				(this.float32Array = new Float32Array(i)),
				(this.uint16Array = new Uint16Array(i)),
				(this.uint32Array = new Uint32Array(i));
		}),
			(this.clearBuffer = () => {
				(t = null),
					(this.float32Array = null),
					(this.uint16Array = null),
					(this.uint32Array = null),
					e.length !== 0 && this.setBuffer(e.pop());
			});
	}
}
const Vt = new Yk();
let cr, oa;
const Io = [],
	zl = new am(() => new Ht());
function Kk(n, e, t, i, s, r) {
	(cr = zl.getPrimitive()), (oa = zl.getPrimitive()), Io.push(cr, oa), Vt.setBuffer(n._roots[e]);
	const o = Rf(0, n.geometry, t, i, s, r);
	Vt.clearBuffer(), zl.releasePrimitive(cr), zl.releasePrimitive(oa), Io.pop(), Io.pop();
	const a = Io.length;
	return a > 0 && ((oa = Io[a - 1]), (cr = Io[a - 2])), o;
}
function Rf(n, e, t, i, s = null, r = 0, o = 0) {
	const {float32Array: a, uint16Array: c, uint32Array: l} = Vt;
	let u = n * 2;
	if (Jn(u, c)) {
		const d = si(n, l),
			p = mi(u, c);
		return $t(n, a, cr), i(d, p, !1, o, r + n, cr);
	} else {
		let x = function (B) {
				const {uint16Array: W, uint32Array: F} = Vt;
				let X = B * 2;
				for (; !Jn(X, W); ) (B = gi(B)), (X = B * 2);
				return si(B, F);
			},
			z = function (B) {
				const {uint16Array: W, uint32Array: F} = Vt;
				let X = B * 2;
				for (; !Jn(X, W); ) (B = vi(B, F)), (X = B * 2);
				return si(B, F) + mi(X, W);
			};
		const d = gi(n),
			p = vi(n, l);
		let m = d,
			g = p,
			_,
			f,
			y,
			v;
		if (s && ((y = cr), (v = oa), $t(m, a, y), $t(g, a, v), (_ = s(y)), (f = s(v)), f < _)) {
			(m = p), (g = d);
			const B = _;
			(_ = f), (f = B), (y = v);
		}
		y || ((y = cr), $t(m, a, y));
		const A = Jn(m * 2, c),
			S = t(y, A, _, o + 1, r + m);
		let T;
		if (S === XE) {
			const B = x(m),
				F = z(m) - B;
			T = i(B, F, !0, o + 1, r + m, y);
		} else T = S && Rf(m, e, t, i, s, r, o + 1);
		if (T) return !0;
		(v = oa), $t(g, a, v);
		const R = Jn(g * 2, c),
			D = t(v, R, f, o + 1, r + g);
		let E;
		if (D === XE) {
			const B = x(g),
				F = z(g) - B;
			E = i(B, F, !0, o + 1, r + g, v);
		} else E = D && Rf(g, e, t, i, s, r, o + 1);
		return !!E;
	}
}
const Za = new w(),
	sp = new w();
function Zk(n, e, t = {}, i = 0, s = 1 / 0) {
	const r = i * i,
		o = s * s;
	let a = 1 / 0,
		c = null;
	if (
		(n.shapecast({
			boundsTraverseOrder: (u) => (Za.copy(e).clamp(u.min, u.max), Za.distanceToSquared(e)),
			intersectsBounds: (u, h, d) => d < a && d < o,
			intersectsTriangle: (u, h) => {
				u.closestPointToPoint(e, Za);
				const d = e.distanceToSquared(Za);
				return d < a && (sp.copy(Za), (a = d), (c = h)), d < r;
			},
		}),
		a === 1 / 0)
	)
		return null;
	const l = Math.sqrt(a);
	return t.point ? t.point.copy(sp) : (t.point = sp.clone()), (t.distance = l), (t.faceIndex = c), t;
}
const Do = new w(),
	Lo = new w(),
	Uo = new w(),
	Hl = new re(),
	Wl = new re(),
	jl = new re(),
	ZE = new w(),
	QE = new w(),
	JE = new w(),
	Xl = new w();
function Qk(n, e, t, i, s, r) {
	let o;
	return (
		r === fn ? (o = n.intersectTriangle(i, t, e, !0, s)) : (o = n.intersectTriangle(e, t, i, r !== Zn, s)),
		o === null ? null : {distance: n.origin.distanceTo(s), point: s.clone()}
	);
}
function Jk(n, e, t, i, s, r, o, a, c) {
	Do.fromBufferAttribute(e, r), Lo.fromBufferAttribute(e, o), Uo.fromBufferAttribute(e, a);
	const l = Qk(n, Do, Lo, Uo, Xl, c);
	if (l) {
		i &&
			(Hl.fromBufferAttribute(i, r),
			Wl.fromBufferAttribute(i, o),
			jl.fromBufferAttribute(i, a),
			(l.uv = Tn.getInterpolation(Xl, Do, Lo, Uo, Hl, Wl, jl, new re()))),
			s &&
				(Hl.fromBufferAttribute(s, r),
				Wl.fromBufferAttribute(s, o),
				jl.fromBufferAttribute(s, a),
				(l.uv1 = Tn.getInterpolation(Xl, Do, Lo, Uo, Hl, Wl, jl, new re()))),
			t &&
				(ZE.fromBufferAttribute(t, r),
				QE.fromBufferAttribute(t, o),
				JE.fromBufferAttribute(t, a),
				(l.normal = Tn.getInterpolation(Xl, Do, Lo, Uo, ZE, QE, JE, new w())),
				l.normal.dot(n.direction) > 0 && l.normal.multiplyScalar(-1));
		const u = {a: r, b: o, c: a, normal: new w(), materialIndex: 0};
		Tn.getNormal(Do, Lo, Uo, u.normal), (l.face = u), (l.faceIndex = r);
	}
	return l;
}
function $h(n, e, t, i, s) {
	const r = i * 3;
	let o = r + 0,
		a = r + 1,
		c = r + 2;
	const l = n.index;
	n.index && ((o = l.getX(o)), (a = l.getX(a)), (c = l.getX(c)));
	const {position: u, normal: h, uv: d, uv1: p} = n.attributes,
		m = Jk(t, u, h, d, p, o, a, c, e);
	return m ? ((m.faceIndex = i), s && s.push(m), m) : null;
}
function un(n, e, t, i) {
	const s = n.a,
		r = n.b,
		o = n.c;
	let a = e,
		c = e + 1,
		l = e + 2;
	t && ((a = t.getX(a)), (c = t.getX(c)), (l = t.getX(l))),
		(s.x = i.getX(a)),
		(s.y = i.getY(a)),
		(s.z = i.getZ(a)),
		(r.x = i.getX(c)),
		(r.y = i.getY(c)),
		(r.z = i.getZ(c)),
		(o.x = i.getX(l)),
		(o.y = i.getY(l)),
		(o.z = i.getZ(l));
}
function e3(n, e, t, i, s, r) {
	const {geometry: o, _indirectBuffer: a} = n;
	for (let c = i, l = i + s; c < l; c++) $h(o, e, t, c, r);
}
function t3(n, e, t, i, s) {
	const {geometry: r, _indirectBuffer: o} = n;
	let a = 1 / 0,
		c = null;
	for (let l = i, u = i + s; l < u; l++) {
		let h;
		(h = $h(r, e, t, l)), h && h.distance < a && ((c = h), (a = h.distance));
	}
	return c;
}
function n3(n, e, t, i, s, r, o) {
	const {geometry: a} = t,
		{index: c} = a,
		l = a.attributes.position;
	for (let u = n, h = e + n; u < h; u++) {
		let d;
		if (((d = u), un(o, d * 3, c, l), (o.needsUpdate = !0), i(o, d, s, r))) return !0;
	}
	return !1;
}
function i3(n, e = null) {
	e && Array.isArray(e) && (e = new Set(e));
	const t = n.geometry,
		i = t.index ? t.index.array : null,
		s = t.attributes.position;
	let r,
		o,
		a,
		c,
		l = 0;
	const u = n._roots;
	for (let d = 0, p = u.length; d < p; d++)
		(r = u[d]),
			(o = new Uint32Array(r)),
			(a = new Uint16Array(r)),
			(c = new Float32Array(r)),
			h(0, l),
			(l += r.byteLength);
	function h(d, p, m = !1) {
		const g = d * 2;
		if (a[g + 15] === Xh) {
			const f = o[d + 6],
				y = a[g + 14];
			let v = 1 / 0,
				A = 1 / 0,
				S = 1 / 0,
				T = -1 / 0,
				R = -1 / 0,
				D = -1 / 0;
			for (let E = 3 * f, x = 3 * (f + y); E < x; E++) {
				let z = i[E];
				const B = s.getX(z),
					W = s.getY(z),
					F = s.getZ(z);
				B < v && (v = B),
					B > T && (T = B),
					W < A && (A = W),
					W > R && (R = W),
					F < S && (S = F),
					F > D && (D = F);
			}
			return c[d + 0] !== v ||
				c[d + 1] !== A ||
				c[d + 2] !== S ||
				c[d + 3] !== T ||
				c[d + 4] !== R ||
				c[d + 5] !== D
				? ((c[d + 0] = v), (c[d + 1] = A), (c[d + 2] = S), (c[d + 3] = T), (c[d + 4] = R), (c[d + 5] = D), !0)
				: !1;
		} else {
			const f = d + 8,
				y = o[d + 6],
				v = f + p,
				A = y + p;
			let S = m,
				T = !1,
				R = !1;
			e ? S || ((T = e.has(v)), (R = e.has(A)), (S = !T && !R)) : ((T = !0), (R = !0));
			const D = S || T,
				E = S || R;
			let x = !1;
			D && (x = h(f, p, S));
			let z = !1;
			E && (z = h(y, p, S));
			const B = x || z;
			if (B)
				for (let W = 0; W < 3; W++) {
					const F = f + W,
						X = y + W,
						Z = c[F],
						Q = c[F + 3],
						he = c[X],
						ie = c[X + 3];
					(c[d + W] = Z < he ? Z : he), (c[d + W + 3] = Q > ie ? Q : ie);
				}
			return B;
		}
	}
}
const eC = new Ht();
function Er(n, e, t, i) {
	return $t(n, e, eC), t.intersectBox(eC, i);
}
function s3(n, e, t, i, s, r) {
	const {geometry: o, _indirectBuffer: a} = n;
	for (let c = i, l = i + s; c < l; c++) {
		let u = a ? a[c] : c;
		$h(o, e, t, u, r);
	}
}
function r3(n, e, t, i, s) {
	const {geometry: r, _indirectBuffer: o} = n;
	let a = 1 / 0,
		c = null;
	for (let l = i, u = i + s; l < u; l++) {
		let h;
		(h = $h(r, e, t, o ? o[l] : l)), h && h.distance < a && ((c = h), (a = h.distance));
	}
	return c;
}
function o3(n, e, t, i, s, r, o) {
	const {geometry: a} = t,
		{index: c} = a,
		l = a.attributes.position;
	for (let u = n, h = e + n; u < h; u++) {
		let d;
		if (((d = t.resolveTriangleIndex(u)), un(o, d * 3, c, l), (o.needsUpdate = !0), i(o, d, s, r))) return !0;
	}
	return !1;
}
const tC = new w();
function a3(n, e, t, i, s) {
	Vt.setBuffer(n._roots[e]), wf(0, n, t, i, s), Vt.clearBuffer();
}
function wf(n, e, t, i, s) {
	const {float32Array: r, uint16Array: o, uint32Array: a} = Vt,
		c = n * 2;
	if (Jn(c, o)) {
		const u = si(n, a),
			h = mi(c, o);
		e3(e, t, i, u, h, s);
	} else {
		const u = gi(n);
		Er(u, r, i, tC) && wf(u, e, t, i, s);
		const h = vi(n, a);
		Er(h, r, i, tC) && wf(h, e, t, i, s);
	}
}
const nC = new w(),
	c3 = ['x', 'y', 'z'];
function l3(n, e, t, i) {
	Vt.setBuffer(n._roots[e]);
	const s = Of(0, n, t, i);
	return Vt.clearBuffer(), s;
}
function Of(n, e, t, i) {
	const {float32Array: s, uint16Array: r, uint32Array: o} = Vt;
	let a = n * 2;
	if (Jn(a, r)) {
		const l = si(n, o),
			u = mi(a, r);
		return t3(e, t, i, l, u);
	} else {
		const l = kA(n, o),
			u = c3[l],
			d = i.direction[u] >= 0;
		let p, m;
		d ? ((p = gi(n)), (m = vi(n, o))) : ((p = vi(n, o)), (m = gi(n)));
		const _ = Er(p, s, i, nC) ? Of(p, e, t, i) : null;
		if (_) {
			const v = _.point[u];
			if (d ? v <= s[m + l] : v >= s[m + l + 3]) return _;
		}
		const y = Er(m, s, i, nC) ? Of(m, e, t, i) : null;
		return _ && y ? (_.distance <= y.distance ? _ : y) : _ || y || null;
	}
}
const $l = new Ht(),
	Fo = new Wi(),
	Bo = new Wi(),
	Qa = new Qe(),
	iC = new Yn(),
	ql = new Yn();
function u3(n, e, t, i) {
	Vt.setBuffer(n._roots[e]);
	const s = Pf(0, n, t, i);
	return Vt.clearBuffer(), s;
}
function Pf(n, e, t, i, s = null) {
	const {float32Array: r, uint16Array: o, uint32Array: a} = Vt;
	let c = n * 2;
	if (
		(s === null &&
			(t.boundingBox || t.computeBoundingBox(), iC.set(t.boundingBox.min, t.boundingBox.max, i), (s = iC)),
		Jn(c, o))
	) {
		const u = e.geometry,
			h = u.index,
			d = u.attributes.position,
			p = t.index,
			m = t.attributes.position,
			g = si(n, a),
			_ = mi(c, o);
		if ((Qa.copy(i).invert(), t.boundsTree))
			return (
				$t(n, r, ql),
				ql.matrix.copy(Qa),
				(ql.needsUpdate = !0),
				t.boundsTree.shapecast({
					intersectsBounds: (y) => ql.intersectsBox(y),
					intersectsTriangle: (y) => {
						y.a.applyMatrix4(i), y.b.applyMatrix4(i), y.c.applyMatrix4(i), (y.needsUpdate = !0);
						for (let v = g * 3, A = (_ + g) * 3; v < A; v += 3)
							if ((un(Bo, v, h, d), (Bo.needsUpdate = !0), y.intersectsTriangle(Bo))) return !0;
						return !1;
					},
				})
			);
		for (let f = g * 3, y = (_ + g) * 3; f < y; f += 3) {
			un(Fo, f, h, d), Fo.a.applyMatrix4(Qa), Fo.b.applyMatrix4(Qa), Fo.c.applyMatrix4(Qa), (Fo.needsUpdate = !0);
			for (let v = 0, A = p.count; v < A; v += 3)
				if ((un(Bo, v, p, m), (Bo.needsUpdate = !0), Fo.intersectsTriangle(Bo))) return !0;
		}
	} else {
		const u = n + 8,
			h = a[n + 6];
		return (
			$t(u, r, $l),
			!!((s.intersectsBox($l) && Pf(u, e, t, i, s)) || ($t(h, r, $l), s.intersectsBox($l) && Pf(h, e, t, i, s)))
		);
	}
}
const Yl = new Qe(),
	rp = new Yn(),
	Ja = new Yn(),
	h3 = new w(),
	d3 = new w(),
	p3 = new w(),
	f3 = new w();
function _3(n, e, t, i = {}, s = {}, r = 0, o = 1 / 0) {
	e.boundingBox || e.computeBoundingBox(), rp.set(e.boundingBox.min, e.boundingBox.max, t), (rp.needsUpdate = !0);
	const a = n.geometry,
		c = a.attributes.position,
		l = a.index,
		u = e.attributes.position,
		h = e.index,
		d = Ei.getPrimitive(),
		p = Ei.getPrimitive();
	let m = h3,
		g = d3,
		_ = null,
		f = null;
	s && ((_ = p3), (f = f3));
	let y = 1 / 0,
		v = null,
		A = null;
	return (
		Yl.copy(t).invert(),
		Ja.matrix.copy(Yl),
		n.shapecast({
			boundsTraverseOrder: (S) => rp.distanceToBox(S),
			intersectsBounds: (S, T, R) =>
				R < y && R < o ? (T && (Ja.min.copy(S.min), Ja.max.copy(S.max), (Ja.needsUpdate = !0)), !0) : !1,
			intersectsRange: (S, T) => {
				if (e.boundsTree)
					return e.boundsTree.shapecast({
						boundsTraverseOrder: (D) => Ja.distanceToBox(D),
						intersectsBounds: (D, E, x) => x < y && x < o,
						intersectsRange: (D, E) => {
							for (let x = D, z = D + E; x < z; x++) {
								un(p, 3 * x, h, u),
									p.a.applyMatrix4(t),
									p.b.applyMatrix4(t),
									p.c.applyMatrix4(t),
									(p.needsUpdate = !0);
								for (let B = S, W = S + T; B < W; B++) {
									un(d, 3 * B, l, c), (d.needsUpdate = !0);
									const F = d.distanceToTriangle(p, m, _);
									if ((F < y && (g.copy(m), f && f.copy(_), (y = F), (v = B), (A = x)), F < r))
										return !0;
								}
							}
						},
					});
				{
					const R = La(e);
					for (let D = 0, E = R; D < E; D++) {
						un(p, 3 * D, h, u),
							p.a.applyMatrix4(t),
							p.b.applyMatrix4(t),
							p.c.applyMatrix4(t),
							(p.needsUpdate = !0);
						for (let x = S, z = S + T; x < z; x++) {
							un(d, 3 * x, l, c), (d.needsUpdate = !0);
							const B = d.distanceToTriangle(p, m, _);
							if ((B < y && (g.copy(m), f && f.copy(_), (y = B), (v = x), (A = D)), B < r)) return !0;
						}
					}
				}
			},
		}),
		Ei.releasePrimitive(d),
		Ei.releasePrimitive(p),
		y === 1 / 0
			? null
			: (i.point ? i.point.copy(g) : (i.point = g.clone()),
			  (i.distance = y),
			  (i.faceIndex = v),
			  s &&
					(s.point ? s.point.copy(f) : (s.point = f.clone()),
					s.point.applyMatrix4(Yl),
					g.applyMatrix4(Yl),
					(s.distance = g.sub(s.point).length()),
					(s.faceIndex = A)),
			  i)
	);
}
function m3(n, e = null) {
	e && Array.isArray(e) && (e = new Set(e));
	const t = n.geometry,
		i = t.index ? t.index.array : null,
		s = t.attributes.position;
	let r,
		o,
		a,
		c,
		l = 0;
	const u = n._roots;
	for (let d = 0, p = u.length; d < p; d++)
		(r = u[d]),
			(o = new Uint32Array(r)),
			(a = new Uint16Array(r)),
			(c = new Float32Array(r)),
			h(0, l),
			(l += r.byteLength);
	function h(d, p, m = !1) {
		const g = d * 2;
		if (a[g + 15] === Xh) {
			const f = o[d + 6],
				y = a[g + 14];
			let v = 1 / 0,
				A = 1 / 0,
				S = 1 / 0,
				T = -1 / 0,
				R = -1 / 0,
				D = -1 / 0;
			for (let E = f, x = f + y; E < x; E++) {
				const z = 3 * n.resolveTriangleIndex(E);
				for (let B = 0; B < 3; B++) {
					let W = z + B;
					W = i ? i[W] : W;
					const F = s.getX(W),
						X = s.getY(W),
						Z = s.getZ(W);
					F < v && (v = F),
						F > T && (T = F),
						X < A && (A = X),
						X > R && (R = X),
						Z < S && (S = Z),
						Z > D && (D = Z);
				}
			}
			return c[d + 0] !== v ||
				c[d + 1] !== A ||
				c[d + 2] !== S ||
				c[d + 3] !== T ||
				c[d + 4] !== R ||
				c[d + 5] !== D
				? ((c[d + 0] = v), (c[d + 1] = A), (c[d + 2] = S), (c[d + 3] = T), (c[d + 4] = R), (c[d + 5] = D), !0)
				: !1;
		} else {
			const f = d + 8,
				y = o[d + 6],
				v = f + p,
				A = y + p;
			let S = m,
				T = !1,
				R = !1;
			e ? S || ((T = e.has(v)), (R = e.has(A)), (S = !T && !R)) : ((T = !0), (R = !0));
			const D = S || T,
				E = S || R;
			let x = !1;
			D && (x = h(f, p, S));
			let z = !1;
			E && (z = h(y, p, S));
			const B = x || z;
			if (B)
				for (let W = 0; W < 3; W++) {
					const F = f + W,
						X = y + W,
						Z = c[F],
						Q = c[F + 3],
						he = c[X],
						ie = c[X + 3];
					(c[d + W] = Z < he ? Z : he), (c[d + W + 3] = Q > ie ? Q : ie);
				}
			return B;
		}
	}
}
const sC = new w();
function g3(n, e, t, i, s) {
	Vt.setBuffer(n._roots[e]), Nf(0, n, t, i, s), Vt.clearBuffer();
}
function Nf(n, e, t, i, s) {
	const {float32Array: r, uint16Array: o, uint32Array: a} = Vt,
		c = n * 2;
	if (Jn(c, o)) {
		const u = si(n, a),
			h = mi(c, o);
		s3(e, t, i, u, h, s);
	} else {
		const u = gi(n);
		Er(u, r, i, sC) && Nf(u, e, t, i, s);
		const h = vi(n, a);
		Er(h, r, i, sC) && Nf(h, e, t, i, s);
	}
}
const rC = new w(),
	v3 = ['x', 'y', 'z'];
function E3(n, e, t, i) {
	Vt.setBuffer(n._roots[e]);
	const s = If(0, n, t, i);
	return Vt.clearBuffer(), s;
}
function If(n, e, t, i) {
	const {float32Array: s, uint16Array: r, uint32Array: o} = Vt;
	let a = n * 2;
	if (Jn(a, r)) {
		const l = si(n, o),
			u = mi(a, r);
		return r3(e, t, i, l, u);
	} else {
		const l = kA(n, o),
			u = v3[l],
			d = i.direction[u] >= 0;
		let p, m;
		d ? ((p = gi(n)), (m = vi(n, o))) : ((p = vi(n, o)), (m = gi(n)));
		const _ = Er(p, s, i, rC) ? If(p, e, t, i) : null;
		if (_) {
			const v = _.point[u];
			if (d ? v <= s[m + l] : v >= s[m + l + 3]) return _;
		}
		const y = Er(m, s, i, rC) ? If(m, e, t, i) : null;
		return _ && y ? (_.distance <= y.distance ? _ : y) : _ || y || null;
	}
}
const Kl = new Ht(),
	ko = new Wi(),
	Vo = new Wi(),
	ec = new Qe(),
	oC = new Yn(),
	Zl = new Yn();
function C3(n, e, t, i) {
	Vt.setBuffer(n._roots[e]);
	const s = Df(0, n, t, i);
	return Vt.clearBuffer(), s;
}
function Df(n, e, t, i, s = null) {
	const {float32Array: r, uint16Array: o, uint32Array: a} = Vt;
	let c = n * 2;
	if (
		(s === null &&
			(t.boundingBox || t.computeBoundingBox(), oC.set(t.boundingBox.min, t.boundingBox.max, i), (s = oC)),
		Jn(c, o))
	) {
		const u = e.geometry,
			h = u.index,
			d = u.attributes.position,
			p = t.index,
			m = t.attributes.position,
			g = si(n, a),
			_ = mi(c, o);
		if ((ec.copy(i).invert(), t.boundsTree))
			return (
				$t(n, r, Zl),
				Zl.matrix.copy(ec),
				(Zl.needsUpdate = !0),
				t.boundsTree.shapecast({
					intersectsBounds: (y) => Zl.intersectsBox(y),
					intersectsTriangle: (y) => {
						y.a.applyMatrix4(i), y.b.applyMatrix4(i), y.c.applyMatrix4(i), (y.needsUpdate = !0);
						for (let v = g, A = _ + g; v < A; v++)
							if (
								(un(Vo, 3 * e.resolveTriangleIndex(v), h, d),
								(Vo.needsUpdate = !0),
								y.intersectsTriangle(Vo))
							)
								return !0;
						return !1;
					},
				})
			);
		for (let f = g, y = _ + g; f < y; f++) {
			const v = e.resolveTriangleIndex(f);
			un(ko, 3 * v, h, d),
				ko.a.applyMatrix4(ec),
				ko.b.applyMatrix4(ec),
				ko.c.applyMatrix4(ec),
				(ko.needsUpdate = !0);
			for (let A = 0, S = p.count; A < S; A += 3)
				if ((un(Vo, A, p, m), (Vo.needsUpdate = !0), ko.intersectsTriangle(Vo))) return !0;
		}
	} else {
		const u = n + 8,
			h = a[n + 6];
		return (
			$t(u, r, Kl),
			!!((s.intersectsBox(Kl) && Df(u, e, t, i, s)) || ($t(h, r, Kl), s.intersectsBox(Kl) && Df(h, e, t, i, s)))
		);
	}
}
const Ql = new Qe(),
	op = new Yn(),
	tc = new Yn(),
	y3 = new w(),
	b3 = new w(),
	S3 = new w(),
	A3 = new w();
function x3(n, e, t, i = {}, s = {}, r = 0, o = 1 / 0) {
	e.boundingBox || e.computeBoundingBox(), op.set(e.boundingBox.min, e.boundingBox.max, t), (op.needsUpdate = !0);
	const a = n.geometry,
		c = a.attributes.position,
		l = a.index,
		u = e.attributes.position,
		h = e.index,
		d = Ei.getPrimitive(),
		p = Ei.getPrimitive();
	let m = y3,
		g = b3,
		_ = null,
		f = null;
	s && ((_ = S3), (f = A3));
	let y = 1 / 0,
		v = null,
		A = null;
	return (
		Ql.copy(t).invert(),
		tc.matrix.copy(Ql),
		n.shapecast({
			boundsTraverseOrder: (S) => op.distanceToBox(S),
			intersectsBounds: (S, T, R) =>
				R < y && R < o ? (T && (tc.min.copy(S.min), tc.max.copy(S.max), (tc.needsUpdate = !0)), !0) : !1,
			intersectsRange: (S, T) => {
				if (e.boundsTree) {
					const R = e.boundsTree;
					return R.shapecast({
						boundsTraverseOrder: (D) => tc.distanceToBox(D),
						intersectsBounds: (D, E, x) => x < y && x < o,
						intersectsRange: (D, E) => {
							for (let x = D, z = D + E; x < z; x++) {
								const B = R.resolveTriangleIndex(x);
								un(p, 3 * B, h, u),
									p.a.applyMatrix4(t),
									p.b.applyMatrix4(t),
									p.c.applyMatrix4(t),
									(p.needsUpdate = !0);
								for (let W = S, F = S + T; W < F; W++) {
									const X = n.resolveTriangleIndex(W);
									un(d, 3 * X, l, c), (d.needsUpdate = !0);
									const Z = d.distanceToTriangle(p, m, _);
									if ((Z < y && (g.copy(m), f && f.copy(_), (y = Z), (v = W), (A = x)), Z < r))
										return !0;
								}
							}
						},
					});
				} else {
					const R = La(e);
					for (let D = 0, E = R; D < E; D++) {
						un(p, 3 * D, h, u),
							p.a.applyMatrix4(t),
							p.b.applyMatrix4(t),
							p.c.applyMatrix4(t),
							(p.needsUpdate = !0);
						for (let x = S, z = S + T; x < z; x++) {
							const B = n.resolveTriangleIndex(x);
							un(d, 3 * B, l, c), (d.needsUpdate = !0);
							const W = d.distanceToTriangle(p, m, _);
							if ((W < y && (g.copy(m), f && f.copy(_), (y = W), (v = x), (A = D)), W < r)) return !0;
						}
					}
				}
			},
		}),
		Ei.releasePrimitive(d),
		Ei.releasePrimitive(p),
		y === 1 / 0
			? null
			: (i.point ? i.point.copy(g) : (i.point = g.clone()),
			  (i.distance = y),
			  (i.faceIndex = v),
			  s &&
					(s.point ? s.point.copy(f) : (s.point = f.clone()),
					s.point.applyMatrix4(Ql),
					g.applyMatrix4(Ql),
					(s.distance = g.sub(s.point).length()),
					(s.faceIndex = A)),
			  i)
	);
}
function M3() {
	return typeof SharedArrayBuffer < 'u';
}
const bc = new Vt.constructor(),
	sh = new Vt.constructor(),
	er = new am(() => new Ht()),
	Go = new Ht(),
	zo = new Ht(),
	ap = new Ht(),
	cp = new Ht();
let lp = !1;
function T3(n, e, t, i) {
	if (lp) throw new Error('MeshBVH: Recursive calls to bvhcast not supported.');
	lp = !0;
	const s = n._roots,
		r = e._roots;
	let o,
		a = 0,
		c = 0;
	const l = new Qe().copy(t).invert();
	for (let u = 0, h = s.length; u < h; u++) {
		bc.setBuffer(s[u]), (c = 0);
		const d = er.getPrimitive();
		$t(0, bc.float32Array, d), d.applyMatrix4(l);
		for (
			let p = 0, m = r.length;
			p < m &&
			(sh.setBuffer(r[u]), (o = Li(0, 0, t, l, i, a, c, 0, 0, d)), sh.clearBuffer(), (c += r[p].length), !o);
			p++
		);
		if ((er.releasePrimitive(d), bc.clearBuffer(), (a += s[u].length), o)) break;
	}
	return (lp = !1), o;
}
function Li(n, e, t, i, s, r = 0, o = 0, a = 0, c = 0, l = null, u = !1) {
	let h, d;
	u ? ((h = sh), (d = bc)) : ((h = bc), (d = sh));
	const p = h.float32Array,
		m = h.uint32Array,
		g = h.uint16Array,
		_ = d.float32Array,
		f = d.uint32Array,
		y = d.uint16Array,
		v = n * 2,
		A = e * 2,
		S = Jn(v, g),
		T = Jn(A, y);
	let R = !1;
	if (T && S)
		u
			? (R = s(si(e, f), mi(e * 2, y), si(n, m), mi(n * 2, g), c, o + e, a, r + n))
			: (R = s(si(n, m), mi(n * 2, g), si(e, f), mi(e * 2, y), a, r + n, c, o + e));
	else if (T) {
		const D = er.getPrimitive();
		$t(e, _, D), D.applyMatrix4(t);
		const E = gi(n),
			x = vi(n, m);
		$t(E, p, Go), $t(x, p, zo);
		const z = D.intersectsBox(Go),
			B = D.intersectsBox(zo);
		(R = (z && Li(e, E, i, t, s, o, r, c, a + 1, D, !u)) || (B && Li(e, x, i, t, s, o, r, c, a + 1, D, !u))),
			er.releasePrimitive(D);
	} else {
		const D = gi(e),
			E = vi(e, f);
		$t(D, _, ap), $t(E, _, cp);
		const x = l.intersectsBox(ap),
			z = l.intersectsBox(cp);
		if (x && z) R = Li(n, D, t, i, s, r, o, a, c + 1, l, u) || Li(n, E, t, i, s, r, o, a, c + 1, l, u);
		else if (x)
			if (S) R = Li(n, D, t, i, s, r, o, a, c + 1, l, u);
			else {
				const B = er.getPrimitive();
				B.copy(ap).applyMatrix4(t);
				const W = gi(n),
					F = vi(n, m);
				$t(W, p, Go), $t(F, p, zo);
				const X = B.intersectsBox(Go),
					Z = B.intersectsBox(zo);
				(R =
					(X && Li(D, W, i, t, s, o, r, c, a + 1, B, !u)) || (Z && Li(D, F, i, t, s, o, r, c, a + 1, B, !u))),
					er.releasePrimitive(B);
			}
		else if (z)
			if (S) R = Li(n, E, t, i, s, r, o, a, c + 1, l, u);
			else {
				const B = er.getPrimitive();
				B.copy(cp).applyMatrix4(t);
				const W = gi(n),
					F = vi(n, m);
				$t(W, p, Go), $t(F, p, zo);
				const X = B.intersectsBox(Go),
					Z = B.intersectsBox(zo);
				(R =
					(X && Li(E, W, i, t, s, o, r, c, a + 1, B, !u)) || (Z && Li(E, F, i, t, s, o, r, c, a + 1, B, !u))),
					er.releasePrimitive(B);
			}
	}
	return R;
}
const Jl = new Yn(),
	aC = new Ht(),
	R3 = {
		strategy: rm,
		maxDepth: 40,
		maxLeafTris: 10,
		useSharedArrayBuffer: !1,
		setBoundingBox: !0,
		onProgress: null,
		indirect: !1,
		verbose: !0,
	};
class cm {
	static serialize(e, t = {}) {
		t = {cloneBuffers: !0, ...t};
		const i = e.geometry,
			s = e._roots,
			r = e._indirectBuffer,
			o = i.getIndex();
		let a;
		return (
			t.cloneBuffers
				? (a = {roots: s.map((c) => c.slice()), index: o.array.slice(), indirectBuffer: r ? r.slice() : null})
				: (a = {roots: s, index: o.array, indirectBuffer: r}),
			a
		);
	}
	static deserialize(e, t, i = {}) {
		i = {setIndex: !0, indirect: !!e.indirectBuffer, ...i};
		const {index: s, roots: r, indirectBuffer: o} = e,
			a = new cm(t, {...i, [ep]: !0});
		if (((a._roots = r), (a._indirectBuffer = o || null), i.setIndex)) {
			const c = t.getIndex();
			if (c === null) {
				const l = new kn(e.index, 1, !1);
				t.setIndex(l);
			} else c.array !== s && (c.array.set(s), (c.needsUpdate = !0));
		}
		return a;
	}
	get indirect() {
		return !!this._indirectBuffer;
	}
	constructor(e, t = {}) {
		if (e.isBufferGeometry) {
			if (e.index && e.index.isInterleavedBufferAttribute)
				throw new Error('MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.');
		} else throw new Error('MeshBVH: Only BufferGeometries are supported.');
		if (((t = Object.assign({...R3, [ep]: !1}, t)), t.useSharedArrayBuffer && !M3()))
			throw new Error('MeshBVH: SharedArrayBuffer is not available.');
		(this.geometry = e),
			(this._roots = null),
			(this._indirectBuffer = null),
			t[ep] ||
				(Wk(this, t), !e.boundingBox && t.setBoundingBox && (e.boundingBox = this.getBoundingBox(new Ht())));
		const {_indirectBuffer: i} = this;
		this.resolveTriangleIndex = t.indirect ? (s) => i[s] : (s) => s;
	}
	refit(e = null) {
		return (this.indirect ? m3 : i3)(this, e);
	}
	traverse(e, t = 0) {
		const i = this._roots[t],
			s = new Uint32Array(i),
			r = new Uint16Array(i);
		o(0);
		function o(a, c = 0) {
			const l = a * 2,
				u = r[l + 15] === Xh;
			if (u) {
				const h = s[a + 6],
					d = r[l + 14];
				e(c, u, new Float32Array(i, a * 4, 6), h, d);
			} else {
				const h = a + yc / 4,
					d = s[a + 6],
					p = s[a + 7];
				e(c, u, new Float32Array(i, a * 4, 6), p) || (o(h, c + 1), o(d, c + 1));
			}
		}
	}
	raycast(e, t = Ln) {
		const i = this._roots,
			s = this.geometry,
			r = [],
			o = t.isMaterial,
			a = Array.isArray(t),
			c = s.groups,
			l = o ? t.side : t,
			u = this.indirect ? g3 : a3;
		for (let h = 0, d = i.length; h < d; h++) {
			const p = a ? t[c[h].materialIndex].side : l,
				m = r.length;
			if ((u(this, h, p, e, r), a)) {
				const g = c[h].materialIndex;
				for (let _ = m, f = r.length; _ < f; _++) r[_].face.materialIndex = g;
			}
		}
		return r;
	}
	raycastFirst(e, t = Ln) {
		const i = this._roots,
			s = this.geometry,
			r = t.isMaterial,
			o = Array.isArray(t);
		let a = null;
		const c = s.groups,
			l = r ? t.side : t,
			u = this.indirect ? E3 : l3;
		for (let h = 0, d = i.length; h < d; h++) {
			const p = o ? t[c[h].materialIndex].side : l,
				m = u(this, h, p, e);
			m != null &&
				(a == null || m.distance < a.distance) &&
				((a = m), o && (m.face.materialIndex = c[h].materialIndex));
		}
		return a;
	}
	intersectsGeometry(e, t) {
		let i = !1;
		const s = this._roots,
			r = this.indirect ? C3 : u3;
		for (let o = 0, a = s.length; o < a && ((i = r(this, o, e, t)), !i); o++);
		return i;
	}
	shapecast(e) {
		const t = Ei.getPrimitive(),
			i = this.indirect ? o3 : n3;
		let {boundsTraverseOrder: s, intersectsBounds: r, intersectsRange: o, intersectsTriangle: a} = e;
		if (o && a) {
			const h = o;
			o = (d, p, m, g, _) => (h(d, p, m, g, _) ? !0 : i(d, p, this, a, m, g, t));
		} else o || (a ? (o = (h, d, p, m) => i(h, d, this, a, p, m, t)) : (o = (h, d, p) => p));
		let c = !1,
			l = 0;
		const u = this._roots;
		for (let h = 0, d = u.length; h < d; h++) {
			const p = u[h];
			if (((c = Kk(this, h, r, o, s, l)), c)) break;
			l += p.byteLength;
		}
		return Ei.releasePrimitive(t), c;
	}
	bvhcast(e, t, i) {
		let {intersectsRanges: s, intersectsTriangles: r} = i;
		const o = Ei.getPrimitive(),
			a = this.geometry.index,
			c = this.geometry.attributes.position,
			l = this.indirect
				? (m) => {
						const g = this.resolveTriangleIndex(m);
						un(o, g * 3, a, c);
				  }
				: (m) => {
						un(o, m * 3, a, c);
				  },
			u = Ei.getPrimitive(),
			h = e.geometry.index,
			d = e.geometry.attributes.position,
			p = e.indirect
				? (m) => {
						const g = e.resolveTriangleIndex(m);
						un(u, g * 3, h, d);
				  }
				: (m) => {
						un(u, m * 3, h, d);
				  };
		if (r) {
			const m = (g, _, f, y, v, A, S, T) => {
				for (let R = f, D = f + y; R < D; R++) {
					p(R), u.a.applyMatrix4(t), u.b.applyMatrix4(t), u.c.applyMatrix4(t), (u.needsUpdate = !0);
					for (let E = g, x = g + _; E < x; E++)
						if ((l(E), (o.needsUpdate = !0), r(o, u, E, R, v, A, S, T))) return !0;
				}
				return !1;
			};
			if (s) {
				const g = s;
				s = function (_, f, y, v, A, S, T, R) {
					return g(_, f, y, v, A, S, T, R) ? !0 : m(_, f, y, v, A, S, T, R);
				};
			} else s = m;
		}
		return T3(this, e, t, s);
	}
	intersectsBox(e, t) {
		return (
			Jl.set(e.min, e.max, t),
			(Jl.needsUpdate = !0),
			this.shapecast({
				intersectsBounds: (i) => Jl.intersectsBox(i),
				intersectsTriangle: (i) => Jl.intersectsTriangle(i),
			})
		);
	}
	intersectsSphere(e) {
		return this.shapecast({
			intersectsBounds: (t) => e.intersectsBox(t),
			intersectsTriangle: (t) => t.intersectsSphere(e),
		});
	}
	closestPointToGeometry(e, t, i = {}, s = {}, r = 0, o = 1 / 0) {
		return (this.indirect ? x3 : _3)(this, e, t, i, s, r, o);
	}
	closestPointToPoint(e, t = {}, i = 0, s = 1 / 0) {
		return Zk(this, e, t, i, s);
	}
	getBoundingBox(e) {
		return (
			e.makeEmpty(),
			this._roots.forEach((i) => {
				$t(0, new Float32Array(i), aC), e.union(aC);
			}),
			e
		);
	}
}
function cC(n, e, t) {
	return n === null ||
		(n.point.applyMatrix4(e.matrixWorld),
		(n.distance = n.point.distanceTo(t.ray.origin)),
		(n.object = e),
		n.distance < t.near || n.distance > t.far)
		? null
		: n;
}
const up = new Ta(),
	lC = new Qe(),
	w3 = On.prototype.raycast;
function uC(n, e) {
	if (this.geometry.boundsTree) {
		if (this.material === void 0) return;
		lC.copy(this.matrixWorld).invert(), up.copy(n.ray).applyMatrix4(lC);
		const t = this.geometry.boundsTree;
		if (n.firstHitOnly === !0) {
			const i = cC(t.raycastFirst(up, this.material), this, n);
			i && e.push(i);
		} else {
			const i = t.raycast(up, this.material);
			for (let s = 0, r = i.length; s < r; s++) {
				const o = cC(i[s], this, n);
				o && e.push(o);
			}
		}
	} else w3.call(this, n, e);
}
class zA {
	static assignBVH(e, t) {
		(e.raycast = uC), (e.geometry.boundsTree = t);
	}
	static assignDefaultBVHIfNone(e) {
		let t = e.geometry.boundsTree || this.defaultBVH(e);
		this.assignBVH(e, t);
	}
	static createBVH(e, t) {
		return new cm(e.geometry, t);
	}
	static defaultBVH(e) {
		return this.createBVH(e, {strategy: rm, maxLeafTris: 10, maxDepth: 40, verbose: !1});
	}
	static copyBVH(e, t) {
		const i = t.geometry.boundsTree;
		i && ((e.raycast = uC), this.assignBVH(e, i));
	}
	static updateRaycaster(e) {
		e.firstHitOnly = !0;
	}
}
function O3(n, e = !1) {
	const t = n[0].index !== null,
		i = new Set(Object.keys(n[0].attributes)),
		s = new Set(Object.keys(n[0].morphAttributes)),
		r = {},
		o = {},
		a = n[0].morphTargetsRelative,
		c = new qn();
	let l = 0;
	for (let u = 0; u < n.length; ++u) {
		const h = n[u];
		let d = 0;
		if (t !== (h.index !== null))
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' +
						u +
						'. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.'
				),
				null
			);
		for (const p in h.attributes) {
			if (!i.has(p))
				return (
					console.error(
						'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' +
							u +
							'. All geometries must have compatible attributes; make sure "' +
							p +
							'" attribute exists among all geometries, or in none of them.'
					),
					null
				);
			r[p] === void 0 && (r[p] = []), r[p].push(h.attributes[p]), d++;
		}
		if (d !== i.size)
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' +
						u +
						'. Make sure all geometries have the same number of attributes.'
				),
				null
			);
		if (a !== h.morphTargetsRelative)
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' +
						u +
						'. .morphTargetsRelative must be consistent throughout all geometries.'
				),
				null
			);
		for (const p in h.morphAttributes) {
			if (!s.has(p))
				return (
					console.error(
						'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' +
							u +
							'.  .morphAttributes must be consistent throughout all geometries.'
					),
					null
				);
			o[p] === void 0 && (o[p] = []), o[p].push(h.morphAttributes[p]);
		}
		if (e) {
			let p;
			if (t) p = h.index.count;
			else if (h.attributes.position !== void 0) p = h.attributes.position.count;
			else
				return (
					console.error(
						'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' +
							u +
							'. The geometry must have either an index or a position attribute'
					),
					null
				);
			c.addGroup(l, p, u), (l += p);
		}
	}
	if (t) {
		let u = 0;
		const h = [];
		for (let d = 0; d < n.length; ++d) {
			const p = n[d].index;
			for (let m = 0; m < p.count; ++m) h.push(p.getX(m) + u);
			u += n[d].attributes.position.count;
		}
		c.setIndex(h);
	}
	for (const u in r) {
		const h = hC(r[u]);
		if (!h)
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' +
						u +
						' attribute.'
				),
				null
			);
		c.setAttribute(u, h);
	}
	for (const u in o) {
		const h = o[u][0].length;
		if (h === 0) break;
		(c.morphAttributes = c.morphAttributes || {}), (c.morphAttributes[u] = []);
		for (let d = 0; d < h; ++d) {
			const p = [];
			for (let g = 0; g < o[u].length; ++g) p.push(o[u][g][d]);
			const m = hC(p);
			if (!m)
				return (
					console.error(
						'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' +
							u +
							' morphAttribute.'
					),
					null
				);
			c.morphAttributes[u].push(m);
		}
	}
	return c;
}
function hC(n) {
	let e,
		t,
		i,
		s = -1,
		r = 0;
	for (let l = 0; l < n.length; ++l) {
		const u = n[l];
		if (u.isInterleavedBufferAttribute)
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeAttributes() failed. InterleavedBufferAttributes are not supported.'
				),
				null
			);
		if ((e === void 0 && (e = u.array.constructor), e !== u.array.constructor))
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.'
				),
				null
			);
		if ((t === void 0 && (t = u.itemSize), t !== u.itemSize))
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.'
				),
				null
			);
		if ((i === void 0 && (i = u.normalized), i !== u.normalized))
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.'
				),
				null
			);
		if ((s === -1 && (s = u.gpuType), s !== u.gpuType))
			return (
				console.error(
					'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.'
				),
				null
			);
		r += u.array.length;
	}
	const o = new e(r);
	let a = 0;
	for (let l = 0; l < n.length; ++l) o.set(n[l].array, a), (a += n[l].array.length);
	const c = new kn(o, t, i);
	return s !== void 0 && (c.gpuType = s), c;
}
const P3 = 'position';
class HA {
	static createIndexIfNone(e) {
		if (!e.index) {
			const t = e.getAttribute(P3);
			if (t) {
				const i = t.array;
				e.setIndex(_D(i.length / 3));
			}
		}
	}
}
const N3 = ['Quad'],
	I3 = new Set(N3);
function WA(n) {
	return I3.has(n.type);
}
function D3(n) {
	return WA(n) || Vn(n);
}
new w(1, 1, 1), new w(0, 0, 0), new w(0, 1, 0);
new w(1, 1, 1);
new re(0, 0);
new w();
var lm = ((n) => (
	(n.POSITION = 'instancePosition'),
	(n.SCALE = 'instanceScale'),
	(n.QUATERNION = 'instanceQuaternion'),
	(n.COLOR = 'instanceColor'),
	(n.UV = 'instanceUv'),
	n
))(lm || {});
St.COLOR + '', St.NORMAL + '', St.POSITION + '', St.PSCALE + '', St.SCALE + '';
new w();
new re();
new w(0, 0, 0);
new w(1, 1, 1);
new Qe();
function L3(n) {
	return n.geometry != null;
}
function jA(n) {
	return n.getAttribute(lm.POSITION) != null;
}
function XA(n) {
	return jA(n) ? lm.POSITION : St.POSITION;
}
function $A(n) {
	const e = XA(n);
	if (!e) return 0;
	const t = n.getAttribute(e);
	return t ? t.count : 0;
}
function U3(n) {
	const e = $A(n.geometry),
		t = new Array(e);
	for (let i = 0; i < e; i++) t[i] = new Mi(n, i);
	return t;
}
const eu = new On();
class F3 {
	static merge(e) {
		if (e.length === 0) return;
		for (const r of e) HA.createIndexIfNone(r);
		eu.geometry = e[0];
		const t = Mi.indexedAttributeNames(eu),
			i = {};
		for (const r of t) {
			const o = new Map(),
				a = new Set(),
				c = [];
			for (const u of e) {
				const h = new On(u),
					d = U3(h);
				for (const p of d) {
					c.push(p);
					const m = p.indexedAttribValue(r);
					m != null && (a.has(m) || (o.set(m, a.size), a.add(m)));
				}
			}
			for (const u of c) {
				const h = u.indexedAttribValue(r);
				if (h != null) {
					const d = o.get(h);
					d != null && u.setAttribIndex(r, d);
				}
			}
			const l = [];
			Hi(a, l), (i[r] = l);
		}
		const s = O3(e);
		return (
			(eu.geometry = s),
			Object.keys(i).forEach((r) => {
				const o = i[r];
				Mi.setIndexedAttributeValues(eu, r, o);
			}),
			s && delete s.userData.mergedUserData,
			s
		);
	}
}
const Lf = new WeakMap();
function B3(n, e) {
	var t;
	return (t = Lf.get(n)) == null ? void 0 : t.get(e);
}
function dC(n, e) {
	Vc(n) && Vc(e.value) ? NA(n, e.value) : (e.value = n);
}
function k3(n, e, t) {
	const i = B3(n, e);
	i && (dC(i.current.value, i.previous), dC(t, i.current));
}
class um {
	constructor(e, t, i) {
		(this._name = e), (this._type = t), (this._init_value = i), (this._inNodeDefinition = !1);
	}
	get init_value() {
		return this._init_value;
	}
	name() {
		return this._name;
	}
	type() {
		return this._type;
	}
	are_types_matched(e, t) {
		return !0;
	}
	inNodeDefinition() {
		return this._inNodeDefinition;
	}
	toJSON() {
		return (this._json = this._json || this._createJSON());
	}
	_createJSON() {
		return {name: this._name, type: this._type};
	}
}
var yn = ((n) => (
	(n.ANIMATION_MIXER = 'AnimationMixer'),
	(n.ANIMATION_ACTION = 'AnimationAction'),
	(n.BOOLEAN = 'boolean'),
	(n.BOOLEAN_ARRAY = 'boolean[]'),
	(n.BOX3 = 'Box3'),
	(n.CAMERA = 'Camera'),
	(n.CATMULL_ROM_CURVE3 = 'CatmullRomCurve3'),
	(n.COLOR = 'Color'),
	(n.COLOR_ARRAY = 'Color[]'),
	(n.EULER = 'Euler'),
	(n.EULER_ARRAY = 'Euler[]'),
	(n.FLOAT = 'float'),
	(n.FLOAT_ARRAY = 'float[]'),
	(n.INT = 'int'),
	(n.INT_ARRAY = 'int[]'),
	(n.INTERSECTION = 'Intersection'),
	(n.INTERSECTION_ARRAY = 'Intersection[]'),
	(n.MATERIAL = 'Material'),
	(n.MATRIX4 = 'Matrix4'),
	(n.MATRIX4_ARRAY = 'Matrix4[]'),
	(n.NODE = 'Node'),
	(n.OBJECT_3D = 'Object3D'),
	(n.OBJECT_3D_ARRAY = 'Object3D[]'),
	(n.PARAM = 'Param'),
	(n.PLANE = 'Plane'),
	(n.QUATERNION = 'Quaternion'),
	(n.QUATERNION_ARRAY = 'Quaternion[]'),
	(n.RAY = 'Ray'),
	(n.SPHERE = 'Sphere'),
	(n.STRING = 'string'),
	(n.STRING_ARRAY = 'string[]'),
	(n.TEXTURE = 'Texture'),
	(n.TEXTURE_ARRAY = 'Texture[]'),
	(n.TRIGGER = 'trigger'),
	(n.VECTOR2 = 'Vector2'),
	(n.VECTOR2_ARRAY = 'Vector2[]'),
	(n.VECTOR3 = 'Vector3'),
	(n.VECTOR3_ARRAY = 'Vector3[]'),
	(n.VECTOR4 = 'Vector4'),
	(n.VECTOR4_ARRAY = 'Vector4[]'),
	n
))(yn || {});
const V3 = [
		'boolean[]',
		'Color[]',
		'float[]',
		'int[]',
		'Intersection[]',
		'Matrix4[]',
		'Object3D[]',
		'Quaternion[]',
		'string[]',
		'Texture[]',
		'Vector2[]',
		'Vector3[]',
		'Vector4[]',
	],
	G3 = new Set(V3),
	z3 = {
		AnimationMixer: j.BUTTON,
		AnimationAction: j.BUTTON,
		boolean: j.BOOLEAN,
		'boolean[]': j.BUTTON,
		Box3: j.BUTTON,
		Camera: j.BUTTON,
		CatmullRomCurve3: j.BUTTON,
		Color: j.COLOR,
		'Color[]': j.BUTTON,
		Euler: j.BUTTON,
		'Euler[]': j.BUTTON,
		float: j.FLOAT,
		'float[]': j.BUTTON,
		int: j.INTEGER,
		'int[]': j.BUTTON,
		Intersection: j.BUTTON,
		'Intersection[]': j.BUTTON,
		Material: j.BUTTON,
		Matrix4: j.BUTTON,
		'Matrix4[]': j.BUTTON,
		Node: j.NODE_PATH,
		Object3D: j.BUTTON,
		'Object3D[]': j.BUTTON,
		Param: j.PARAM_PATH,
		Plane: j.BUTTON,
		Quaternion: j.BUTTON,
		'Quaternion[]': j.BUTTON,
		Ray: j.BUTTON,
		Sphere: j.BUTTON,
		string: j.STRING,
		'string[]': j.BUTTON,
		Texture: j.BUTTON,
		'Texture[]': j.BUTTON,
		trigger: j.BUTTON,
		Vector2: j.VECTOR2,
		'Vector2[]': j.BUTTON,
		Vector3: j.VECTOR3,
		'Vector3[]': j.BUTTON,
		Vector4: j.VECTOR4,
		'Vector4[]': j.BUTTON,
	},
	H3 = {
		[j.BOOLEAN]: 'boolean',
		[j.COLOR]: 'Color',
		[j.FLOAT]: 'float',
		[j.INTEGER]: 'int',
		[j.FOLDER]: void 0,
		[j.VECTOR2]: 'Vector2',
		[j.VECTOR3]: 'Vector3',
		[j.VECTOR4]: 'Vector4',
		[j.BUTTON]: void 0,
		[j.NODE_PATH]: 'Node',
		[j.PARAM_PATH]: 'Param',
		[j.RAMP]: void 0,
		[j.STRING]: 'string',
	},
	W3 = {
		AnimationAction: null,
		AnimationMixer: null,
		boolean: !1,
		'boolean[]': null,
		Box3: null,
		Camera: null,
		CatmullRomCurve3: null,
		Color: [1, 1, 1],
		'Color[]': null,
		Euler: null,
		'Euler[]': null,
		float: 0,
		'float[]': null,
		int: 0,
		'int[]': null,
		Intersection: null,
		'Intersection[]': null,
		Material: null,
		Matrix4: null,
		'Matrix4[]': null,
		Node: '',
		Object3D: null,
		'Object3D[]': null,
		Param: '',
		Plane: null,
		Quaternion: null,
		'Quaternion[]': null,
		Ray: null,
		Sphere: null,
		string: '',
		'string[]': null,
		Texture: null,
		'Texture[]': null,
		trigger: null,
		Vector2: [0, 0],
		'Vector2[]': null,
		Vector3: [0, 0, 0],
		'Vector3[]': null,
		Vector4: [0, 0, 0, 0],
		'Vector4[]': null,
	};
class j3 extends um {
	constructor(e, t, i) {
		super(e, t),
			(this._type = t),
			(this._options = i),
			(this._isArray = G3.has(t)),
			(this._init_value = W3[this._type]),
			i &&
				((this._inNodeDefinition = i.inNodeDefinition == !0),
				i.init_value != null && (this._init_value = i.init_value));
	}
	type() {
		return this._type;
	}
	are_types_matched(e, t) {
		return e == t;
	}
	get param_type() {
		return z3[this._type];
	}
	get init_value() {
		return this._init_value;
	}
	toJSON() {
		return (this._json = this._json || this._createJSON());
	}
	_createJSON() {
		return {name: this._name, type: this._type, isArray: this._isArray};
	}
}
function X3(n) {
	switch (n) {
		case yn.BOOLEAN:
			return !1;
		case yn.COLOR:
			return new Ee();
		case yn.FLOAT:
			return 0;
		case yn.INT:
			return 0;
		case yn.STRING:
			return '';
		case yn.VECTOR2:
			return new re();
		case yn.VECTOR3:
			return new w();
		case yn.VECTOR4:
			return new Ke();
	}
	zt.unreachable(n);
}
function $3(n, e) {
	switch (e) {
		case yn.BOOLEAN:
			return n;
		case yn.COLOR:
			return n.clone();
		case yn.FLOAT:
			return n;
		case yn.INT:
			return n;
		case yn.STRING:
			return n;
		case yn.VECTOR2:
			return n.clone();
		case yn.VECTOR3:
			return n.clone();
		case yn.VECTOR4:
			return n.clone();
	}
	zt.unreachable(e);
}
function q3(n, e, t, i) {
	let s = Lf.get(n);
	s || ((s = new Map()), Lf.set(n, s));
	let r = s.get(e);
	if (!r) {
		let o = i ?? X3(t),
			a = $3(o, t);
		const c = Uf.attribValue(n, e, 0, o),
			l = Uf.attribValue(n, e, 0, a);
		c == null || l == null ? (r = {current: _i(o), previous: _i(a)}) : (r = {current: _i(c), previous: _i(l)}),
			s.set(e, r);
	}
	return r;
}
const tu = 'attributes',
	Y3 = new w(0, 0, 0);
function K3(n) {
	switch (n.length) {
		case 1:
			return n[0];
		case 2:
			return new re(n[0], n[1]);
		case 3:
			return new w(n[0], n[1], n[2]);
		case 4:
			return new Ke(n[0], n[1], n[2], n[3]);
	}
}
const Z3 = new w(),
	pC = [0, 0, 0],
	Q3 = [],
	J3 = [];
class Uf extends Wh {
	dispose() {}
	geometry() {
		var e;
		return ((e = this._object) == null ? void 0 : e.geometry) || null;
	}
	builder() {}
	static attributeRef(e, t, i, s) {
		return q3(e, t, i, s);
	}
	attributeRef(e, t, i) {
		if (this._object) return this.constructor.attributeRef(this._object, e, t, i);
	}
	static onAttribChange(e, t, i, s, r) {
		const o = this.attributeRef(e, t, i, s);
		return wS(o.current, r);
	}
	onAttribChange(e, t, i, s) {
		if (this._object) return this.constructor.onAttribChange(this._object, e, t, i, s);
	}
	static setAttribute(e, t, i) {
		this.addAttribute(e, t, i);
	}
	static addAttribute(e, t, i) {
		if (ft(i) && !K3(i)) {
			const a = 'value invalid';
			throw (console.error(a, i), new Error(a));
		}
		const s = this._attributesDictionary(e),
			r = s[t];
		if (Vc(i))
			if (r == null) {
				const o = IA(i);
				o && (s[t] = o);
			} else Vc(r) && NA(i, r);
		else s[t] = i;
		k3(e, t, i);
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		this.addAttribute(e, t, s);
	}
	addAttribute(e, t) {
		this._object && this.constructor.addAttribute(this._object, e, t);
	}
	addNumericAttrib(e, t) {
		this._object && this.constructor.addNumericAttribute(this._object, e, 1, t);
	}
	setAttribValue(e, t) {
		this.addAttribute(e, t);
	}
	static _attributesDictionary(e) {
		return e.userData[tu] || this._createAttributesDictionaryIfNone(e);
	}
	static attributesDictionaryEntry(e, t, i) {
		const s = e.userData[tu] || this._createAttributesDictionaryIfNone(e);
		let r = s[t];
		return r == null && i != null && ((r = i), (s[t] = r)), r;
	}
	static _createAttributesDictionaryIfNone(e) {
		if (!e.userData[tu]) return (e.userData[tu] = {});
	}
	_attributesDictionary() {
		return this.constructor._attributesDictionary(this._object);
	}
	static attributes(e) {
		return this._attributesDictionary(e);
	}
	attributes() {
		if (this._object) return this.constructor.attributes(this._object);
	}
	attributeNames() {
		return this.attribNames();
	}
	static attribNames(e) {
		return Object.keys(this._attributesDictionary(e));
	}
	attribNames() {
		return this.constructor.attribNames(this._object);
	}
	static hasAttribute(e, t) {
		return t in this._attributesDictionary(e);
	}
	hasAttribute(e) {
		return this.constructor.hasAttribute(this._object, e);
	}
	static attributeNames(e) {
		const t = this.attributes(e);
		return t ? Object.keys(t) : [];
	}
	static attributeNamesMatchingMask(e, t) {
		return Ut.attribNamesMatchingMask(t, this.attributeNames(e));
	}
	renameAttribute(e, t) {
		return this.constructor.renameAttribute(this._object, e, t);
	}
	static renameAttribute(e, t, i) {
		const s = this.attribValue(e, t);
		s != null ? (this.addAttribute(e, i, s), this.deleteAttribute(e, t)) : console.warn(`attribute ${t} not found`);
	}
	deleteAttribute(e) {
		delete this._attributesDictionary()[e];
	}
	static deleteAttribute(e, t) {
		delete this._attributesDictionary(e)[t];
	}
	static position(e, t) {
		t.copy(Y3);
	}
	position(e) {
		return this.constructor.position(this._object, e), e;
	}
	static boundingBox(e, t) {
		t.makeEmpty();
	}
	boundingBox(e) {
		this.constructor.boundingBox(this._object, e);
	}
	static geometryBoundingBox(e, t) {
		this.boundingBox(e, t);
	}
	geometryBoundingBox(e) {
		this.constructor.geometryBoundingBox(this._object, e);
	}
	static boundingSphere(e, t) {
		t.makeEmpty();
	}
	boundingSphere(e) {
		this.constructor.boundingSphere(this._object, e);
	}
	static geometryBoundingSphere(e, t) {
		t.makeEmpty();
	}
	geometryBoundingSphere(e) {
		this.constructor.geometryBoundingSphere(this._object, e);
	}
	static attribValue(e, t, i = 0, s) {
		const r = () => {
			if (t == 'name') return e.name;
			if (t == 'position') {
				const o = s instanceof w ? s : Z3;
				return this.position(e, o), o.toArray(pC), pC;
			}
		};
		if (t === St.OBJECT_INDEX) return i;
		if (t === St.OBJECT_NAME) return e.name;
		if (e.userData) {
			const o = this.attributesDictionaryEntry(e, t);
			return o == null
				? r()
				: (Uc(o) &&
						s &&
						((o instanceof re && s instanceof re) ||
							(o instanceof w && s instanceof w) ||
							(o instanceof Ke && s instanceof Ke))) ||
				  (Fc(o) && s && o instanceof Ee && s instanceof Ee)
				? s.copy(o)
				: ft(o) && s
				? (s.fromArray(o), s)
				: o;
		}
		return r();
	}
	static stringAttribValue(e, t, i = 0) {
		const s = this.attribValue(e, t, i);
		return s != null ? (qe(s) ? s : `${s}`) : null;
	}
	attribValue(e, t) {
		return this.constructor.attribValue(this._object, e, this._index, t);
	}
	stringAttribValue(e) {
		return this.constructor.stringAttribValue(this._object, e, this._index);
	}
	name() {
		return this.attribValue('name');
	}
	humanType() {
		return this._object.type;
	}
	attribTypes() {
		const e = {};
		for (const t of this.attribNames()) {
			const i = this.attribType(t);
			i != null && (e[t] = i);
		}
		return e;
	}
	static attribType(e, t) {
		const i = this.attribValue(e, t);
		return qe(i) ? Bn.STRING : Bn.NUMERIC;
	}
	attribType(e) {
		return this.constructor.attribType(this._object, e);
	}
	attribSizes() {
		const e = {},
			t = this.attribNames();
		for (const i of t) {
			const s = this.attribSize(i);
			s != null && (e[i] = s);
		}
		return e;
	}
	static attribSize(e, t) {
		const i = this.attribValue(e, t);
		return i == null ? null : Ut.attribSizeFromValue(i);
	}
	attribSize(e) {
		return this.constructor.attribSize(this._object, e);
	}
	static objectData(e) {
		return DA(e);
	}
	clone() {
		const e = this.constructor.clone(this._object);
		return new this.constructor(e, this._index);
	}
	static clone(e) {
		return e.clone();
	}
	static applyMatrix(e, t, i, s, r) {
		console.warn('applyMatrix.override required', this);
	}
	static mergeCompact(e) {
		console.warn('mergeCompact.override required', this);
	}
	groupCollection() {
		return new jh(this._object);
	}
	static relatedVertexIds(e, t, i, s) {
		const r = s ? s[et.PRIMITIVE].ids : Q3;
		this.relatedPrimitiveIds(e, t, r, s),
			nh(
				r,
				(o, a) => {
					this.relatedPrimitiveClass(e).relatedVertexIds(e, o, a);
				},
				i
			);
	}
	static relatedPointIds(e, t, i, s) {
		const r = s ? s[et.VERTEX].ids : J3;
		this.relatedVertexIds(e, t, r, s),
			nh(
				r,
				(o, a) => {
					this.relatedVertexClass(e).relatedPointIds(e, o, a);
				},
				i
			);
	}
	relatedEntities(e, t, i, s) {
		switch (e) {
			case et.POINT: {
				this.relatedPoints(i, s);
				return;
			}
			case et.VERTEX: {
				this.relatedVertices(i, s);
				return;
			}
			case et.PRIMITIVE: {
				this.relatedPrimitives(i, s);
				return;
			}
			case et.OBJECT: {
				(i.length = 1), (i[0] = this);
				return;
			}
			case et.CORE_GROUP: {
				(i.length = 1), (i[0] = t);
				return;
			}
		}
		zt.unreachable(e);
	}
	static relatedPointClass(e) {
		return this.relatedVertexClass(e).relatedPointClass(e);
	}
	static relatedVertexClass(e) {
		return this.relatedPrimitiveClass(e).relatedVertexClass(e);
	}
}
var ri = ((n) => ((n.OBJECT = 'object'), (n.GEOMETRY = 'geometry'), n))(ri || {});
const ei = ['geometry', 'object'];
var hm = ((n) => (
	(n.XYZ = 'XYZ'), (n.XZY = 'XZY'), (n.YXZ = 'YXZ'), (n.YZX = 'YZX'), (n.ZYX = 'ZYX'), (n.ZXY = 'ZXY'), n
))(hm || {});
const no = ['XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX'],
	fC = [0, 0, 0],
	_C = new Qe(),
	mC = new Sn(),
	gC = new w(),
	vC = new w();
class Pn {
	constructor() {
		(this._translation_matrix = new Qe()),
			(this._translation_matrix_q = new Sn()),
			(this._translation_matrix_s = new w(1, 1, 1)),
			(this._matrix = new Qe().identity()),
			(this._matrixQ = new Sn()),
			(this._matrixEuler = new br()),
			(this._matrixS = new w());
	}
	static setParamsFromMatrix(e, t, i = {}) {
		let s = i.scale;
		s == null && (s = !0),
			e.decompose(
				this.set_params_from_matrix_position,
				this.set_params_from_matrix_quaternion,
				this.set_params_from_matrix_scale
			),
			this.set_params_from_matrix_euler.setFromQuaternion(this.set_params_from_matrix_quaternion),
			this.set_params_from_matrix_euler.toArray(fC),
			this.set_params_from_matrix_rotation.fromArray(fC),
			this.set_params_from_matrix_rotation.divideScalar(Math.PI / 180),
			this.set_params_from_matrix_position.toArray(this.set_params_from_matrix_t),
			this.set_params_from_matrix_rotation.toArray(this.set_params_from_matrix_r),
			this.set_params_from_matrix_scale.toArray(this.set_params_from_matrix_s),
			t.scene().batchUpdates(() => {
				t.params.set_vector3('t', this.set_params_from_matrix_t),
					t.params.set_vector3('r', this.set_params_from_matrix_r),
					t.params.set_vector3('s', this.set_params_from_matrix_s),
					s && t.params.set_float('scale', 1);
			});
	}
	static setParamsFromObject(e, t) {
		e.position.toArray(this.set_params_from_object_position_array),
			e.rotation.toArray(this.set_params_from_object_rotation_array),
			this.set_params_from_object_rotation_deg.fromArray(this.set_params_from_object_rotation_array),
			this.set_params_from_object_rotation_deg.multiplyScalar(180 / Math.PI),
			this.set_params_from_object_rotation_deg.toArray(this.set_params_from_object_rotation_array),
			t.scene().batchUpdates(() => {
				t.params.set_vector3('t', this.set_params_from_object_position_array),
					t.params.set_vector3('r', this.set_params_from_object_rotation_array);
			});
	}
	translationMatrix(e) {
		return (
			this._translation_matrix.compose(e, this._translation_matrix_q, this._translation_matrix_s),
			this._translation_matrix
		);
	}
	matrix(e, t, i, s, r) {
		return (
			this._matrixEuler.set(bn.degToRad(t.x), bn.degToRad(t.y), bn.degToRad(t.z), r),
			this._matrixQ.setFromEuler(this._matrixEuler),
			this._matrixS.copy(i).multiplyScalar(s),
			this._matrix.compose(e, this._matrixQ, this._matrixS),
			this._matrix
		);
	}
	static rotateObject(e, t, i) {
		vC.copy(i).normalize(),
			gC.copy(t).normalize(),
			mC.setFromUnitVectors(gC, vC),
			_C.makeRotationFromQuaternion(mC),
			e.matrix.multiply(_C),
			e.matrix.decompose(e.position, e.quaternion, e.scale);
	}
	static decomposeMatrix(e) {
		e.matrix.decompose(e.position, e.quaternion, e.scale);
	}
}
Pn.set_params_from_matrix_position = new w();
Pn.set_params_from_matrix_quaternion = new Sn();
Pn.set_params_from_matrix_scale = new w();
Pn.set_params_from_matrix_euler = new br();
Pn.set_params_from_matrix_rotation = new w();
Pn.set_params_from_matrix_t = [0, 0, 0];
Pn.set_params_from_matrix_r = [0, 0, 0];
Pn.set_params_from_matrix_s = [0, 0, 0];
Pn.set_params_from_object_position_array = [0, 0, 0];
Pn.set_params_from_object_rotation_deg = new w();
Pn.set_params_from_object_rotation_array = [0, 0, 0];
var dm = ((n) => ((n.PARENT = 'parent'), (n.LOCAL = 'local'), n))(dm || {}),
	Hr = ((n) => ((n.SET = 'set matrix'), (n.MULT = 'multiply matrix'), n))(Hr || {});
const rh = ['parent', 'local'],
	Gc = ['set matrix', 'multiply matrix'],
	eV = [
		{name: 'parent', value: rh.indexOf('parent')},
		{name: 'local', value: rh.indexOf('local')},
	];
function qA(n, e, t, i) {
	switch (t) {
		case 'parent': {
			Vn(n)
				? (n.updateMatrix(), n.applyMatrix4(e), n.matrix.decompose(n.position, n.quaternion, n.scale))
				: n.applyMatrix4(e);
			return;
		}
		case 'local': {
			Vn(n)
				? (n.updateMatrix(),
				  i == 'set matrix' ? n.matrix.copy(e) : n.matrix.multiply(e),
				  n.matrix.decompose(n.position, n.quaternion, n.scale))
				: n.applyMatrix4(e);
			return;
		}
	}
	zt.unreachable(t);
}
const EC = [],
	Ff = [];
function tV(n, e) {
	e.length = 0;
	for (const t of n) Bf(t, Ff), Lh(Ff, e);
	return e;
}
function qh(n) {
	return Vs(n).entitiesCount(n);
}
function Bf(n, e) {
	const i = Vs(n).entitiesCount(n);
	e.length = i;
	for (let s = 0; s < i; s++) e[s] = ZA(n, s);
	return e;
}
function nV(n, e, t) {
	if (e) {
		_t.indices(e, EC);
		const i = Bf(n, Ff),
			s = [],
			r = Jr(
				EC.map((o) => i[o]),
				s
			);
		(t.length = 0), Lh(r, t);
	} else Bf(n, t);
}
function iV(n, e) {
	const i = Vs(n).attributes(n);
	return i ? e in i : !1;
}
function sV(n) {
	const t = Vs(n).attributes(n);
	return t ? Object.keys(t) : [];
}
function rV(n, e) {
	const i = Vs(n).attributes(n);
	return i ? i[e].itemSize : 0;
}
function oV(n) {
	const t = Vs(n).attributes(n);
	if (!t) return {};
	const i = Object.keys(t),
		s = {};
	for (const r of i) s[r] = t[r].itemSize;
	return s;
}
function aV(n, e) {
	const t = Vs(n);
	return t.attributes(n) ? t.attribType(n, e) : Bn.NUMERIC;
}
var Ui = ((n) => (
	(n.POINT_2D = 'CADPoint2D'),
	(n.CURVE_2D = 'CADCurve2D'),
	(n.VERTEX = 'CADVertex'),
	(n.EDGE = 'CADEdge'),
	(n.WIRE = 'CADWire'),
	(n.FACE = 'CADFace'),
	(n.SHELL = 'CADShell'),
	(n.SOLID = 'CADSolid'),
	(n.COMPSOLID = 'CADCompsolid'),
	(n.COMPOUND = 'CADCompound'),
	n
))(Ui || {});
const cV = [
		'CADPoint2D',
		'CADCurve2D',
		'CADVertex',
		'CADEdge',
		'CADWire',
		'CADFace',
		'CADShell',
		'CADSolid',
		'CADCompsolid',
		'CADCompound',
	],
	lV = new Set(cV),
	uV = ['CADVertex', 'CADEdge', 'CADWire', 'CADFace', 'CADShell', 'CADSolid', 'CADCompsolid', 'CADCompound'],
	hV = new Set(uV);
function dV(n) {
	return lV.has(n.type);
}
class pV {
	static isPoint2d(e) {
		return e.type == Ui.POINT_2D;
	}
	static isGeom2dCurve(e) {
		return e.type == Ui.CURVE_2D;
	}
	static isVertex(e) {
		return e.type == Ui.VERTEX;
	}
	static isEdge(e) {
		return e.type == Ui.EDGE;
	}
	static isWire(e) {
		return e.type == Ui.WIRE;
	}
	static isFace(e) {
		return e.type == Ui.FACE;
	}
	static isShell(e) {
		return e.type == Ui.SHELL;
	}
	static isSolid(e) {
		return e.type == Ui.SOLID;
	}
	static isCompsolid(e) {
		return e.type == Ui.COMPSOLID;
	}
	static isCompound(e) {
		return e.type == Ui.COMPOUND;
	}
	static isShape(e) {
		return hV.has(e.type);
	}
	static isGeometryShape(e) {
		return B_(e.ShapeType);
	}
}
const fV = ['CSGPath2', 'CSGGeom2', 'CSGGeom3'],
	_V = new Set(fV);
function mV(n) {
	return _V.has(n.type);
}
function gV(n) {
	return n.type == em.TET;
}
const CC = new Ht(),
	yC = new w(),
	bC = [],
	SC = [],
	AC = [],
	nu = [],
	xC = [],
	MC = [];
function vV(n) {
	let e = 0;
	return (
		n.traverse((t) => {
			e += qh(t);
		}),
		e
	);
}
class ba extends PA {
	constructor() {
		super(void 0, 0), (this._allObjects = []), (this._attributes = {}), this.touch();
	}
	dispose() {
		if (this._allObjects) for (const e of this._allObjects) e.dispose && e.dispose();
		this._allObjects.length = 0;
	}
	geometry() {
		return null;
	}
	builder() {}
	timestamp() {
		return this._timestamp;
	}
	touch() {
		const e = le.performance.performanceManager();
		this._timestamp = e.now();
	}
	resetBoundingBox() {}
	clone() {
		const e = new ba();
		if (this._allObjects) {
			const i = this.allCoreObjects(),
				s = [];
			for (const r of i) {
				const o = r.clone().object();
				o && s.push(o);
			}
			e.setAllObjects(s);
		}
		const t = this.attribNames();
		for (const i of t) {
			const s = this.attribValue(i);
			e.addAttribute(i, s);
		}
		return e;
	}
	setAllObjects(e) {
		(this._allObjects = e), this.touch();
	}
	allObjects() {
		return this._allObjects;
	}
	allCoreObjects() {
		var e;
		return (e = this.allObjects()) == null ? void 0 : e.map((t, i) => Ss(t, i));
	}
	cadObjects() {
		var e;
		return ((e = this._allObjects) == null ? void 0 : e.filter(dV)) || void 0;
	}
	cadObjectsWithShape() {
		var e;
		return (e = this.cadObjects()) == null ? void 0 : e.filter((t) => pV.isShape(t));
	}
	cadCoreObjects() {
		var e;
		return (e = this.cadObjects()) == null ? void 0 : e.map((t, i) => Ss(t, i));
	}
	csgObjects() {
		var e;
		return ((e = this._allObjects) == null ? void 0 : e.filter(mV)) || void 0;
	}
	csgCoreObjects() {
		var e;
		return (e = this.csgObjects()) == null ? void 0 : e.map((t, i) => Ss(t, i));
	}
	quadObjects() {
		var e;
		return ((e = this._allObjects) == null ? void 0 : e.filter(WA)) || void 0;
	}
	quadCoreObjects() {
		var e;
		return (e = this.quadObjects()) == null ? void 0 : e.map((t, i) => Ss(t, i));
	}
	threejsOrQuadObjects() {
		return this._allObjects ? this._allObjects.filter(D3) : [];
	}
	threejsOrQuadCoreObjects() {
		return this.threejsOrQuadObjects().map((e, t) => Ss(e, t));
	}
	tetObjects() {
		var e;
		return ((e = this._allObjects) == null ? void 0 : e.filter(gV)) || void 0;
	}
	tetCoreObjects() {
		var e;
		return (e = this.tetObjects()) == null ? void 0 : e.map((t, i) => Ss(t, i));
	}
	threejsObjects() {
		return this._allObjects ? this._allObjects.filter(Vn) : [];
	}
	threejsObjectsWithGeo() {
		return this.threejsObjects().filter(L3);
	}
	threejsCoreObjects() {
		return this.threejsObjects().map((e, t) => new Jt(e, t));
	}
	geometries() {
		return this.threejsObjectsWithGeo().map((e) => e.geometry);
	}
	points(e) {
		return tV(this.allObjects(), e);
	}
	pointsCount() {
		return mD(this.allObjects().map((e) => qh(e)));
	}
	totalPointsCount() {
		const e = this.threejsObjects();
		let t = 0;
		for (const i of e) t += vV(i);
		return t;
	}
	pointsFromGroup(e, t) {
		if (e) {
			_t.indices(e, bC), this.points(SC);
			const i = [],
				s = Jr(
					bC.map((r) => SC[r]),
					i
				);
			return (t.length = 0), Lh(s, t), t;
		} else return this.points(t);
	}
	pointAttribNames() {
		const e = this.allObjects()[0];
		return e ? sV(e) : [];
	}
	hasPointAttrib(e) {
		const t = this.allObjects()[0];
		return t ? iV(t, e) : !1;
	}
	pointAttribType(e) {
		const t = this.allObjects()[0];
		return t ? aV(t, e) : Bn.NUMERIC;
	}
	pointAttribNamesMatchingMask(e) {
		return Ut.attribNamesMatchingMask(e, this.pointAttribNames());
	}
	pointAttribSizes() {
		const e = this.allObjects()[0];
		return e ? oV(e) : {};
	}
	pointAttribSize(e) {
		const t = this.allObjects()[0];
		return t ? rV(t, e) : 0;
	}
	static _fromObjects(e) {
		const t = new ba();
		return t.setAllObjects(e), t;
	}
	objectAttribTypesByName() {
		return vk(this.allCoreObjects());
	}
	objectAttribNames() {
		return Ek(this.allCoreObjects());
	}
	objectAttribNamesMatchingMask(e) {
		return Ut.attribNamesMatchingMask(e, this.objectAttribNames());
	}
	objectAttribSizesByName() {
		return gk(this.allCoreObjects());
	}
	renameAttribute(e, t) {
		const i = this.attribValue(e);
		i != null && (this.addAttribute(t, i), this.deleteAttribute(e));
	}
	attribNamesMatchingMask(e) {
		return Ut.attribNamesMatchingMask(e, this.attribNames());
	}
	hasAttribute(e) {
		return this.attribValue(e) != null;
	}
	addAttribute(e, t) {
		this.attributes()[e] = t;
	}
	addNumericAttribute(e, t = 1, i = 0) {
		const s = this.attributes();
		if (i != null)
			if (Vc(i)) {
				const r = IA(i);
				r != null && (s[e] = r);
			} else s[e] = i;
		else
			switch (t) {
				case 1:
					return (this.attributes()[e] = 0);
				case 2:
					return (this.attributes()[e] = new re(0, 0));
				case 3:
					return (this.attributes()[e] = new w(0, 0, 0));
				case 4:
					return (this.attributes()[e] = new Ke(0, 0, 0, 0));
			}
	}
	deleteAttribute(e) {
		delete this.attributes()[e];
	}
	attribValue(e) {
		return this._attributes && this._attributes[e];
	}
	attribNames() {
		return this._attributes ? Object.keys(this._attributes) : [];
	}
	attribType(e) {
		const t = this.attribValue(e);
		return qe(t) ? Bn.STRING : Bn.NUMERIC;
	}
	attribSizes() {
		const e = {};
		for (const t of this.attribNames()) {
			const i = this.attribSize(t);
			i != null && (e[t] = i);
		}
		return e;
	}
	attribSize(e) {
		const t = this.attribValue(e);
		return t == null ? null : Ut.attribSizeFromValue(t);
	}
	attributes() {
		return this._attributes || this._createAttributesDictionaryIfNone();
	}
	_createAttributesDictionaryIfNone() {
		return this._attributes || (this._attributes = {}), this._attributes;
	}
	setAttribValue(e, t) {
		this.addAttribute(e, t);
	}
	stringAttribValue(e) {
		return this.attribValue(e);
	}
	position(e) {
		const t = this._allObjects.length;
		e.set(0, 0, 0);
		for (const i of this._allObjects) Zt(i).position(i, yC), e.add(yC);
		return e.divideScalar(t), e;
	}
	attributeNames() {
		const e = this.attributes();
		return e ? Object.keys(e) : [];
	}
	attributeNamesMatchingMask(e) {
		return Ut.attribNamesMatchingMask(e, this.attributeNames());
	}
	relatedObjects(e, t) {
		os(this.allCoreObjects(), e);
	}
	relatedPrimitives(e, t) {
		e.length = 0;
		const i = this.allObjects();
		let s = 0;
		for (const r of i) {
			Zt(r).relatedPrimitives(r, s, MC);
			for (const o of MC) e.push(o);
			s++;
		}
	}
	relatedVertices(e, t) {
		this.relatedPrimitives(xC), WE(xC, (i) => (i.relatedVertices(nu), nu), e);
	}
	relatedPoints(e, t) {
		return this.relatedVertices(nu), WE(nu, (i) => (i.relatedPoints(AC), AC), e);
	}
	relatedEntities(e, t, i, s) {
		switch (e) {
			case et.POINT: {
				this.relatedPoints(i, s);
				return;
			}
			case et.VERTEX: {
				this.relatedVertices(i, s);
				return;
			}
			case et.PRIMITIVE: {
				this.relatedPrimitives(i, s);
				return;
			}
			case et.OBJECT: {
				this.relatedObjects(i, s);
				return;
			}
			case et.CORE_GROUP: {
				(i.length = 1), (i[0] = t);
				return;
			}
		}
		zt.unreachable(e);
	}
	objectsData() {
		var e;
		return ((e = this._allObjects) == null ? void 0 : e.map((t) => Zt(t).objectData(t))) || [];
	}
	boundingBox(e) {
		e.makeEmpty();
		const t = this.allCoreObjects();
		for (const i of t) i.boundingBox(CC), e.union(CC);
	}
	static geometryFromObject(e) {
		return e.isMesh || e.isLine || e.isPoints ? e.geometry : null;
	}
}
const EV = 'operationsComposer';
class pm {
	constructor(e, t, i) {
		(this._scene = e), (this.states = t), (this._node = i);
	}
	static type() {
		throw 'type to be overriden';
	}
	type() {
		return this.constructor.type();
	}
	static context() {
		throw (console.error('operation has no node_context', this), 'context requires override');
	}
	context() {
		return this.constructor.context();
	}
	scene() {
		return this._scene;
	}
	cook(e, t) {}
	convertExportParamData(e) {
		const {params: t, paramName: i, paramData: s} = e,
			r = t[i];
		if (xi(s)) return s;
		if (je(s)) return xi(r) ? s >= 1 : s;
		if (qe(s)) return r && (r instanceof zi || r instanceof Oh) ? r.setPath(s) : s;
		ft(s) && t[i].fromArray(s);
	}
}
pm.DEFAULT_PARAMS = {};
pm.INPUT_CLONED_STATE = [];
class rn extends pm {
	static context() {
		return fe.SOP;
	}
	cook(e, t) {}
	createCoreGroupFromObjects(e) {
		const t = new ba();
		return t.setAllObjects(e), t;
	}
	createCoreGroupFromGeometry(e, t = Dn.MESH) {
		const i = rn.createObject(e, t);
		return this.createCoreGroupFromObjects(i ? [i] : []);
	}
	createObject(e, t, i) {
		return rn.createObject(e, t, i);
	}
	static createObject(e, t, i) {
		this.createIndexIfNone(e);
		const s = GE(t) || GE(Dn.MESH);
		i = i || ck[t];
		const r = new s(e, i);
		return this.applyObjectDefault(r), r;
	}
	static applyObjectDefault(e) {
		(e.castShadow = !0), (e.receiveShadow = !0), (e.frustumCulled = !1), (e.matrixAutoUpdate = !1);
	}
	createIndexIfNone(e) {
		rn.createIndexIfNone(e);
	}
	static createIndexIfNone(e) {
		HA.createIndexIfNone(e);
	}
}
const CV = !0,
	TC = new Fs(new w(0, 0, 0), 0);
class Jt extends Uf {
	constructor(e, t) {
		super(e, t), (this._object = e);
	}
	humanType() {
		return MA(this._object).humanName;
	}
	object() {
		return this._object;
	}
	geometry() {
		return this._object.geometry;
	}
	static objectData(e) {
		const t = DA(e);
		(t.verticesCount = ao.entitiesCount(e)), (t.pointsCount = Mi.entitiesCount(e));
		const i = Sc(e);
		return (
			(t.primitivesCount = (i == null ? void 0 : i.entitiesCount(e)) || 0),
			(t.primitiveName = (i == null ? void 0 : i.primitiveName()) || ''),
			t
		);
	}
	static position(e, t) {
		t.copy(e.position);
	}
	static boundingBox(e, t) {
		t.setFromObject(e, CV);
	}
	static geometryBoundingBox(e, t) {
		const i = e.geometry;
		i ? (i.boundingBox || i.computeBoundingBox(), i.boundingBox && t.copy(i.boundingBox)) : t.makeEmpty();
	}
	static boundingSphere(e, t) {
		const i = e.geometry;
		if (!i) {
			t.copy(TC);
			return;
		}
		i.computeBoundingSphere();
		const s = i.boundingSphere;
		if (!s) {
			t.copy(TC);
			return;
		}
		t.copy(s);
	}
	static geometryBoundingSphere(e, t) {
		this.boundingSphere(e, t);
	}
	static clone(e) {
		const t = e.clone();
		var i = new Map(),
			s = new Map();
		return (
			Jt.parallelTraverse(e, t, function (r, o) {
				i.set(o, r), s.set(r, o);
			}),
			t.traverse(function (r) {
				const o = i.get(r),
					a = r;
				if (a.geometry && o && o.geometry) {
					const h = o.geometry;
					(a.geometry = _k(h)), zA.copyBVH(a, o);
				}
				if (a.material) {
					sm(r, a.material);
					const h = a.material;
					h.color == null && (h.color = new Ee(1, 1, 1));
				}
				if (o) {
					o.userData && (r.userData = ar(o.userData));
					const h = o;
					h.animations && (r.animations = h.animations.map((p) => p.clone()));
					const d = r;
					if (d.isSkinnedMesh) {
						var c = d,
							l = o,
							u = l.skeleton.bones;
						(c.skeleton = l.skeleton.clone()), c.bindMatrix.copy(l.bindMatrix);
						const p = u.map(function (m) {
							return s.get(m);
						});
						(c.skeleton.bones = p), c.bind(c.skeleton, c.bindMatrix);
					}
				}
			}),
			t
		);
	}
	static parallelTraverse(e, t, i) {
		i(e, t);
		for (var s = 0; s < e.children.length; s++) {
			const r = e.children[s],
				o = t.children[s];
			r && o && this.parallelTraverse(r, o, i);
		}
	}
	static applyMatrix(e, t, i, s, r) {
		switch (i) {
			case ri.OBJECT: {
				qA(e, t, s, r);
				return;
			}
			case ri.GEOMETRY: {
				const o = e.geometry;
				o && o.applyMatrix4(t);
				return;
			}
		}
		zt.unreachable(i);
	}
	static mergeCompact(e) {
		const {objects: t, material: i, objectType: s, mergedObjects: r, onError: o} = e,
			a = t[0];
		if (!a) return;
		const c = [];
		for (const l of t) {
			const u = l.geometry;
			u && (u.applyMatrix4(l.matrix), c.push(u));
		}
		try {
			const l = F3.merge(c);
			if (l) {
				const u = rn.createObject(l, s, i);
				u && (dk(a, u), r.push(u));
			} else o('merge failed, check that input geometries have the same attributes');
		} catch (l) {
			o(l.message || 'unknown error');
		}
	}
	static relatedPrimitiveIds(e, t, i, s) {
		const r = Sc(e);
		if (!r) {
			i.length = 0;
			return;
		}
		const o = r == null ? void 0 : r.entitiesCount(e);
		i.length = o;
		for (let a = 0; a < o; a++) i[a] = a;
		s && s[et.PRIMITIVE].ids != i && os(i, s[et.PRIMITIVE].ids);
	}
	static relatedPrimitiveClass(e) {
		return Sc(e);
	}
}
function Ho(n) {
	console.warn(`CorePrimitive.${n} needs to be overloaded`);
}
const yV = [];
class bV extends Wh {
	builder() {}
	static entitiesCount(e) {
		return 0;
	}
	static addAttribute(e, t, i) {
		Ho('addAttribute');
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		Ho('addNumericAttribute');
	}
	static attributes(e) {
		Ho('attributes');
	}
	attributes() {
		if (this._object) return this.constructor.attributes(this._object);
	}
	static attribute(e, t) {
		const i = this.attributes(e);
		if (i) return i[t];
	}
	attribute(e) {
		if (this._object) return this.constructor.attribute(this._object, e);
	}
	static renameAttribute(e, t, i) {
		const s = this.attributes(e);
		if (!s) return;
		const r = this.attribute(e, t);
		r && ((s[i] = r), delete s[t]);
	}
	static deleteAttribute(e, t) {
		const i = this.attributes(e);
		i && delete i[t];
	}
	static attribSize(e, t) {
		const i = this.attributes(e);
		return i ? ((t = Ut.remapName(t)), i[t].itemSize || 0) : -1;
	}
	attribSize(e) {
		return this._object ? this.constructor.attribSize(this._object, e) : 0;
	}
	static hasAttribute(e, t) {
		const i = Ut.remapName(t);
		return this.attributes(e) ? this.attributes(e)[i] != null : !1;
	}
	hasAttribute(e) {
		return this._object ? this.constructor.hasAttribute(this._object, e) : !1;
	}
	static attributeNames(e) {
		const t = this.attributes(e);
		return t ? Object.keys(t) : [];
	}
	static attributeNamesMatchingMask(e, t) {
		return Ut.attribNamesMatchingMask(t, this.attributeNames(e));
	}
	static attribValue(e, t, i, s) {
		if (i === St.PRIMITIVE_INDEX) return t;
		let r = null,
			o = null;
		i[i.length - 2] === J_ && ((r = i[i.length - 1]), (o = Q_[r]), (i = i.substring(0, i.length - 2)));
		const a = Ut.remapName(i);
		if (a == St.POSITION) return this.position(e, t, s);
		if (a == St.NORMAL) return this.normal(e, t, s);
		const c = this.attribute(e, a);
		if (c) {
			const {array: l} = c,
				u = c.itemSize,
				h = t * u;
			if (o == null)
				switch (u) {
					case 1:
						return l[h];
					case 2:
						return (s = s || new re()), s.fromArray(l, h), s;
					case 3:
						return (s = s || new w()), s.fromArray(l, h), s;
					case 4:
						return (s = s || new Ke()), s.fromArray(l, h), s;
					default:
						throw `size not valid (${u})`;
				}
			else
				switch (u) {
					case 1:
						return l[h];
					default:
						return l[h + o];
				}
		} else {
			const l = this.attributes(e) || {},
				u = Object.keys(l),
				h = `attrib ${i} not found. availables are: ${u.join(',')}`;
			throw (console.warn(h), h);
		}
	}
	attribValue(e, t) {
		return this._object ? this.constructor.attribValue(this._object, this._index, e, t) : 0;
	}
	attribValueNumber(e) {
		const t = this.attribute(e);
		return t ? t.array[this._index] : 0;
	}
	attribValueVector2(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 2), t;
	}
	attribValueVector3(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 3), t;
	}
	attribValueVector4(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 4), t;
	}
	static attribType(e, t) {
		const i = e ? this.attribute(e, t) : null;
		return i && (i == null ? void 0 : i.isString) == !0 ? Bn.STRING : Bn.NUMERIC;
	}
	attribType(e) {
		return this.constructor.attribType(this._object, e);
	}
	static stringAttribValue(e, t, i) {
		return this.attribValue(e, t, i);
	}
	stringAttribValue(e) {
		return this.attribValue(e);
	}
	static position(e, t, i) {
		return Ho('position'), i;
	}
	static normal(e, t, i) {
		return Ho('normal'), i;
	}
	static computeVertexNormalsIfAttributeVersionChanged(e) {
		Ho('computeVertexNormalsIfAttributeVersionChanged');
	}
	setAttribValue(e, t) {
		const i = this.attribute(e);
		if (!i) {
			console.warn(`no attribute ${e}`);
			return;
		}
		const s = i.array,
			r = i.itemSize;
		if (ft(t)) {
			for (let o = 0; o < r; o++) s[this._index * r + o] = t[o];
			return;
		}
		switch (r) {
			case 1:
				s[this._index] = t;
				break;
			case 2:
				const o = t,
					a = this._index * 2;
				(s[a + 0] = o.x), (s[a + 1] = o.y);
				break;
			case 3:
				const c = t.r != null,
					l = this._index * 3;
				if (c) {
					const d = t;
					(s[l + 0] = d.r), (s[l + 1] = d.g), (s[l + 2] = d.b);
				} else {
					const d = t;
					(s[l + 0] = d.x), (s[l + 1] = d.y), (s[l + 2] = d.z);
				}
				break;
			case 4:
				const u = t,
					h = this._index * 4;
				(s[h + 0] = u.x), (s[h + 1] = u.y), (s[h + 2] = u.z), (s[h + 3] = u.w);
				break;
			default:
				throw (
					(console.warn(`CorePrimitive.setAttribValue does not yet allow attribSize ${r}`),
					`attrib size ${r} not implemented`)
				);
		}
	}
	setAttribValueFromNumber(e, t) {
		const i = this.attribute(e);
		if (!i) return;
		const s = i.array;
		s[this._index] = t;
	}
	setAttribValueFromVector2(e, t) {
		const i = this.attribute(e);
		!i || i.isString == !0 || t.toArray(i.array, this._index * 2);
	}
	setAttribValueFromVector3(e, t) {
		const i = this.attribute(e);
		!i || i.isString == !0 || t.toArray(i.array, this._index * 3);
	}
	setAttribValueFromVector4(e, t) {
		const i = this.attribute(e);
		!i || i.isString == !0 || t.toArray(i.array, this._index * 4);
	}
	static relatedPointIds(e, t, i, s) {
		const r = s ? s[et.VERTEX].ids : yV;
		this.relatedVertexIds(e, t, r),
			nh(
				r,
				(o, a) => {
					this.relatedVertexClass(e).relatedPointIds(e, o, a);
				},
				i
			);
	}
	static relatedPointClass(e) {
		return this.relatedVertexClass(e).relatedPointClass(e);
	}
	relatedEntities(e, t, i, s) {
		switch (e) {
			case et.POINT: {
				this.relatedPoints(i, s);
				return;
			}
			case et.VERTEX: {
				this.relatedVertices(i, s);
				return;
			}
			case et.PRIMITIVE: {
				(i.length = 1), (i[0] = this);
				return;
			}
			case et.OBJECT: {
				this.relatedObjects(i, s);
				return;
			}
			case et.CORE_GROUP: {
				(i.length = 1), (i[0] = t);
				return;
			}
		}
		zt.unreachable(e);
	}
	static graph(e) {
		console.warn('CorePrimitive.graph needs to be overriden');
	}
}
function SV(n) {
	return _m(n).entitiesCount(n);
}
const hp = {attributeAdded: !1, values: []};
class fm extends bV {
	constructor(e, t) {
		super(e, t), this._updateGeometry();
	}
	setIndex(e, t) {
		return (this._index = e), t && ((this._object = t), this._updateGeometry()), this;
	}
	_updateGeometry() {
		const e = this._object.geometry;
		e && (this._geometry = e);
	}
	geometry() {
		return this._geometry;
	}
	static addAttribute(e, t, i) {
		const s = this.attributes(e);
		s && (s[t] = i);
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		const r = this.entitiesCount(e);
		(hp.values = new Array(r * i)), tm(e, SV, i, s, hp);
		const o = {isString: !1, array: hp.values, itemSize: i};
		this.addAttribute(e, t, o);
	}
	static attributes(e) {
		const t = e.geometry;
		if (t) return t.userData.primAttributes || (t.userData.primAttributes = {}), t.userData.primAttributes;
	}
	static stride() {
		return 3;
	}
	static relatedVertexIds(e, t, i) {
		if (!e.geometry) {
			i.length = 0;
			return;
		}
		const r = this.stride();
		i.length = r;
		for (let o = 0; o < r; o++) i[o] = t * r + o;
	}
	static relatedVertexClass(e) {
		return ao;
	}
	static relatedObjectClass(e) {
		return Jt;
	}
}
const RC = new w(),
	dp = 3,
	AV = (n, e) => {
		const t = n,
			i = t.geometry;
		if (!i) return;
		const s = i.getIndex();
		if (!s) return;
		const r = s.array,
			o = e,
			a = new Array(o.length * dp);
		let c = 0;
		for (const l of o) RC.fromArray(r, l.index() * dp), RC.toArray(a, c * dp), c++;
		return i.setIndex(a), t;
	},
	iu = new Tn(),
	wC = new w(),
	OC = new w(),
	PC = new w(),
	NC = new Map();
class zc extends fm {
	constructor(e, t) {
		super(e, t), (this._geometry = e.geometry);
	}
	static primitiveName() {
		return 'triangle';
	}
	static entitiesCount(e) {
		const t = e.geometry;
		if (!t) return 0;
		const i = t.getIndex();
		return i ? i.count / 3 : 0;
	}
	static position(e, t, i) {
		if (!(e && e.geometry)) return i;
		const s = e.geometry.getAttribute(St.POSITION);
		if (!s) return i;
		const r = s.array;
		return (
			wC.fromArray(r, t * 3 + 0),
			OC.fromArray(r, t * 3 + 1),
			PC.fromArray(r, t * 3 + 2),
			i.copy(wC).add(OC).add(PC).divideScalar(3),
			i
		);
	}
	static normal(e, t, i) {
		if (!(e && e.geometry)) return i;
		const s = e.geometry.getAttribute(St.POSITION);
		if (!s) return i;
		const r = s.array;
		return (
			iu.a.fromArray(r, t * 3 + 0), iu.b.fromArray(r, t * 3 + 1), iu.c.fromArray(r, t * 3 + 2), iu.getNormal(i), i
		);
	}
	position(e) {
		return this.constructor.position(this._object, this._index, e);
	}
	normal(e) {
		return this.constructor.normal(this._object, this._index, e);
	}
	static computeVertexNormalsIfAttributeVersionChanged(e) {
		const t = e.geometry;
		if (!t) return null;
		const i = t.getAttribute(St.POSITION);
		if (!i || !(i instanceof kn)) return;
		let s = NC.get(t.uuid);
		(s == null || s != i.version) && (t.computeVertexNormals(), NC.set(t.uuid, i.version));
	}
	builder() {
		return AV;
	}
	static stride() {
		return 3;
	}
}
const pp = new w(),
	nc = new w();
class YA extends fm {
	constructor(e, t) {
		super(e, t), (this._geometry = e.geometry);
	}
	static primitiveName() {
		return 'line';
	}
	static entitiesCount(e) {
		const t = e.geometry;
		if (!t) return 0;
		const i = t.getIndex();
		return i ? i.count / 2 : 0;
	}
	static position(e, t, i) {
		if (!(e && e.geometry)) return i;
		const s = e.geometry.getAttribute(St.POSITION);
		if (!s) return i;
		const r = s.array;
		return pp.fromArray(r, t * 3 + 0), nc.fromArray(r, t * 3 + 1), i.copy(pp).add(nc).divideScalar(2), i;
	}
	static normal(e, t, i) {
		if (!(e && e.geometry)) return i;
		const s = e.geometry.getAttribute(St.POSITION);
		if (!s) return i;
		const r = s.array;
		return pp.fromArray(r, t * 3 + 0), nc.fromArray(r, t * 3 + 1), i.copy(nc).sub(nc).normalize(), i;
	}
	position(e) {
		return this.constructor.position(this._object, this._index, e);
	}
	normal(e) {
		return this.constructor.normal(this._object, this._index, e);
	}
	static computeVertexNormalsIfAttributeVersionChanged(e) {}
	static stride() {
		return 2;
	}
}
const IC = new w();
class KA extends fm {
	constructor(e, t) {
		super(e, t), (this._geometry = e.geometry);
	}
	static primitiveName() {
		return 'point';
	}
	static entitiesCount(e) {
		const t = e.geometry;
		if (!t) return 0;
		const i = t.getIndex();
		return i ? i.count : 0;
	}
	static position(e, t, i) {
		if (!(e && e.geometry)) return i;
		const s = e.geometry.getAttribute(St.POSITION);
		if (!s) return i;
		const r = s.array;
		return IC.fromArray(r, t * 3 + 0), i.copy(IC), i;
	}
	static normal(e, t, i) {
		return i.set(0, 1, 0);
	}
	position(e) {
		return this.constructor.position(this._object, this._index, e);
	}
	normal(e) {
		return this.constructor.normal(this._object, this._index, e);
	}
	static computeVertexNormalsIfAttributeVersionChanged(e) {}
	static stride() {
		return 1;
	}
}
const xV = (n) => {
		if (Vn(n)) return Mi;
	},
	MV = () => Mi,
	TV = (n, e = 0) => {
		if (Vn(n)) return new Mi(n, e);
	},
	RV = (n, e = 0) => new Mi(n, e),
	wV = (n) => {
		if (Vn(n)) return ao;
	},
	OV = () => ao,
	PV = (n, e = 0) => {
		if (Vn(n)) return new ao(n, e);
	},
	NV = (n, e = 0) => new ao(n, e),
	Sc = (n) => {
		if (Vn(n)) return n.isMesh ? zc : n.isLineSegments ? YA : n.isPoints ? KA : zc;
	},
	IV = () => zc,
	DV = Sc,
	LV = (n, e = 0) => {
		if (Vn(n)) {
			if (n.isMesh) return new zc(n, e);
			if (n.isLineSegments) return new YA(n, e);
			if (n.isPoints) return new KA(n, e);
		}
	},
	UV = (n, e = 0) => new zc(n, e),
	FV = (n) => {
		if (Vn(n)) {
			if (n.isMesh) return 3;
			if (n.isLineSegments) return 2;
			if (n.isPoints) return 1;
		}
		return 0;
	},
	BV = (n) => {
		if (Vn(n) || n.isObject3D) return Jt;
	},
	kV = () => Jt,
	VV = (n, e = 0) => {
		if (Vn(n)) return new Jt(n, e);
	},
	GV = (n, e = 0) => new Jt(n, e),
	ks = {
		pointClass: xV,
		pointInstance: TV,
		vertexClass: wV,
		vertexInstance: PV,
		primitiveClass: DV,
		primitiveInstance: LV,
		objectClass: BV,
		objectInstance: VV,
	},
	Ar = [ks];
function Vs(n) {
	for (const e of Ar) {
		const t = e.pointClass(n);
		if (t) return t;
	}
	return ks.pointClass(n) || MV();
}
function ZA(n, e = 0) {
	for (const t of Ar) {
		const i = t.pointInstance(n, e);
		if (i) return i;
	}
	return ks.pointInstance(n, e) || RV(n, e);
}
function QA(n) {
	for (const e of Ar) {
		const t = e.vertexClass(n);
		if (t) return t;
	}
	return ks.vertexClass(n) || OV();
}
function zV(n, e = 0) {
	for (const t of Ar) {
		const i = t.vertexInstance(n, e);
		if (i) return i;
	}
	return ks.vertexInstance(n, e) || NV(n, e);
}
function _m(n) {
	for (const e of Ar) {
		const t = e.primitiveClass(n);
		if (t) return t;
	}
	return ks.primitiveClass(n) || IV();
}
function HV(n, e = 0) {
	for (const t of Ar) {
		const i = t.primitiveInstance(n, e);
		if (i) return i;
	}
	return ks.primitiveInstance(n, e) || UV(n, e);
}
function Zt(n) {
	for (const e of Ar) {
		const t = e.objectClass(n);
		if (t) return t;
	}
	return ks.objectClass(n) || kV();
}
function Ss(n, e = 0) {
	for (const t of Ar) {
		const i = t.objectInstance(n, e);
		if (i) return i;
	}
	return ks.objectInstance(n, e) || GV(n);
}
et.POINT + '', et.VERTEX + '', et.PRIMITIVE + '', et.OBJECT + '', et.CORE_GROUP + '';
et.POINT + '', et.VERTEX + '', et.PRIMITIVE + '', et.OBJECT + '', et.CORE_GROUP + '';
const WV = [];
function $i(n) {
	console.warn(`CorePoint.${n} needs to be overloaded`);
}
class jV extends Wh {
	builder() {}
	static addAttribute(e, t, i) {
		$i('addAttribute');
	}
	static entitiesCount(e) {
		return 0;
	}
	static attributes(e) {
		$i('attributes');
	}
	attributes() {
		return this.constructor.attributes(this._object);
	}
	static attribute(e, t) {
		const i = this.attributes(e);
		if (i) return i[t];
	}
	attribute(e) {
		return this.constructor.attribute(this._object, e);
	}
	static attribSize(e, t) {
		const i = this.attributes(e);
		return i ? ((t = Ut.remapName(t)), i[t].itemSize || 0) : -1;
	}
	attribSize(e) {
		return this.constructor.attribSize(this._object, e);
	}
	static hasAttribute(e, t) {
		const i = Ut.remapName(t);
		return this.attributes(e) ? this.attributes(e)[i] != null : !1;
	}
	hasAttribute(e) {
		return this.constructor.hasAttribute(this._object, e);
	}
	static userDataAttribs(e) {
		return $i('userDataAttribs'), {};
	}
	userDataAttribs() {
		return this._object ? this.constructor.userDataAttribs(this._object) : {};
	}
	static userDataAttrib(e, t) {
		return (t = Ut.remapName(t)), this.userDataAttribs(e)[t];
	}
	userDataAttrib(e) {
		return (e = Ut.remapName(e)), this.userDataAttribs()[e];
	}
	static attributeNames(e) {
		const t = this.attributes(e);
		return t ? Object.keys(t) : [];
	}
	static attributeNamesMatchingMask(e, t) {
		return Ut.attribNamesMatchingMask(t, this.attributeNames(e));
	}
	static indexedAttributeNames(e) {
		return e ? Object.keys(this.userDataAttribs(e) || {}) : [];
	}
	indexedAttributeNames() {
		return this._object ? this.constructor.indexedAttributeNames(this._object) : [];
	}
	static isAttribIndexed(e, t) {
		return (t = Ut.remapName(t)), this.userDataAttrib(e, t) != null;
	}
	isAttribIndexed(e) {
		return (e = Ut.remapName(e)), this.userDataAttrib(e) != null;
	}
	static setIndexedAttributeValues(e, t, i) {
		this.userDataAttribs(e)[t] = i;
	}
	setIndexedAttributeValues(e, t) {
		return this.constructor.setIndexedAttributeValues(this._object, e, t);
	}
	static setIndexedAttribute(e, t, i, s) {
		$i('setIndexedAttribute');
	}
	setIndexedAttribute(e, t, i) {
		return this.constructor.setIndexedAttribute(this._object, e, t, i);
	}
	static indexedAttribValue(e, t, i) {
		const s = this.attribValueIndex(e, t, i),
			r = this.userDataAttrib(e, i);
		return r ? r[s] : null;
	}
	indexedAttribValue(e) {
		return this.constructor.indexedAttribValue(this._object, this._index, e);
	}
	static stringAttribValue(e, t, i) {
		return this.indexedAttribValue(e, t, i);
	}
	stringAttribValue(e) {
		return this.indexedAttribValue(e);
	}
	static attribValueIndex(e, t, i) {
		return $i('attribValueIndex'), 0;
	}
	attribValueIndex(e) {
		return this.constructor.attribValueIndex(this._object, this._index, e);
	}
	static attribType(e, t) {
		return this.isAttribIndexed(e, t) ? Bn.STRING : Bn.NUMERIC;
	}
	attribType(e) {
		return this.constructor.attribType(this._object, e);
	}
	isStringAttribute(e) {
		return this.attribType(e) == Bn.STRING;
	}
	setAttribIndex(e, t) {
		const i = this.attribute(e);
		if (!i) return;
		const s = i.array;
		s[this._index] = t;
	}
	static renameAttribute(e, t, i) {
		const s = this.attributes(e);
		if (!s) return;
		const r = this.attribute(e, t);
		r && ((s[i] = r), delete s[t]);
	}
	static deleteAttribute(e, t) {
		const i = this.attributes(e);
		i && delete i[t];
	}
	static attribValue(e, t, i, s) {
		if (i === St.POINT_INDEX) return t;
		{
			let r = null,
				o = null;
			i[i.length - 2] === J_ && ((r = i[i.length - 1]), (o = Q_[r]), (i = i.substring(0, i.length - 2)));
			const a = Ut.remapName(i),
				c = this.attribute(e, a);
			if (c) {
				const {array: l} = c;
				if (this.isAttribIndexed(e, a)) return this.indexedAttribValue(e, t, a);
				{
					const u = c.itemSize,
						h = t * u;
					if (o == null)
						switch (u) {
							case 1:
								return l[h];
							case 2:
								return (s = s || new re()), s.fromArray(l, h), s;
							case 3:
								return (s = s || new w()), s.fromArray(l, h), s;
							case 4:
								return (s = s || new Ke()), s.fromArray(l, h), s;
							default:
								throw `size not valid (${u})`;
						}
					else
						switch (u) {
							case 1:
								return l[h];
							default:
								return l[h + o];
						}
				}
			} else {
				const l = this.attributes() || {},
					u = Object.keys(l),
					h = `attrib ${i} not found. availables are: ${u.join(',')}`;
				throw (console.warn(h), h);
			}
		}
	}
	attribValue(e, t) {
		return this.constructor.attribValue(this._object, this._index, e, t);
	}
	attribValueNumber(e) {
		const t = this.attribute(e);
		return t ? t.array[this._index] : 0;
	}
	attribValueVector2(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 2), t;
	}
	attribValueVector3(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 3), t;
	}
	attribValueVector4(e, t) {
		const i = this.attribute(e);
		if (i) return t.fromArray(i.array, this._index * 4), t;
	}
	position(e) {
		return $i('position'), e;
	}
	setPosition(e) {
		this.setAttribValueFromVector3(St.POSITION, e);
	}
	normal(e) {
		return $i('normal'), e;
	}
	setNormal(e) {
		return this.setAttribValueFromVector3(St.NORMAL, e);
	}
	static computeNormals(e) {
		$i('computeNormals');
	}
	setAttribValue(e, t) {
		const i = this.attribute(e);
		if (!i) return;
		const s = i.array,
			r = i.itemSize;
		if (ft(t)) {
			for (let o = 0; o < r; o++) s[this._index * r + o] = t[o];
			return;
		}
		switch (r) {
			case 1:
				s[this._index] = t;
				break;
			case 2:
				const o = t,
					a = this._index * 2;
				(s[a + 0] = o.x), (s[a + 1] = o.y);
				break;
			case 3:
				const c = t.r != null,
					l = this._index * 3;
				if (c) {
					const d = t;
					(s[l + 0] = d.r), (s[l + 1] = d.g), (s[l + 2] = d.b);
				} else {
					const d = t;
					(s[l + 0] = d.x), (s[l + 1] = d.y), (s[l + 2] = d.z);
				}
				break;
			case 4:
				const u = t,
					h = this._index * 4;
				(s[h + 0] = u.x), (s[h + 1] = u.y), (s[h + 2] = u.z), (s[h + 3] = u.w);
				break;
			default:
				throw (
					(console.warn(`CorePoint.setAttribValue does not yet allow attrib size ${r}`),
					`attrib size ${r} not implemented`)
				);
		}
	}
	setAttribValueFromNumber(e, t) {
		const i = this.attribute(e);
		if (!i) return;
		const s = i.array;
		s[this._index] = t;
	}
	setAttribValueFromVector2(e, t) {
		const i = this.attribute(e);
		!i || this.isStringAttribute(e) || t.toArray(i.array, this._index * 2);
	}
	setAttribValueFromVector3(e, t) {
		const i = this.attribute(e);
		!i || this.isStringAttribute(e) || t.toArray(i.array, this._index * 3);
	}
	setAttribValueFromVector4(e, t) {
		const i = this.attribute(e);
		!i || this.isStringAttribute(e) || t.toArray(i.array, this._index * 4);
	}
	static addAttributeFromAttribData(e, t, i) {
		switch (i.type()) {
			case Bn.STRING:
				return console.log('TODO: to implement');
			case Bn.NUMERIC:
				return this.addNumericAttribute(e, t, i.size());
		}
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		$i('addNumericAttribute');
	}
	static markAttribAsNeedsUpdate(e, t) {
		$i('markAttribAsNeedsUpdate');
	}
	static relatedPrimitiveIds(e, t, i, s) {
		const r = s ? s[et.VERTEX].ids : WV;
		this.relatedVertexIds(e, t, r),
			nh(
				r,
				(o, a) => {
					this.relatedVertexClass(e).relatedPrimitiveIds(e, o, a);
				},
				i
			);
	}
	static relatedPrimitiveClass(e) {
		return this.relatedVertexClass(e).relatedPrimitiveClass(e);
	}
	static relatedObjectClass(e) {
		return this.relatedPrimitiveClass(e).relatedObjectClass(e);
	}
	relatedEntities(e, t, i, s) {
		switch (e) {
			case et.POINT: {
				(i.length = 1), (i[0] = this);
				return;
			}
			case et.VERTEX:
				return this.relatedVertices(i, s);
			case et.PRIMITIVE:
				return this.relatedPrimitives(i, s);
			case et.OBJECT: {
				this._object ? ((i.length = 1), (i[0] = Ss(this._object))) : (i.length = 0);
				return;
			}
			case et.CORE_GROUP: {
				(i.length = 1), (i[0] = t);
				return;
			}
		}
		zt.unreachable(e);
	}
}
const DC = 'indexedAttribValues',
	su = {attributeAdded: !1, values: []};
class Mi extends jV {
	constructor(e, t) {
		super(e, t), this._updateGeometry();
	}
	setIndex(e, t) {
		return (this._index = e), t && ((this._object = t), this._updateGeometry()), this;
	}
	_updateGeometry() {
		const e = this._object.geometry;
		e && (this._geometry = e);
	}
	geometry() {
		return this._geometry;
	}
	static addAttribute(e, t, i) {
		const s = e.geometry;
		s && s.setAttribute(t, i);
	}
	static attributes(e) {
		const t = e.geometry;
		if (t) return t.attributes;
	}
	static entitiesCount(e) {
		const t = e.geometry;
		return t ? $A(t) : 0;
	}
	static positionAttributeName(e) {
		const t = e.geometry;
		return t ? XA(t) : null;
	}
	static position(e, t, i) {
		const s = e.geometry;
		if (!s) return null;
		const {array: r} = s.getAttribute(St.POSITION);
		return i.fromArray(r, t * 3);
	}
	position(e) {
		if (!this._geometry) return e;
		const {array: t} = this._geometry.getAttribute(St.POSITION);
		return e.fromArray(t, this._index * 3);
	}
	normal(e) {
		if (!this._geometry) return e;
		const {array: t} = this._geometry.getAttribute(St.NORMAL);
		return e.fromArray(t, this._index * 3);
	}
	static computeNormals(e) {
		const t = e.geometry;
		if (!t) return null;
		t.computeVertexNormals();
	}
	static markAttribAsNeedsUpdate(e, t) {
		const i = e.geometry;
		if (!i) return null;
		const s = i.getAttribute(t);
		s && (s.needsUpdate = !0);
	}
	static userDataAttribs(e) {
		const t = e.geometry;
		return t ? (t.userData[DC] = t.userData[DC] || {}) : {};
	}
	static setIndexedAttribute(e, t, i, s) {
		const r = e.geometry;
		r &&
			(this.setIndexedAttributeValues(e, t, i),
			r.setAttribute(t, new RT(s, 1)),
			(r.getAttribute(t).needsUpdate = !0));
	}
	static attribValueIndex(e, t, i) {
		if (this.isAttribIndexed(e, i)) {
			const s = e.geometry;
			if (s) return s.getAttribute(i).array[t];
		}
		return -1;
	}
	static renameAttribute(e, t, i) {
		const s = e.geometry;
		if (!s) return;
		this.isAttribIndexed(e, t) &&
			((this.userDataAttribs(e)[i] = ar(this.userDataAttribs(e)[t])), delete this.userDataAttribs(e)[t]);
		const r = s.getAttribute(t);
		return s.setAttribute(i, new Kt(r.array, r.itemSize)), s.deleteAttribute(t);
	}
	static deleteAttribute(e, t) {
		const i = e.geometry;
		if (i) return this.isAttribIndexed(e, t) && delete this.userDataAttribs(e)[t], i.deleteAttribute(t);
	}
	static addNumericAttribute(e, t, i = 1, s = 0) {
		const r = e.geometry;
		if (r)
			if ((tm(e, qh, i, s, su), su.attributeAdded))
				if (jA(r)) {
					const o = new Float32Array(su.values);
					r.setAttribute(t.trim(), new ef(o, i));
				} else r.setAttribute(t.trim(), new Kt(su.values, i));
			else
				throw (
					(console.warn(s),
					`CoreThreejsPoint.addNumericAttrib error: no other default value allowed for now (default given: ${s})`)
				);
	}
	static relatedVertexIds(e, t, i, s) {
		const r = e.geometry;
		if (!r) return;
		const o = r.getIndex();
		if (!o) return;
		const a = o.array;
		let c = 0;
		for (const l of a) l == t && i.push(c), c++;
	}
	static relatedVertexClass(e) {
		return ao;
	}
}
const ru = "'",
	LC = ', ',
	XV = '@',
	$V = [
		'abs',
		'acos',
		'acosh',
		'asin',
		'asinh',
		'atan',
		'atan2',
		'atanh',
		'ceil',
		'cos',
		'cosh',
		'exp',
		'expm1',
		'floor',
		'log',
		'log1p',
		'log2',
		'log10',
		'max',
		'min',
		'pow',
		'round',
		'sign',
		'sin',
		'sinh',
		'sqrt',
		'tan',
		'tanh',
	],
	qV = ['cbrt', 'hypot', 'log10', 'trunc'],
	UC = {math_random: 'random'},
	YV = ['fit', 'fit01', 'fract', 'deg2rad', 'rad2deg', 'rand', 'clamp'],
	KV = Object.keys(IS),
	ZV = ['precision'],
	QV = ['E', 'LN2', 'LN10', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'],
	lo = {};
$V.forEach((n) => {
	lo[n] = `Math.${n}`;
});
qV.forEach((n) => {
	lo[n] = `Math.${n}`;
});
Object.keys(UC).forEach((n) => {
	const e = UC[n];
	lo[n] = `Math.${e}`;
});
YV.forEach((n) => {
	lo[n] = `Core.Math.${n}`;
});
KV.forEach((n) => {
	lo[n] = `Core.Math.Easing.${n}`;
});
ZV.forEach((n) => {
	lo[n] = `Core.String.${n}`;
});
const JV = {if: sk.if},
	JA = {};
QV.forEach((n) => {
	JA[n] = `Math.${n}`;
});
const eG = {x: 0, y: 1, z: 2, w: 3, r: 0, g: 1, b: 2},
	tG = {Math: hn, String: _t};
function nG(n, e) {
	const t = n[0];
	return t instanceof Mi ? t.attribute(e) : n.map((i) => i.attribValue(e, new Ke()));
}
function iG(n, e, t, i, s) {
	return t[n.index() * i + s];
}
const sG = {0: 'x', 1: 'y', 2: 'z', 3: 'w'},
	rG = {0: 'r', 1: 'g', 2: 'b', 3: 'r'},
	oG = new Ke();
function aG(n, e, t, i, s) {
	const r = n.attribValue(e, oG);
	return ft(r) ? r[s] : Uc(r) ? r[sG[s]] : Fc(r) ? r[rG[s]] : r;
}
function cG(n) {
	return n instanceof Mi ? iG : aG;
}
const ex = {corePointClassFactory: Vs, ThreejsPoint: Mi, Core: tG, CoreType: li, [wA]: nG, [OA]: cG},
	tx = Object.keys(ex),
	lG = tx.map((n) => ex[n]);
class uG extends RA {
	constructor(e) {
		super(e),
			(this.param = e),
			(this._entitiesDependent = !1),
			(this._attribute_requirements_controller = new Qi()),
			(this.methods = []),
			(this.method_index = -1),
			(this.methodDependencies = []),
			(this.immutableDependencies = []);
	}
	entitiesDependent() {
		return this._entitiesDependent;
	}
	parseTree(e) {
		if ((this.reset(), e.errorMessage())) this.setError('cannot parse expression');
		else {
			try {
				this._attribute_requirements_controller = new Qi();
				const t = e.node();
				if (t) {
					const i = this.traverse_node(t);
					i && !this.isErrored() && (this.function_main_string = i);
				} else console.warn('no parsedTree.node');
			} catch (t) {
				console.warn(`error in expression for param ${this.param.path()}`), console.warn(t);
			}
			if (this.function_main_string)
				try {
					const t = this._functionBody();
					this.function = new Function(
						...tx,
						'param',
						'methods',
						'_set_error_from_error',
						`
					try {
						${t}
					} catch(e) {
						_set_error_from_error(e)
						return null;
					}`
					);
				} catch (t) {
					console.warn(t), this.setError('cannot generate function');
				}
			else this.setError('cannot generate function body');
		}
	}
	reset() {
		super.reset(),
			(this.function_main_string = void 0),
			(this.methods = []),
			(this.method_index = -1),
			(this.function = void 0),
			(this._entitiesDependent = !1),
			(this.methodDependencies = []),
			(this.immutableDependencies = []);
	}
	_functionBody() {
		return this._entitiesDependent
			? `
			const ${zr} = param.expressionController.entities();
			
			if(${zr}){
				return new Promise( async (resolve, reject)=>{
					try {
						const entityCallback = param.expressionController.entityCallback();
						// assign_attributes_lines
						${this._attribute_requirements_controller.assignAttributesLines()}
						// check if attributes are present
						if( ${this._attribute_requirements_controller.attributePresenceCheckLine()} ){
							// assign function
							const ${HE} = ${OA}(entities[0]);
							// assign_arrays_lines
							${this._attribute_requirements_controller.assignArraysLines()}
							for(const ${Ya} of ${zr}){
								result = ${this.function_main_string};
								entityCallback(${Ya}, result);
							}
							resolve()
						} else {
							const missingAttributes = ${this._attribute_requirements_controller.missingAttributesLine()}().join(', ');
							const error = new Error('attribute ' + missingAttributes + ' not found')
							_set_error_from_error(error)
							reject(error)
						}
					}catch(e){
						_set_error_from_error(e)
						reject(e)
					}
				})
			}
			return []`
			: `
			return new Promise( async (resolve, reject)=>{
				try {
					const value = ${this.function_main_string}
					resolve(value)
				} catch(e) {
					_set_error_from_error(e)
					reject()
				}
			})
			`;
	}
	evalAllowed() {
		return this.function != null;
	}
	evalFunction() {
		if (this.function)
			return this.clearError(), this.function(...lG, this.param, this.methods, this._set_error_from_error_bound);
	}
	traverse_CallExpression(e) {
		const t = e.arguments.map((r) => this.traverse_node(r)),
			s = e.callee.name;
		if (s) {
			const r = JV[s];
			if (r) return r(t);
			const o = `${t.join(LC)}`,
				a = lo[s];
			if (a) return `${a}(${o})`;
			const c = le.expressionsRegister;
			if (c.getMethod(s)) {
				const u = e.arguments[0],
					h = `return ${t[0]}`;
				let d, p;
				try {
					(d = new Function(h)), (p = d());
				} catch {}
				return (
					this._createMethodAndDependencies(s, p, u),
					`(await methods[${this.method_index}].processArguments([${o}]))`
				);
			} else {
				const u = c.availableMethods().join(', '),
					h = `method not found (${s}), available methods are: ${u}`;
				le.warn(h);
			}
		}
		this.setError(`unknown method: ${s}`);
	}
	traverse_BinaryExpression(e) {
		return `(${this.traverse_node(e.left)} ${e.operator} ${this.traverse_node(e.right)})`;
	}
	traverse_UnaryExpression(e) {
		if (e.operator === XV) {
			this._entitiesDependent = !0;
			let t = e.argument,
				i,
				s;
			switch (t.type) {
				case 'Identifier': {
					i = t.name;
					break;
				}
				case 'MemberExpression': {
					const r = t,
						o = r.object,
						a = r.property;
					(i = o.name), (s = a.name);
					break;
				}
			}
			if (i) {
				if (((i = Ut.remapName(i)), i == St.POINT_INDEX || i == St.OBJECT_INDEX))
					return `((${Ya} != null) ? ${Ya}.index() : 0)`;
				{
					const r = this._attribute_requirements_controller.varAttributeSize(i),
						o = this._attribute_requirements_controller.varArray(i);
					this._attribute_requirements_controller.add(i);
					let a = s ? eG[s] : 0;
					return a == null && (a = 0), `${HE}(${Ya}, '${i}', ${o}, ${r}, ${a})`;
				}
			} else return console.warn('attribute not found'), '';
		} else return `${e.operator}${this.traverse_node(e.argument)}`;
	}
	traverse_Identifier(e) {
		if (e.name[0] == TA) {
			const i = e.name.substring(1),
				s = JA[i];
			if (s) return s;
			const r = `traverse_Identifier_${i}`;
			if (this[r]) return this[r]();
			this.setError(`identifier unknown: ${e.name}`);
		} else return e.name;
	}
	traverse_Identifier_F() {
		return (
			this.immutableDependencies.push(this.param.scene().timeController.graphNode),
			'param.scene().timeController.frame()'
		);
	}
	traverse_Identifier_T() {
		return (
			this.immutableDependencies.push(this.param.scene().timeController.graphNode),
			'param.scene().timeController.time()'
		);
	}
	traverse_Identifier_OS() {
		const e = this.param.node.nameController.graphNode();
		return this.param.addGraphInput(e), 'param.node.name()';
	}
	traverse_Identifier_CH() {
		return `${ru}${this.param.name()}${ru}`;
	}
	traverse_Identifier_CEX() {
		return this._method_centroid('x');
	}
	traverse_Identifier_CEY() {
		return this._method_centroid('y');
	}
	traverse_Identifier_CEZ() {
		return this._method_centroid('z');
	}
	_method_centroid(e) {
		const i = [0, `${ru}${e}${ru}`].join(LC);
		return (
			this._createMethodAndDependencies('centroid', 0),
			`(await methods[${this.method_index}].processArguments([${i}]))`
		);
	}
	_createMethodAndDependencies(e, t, i) {
		const s = le.expressionsRegister,
			r = s.getMethod(e);
		if (!r) {
			const c = s.availableMethods(),
				l = `method not found (${e}), available methods are: ${c.join(', ')}`;
			this.setError(l), le.warn(l);
			return;
		}
		const o = new r(this.param);
		(this.method_index += 1), (this.methods[this.method_index] = o);
		const a = o.findDependency({indexOrPath: t});
		a
			? (i && a.set_jsep_node(i), this.methodDependencies.push(a))
			: i && qe(t) && this.param.scene().missingExpressionReferencesController.register(this.param, t, i);
	}
}
const hG = ', ';
class dG extends RA {
	constructor(e) {
		super(e), (this.param = e);
	}
	parseTree(e) {
		const t = e.node();
		if (e.errorMessage() == null && t)
			try {
				return this.traverse_node(t);
			} catch {
				this.setError('could not traverse tree');
			}
		else this.setError('cannot parse tree');
	}
	traverse_CallExpression(e) {
		const i = `${e.arguments.map((r) => this.traverse_node(r)).join(hG)}`;
		return `${e.callee.name}(${i})`;
	}
	traverse_UnaryExpression(e) {
		return `${e.operator}${this.traverse_node(e.argument)}`;
	}
	traverse_Identifier(e) {
		return `${e.name}`;
	}
}
class pG {
	constructor(e) {
		(this.param = e), (this._cyclicGraphDetected = !1), (this.methodDependencies = []);
	}
	setError(e) {
		this._errorMessage = this._errorMessage || e;
	}
	errorMessage() {
		return this._errorMessage;
	}
	reset() {
		this.param.graphDisconnectPredecessors(),
			this.methodDependencies.forEach((e) => {
				e.reset();
			}),
			(this.methodDependencies = []);
	}
	update(e) {
		(this._cyclicGraphDetected = !1),
			this._connectImmutableDependencies(e),
			(this.methodDependencies = e.methodDependencies),
			this._handleMethodDependencies(),
			this._listenForNameChanges();
	}
	_connectImmutableDependencies(e) {
		const t = e.immutableDependencies;
		for (const i of t)
			if (this._cyclicGraphDetected == !1 && this.param.addGraphInput(i) == !1) {
				(this._cyclicGraphDetected = !0),
					this.setError('cannot create expression, infinite graph detected'),
					this.reset();
				return;
			}
	}
	_handleMethodDependencies() {
		this.methodDependencies.forEach((e) => {
			this._cyclicGraphDetected == !1 && this._handleMethodDependency(e);
		});
	}
	_handleMethodDependency(e) {
		const t = e.resolved_graph_node;
		if (t && !this.param.addGraphInput(t)) {
			(this._cyclicGraphDetected = !0),
				this.setError('cannot create expression, infinite graph detected'),
				this.reset();
			return;
		}
	}
	_listenForNameChanges() {
		this.methodDependencies.forEach((e) => {
			e.listen_for_name_changes();
		});
	}
}
class fG {
	constructor(e) {
		(this.param = e),
			(this._parseStarted = !1),
			(this.parsedTree = new VE(this.param)),
			(this._functionGenerator = new uG(this.param)),
			(this.dependenciesController = new pG(this.param));
	}
	generatedFunctionEntitiesDependent() {
		return this._functionGenerator.entitiesDependent();
	}
	parseExpression(e) {
		if (this._parseStarted) throw new Error(`parse in progress for param ${this.param.path()}`);
		if (
			((this._parseStarted = !0),
			(this.parsedTree = this.parsedTree || new VE(this.param)),
			this.reset(),
			this.param.expressionParsedAsString()
				? this.parsedTree.parseExpressionForStringParam(e)
				: this.parsedTree.parseExpression(e),
			this._functionGenerator.parseTree(this.parsedTree),
			this._functionGenerator.errorMessage() == null)
		) {
			this.dependenciesController.update(this._functionGenerator);
			const t = this.dependenciesController.errorMessage();
			t ? this.param.states.error.set(t) : (this._parseStarted = !1);
		}
	}
	async computeFunction() {
		if (this._computeAllowed())
			try {
				return await this._functionGenerator.evalFunction();
			} catch (e) {
				le.error('error while evaluating expression', e);
			}
		else le.error('compute not allowed');
	}
	reset() {
		(this._parseStarted = !1), this.dependenciesController.reset(), this._functionGenerator.reset();
	}
	isErrored() {
		return this._functionGenerator.isErrored();
	}
	errorMessage() {
		return this._functionGenerator.errorMessage();
	}
	_computeAllowed() {
		return this._functionGenerator.evalAllowed();
	}
	updateFromMethodDependencyNameChange() {
		this._expressionStringGenerator = this._expressionStringGenerator || new dG(this.param);
		const e = this._expressionStringGenerator.parseTree(this.parsedTree);
		e ? this.param.set(e) : console.warn('failed to regenerate expression');
	}
}
class nx {
	constructor(e) {
		this.param = e;
	}
	dispose() {
		this.param.scene().expressionsController.deregisterParam(this.param),
			this._resetMethodDependencies(),
			(this._manager = void 0);
	}
	_resetMethodDependencies() {
		var e, t;
		(e = this._methodDependenciesByGraphNodeId) == null ||
			e.forEach((i) => {
				i.dispose();
			}),
			(t = this._methodDependenciesByGraphNodeId) == null || t.clear();
	}
	registerMethodDependency(e) {
		(this._methodDependenciesByGraphNodeId = this._methodDependenciesByGraphNodeId || new Map()),
			this._methodDependenciesByGraphNodeId.set(e.graphNodeId(), e);
	}
	active() {
		return this._expression != null;
	}
	expression() {
		return this._expression;
	}
	isErrored() {
		return this._manager ? this._manager.isErrored() : !1;
	}
	errorMessage() {
		return this._manager ? this._manager.errorMessage() : null;
	}
	entitiesDependent() {
		var e;
		const t = ((e = this._manager) == null ? void 0 : e.generatedFunctionEntitiesDependent()) || !1;
		return this.param.options.isExpressionForEntities() && t;
	}
	setExpression(e, t = !0) {
		var i;
		if (this.param.disposed()) {
			this._resetMethodDependencies(), (this._expression = void 0);
			return;
		}
		this.param.scene().missingExpressionReferencesController.deregisterParam(this.param),
			this.param.scene().expressionsController.deregisterParam(this.param),
			this._expression != e &&
				(this._resetMethodDependencies(),
				(this._expression = e),
				this._expression
					? ((this._manager = this._manager || new fG(this.param)),
					  this._manager.parseExpression(this._expression))
					: (i = this._manager) == null || i.reset(),
				t && this.param.setDirty());
	}
	updateFromMethodDependencyNameChange() {
		this._manager && this.active() && this._manager.updateFromMethodDependencyNameChange();
	}
	computeExpression() {
		if (this._manager && this.active()) return this._manager.computeFunction();
	}
	async computeExpressionForEntities(e, t) {
		var i;
		this._setEntities(e, t), await this.computeExpression();
		const s = (i = this._manager) == null ? void 0 : i.errorMessage();
		s && this.param.node.states.error.set(`expression evaluation error: ${s}`), this._resetEntities();
	}
	computeExpressionForPoints(e, t) {
		return this.computeExpressionForEntities(e, t);
	}
	computeExpressionForVertices(e, t) {
		return this.computeExpressionForEntities(e, t);
	}
	computeExpressionForPrimitives(e, t) {
		return this.computeExpressionForEntities(e, t);
	}
	computeExpressionForObjects(e, t) {
		return this.computeExpressionForEntities(e, t);
	}
	computeExpressionForCoreGroup(e, t) {
		return this.computeExpressionForEntities([e], t);
	}
	entities() {
		return this._entities;
	}
	entityCallback() {
		return this._entityCallback;
	}
	_setEntities(e, t) {
		(this._entities = e), (this._entityCallback = t);
	}
	_resetEntities() {
		(this._entities = void 0), (this._entityCallback = void 0);
	}
}
class Yh extends Sr {
	isNumeric() {
		return !0;
	}
	isDefault() {
		return this._raw_input == this._default_value;
	}
	_prefilterInvalidRawInput(e) {
		return ft(e) ? e[0] : e;
	}
	processRawInput() {
		const e = this.convert(this._raw_input);
		if (e != null) {
			this._expression_controller &&
				(this._expression_controller.setExpression(void 0, !1),
				this.emitController.emit(_n.EXPRESSION_UPDATED));
			const t = this.states.error.active();
			this.states.error.clear(), (e != this._value || t) && (this._updateValue(e), this.setSuccessorsDirty(this));
		} else
			qe(this._raw_input)
				? (this.states.error.clear(),
				  (this._expression_controller = this._expression_controller || new nx(this)),
				  this._raw_input != this._expression_controller.expression() &&
						(this._expression_controller.setExpression(this._raw_input),
						this.emitController.emit(_n.EXPRESSION_UPDATED)))
				: this.states.error.set(`param input is invalid (${this.path()})`);
	}
	async processComputation() {
		var e;
		if ((e = this.expressionController) != null && e.active() && !this.expressionController.entitiesDependent()) {
			const t = await this.expressionController.computeExpression();
			if (this.expressionController.isErrored())
				this.states.error.set(
					`expression error: "${this.expressionController.expression()}" (${this.expressionController.errorMessage()})`
				);
			else {
				const i = this.convert(t);
				i != null
					? (this.states.error.active() && this.states.error.clear(), this._updateValue(i))
					: this.states.error.set(
							`expression returns an invalid type (${t}) (${this.expressionController.expression()})`
					  );
			}
		}
	}
	_updateValue(e) {
		this._value = e;
		const t = this.parentParam();
		t && t.setValueFromComponents(),
			this.options.executeCallback(),
			this.emitController.emit(_n.VALUE_UPDATED),
			this.removeDirtyState();
	}
}
class Kh {
	constructor() {
		(this._index = -1),
			(this._pathElements = []),
			(this._namedNodes = []),
			(this._graphNodeIds = []),
			(this._nodeElementByGraphNodeId = new Map()),
			(this._absolutePath = '/');
	}
	reset() {
		(this._index = -1),
			(this._pathElements = []),
			(this._namedNodes = []),
			(this._graphNodeIds = []),
			this._nodeElementByGraphNodeId.clear();
	}
	addNamedNode(e) {
		(this._index += 1),
			e.name == e.node.name() && (this._namedNodes[this._index] = e),
			(this._graphNodeIds[this._index] = e.node.graphNodeId()),
			this._nodeElementByGraphNodeId.set(e.node.graphNodeId(), e.name),
			(this._absolutePath = [this._absolutePath, e.name].join(Ct.SEPARATOR));
	}
	addPathElement(e) {
		(this._index += 1), (this._pathElements[this._index] = e), e.node && (this._absolutePath = e.node.path());
	}
	namedGraphNodes() {
		return this._namedNodes;
	}
	namedNodes(e) {
		e.length = 0;
		for (const t of this._namedNodes)
			if (t) {
				const i = t.node;
				i.nameController && e.push(i);
			}
		return e;
	}
	updateFromNameChange(e) {
		this._namedNodes.map((i) => (i == null ? void 0 : i.node.graphNodeId())).includes(e.graphNodeId()) &&
			this._nodeElementByGraphNodeId.set(e.graphNodeId(), e.name());
	}
	toPath() {
		const e = new Array(this._index);
		for (let s = 0; s <= this._index; s++) {
			const r = this._namedNodes[s];
			if (r) {
				const o = this._nodeElementByGraphNodeId.get(r.node.graphNodeId());
				o && (e[s] = o);
			} else {
				const o = this._pathElements[s];
				o && (e[s] = o.path);
			}
		}
		let t = e.join(Ct.SEPARATOR);
		const i = t[0];
		return i && (Ct.NON_LETTER_PREFIXES.includes(i) || (t = `${Ct.SEPARATOR}${t}`)), t;
	}
	toAbsolutePath() {
		return this._absolutePath;
	}
}
class ix extends Sr {
	expressionParsedAsString() {
		return !0;
	}
	processRawInput() {
		SA(this._raw_input).length >= 3
			? ((this._expression_controller = this._expression_controller || new nx(this)),
			  this._raw_input != this._expression_controller.expression() &&
					(this.states.error.clear(),
					this._expression_controller.setExpression(this._raw_input, !1),
					this.setDirty(),
					this.emitController.emit(_n.EXPRESSION_UPDATED)))
			: this.processRawInputWithoutExpression();
	}
	async processComputation() {
		var e;
		if ((e = this.expressionController) != null && e.active() && !this.expressionController.entitiesDependent()) {
			const t = await this.expressionController.computeExpression();
			if (this.expressionController.isErrored())
				this.states.error.set(
					`expression error: "${this.expressionController.expression()}" (${this.expressionController.errorMessage()})`
				);
			else {
				const i = this.convert(t);
				i != null
					? (this.states.error.clear(),
					  this._assignValue(i),
					  this.emitController.emit(_n.VALUE_UPDATED),
					  this.options.executeCallback())
					: this.states.error.set(`expression returns an invalid type (${t})`),
					this.removeDirtyState();
			}
		}
	}
}
class sx extends ix {
	constructor() {
		super(...arguments), (this.decomposedPath = new Kh());
	}
	dispose() {
		this.scene().referencesController.resetReferenceFromParam(this), super.dispose();
	}
	_handleReferences(e, t) {
		t != '' &&
			(this.scene().referencesController.setNamedNodesFromParam(this),
			e
				? (this.scene().referencesController.setReferenceFromParam(this, e),
				  this.scene().missingExpressionReferencesController.deregisterParam(this))
				: this.scene().missingExpressionReferencesController.register(this, t));
	}
	async processComputation() {
		var e;
		(e = this.expressionController) != null && e.active() && !this.expressionController.entitiesDependent()
			? await super.processComputation()
			: this._findTarget();
	}
	processRawInputWithoutExpression() {
		const e = this.states.error.active();
		(this._value.path() != this._raw_input || this._expression_controller || e) &&
			(this._setValuePathAndFindTarget(this._raw_input, !0),
			this.states.error.clear(),
			this.emitController.emit(_n.VALUE_UPDATED),
			this.options.executeCallback(),
			this._expression_controller &&
				(this._expression_controller.setExpression(void 0, !1),
				(this._expression_controller = void 0),
				this.emitController.emit(_n.EXPRESSION_UPDATED)));
	}
	_setValuePathAndFindTarget(e, t) {
		this._value.setPath(e), this._findTarget(), t && this.setDirty(), this.emitController.emit(_n.VALUE_UPDATED);
	}
}
const FC = new zi();
class mm extends sx {
	static type() {
		return j.NODE_PATH;
	}
	_initializeParam() {
		this._value = new zi();
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	rawInputSerialized() {
		return `${this._raw_input}`;
	}
	valueSerialized() {
		return `${this.value}`;
	}
	_copyValue(e) {
		this.set(e.valueSerialized());
	}
	static areRawInputEqual(e, t) {
		return e == t;
	}
	static areValuesEqual(e, t) {
		return e == t;
	}
	isDefault() {
		return this._raw_input == this._default_value;
	}
	setNode(e, t) {
		if ((t == null ? void 0 : t.relative) == !0) {
			const i = Ct.relativePath(this.node, e);
			this.set(i);
		} else this.set(e.path());
	}
	_assignValue(e) {
		const t = qe(e) ? e : e.path();
		this._value.path() != t && this._setValuePathAndFindTarget(t, !1);
	}
	convert(e) {
		return qe(e) ? (FC.setPath(e), FC) : null;
	}
	_findTarget() {
		if (!this.node) return;
		const e = this._value.path();
		let t = null;
		const i = e != null && e !== '';
		this.scene().referencesController.resetReferenceFromParam(this),
			this.decomposedPath.reset(),
			i && (t = Ct.findNode(this.node, e, this.decomposedPath));
		const s = this._value.node(),
			r = t;
		if (r && r.graphNodeId() == this.node.graphNodeId()) {
			this.states.error.set('param cannot refer to its own node');
			return;
		}
		if (
			(this._handleReferences(t, e),
			(s == null ? void 0 : s.graphNodeId()) !== (r == null ? void 0 : r.graphNodeId()))
		) {
			const o = this.options.dependentOnFoundNode(),
				a = this._value.node();
			a && o && this.removeGraphInput(a),
				t ? this._assignFoundNode(t) : this._value.setNode(null),
				this.options.executeCallback();
		}
		i &&
			!t &&
			this.scene().loadingController.loaded() &&
			i &&
			this.states.error.set(`no node found at path '${e}'`),
			this.removeDirtyState();
	}
	_assignFoundNode(e) {
		const t = this.options.dependentOnFoundNode();
		this._isNodeExpectedContext(e)
			? this._isNodeExpectedType(e)
				? (this.states.error.clear(), this._value.setNode(e), t && this.addGraphInput(e))
				: this.states.error.set(
						`node type is ${e.type()} but the params expects one of ${(
							this._expectedNodeTypes() || []
						).join(', ')}`
				  )
			: this.states.error.set(
					`node context is ${e.context()} but the params expects a ${this._expectedContext()}`
			  );
	}
	_expectedContext() {
		return this.options.nodeSelectionContext();
	}
	_isNodeExpectedContext(e) {
		const t = this._expectedContext();
		return t == null ? !0 : t == e.context();
	}
	_expectedNodeTypes() {
		return this.options.nodeSelectionTypes();
	}
	_isNodeExpectedType(e) {
		const t = this._expectedNodeTypes();
		return t == null ? !0 : t == null ? void 0 : t.includes(e.type());
	}
	notifyPathRebuildRequired(e) {
		this.decomposedPath.updateFromNameChange(e);
		const t = this.decomposedPath.toPath();
		this.set(t);
	}
	notifyTargetParamOwnerParamsUpdated(e) {
		this.setDirty();
	}
}
const BC = new Oh();
class rx extends sx {
	constructor() {
		super(...arguments), (this._onResolvedParamDisposeBound = this._onResolvedParamDispose.bind(this));
	}
	static type() {
		return j.PARAM_PATH;
	}
	_initializeParam() {
		this._value = new Oh();
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	rawInputSerialized() {
		return `${this._raw_input}`;
	}
	valueSerialized() {
		return `${this.value}`;
	}
	_copyValue(e) {
		this.set(e.valueSerialized());
	}
	static areRawInputEqual(e, t) {
		return e == t;
	}
	static areValuesEqual(e, t) {
		return e == t;
	}
	isDefault() {
		return this._raw_input == this._default_value;
	}
	setParam(e) {
		this.set(e.path());
	}
	_assignValue(e) {
		const t = qe(e) ? e : e.path();
		this._value.path() != t && this._setValuePathAndFindTarget(t, !1);
	}
	convert(e) {
		return qe(e) ? (BC.setPath(e), BC) : null;
	}
	_findTarget() {
		if (!this.node) return;
		const e = this._value.path();
		let t = null;
		const i = e != null && e !== '';
		this.scene().referencesController.resetReferenceFromParam(this),
			this.decomposedPath.reset(),
			i && (t = Ct.findParam(this.node, e, this.decomposedPath));
		const s = this._value.param(),
			r = t;
		if (r && r.graphNodeId() == this.graphNodeId()) {
			this.states.error.set('param cannot refer to itself');
			return;
		}
		if (
			(this._handleReferences(t, e),
			(s == null ? void 0 : s.graphNodeId()) !== (r == null ? void 0 : r.graphNodeId()))
		) {
			const o = this.options.dependentOnFoundParam(),
				a = this._value.param();
			a && (o && this.removeGraphInput(a), a.deregisterOnDispose(this._onResolvedParamDisposeBound)),
				t ? this._assignFoundParam(t) : this._value.setParam(null),
				this.options.executeCallback();
		}
		this.removeDirtyState();
	}
	_assignFoundParam(e) {
		const t = this.options.dependentOnFoundParam();
		this._value.setParam(e), t && this.addGraphInput(e), e.onDispose(this._onResolvedParamDisposeBound);
	}
	notifyPathRebuildRequired(e) {
		this.decomposedPath.updateFromNameChange(e);
		const t = this.decomposedPath.toPath();
		this.set(t);
	}
	notifyTargetParamOwnerParamsUpdated(e) {
		this.setDirty();
	}
	async _onResolvedParamDispose() {
		this.setDirty(), await this.compute();
	}
}
class gm extends ix {
	static type() {
		return j.STRING;
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	_cloneRawInput(e) {
		return `${e}`;
	}
	rawInputSerialized() {
		return `${this._raw_input}`;
	}
	valueSerialized() {
		return `${this.value}`;
	}
	_copyValue(e) {
		this.set(e.value);
	}
	static areRawInputEqual(e, t) {
		return e == t;
	}
	static areValuesEqual(e, t) {
		return e == t;
	}
	isDefault() {
		return this._raw_input == this._default_value;
	}
	convert(e) {
		return qe(e) ? e : `${e}`;
	}
	rawInput() {
		return this._raw_input;
	}
	_assignValue(e) {
		this._value = e;
	}
	async processRawInputWithoutExpression() {
		const e = this.states.error.active();
		(this._raw_input != this._value || this._expression_controller || e) &&
			(this._assignValue(this._raw_input),
			this.states.error.clear(),
			this.removeDirtyState(),
			this.setSuccessorsDirty(this),
			this.emitController.emit(_n.VALUE_UPDATED),
			this.options.executeCallback(),
			this._expression_controller &&
				(this._expression_controller.setExpression(void 0, !1),
				(this._expression_controller = void 0),
				this.emitController.emit(_n.EXPRESSION_UPDATED)));
	}
}
class _G extends bA {
	async nodes_data(e) {
		var t;
		return e.showPolyNodesData || !((t = this._node.polyNodeController) != null && t.locked())
			? await super.nodes_data(e)
			: {};
	}
	uiData(e) {
		var t;
		return e.showPolyNodesData || !((t = this._node.polyNodeController) != null && t.locked())
			? super.uiData(e)
			: this.ui_data_without_children();
	}
	async persistedConfigData(e, t, i) {
		var s;
		if (i.showPolyNodesData || !((s = this._node.polyNodeController) != null && s.locked()))
			return await super.persistedConfigData(e, t, i);
	}
}
class mG {
	dispatchNode(e) {
		return e.polyNodeController ? new _G(e, this) : new bA(e, this);
	}
	dispatchParam(e) {
		return e instanceof Yh
			? new HB(e)
			: e instanceof mm
			? new WB(e)
			: e instanceof rx
			? new jB(e)
			: e instanceof gm
			? new XB(e)
			: e instanceof ns
			? new $B(e)
			: new Ia(e);
	}
}
const gG = ['overriden_options', 'type'];
class ox {
	constructor(e, t, i) {
		(this._node = e), (this.dispatcher = t), (this.nodesImporter = i);
	}
	process_data(e, t) {
		if (
			(this._node.sceneReadonly() && e.report.markAsLoadedWithoutAssemblers(),
			this.set_connection_points(t.connection_points),
			this._node.childrenAllowed() && this.create_nodes(e, t.nodes, t),
			this._node.io.inputs.overrideClonedStateAllowed())
		) {
			const i = t.cloned_state_overriden;
			i && this._node.io.inputs.overrideClonedState(i);
		}
		if ((this.set_flags(t), this.set_params(t), t.persisted_config)) {
			const i = e.shadersData(),
				s = e.jsFunctionBodiesData();
			if (i) {
				let r = i[this._node.path()];
				r || (r = {}), (t.persisted_config.shaders = r);
			}
			if (s) {
				const r = s[this._node.path()];
				r && (qe(r), (t.persisted_config.functionBody = r));
			}
			this.set_persisted_config(t.persisted_config);
		}
		this.setCustomData(t);
	}
	process_inputs_data(e, t) {
		const i = t.maxInputsCount;
		if (i != null) {
			const s = this._node.io.inputs.minCount();
			this._node.io.inputs.setCount(s, i);
		}
		try {
			this.setInputs(t.inputs);
		} catch (s) {
			const r = s.message || `failed connecting inputs of node ${t.type}`;
			e.report.addWarning(r), console.warn(t.inputs);
		}
	}
	process_ui_data(e, t) {
		if (!t || le.playerMode()) return;
		const i = this._node.uiData,
			s = t.pos;
		if (s) {
			const a = new re().fromArray(s);
			i.setPosition(a);
		}
		const r = t.comment;
		r && i.setComment(r);
		const o = t.selection;
		if ((o && this.set_selection(o), this._node.childrenAllowed())) {
			const a = t.nodes;
			a && this.processNodesUiData(e, a);
		}
	}
	create_nodes(e, t, i) {
		t && this.nodesImporter.process_data(e, t);
	}
	set_selection(e) {
		if (this._node.childrenAllowed() && this._node.childrenController && e && e.length > 0) {
			const t = [];
			e.forEach((i) => {
				const s = this._node.node(i);
				s && t.push(s);
			}),
				this._node.childrenController.selection.set(t);
		}
	}
	set_flags(e) {
		var t, i, s, r, o, a;
		const c = e.flags;
		if (c) {
			const l = c.bypass;
			l != null && ((i = (t = this._node.flags) == null ? void 0 : t.bypass) == null || i.set(l));
			const u = c.display;
			u != null && ((r = (s = this._node.flags) == null ? void 0 : s.display) == null || r.set(u));
			const h = c.optimize;
			h != null && ((a = (o = this._node.flags) == null ? void 0 : o.optimize) == null || a.set(h));
		}
	}
	set_connection_points(e) {
		e &&
			(e.in && this._node.io.saved_connection_points_data.set_in(e.in),
			e.out && this._node.io.saved_connection_points_data.set_out(e.out),
			this._node.io.has_connection_points_controller &&
				this._node.io.connection_points.update_signature_if_required());
	}
	setInputs(e) {
		if (!e) return;
		let t;
		for (let i = 0; i < e.length; i++)
			if (((t = e[i]), t && this._node.parent()))
				if (qe(t)) {
					const s = t,
						r = this._node.nodeSibling(s);
					this._node.setInput(i, r);
				} else {
					const s = this._node.nodeSibling(t.node);
					let r = t.index;
					const o = t.inputName;
					let a = t.output;
					if (o != null) {
						const c = this._node.io.inputs.namedInputConnectionPoints();
						if (c) {
							const l = c
								.map((u) => (u == null ? void 0 : u.name().toLowerCase()))
								.indexOf(o.toLowerCase());
							l >= 0 && (r = l);
						}
					}
					if (s != null && a != null) {
						const c = s.io.outputs.namedOutputConnectionPoints();
						if (c) for (let l of c) l && l.name().toLowerCase() == a.toLowerCase() && (a = l.name());
					}
					r != null && this._node.setInput(r, s, a);
				}
	}
	processNodesUiData(e, t) {
		if (!t || le.playerMode()) return;
		const i = Object.keys(t);
		for (let s of i) {
			const r = this._node.node(s);
			if (r) {
				const o = t[s];
				this.dispatcher.dispatchNode(r).process_ui_data(e, o);
			}
		}
	}
	set_params(e) {
		const t = e.params;
		if (!t) return;
		const i = Object.keys(t),
			s = {};
		for (let a of i) {
			const c = t[a];
			if (c != null) {
				const l = c.options;
				let u = c.type;
				const h = this._node.params.has_param(a);
				let d = !1,
					p;
				h && ((p = this._node.params.get(a)), ((p && p.type() == u) || u == null) && (d = !0)),
					d
						? this._is_param_data_complex(c)
							? this._process_param_data_complex(a, c)
							: this._process_param_data_simple(a, c)
						: ((s.namesToDelete = s.namesToDelete || []),
						  s.namesToDelete.push(a),
						  (s.toAdd = s.toAdd || []),
						  s.toAdd.push({
								name: a,
								type: u,
								initValue: c.default_value,
								rawInput: c.raw_input,
								options: l,
						  }));
			}
		}
		const r = s.namesToDelete && s.namesToDelete.length > 0,
			o = s.toAdd && s.toAdd.length > 0;
		if (r || o) {
			this._node.params.updateParams(s);
			for (let a of this._node.params.spare) {
				const c = t[a.name()];
				!a.parentParam() &&
					c &&
					(this._is_param_data_complex(c)
						? this._process_param_data_complex(a.name(), c)
						: this._process_param_data_simple(a.name(), c));
			}
		}
		this._node.params.runOnSceneLoadHooks();
	}
	_process_param_data_simple(e, t) {
		var i;
		(i = this._node.params.get(e)) == null || i.set(t);
	}
	_process_param_data_complex(e, t) {
		const i = this._node.params.get(e);
		i && this.dispatcher.dispatchParam(i).process_data(t);
	}
	_is_param_data_complex(e) {
		if (qe(e) || je(e) || ft(e) || xi(e)) return !1;
		if (Zu(e)) {
			const t = Object.keys(e);
			for (let i of gG) if (t.includes(i)) return !0;
		}
		return !1;
	}
	set_persisted_config(e) {
		this._node.persisted_config && this._node.persisted_config.load(e);
	}
	setCustomData(e) {}
}
class uo {
	constructor(e) {
		this._param = e;
	}
	process_data(e) {
		const t = e.raw_input;
		t !== void 0 && this._param.set(t), this.add_main(e);
	}
	add_main(e) {}
	static spare_params_data(e) {
		return this.params_data(!0, e);
	}
	static non_spare_params_data_value(e) {
		return this.params_data_value(!1, e);
	}
	static params_data(e, t) {
		let i;
		if (t) {
			i = {};
			const s = Object.keys(t);
			let r;
			for (let o of s) (r = t[o]), r && (i[o] = t);
		}
		return i;
	}
	static params_data_value(e, t) {
		let i;
		if (t) {
			i = {};
			const s = Object.keys(t);
			let r;
			for (let o of s)
				if (((r = t[o]), r != null)) {
					const a = r.options,
						c = r.overriden_options;
					if (a || c) {
						const l = r;
						a && a.spare == e
							? l.raw_input != null && (i[o] = {complex_data: l})
							: c && (i[o] = {complex_data: l});
					} else {
						const l = r;
						(c || l != null) && (i[o] = {simple_data: l});
					}
				}
		}
		return i;
	}
}
class vG extends uo {
	add_main(e) {}
}
const EG = /\\n+/g;
class CG extends uo {
	add_main(e) {
		let t = e.raw_input;
		t !== void 0 &&
			((t = t.replace(
				EG,
				`
`
			)),
			this._param.set(t));
	}
}
class yG extends uo {
	add_main(e) {
		const t = e.raw_input;
		t && this._param.set(t);
	}
}
class Zh extends Yh {
	static type() {
		return j.FLOAT;
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	rawInputSerialized() {
		return this._raw_input;
	}
	valueSerialized() {
		return this.value;
	}
	_copyValue(e) {
		this.set(e.valueSerialized());
	}
	_prefilterInvalidRawInput(e) {
		if (ft(e)) return e[0];
		if (qe(e) && _t.isNumber(e)) {
			const t = parseFloat(e);
			if (t != null) {
				const i = this.convert(t);
				if (i != null) return i;
			}
		}
		if (je(e)) {
			const t = this.convert(e);
			if (t != null) return t;
		}
		return e;
	}
	static areRawInputEqual(e, t) {
		return e == t;
	}
	static areValuesEqual(e, t) {
		return e == t;
	}
	static convert(e) {
		if (je(e)) return e;
		if (xi(e)) return e ? 1 : 0;
		if (_t.isNumber(e)) {
			const t = parseFloat(e);
			if (je(t)) return t;
		}
		return null;
	}
	convert(e) {
		const t = Zh.convert(e);
		return t != null ? this.options.ensureInRange(t) : t;
	}
}
class tl extends Sr {
	constructor() {
		super(...arguments), (this._components_contructor = Zh), (this._componentsCount = 0);
	}
	get components() {
		return this._components;
	}
	isNumeric() {
		return !0;
	}
	isDefault() {
		for (const e of this.components) if (!e.isDefault()) return !1;
		return !0;
	}
	rawInput() {
		return this._components.map((e) => e.rawInput());
	}
	rawInputSerialized() {
		return this._components.map((e) => e.rawInputSerialized());
	}
	_copyValue(e) {
		for (let t = 0; t < this.components.length; t++) {
			const i = this.components[t],
				s = e.components[t];
			i.copyValue(s);
		}
	}
	initComponents() {
		var e;
		if (this._components != null) return;
		let t = 0;
		this._components = new Array(this.componentNames().length);
		for (const i of this.componentNames()) {
			const s = new this._components_contructor(this.scene(), this.node, {
				serializerClass: (e = this._serializer) == null ? void 0 : e.constructor,
			});
			let r;
			ft(this._default_value) ? (r = this._default_value[t]) : (r = this._default_value[i]),
				s.options.copy(this.options),
				s.setInitValue(r),
				s.setName(`${this.name()}${i}`),
				s.set_parent_param(this),
				(this._components[t] = s),
				t++;
		}
		this._componentsCount = this._components.length;
	}
	async processComputation() {
		await this.computeComponents(), this.setValueFromComponents();
	}
	hasExpression() {
		var e;
		for (const t of this.components) if ((e = t.expressionController) != null && e.active()) return !0;
		return !1;
	}
	async computeComponents() {
		const e = this.components;
		for (const t of e) t.isDirty() && (await t.compute());
		this.removeDirtyState();
	}
	_prefilterInvalidRawInput(e) {
		if (ft(e)) return e;
		{
			const t = e;
			return this.componentNames().map(() => t);
		}
	}
	processRawInput() {
		const e = this.scene().cooker;
		e.block();
		const t = this.components;
		for (const r of t) r.emitController.blockParentEmit();
		const i = this._raw_input;
		let s = 0;
		if (ft(i))
			for (let r = 0; r < this._componentsCount; r++) {
				let o = i[r];
				o == null && (o = s), t[r].set(o), (s = o);
			}
		else
			for (let r = 0; r < this._componentsCount; r++) {
				const o = this.componentNames()[r];
				let a = i[o];
				a == null && (a = s), t[r].set(a), (s = a);
			}
		e.unblock();
		for (const r of this.components) r.emitController.unblockParentEmit();
		this.emitController.emit(_n.VALUE_UPDATED);
	}
}
class bG extends ox {
	create_nodes(e, t, i) {
		const r = this._node.polyNodeController;
		r.setLockedState(!1), this._isDataLocked(i) ? r.createChildNodesFromDefinition() : super.create_nodes(e, t, i);
	}
	setCustomData(e) {
		this._node.polyNodeController && this._node.polyNodeController.setLockedState(this._isDataLocked(e));
	}
	_isDataLocked(e) {
		return e.polyNode ? e.polyNode.locked : !1;
	}
}
class ir {
	constructor(e) {
		(this._node = e),
			(this._nodes = []),
			(this._optimized_root_node_names = new Set()),
			(this._operation_containers_by_name = new Map()),
			(this._node_inputs = []);
	}
	nodes() {
		return this._nodes;
	}
	process_data(e, t) {
		var i, s, r;
		if (!t || !(this._node.childrenAllowed() && this._node.childrenController)) return;
		const {optimized_names: o} = ir.child_names_by_optimized_state(t);
		(this._nodes = []), (this._optimized_root_node_names = new Set());
		for (let a of o) ir.is_optimized_root_node(t, a) && this._optimized_root_node_names.add(a);
		for (let a of this._optimized_root_node_names) {
			const c = t[a],
				l = {nodeName: a},
				u = this._node.createNode(EV, l);
			if (u) {
				this._nodes.push(u),
					(i = c.flags) != null &&
						i.display &&
						((r = (s = u.flags) == null ? void 0 : s.display) == null || r.set(!0));
				const h = this._createOperationContainer(e, u, c, u.name());
				u.setOutputOperationContainer(h);
			}
		}
		for (let a of this._nodes) {
			const c = a.outputOperationContainer();
			if (c) {
				(this._node_inputs = []),
					this._add_optimized_node_inputs(e, a, t, a.name(), c),
					a.io.inputs.setCount(this._node_inputs.length);
				for (let l = 0; l < this._node_inputs.length; l++) a.setInput(l, this._node_inputs[l]);
			}
		}
	}
	_add_optimized_node_inputs(e, t, i, s, r) {
		var o;
		const a = i[s],
			c = a.inputs;
		if (c) {
			for (let l of c)
				if (qe(l)) {
					const u = i[l];
					if (u)
						if (ir.is_node_optimized(u) && !this._optimized_root_node_names.has(l)) {
							let h = this._operation_containers_by_name.get(l);
							h ||
								((h = this._createOperationContainer(e, t, u, l)),
								h && this._add_optimized_node_inputs(e, t, i, l, h)),
								r.addInput(h);
						} else {
							const h = (o = t.parent()) == null ? void 0 : o.node(l);
							if (h) {
								this._node_inputs.push(h);
								const d = this._node_inputs.length - 1;
								t.addInputConfig(r, {
									operation_input_index: r.currentInputIndex(),
									node_input_index: d,
								}),
									r.incrementInputIndex();
							}
						}
				}
			a.cloned_state_overriden == !0 && r.overrideInputCloneState(a.cloned_state_overriden);
		}
	}
	static child_names_by_optimized_state(e) {
		const t = Object.keys(e),
			i = [],
			s = [];
		for (let r of t) {
			const o = e[r];
			le.playerMode() && this.is_node_optimized(o) ? i.push(r) : s.push(r);
		}
		return {optimized_names: i, non_optimized_names: s};
	}
	static is_optimized_root_node_generic(e) {
		return e.outputs_count == 0 || e.non_optimized_count > 0;
	}
	static is_optimized_root_node(e, t) {
		const i = this.node_outputs(e, t);
		let s = 0;
		return (
			i.forEach((r) => {
				const o = e[r];
				this.is_node_optimized(o) || s++;
			}),
			this.is_optimized_root_node_generic({outputs_count: i.size, non_optimized_count: s})
		);
	}
	static is_optimized_root_node_from_node(e) {
		var t, i, s, r;
		if (!((i = (t = e.flags) == null ? void 0 : t.optimize) != null && i.active())) return !1;
		const o = [];
		e.io.connections.outputConnections(o);
		const a = o.map((l) => l.nodeDest());
		let c = 0;
		for (let l of a) ((r = (s = l.flags) == null ? void 0 : s.optimize) != null && r.active()) || c++;
		return this.is_optimized_root_node_generic({outputs_count: a.length, non_optimized_count: c});
	}
	static node_outputs(e, t) {
		const i = Object.keys(e),
			s = new Set();
		for (let r of i)
			if (r != t) {
				const a = e[r].inputs;
				if (a) for (let c of a) qe(c) && c == t && s.add(r);
			}
		return s;
	}
	_createOperationContainer(e, t, i, s) {
		const r = uo.non_spare_params_data_value(i.params),
			o = ir.operation_type(i),
			a = {paramsInitValueOverrides: r},
			c = this._node.createOperationContainer(o, s, a);
		return (
			c &&
				(this._operation_containers_by_name.set(s, c),
				c.pathParamResolveRequired() &&
					(t.addOperationContainerWithPathParamResolveRequired(c),
					e.add_operations_composer_node_with_path_param_resolve_required(t))),
			c
		);
	}
	static operation_type(e) {
		return ir.is_node_bypassed(e) ? 'null' : e.type;
	}
	static is_node_optimized(e) {
		const t = e.flags;
		return !!(t && t.optimize);
	}
	static is_node_bypassed(e) {
		const t = e.flags;
		return !!(t && t.bypass);
	}
}
class kC {
	constructor(e, t) {
		(this._node = e), (this.dispatcher = t);
	}
	process_data(e, t) {
		var i;
		if (!t || !(this._node.childrenAllowed() && this._node.childrenController)) return;
		const {optimized_names: s, non_optimized_names: r} = ir.child_names_by_optimized_state(t),
			o = [],
			a = e.migrateHelper();
		for (let l of r) {
			const u = t[l],
				h = a ? a.migrateNodeType(this._node, u) : u.type;
			a == null || a.migrateParams(this._node, u);
			const p = {paramsInitValueOverrides: uo.non_spare_params_data_value(u.params), nodeName: l},
				m = (_, f) => {
					try {
						const y = this._node.createNode(_, f);
						if (y) return y;
					} catch (y) {
						console.error(`error importing node: cannot create with type ${_}`, y);
					}
				};
			let g = m(h, p);
			if (!g) {
				const _ = _t.camelCase(h);
				g = m(_, p);
			}
			if (!g) {
				const _ = `${h}Network`;
				g = m(_, p);
			}
			if (g) o.push(g);
			else {
				const _ = `failed to create node with type '${h}' (in '${this._node.path()}')`;
				e.report.addWarning(_), le.warn(_);
			}
		}
		if (s.length > 0) {
			const l = new ir(this._node);
			if ((l.process_data(e, t), this._node.childrenController.context == fe.SOP)) {
				const u = Object.keys(t);
				let h;
				for (let d of u) (i = t[d].flags) != null && i.display && (h = d);
				if (h) {
					const d = o.map((m) => m.name()),
						p = l.nodes();
					for (let m of p) d.push(m.name());
					if (!d.includes(h)) {
						const _ = `node '${`${this._node.path()}/${h}`}' with display flag has been optimized and does not exist in player mode`;
						console.error(_);
					}
				}
			}
		}
		const c = new Map();
		for (let l of o)
			if (t[l.name()]) {
				const h = this.dispatcher.dispatchNode(l);
				c.set(l.name(), h), h.process_data(e, t[l.name()]);
			} else
				le.warn(`possible import error for node ${l.name()}`),
					le.log('available names are', Object.keys(t).sort(), t);
		for (let l of o) {
			const u = c.get(l.name());
			u && u.process_inputs_data(e, t[l.name()]);
		}
	}
}
class ax {
	dispatchNode(e) {
		return e.polyNodeController ? this._dispatchPolyNode(e) : this.dispatchNonPolyNode(e);
	}
	_dispatchPolyNode(e) {
		const t = new kC(e, this);
		return new bG(e, this, t);
	}
	dispatchNonPolyNode(e) {
		const t = new kC(e, this);
		return new ox(e, this, t);
	}
	dispatchParam(e) {
		return e instanceof tl ? new vG(e) : e instanceof gm ? new CG(e) : e instanceof ns ? new yG(e) : new uo(e);
	}
}
const cx = class {
	constructor(n, e) {
		(this.node = n), (this._definition = e), (this._locked = !0);
	}
	static registerCreatePolyNodeFunctionForContext(n, e) {
		this._createPolyNodeFunctionByContext.set(n, e);
	}
	initializeNode() {
		this._initInputs(),
			this.node.lifecycle.onAfterCreated(() => {
				this.createChildNodesFromDefinition();
			});
	}
	locked() {
		return this._locked;
	}
	setLockedState(n) {
		n != this._locked && ((this._locked = n), this.node.emit(mn.POLY_NODE_LOCK_STATE_UPDATED));
	}
	_initInputs() {
		const n = this._definition.inputs;
		if (!n) return;
		const e = n.simple;
		e && this.node.io.inputs.setCount(e.min, e.max);
	}
	static setupParamsConfig(n, e) {
		if (e.params)
			for (const t of e.params) {
				const i = t.name,
					s = t.type,
					r = t.initValue,
					o = t.options;
				n[i] = new Kn(s, r, o);
			}
	}
	createChildNodesFromDefinition() {
		const n = this._definition.nodes;
		if (!n) return;
		const e = this.node.scene().loadingController.loaded();
		e && this.node.scene().loadingController.markAsLoading();
		const t = this.locked();
		this.setLockedState(!1);
		const i = new td({}),
			r = new ax().dispatchNonPolyNode(this.node),
			o = {type: this.node.type(), polyNode: {locked: !0}};
		r.create_nodes(i, n, o);
		const a = this._definition.ui;
		a && r.processNodesUiData(i, a),
			e && this.node.scene().loadingController.markAsLoaded(),
			this.setLockedState(t);
	}
	static inputsData(n) {
		if (n.io.inputs.hasNamedInputs()) {
			const e = n.io.inputs,
				t = [],
				i = e.namedInputConnectionPoints();
			return i && Jr(i, t), {typed: {types: t.map((s) => ({name: s.name(), type: s.type()}))}};
		} else
			return {
				simple: {
					min: n.io.inputs.minCount(),
					max: n.io.inputs.maxInputsCount(),
					names: n.displayedInputNames(),
				},
			};
	}
	static async polyNodeData(n, e) {
		const i = new mG().dispatchNode(n),
			s = await i.data({showPolyNodesData: !0}),
			r = i.uiData({showPolyNodesData: !0}),
			o = e || this.inputsData(n);
		return {
			metadata: {version: {polygonjs: '1'}, createdAt: 1},
			nodeContext: n.context(),
			inputs: o,
			params: n.params.non_spare
				.filter((c) => c.parentParam() == null)
				.map((c) => ({
					name: c.name(),
					type: c.type(),
					initValue: c.defaultValueSerialized(),
					rawInput: c.rawInputSerialized(),
					options: c.options.current(),
				})),
			nodes: s.nodes,
			ui: r.nodes,
		};
	}
	static _createNodeClass(n, e, t) {
		const i = this._createPolyNodeFunctionByContext.get(n);
		if (i) return i(e, t, cx);
	}
	static createNodeClassAndRegister(n) {
		const {node_context: e, node_type: t, data: i} = n,
			s = this._createNodeClass(e, t, i);
		if (s) {
			let r = this._definitionRegister.get(e);
			r || ((r = new Map()), this._definitionRegister.set(e, r)),
				r.set(t, i),
				le.registerNode(s, 'polyNodes', {polyNode: !0});
		} else console.warn('failed to create node from definition', e, t, i);
	}
	static definition(n, e) {
		var t;
		return (t = this._definitionRegister.get(n)) == null ? void 0 : t.get(e);
	}
	static register() {
		return this._definitionRegister;
	}
};
let Qh = cx;
Qh._createPolyNodeFunctionByContext = new Map();
Qh._definitionRegister = new Map();
class SG {
	constructor(e) {
		(this.actorsManager = e), (this._scene = e.scene);
	}
	runTriggerFromFunctionNode(e, t) {
		this._scene.threejsScene().traverse((i) => {
			const s = this.actorsManager.objectActorNodeIds(i);
			s && s.includes(e.graphNodeId()) && this.actorsManager.triggerEventNode(e, i, t);
		});
	}
}
class AG {
	constructor(e) {
		(this.actorsManager = e), (this._triggeredEvaluatorGeneratorsByMethodName = new Map()), (this._scene = e.scene);
	}
	addTriggeredEvaluators(e, t) {
		e.forEach((i) => {
			Ai(this._triggeredEvaluatorGeneratorsByMethodName, t, i);
		});
	}
	runTriggers() {
		this._triggeredEvaluatorGeneratorsByMethodName.forEach((e, t) => {
			e.forEach((i) => {
				i.traverseEvaluator((s) => {
					s[t] && s[t]();
				});
			});
		}),
			this._triggeredEvaluatorGeneratorsByMethodName.clear();
	}
}
var Be = ((n) => (
	(n.ANIMATION_MIXER = 'animationMixer'),
	(n.ANIMATION_MIXER_UPDATE = 'animationMixerUpdate'),
	(n.ATTRIBUTE = 'attribute'),
	(n.CODE = 'code'),
	(n.CURSOR = 'cursor'),
	(n.FOR_LOOP = 'forLoop'),
	(n.GEOLOCATION_CURRENT_POSITION = 'geolocationCurrentPosition'),
	(n.GET_INSTANCE_ATTRIBUTE = 'getInstanceAttribute'),
	(n.GET_INSTANCE_PROPERTY = 'getInstanceProperty'),
	(n.GET_OBJECT_ATTRIBUTE = 'getObjectAttribute'),
	(n.GET_OBJECT_PROPERTY = 'getObjectProperty'),
	(n.GET_OBJECT_USER_DATA = 'getObjectUserData'),
	(n.GET_NODE = 'getNode'),
	(n.GET_PARAM = 'getParam'),
	(n.GET_POINT_ATTRIBUTE = 'getPointAttribute'),
	(n.GET_POINT_PROPERTY = 'getPointProperty'),
	(n.GET_PRIMITIVE_ATTRIBUTE = 'getPrimitiveAttribute'),
	(n.GLOBALS = 'globals'),
	(n.GLOBALS_AMBIENT_LIGHT = 'globalsAmbientLight'),
	(n.GLOBALS_AREA_LIGHT = 'globalsAreaLight'),
	(n.GLOBALS_DIRECTIONAL_LIGHT = 'globalsDirectionalLight'),
	(n.GLOBALS_HEMISPHERE_LIGHT = 'globalsHemisphereLight'),
	(n.GLOBALS_POINT_LIGHT = 'globalsPointLight'),
	(n.GLOBALS_SPOT_LIGHT = 'globalsSpotLight'),
	(n.IMPORT_ATTRIBUTE = 'importAttribute'),
	(n.KEYFRAMES = 'keyframes'),
	(n.ON_CHILD_ATTRIBUTE_UPDATE = 'onChildAttributeUpdate'),
	(n.ON_KEY = 'onKey'),
	(n.ON_KEYDOWN = 'onKeydown'),
	(n.ON_KEYPRESS = 'onKeypress'),
	(n.ON_KEYUP = 'onKeyup'),
	(n.ON_MAPBOX_CAMERA_MOVE = 'onMapboxCameraMove'),
	(n.ON_MAPBOX_CAMERA_MOVE_START = 'onMapboxCameraMoveStart'),
	(n.ON_MAPBOX_CAMERA_MOVE_END = 'onMapboxCameraMoveEnd'),
	(n.ON_OBJECT_ATTRIBUTE_UPDATE = 'onObjectAttributeUpdate'),
	(n.ON_OBJECT_BEFORE_DELETE = 'onObjectBeforeDelete'),
	(n.ON_OBJECT_CLICK = 'onObjectClick'),
	(n.ON_OBJECT_CLICK_GPU = 'onObjectClickGPU'),
	(n.ON_OBJECT_CONTEXT_MENU = 'onObjectContextMenu'),
	(n.ON_OBJECT_CONTEXT_MENU_GPU = 'onObjectContextMenuGPU'),
	(n.ON_OBJECT_DOUBLE_CLICK = 'onObjectDoubleClick'),
	(n.ON_OBJECT_DISPATCH_EVENT = 'onObjectDispatchEvent'),
	(n.ON_OBJECT_HOVER = 'onObjectHover'),
	(n.ON_OBJECT_HOVER_GPU = 'onObjectHoverGPU'),
	(n.ON_OBJECT_LONG_PRESS = 'onObjectLongPress'),
	(n.ON_OBJECT_LONG_PRESS_GPU = 'onObjectLongPressGPU'),
	(n.ON_OBJECT_MOUSE_CLICK = 'onObjectMouseClick'),
	(n.ON_OBJECT_POINTERDOWN = 'onObjectPointerdown'),
	(n.ON_OBJECT_POINTERDOWN_GPU = 'onObjectPointerdownGPU'),
	(n.ON_OBJECT_POINTERUP = 'onObjectPointerup'),
	(n.ON_OBJECT_POINTERUP_GPU = 'onObjectPointerupGPU'),
	(n.ON_OBJECT_SWIPE = 'onObjectSwipe'),
	(n.ON_OBJECT_SWIPE_GPU = 'onObjectSwipeGPU'),
	(n.ON_OBJECT_SWIPEDOWN = 'onObjectSwipedown'),
	(n.ON_OBJECT_SWIPELEFT = 'onObjectSwipeleft'),
	(n.ON_OBJECT_SWIPERIGHT = 'onObjectSwiperight'),
	(n.ON_OBJECT_SWIPEUP = 'onObjectSwipeup'),
	(n.ON_POINTERDOWN = 'onPointerdown'),
	(n.ON_POINTERUP = 'onPointerup'),
	(n.ON_SCENE_PAUSE = 'onScenePause'),
	(n.ON_SCENE_PLAY = 'onScenePlay'),
	(n.ON_SCENE_RESET = 'onSceneReset'),
	(n.ON_SCROLL = 'onScroll'),
	(n.ON_MANUAL_TRIGGER = 'onManualTrigger'),
	(n.ON_TICK = 'onTick'),
	(n.ON_PERFORMANCE_CHANGE = 'onPerformanceChange'),
	(n.ON_VIDEO_EVENT = 'onVideoEvent'),
	(n.ON_VIEWER_CONTROLS_EVENT = 'onViewerControlsEvent'),
	(n.ON_WEBXR_CONTROLLER_EVENT = 'onWebXRControllerEvent'),
	(n.OUTPUT = 'output'),
	(n.OUTPUT_AMBIENT_LIGHT = 'outputAmbientLight'),
	(n.OUTPUT_AREA_LIGHT = 'outputAreaLight'),
	(n.OUTPUT_DIRECTIONAL_LIGHT = 'outputDirectionalLight'),
	(n.OUTPUT_HEMISPHERE_LIGHT = 'outputHemisphereLight'),
	(n.OUTPUT_POINT_LIGHT = 'outputPointLight'),
	(n.OUTPUT_SPOT_LIGHT = 'outputSpotLight'),
	(n.PARAM = 'param'),
	(n.RAY_FROM_CURSOR = 'rayFromCursor'),
	(n.RAY_FROM_CAMERA = 'rayFromCamera'),
	(n.SDF_2D_BOX = 'SDF2DBox'),
	(n.SDF_2D_CIRCLE = 'SDF2DCircle'),
	(n.SDF_2D_CROSS = 'SDF2DCross'),
	(n.SDF_2D_HEART = 'SDF2DHeart'),
	(n.SDF_2D_ROUNDED_X = 'SDF2DRoundedX'),
	(n.SDF_BOX = 'SDFBox'),
	(n.SDF_ELONGATE = 'SDFElongate'),
	(n.SDF_ONION = 'SDFOnion'),
	(n.SDF_PLANE = 'SDFPlane'),
	(n.SDF_REVOLUTION = 'SDFRevolution'),
	(n.SDF_SPHERE = 'SDFSphere'),
	(n.SDF_TORUS = 'SDFTorus'),
	(n.SDF_TRANSFORM = 'SDFTransform'),
	(n.SDF_TUBE = 'SDFTube'),
	(n.SET_INSTANCE_ATTRIBUTE = 'setInstanceAttribute'),
	(n.SET_INSTANCE_LOOK_AT = 'setInstanceLookAt'),
	(n.SET_INSTANCE_POSITION = 'setInstancePosition'),
	(n.SET_INSTANCE_QUATERNION = 'setInstanceQuaternion'),
	(n.SET_INSTANCE_SCALE = 'setInstanceScale'),
	(n.SET_OBJECT_ATTRIBUTE = 'setObjectAttribute'),
	(n.SET_OBJECT_LOOK_AT = 'setObjectLookAt'),
	(n.SET_OBJECT_POSITION = 'setObjectPosition'),
	(n.SET_OBJECT_QUATERNION = 'setObjectQuaternion'),
	(n.SET_OBJECT_ROTATION = 'setObjectRotation'),
	(n.SET_OBJECT_SCALE = 'setObjectScale'),
	(n.SET_PARAM = 'setParam'),
	(n.SET_PHYSICS_RBD_POSITION = 'setPhysicsRBDPosition'),
	(n.SET_PLAYER_INPUT = 'setPlayerInput'),
	(n.SET_POINT_ATTRIBUTE = 'setPointAttribute'),
	(n.SET_POINT_POSITION = 'setPointPosition'),
	(n.SET_SOFT_BODY_CONSTRAINT_POSITION = 'setSoftBodyConstraintPosition'),
	(n.SET_SOFT_BODY_POSITION = 'setSoftBodyPosition'),
	(n.SET_SOFT_BODY_VELOCITY = 'setSoftBodyVelocity'),
	(n.SET_WFC_SOFT_CONSTRAINT = 'setWFCSoftConstraint'),
	(n.WFC_BUILD = 'WFCBuild'),
	n
))(Be || {});
class xG {
	constructor(e) {
		(this.node = e),
			(this._watchStopHandles = []),
			(this.scene = e.scene()),
			(this.timeController = this.scene.timeController);
	}
	onDispose(e) {
		(this._onDisposeCallbacks = this._onDisposeCallbacks || []), this._onDisposeCallbacks.push(e);
	}
	dispose() {
		const e = () => {
			if (!this._watchStopHandles) return;
			let i;
			for (; (i = this._watchStopHandles.pop()); ) i();
		};
		(() => {
			if (!this._onDisposeCallbacks) return;
			let i;
			for (; (i = this._onDisposeCallbacks.pop()); ) i();
		})(),
			e();
	}
}
const lx = [
	Be.ON_KEY,
	Be.ON_KEYDOWN,
	Be.ON_KEYPRESS,
	Be.ON_KEYUP,
	Be.ON_MAPBOX_CAMERA_MOVE,
	Be.ON_MAPBOX_CAMERA_MOVE_START,
	Be.ON_MAPBOX_CAMERA_MOVE_END,
	Be.ON_OBJECT_ATTRIBUTE_UPDATE,
	Be.ON_OBJECT_DISPATCH_EVENT,
	Be.ON_PERFORMANCE_CHANGE,
	Be.ON_POINTERDOWN,
	'onPointermove',
	Be.ON_POINTERUP,
	Be.ON_SCENE_PAUSE,
	Be.ON_SCENE_PLAY,
	Be.ON_SCENE_RESET,
	Be.ON_TICK,
	Be.ON_VIDEO_EVENT,
	Be.ON_WEBXR_CONTROLLER_EVENT,
];
class MG extends xG {
	constructor(e, t) {
		super(e), (this.node = e), (this.object3D = t);
	}
}
class TG {
	constructor(e, t = 0, i = 0) {
		(this.node = e),
			(this._position = new re()),
			(this._width = 50),
			(this._color = new Ee(0.75, 0.75, 0.75)),
			(this._layoutVertical = !0),
			(this._json = {x: 0, y: 0}),
			(this._position.x = t),
			(this._position.y = i);
	}
	dispose() {
		this._comment = void 0;
	}
	setComment(e) {
		(this._comment = e), this.node.emit(mn.UI_DATA_COMMENT_UPDATED);
	}
	comment() {
		return this._comment;
	}
	setColor(e) {
		this._color = e;
	}
	color() {
		return this._color;
	}
	setLayoutHorizontal() {
		this._layoutVertical = !1;
	}
	isLayoutVertical() {
		return this._layoutVertical;
	}
	copy(e) {
		this._position.copy(e.position()), this._color.copy(e.color());
	}
	position() {
		return this._position;
	}
	setPosition(e, t = 0) {
		if (je(e)) {
			const i = e;
			this._position.set(i, t);
		} else this._position.copy(e);
		return this.node.emit(mn.UI_DATA_POSITION_UPDATED), this;
	}
	translate(e, t = !1) {
		return (
			this._position.add(e),
			t && ((this._position.x = Math.round(this._position.x)), (this._position.y = Math.round(this._position.y))),
			this.node.emit(mn.UI_DATA_POSITION_UPDATED),
			this
		);
	}
	toJSON() {
		return (
			(this._json.x = this._position.x),
			(this._json.y = this._position.y),
			(this._json.comment = this._comment),
			this._json
		);
	}
}
class vm {
	constructor(e) {
		(this.node = e), (this._state = !0), (this._hooks = null);
	}
	onUpdate(e) {
		(this._hooks = this._hooks || []), this._hooks.push(e);
	}
	_onUpdate() {}
	set(e) {
		if (this._state != e) {
			if (this.node.insideALockedParent()) {
				const t = this.node.lockedParent();
				console.warn(
					`node '${this.node.path()}' cannot have its flag changed, since it is inside '${
						t ? t.path() : ''
					}', which is locked`
				);
				return;
			}
			(this._state = e), this._onUpdate(), this.runHooks();
		}
	}
	active() {
		return this._state;
	}
	toggle() {
		this.set(!this._state);
	}
	runHooks() {
		if (this._hooks) for (const e of this._hooks) e();
	}
}
class RG extends vm {
	constructor() {
		super(...arguments), (this._state = !1);
	}
	_onUpdate() {
		this.node.emit(mn.FLAG_BYPASS_UPDATED), this.node.setDirty();
	}
}
class wG extends vm {
	_onUpdate() {
		this.node.emit(mn.FLAG_DISPLAY_UPDATED);
	}
}
class OG extends vm {
	constructor() {
		super(...arguments), (this._state = !1);
	}
	_onUpdate() {
		this.node.emit(mn.FLAG_OPTIMIZE_UPDATED);
	}
}
class Jh {
	constructor(e) {
		this.node = e;
	}
	hasDisplay() {
		return !1;
	}
	hasBypass() {
		return !1;
	}
	hasOptimize() {
		return !1;
	}
}
function ux(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.display = new wG(this.node));
		}
		hasDisplay() {
			return !0;
		}
	};
}
function hx(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.bypass = new RG(this.node));
		}
		hasBypass() {
			return !0;
		}
	};
}
function dx(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.optimize = new OG(this.node));
		}
		hasOptimize() {
			return !0;
		}
	};
}
class PG extends ux(Jh) {}
class NG extends dx(hx(Jh)) {}
class IG extends dx(hx(ux(Jh))) {}
class px {
	constructor(e) {
		this.node = e;
	}
}
class DG extends px {
	active() {
		return this.paramsTimeDependent() || this.inputsTimeDependent();
	}
	paramsTimeDependent() {
		const e = this.node.params.names;
		for (const t of e) {
			const i = this.node.params.get(t);
			if (i && i.states.timeDependent.active()) return !0;
		}
		return !1;
	}
	inputsTimeDependent() {
		const e = this.node.io.inputs.inputs();
		for (const t of e) if (t && t.states.timeDependent.active()) return !0;
		return !1;
	}
	forceTimeDependent() {
		const e = this.node.graphPredecessorIds(),
			t = this.node.scene().timeController.graphNode;
		(e == null || !e.includes(t.graphNodeId())) && this.node.addGraphInput(t, !1);
	}
	unforceTimeDependent() {
		const e = this.node.scene().timeController.graphNode;
		this.node.removeGraphInput(e);
	}
}
class LG extends px {
	set(e) {
		this._message != e &&
			(e
				? le.error(`[${this.node.path()}] error: '${e}' (from '${this._message}')`)
				: le.warn(`[${this.node.path()}] clear error`),
			(this._message = e),
			this.onUpdate());
	}
	message() {
		return this._message;
	}
	clear() {
		this.set(void 0);
	}
	active() {
		return this._message != null;
	}
	onUpdate() {
		this._message != null && this.node._setContainer(null), this.node.emit(mn.ERROR_UPDATED);
	}
}
class UG {
	constructor(e) {
		(this.node = e), (this.timeDependent = new DG(this.node)), (this.error = new LG(this.node));
	}
}
class FG {
	constructor(e) {
		(this.node = e), (this._parent = null);
	}
	parent() {
		return this._parent;
	}
	setParent(e) {
		e != this.node.parentController.parent() &&
			((this._parent = e), this._parent && this.node.nameController.requestNameToParent(this.node.name()));
	}
	firstAncestorWithContext(e) {
		return this._parent
			? this._parent.context() == e
				? this._parent
				: this._parent.parentController.firstAncestorWithContext(e)
			: null;
	}
	findParent(e) {
		return this._parent
			? e(this._parent) == !0
				? this._parent
				: this._parent.parentController.findParent(e)
			: null;
	}
	path(e) {
		const t = Ct.SEPARATOR;
		if (this._parent != null) {
			if (this._parent == e) return this.node.name();
			{
				const i = this._parent.path(e);
				return i === t ? i + this.node.name() : i + t + this.node.name();
			}
		} else return t;
	}
	onSetParent() {
		if (this._on_set_parent_hooks) for (const e of this._on_set_parent_hooks) e();
	}
	findNode(e) {
		if (e == null) return null;
		if (e == Ct.CURRENT || e == Ct.CURRENT_WITH_SLASH) return this.node;
		if (e == Ct.PARENT || e == Ct.PARENT_WITH_SLASH) return this.node.parent();
		const t = Ct.SEPARATOR;
		if (e === t) return this.node.scene().root();
		if (e[0] === t) return (e = e.substring(1, e.length)), this.node.scene().root().node(e);
		if (e.split) {
			const i = e.split(t);
			if (i.length === 1) {
				const s = i[0];
				return this.node.childrenController ? this.node.childrenController.childByName(s) : null;
			} else return Ct.findNode(this.node, e);
		} else return console.error('unexpected path given:', e), null;
	}
}
const ic = [],
	Or = [];
class BG {
	constructor(e) {
		(this._node = e), (this._nodeIds = []);
	}
	node() {
		return this._node;
	}
	nodeIds() {
		return this._nodeIds;
	}
	nodeFromIndex(e) {
		return this._node.scene().graph.nodesFromIds(this._nodeIds, ic), ic[e];
	}
	nodes(e) {
		return this._node.scene().graph.nodesFromIds(this._nodeIds, e), e;
	}
	contains(e) {
		return this._nodeIds.includes(e.graphNodeId());
	}
	equals(e) {
		return kd(e, (t) => t.graphNodeId(), Or), Or.sort(), HS(Or, this._nodeIds);
	}
	clear() {
		(this._nodeIds.length = 0), this._sendUpdateEvent();
	}
	set(e) {
		(this._nodeIds.length = 0), this.add(e);
	}
	add(e) {
		kd(e, (t) => t.graphNodeId(), Or), gD(this._nodeIds, Or, this._nodeIds), this._sendUpdateEvent();
	}
	remove(e) {
		kd(e, (t) => t.graphNodeId(), Or), zS(this._nodeIds, Or, this._nodeIds), this._sendUpdateEvent();
	}
	_checkValidity() {
		if ((this.nodes(ic), ic.length != this._nodeIds.length)) {
			console.error('selection invalid: at least one node is not part of the graph');
			return;
		}
		for (const e of ic)
			e.parent() != this._node && console.error('selection invalid: at least one node is not has another parent');
	}
	_sendUpdateEvent() {
		this._checkValidity(), this._node.emit(mn.SELECTION_UPDATED);
	}
	toJSON(e) {
		os(this._nodeIds, e);
	}
}
var Ft = ((n) => ((n.ALWAYS = 'always'), (n.NEVER = 'never'), (n.FROM_NODE = 'from_node'), n))(Ft || {});
let kG = class {
	constructor(e) {
		(this.inputs_controller = e), (this._clone_required_states = []), (this._overridden = !1);
	}
	initInputsClonedState(e) {
		ft(e) ? (this._cloned_states = e) : (this._cloned_state = e), this._update_clone_required_state();
	}
	override_cloned_state_allowed() {
		if (this._cloned_states) {
			for (let e of this._cloned_states) if (e == Ft.FROM_NODE) return !0;
		}
		return this._cloned_state ? this._cloned_state == Ft.FROM_NODE : !1;
	}
	clone_required_state(e) {
		return this._clone_required_states[e];
	}
	clone_required_states() {
		return this._clone_required_states;
	}
	_get_clone_required_state(e) {
		const t = this._cloned_states;
		if (t) {
			const i = t[e];
			if (i != null) return this.clone_required_from_state(i);
		}
		return this._cloned_state ? this.clone_required_from_state(this._cloned_state) : !0;
	}
	clone_required_from_state(e) {
		switch (e) {
			case Ft.ALWAYS:
				return !0;
			case Ft.NEVER:
				return !1;
			case Ft.FROM_NODE:
				return !this._overridden;
		}
		return zt.unreachable(e);
	}
	override_cloned_state(e) {
		(this._overridden = e), this._update_clone_required_state();
	}
	overriden() {
		return this._overridden;
	}
	_update_clone_required_state() {
		if (this._cloned_states) {
			const e = [];
			for (let t = 0; t < this._cloned_states.length; t++) e[t] = this._get_clone_required_state(t);
			this._clone_required_states = e;
			return;
		}
		if (this._cloned_state) {
			const e = this.inputs_controller.inputsCount(),
				t = [];
			for (let i = 0; i < e; i++) t[i] = this._get_clone_required_state(i);
			this._clone_required_states = t;
			return;
		}
	}
};
class VG {
	constructor(e) {
		this.operationContainer = e;
	}
	inputsCount() {
		return this.operationContainer.inputsCount();
	}
	initInputsClonedState(e) {
		this._clonedStatesController ||
			((this._clonedStatesController = new kG(this)), this._clonedStatesController.initInputsClonedState(e));
	}
	cloneRequired(e) {
		var t;
		const i = (t = this._clonedStatesController) == null ? void 0 : t.clone_required_state(e);
		return i ?? !0;
	}
	override_cloned_state(e) {
		var t;
		(t = this._clonedStatesController) == null || t.override_cloned_state(e);
	}
}
class GG {
	constructor(e, t, i) {
		(this.operation = e),
			(this.name = t),
			(this.params = {}),
			this._applyDefaultParams(),
			this._applyInitParams(i),
			this._initClonedStates();
	}
	pathParamResolveRequired() {
		return this._path_params != null;
	}
	resolvePathParams(e) {
		if (this._path_params) for (let t of this._path_params) t.resolve(e);
	}
	_applyDefaultParams() {
		const e = this.operation.constructor.DEFAULT_PARAMS,
			t = Object.keys(e);
		for (let i of t) {
			const s = e[i],
				r = this._convertParamData(i, s);
			r != null && (this.params[i] = r);
		}
	}
	_applyInitParams(e) {
		const t = Object.keys(e);
		for (let i of t) {
			const s = e[i];
			if (s.simple_data != null) {
				const r = s.simple_data,
					o = this.operation.convertExportParamData({paramName: i, paramData: r, params: this.params});
				o != null && (this.params[i] = o);
			}
		}
	}
	_convertParamData(e, t) {
		if (je(t) || xi(t) || qe(t)) return t;
		if (t instanceof zi) {
			const i = t.clone();
			return this._path_params || (this._path_params = []), this._path_params.push(i), i;
		}
		if (t instanceof Ee || t instanceof re || t instanceof w || t instanceof Ke) return t.clone();
	}
	setInput(e, t) {
		(this._inputs = this._inputs || []), (this._inputs[e] = t);
	}
	inputsCount() {
		return this._inputs ? this._inputs.length : 0;
	}
	inputsController() {
		return (this._inputsController = this._inputsController || new VG(this));
	}
	_initClonedStates() {
		const e = this.operation.constructor.INPUT_CLONED_STATE;
		this.inputsController().initInputsClonedState(e);
	}
	inputCloneRequired(e) {
		return this._inputsController ? this._inputsController.cloneRequired(e) : !0;
	}
	overrideInputCloneState(e) {
		this.inputsController().override_cloned_state(e);
	}
	cook(e) {
		return this.operation.cook(e, this.params);
	}
}
class zG extends GG {
	constructor(e, t, i) {
		super(e, t, i),
			(this.operation = e),
			(this.name = t),
			(this.init_params = i),
			(this._inputs = []),
			(this._currentInputIndex = 0),
			(this._dirty = !0);
	}
	operationType() {
		return this.operation.type();
	}
	addInput(e) {
		super.setInput(this._currentInputIndex, e), this.incrementInputIndex();
	}
	incrementInputIndex() {
		this._currentInputIndex++;
	}
	currentInputIndex() {
		return this._currentInputIndex;
	}
	setDirty() {
		if (!this._dirty) {
			this._computeResult = void 0;
			for (let e = 0; e < this._inputs.length; e++) this._inputs[e].setDirty();
		}
	}
	async compute(e, t) {
		if (this._computeResult) return this._computeResult;
		const i = [],
			s = t.get(this);
		s &&
			s.forEach((o, a) => {
				i[a] = e[o];
			});
		for (let o = 0; o < this._inputs.length; o++) {
			let c = await this._inputs[o].compute(e, t);
			c && (this.inputCloneRequired(o) && (c = c.clone()), (i[o] = c));
		}
		const r = this.operation.cook(i, this.params);
		return (
			r
				? r instanceof Promise
					? (this._computeResult = await r)
					: (this._computeResult = r)
				: (this._computeResult = void 0),
			(this._dirty = !1),
			this._computeResult
		);
	}
}
class fx {
	constructor(e) {
		(this.node = e), (this._graphNode = new ai(e.scene(), 'nodeNameController'));
	}
	dispose() {
		this._graphNode.dispose(), (this._onSetNameHooks = void 0), (this._onSetFullPathHooks = void 0);
	}
	graphNode() {
		return this._graphNode;
	}
	static baseName(e) {
		let t = e.type();
		const i = t[t.length - 1];
		return F_(parseInt(i)) || (t += '_'), `${t}1`;
	}
	requestNameToParent(e) {
		const t = this.node.parent();
		t && t.childrenAllowed() && t.childrenController
			? t.childrenController.setChildName(this.node, e)
			: console.warn('requestNameToParent failed, no parent found');
	}
	setName(e) {
		if (e != this.node.name()) {
			if (this.node.insideALockedParent()) {
				const t = this.node.lockedParent();
				console.warn(
					`node '${this.node.path()}' cannot have its name changed, since it is inside '${
						t ? t.path() : ''
					}', which is locked`
				);
				return;
			}
			this.requestNameToParent(e);
		}
	}
	updateNameFromParent(e) {
		var t;
		if (
			(this.node._setCoreName(e),
			this._postSetName(),
			this.runPostSetFullPathHooks(),
			this.node.childrenAllowed())
		) {
			const i = (t = this.node.childrenController) == null ? void 0 : t.children();
			if (i) for (const s of i) s.nameController.runPostSetFullPathHooks();
		}
		this.node.lifecycle.creationCompleted() &&
			this.node.scene().loadingController.loaded() &&
			(this.node.scene().missingExpressionReferencesController.checkForMissingNodeReferences(this.node),
			this.node.scene().expressionsController.regenerateReferringExpressions(this.node)),
			this.node.scene().referencesController.notifyNameUpdated(this.node),
			this.node.emit(mn.NAME_UPDATED);
	}
	add_post_set_name_hook(e) {
		(this._onSetNameHooks = this._onSetNameHooks || []), this._onSetNameHooks.push(e);
	}
	add_post_set_fullPath_hook(e) {
		(this._onSetFullPathHooks = this._onSetFullPathHooks || []), this._onSetFullPathHooks.push(e);
	}
	_postSetName() {
		if (this._onSetNameHooks) for (const e of this._onSetNameHooks) e();
	}
	runPostSetFullPathHooks() {
		if (this._onSetFullPathHooks) for (const e of this._onSetFullPathHooks) e();
	}
}
class HG {
	constructor(e, t) {
		(this.node = e),
			(this._context = t),
			(this._childrenByName = new Map()),
			(this._childrenIdByType = new Map()),
			(this._childrenByType = new Map()),
			(this._childrenAndGrandchildrenByContext = new Map()),
			(this._children = []),
			(this._childrenNames = []);
	}
	get selection() {
		return (this._selection = this._selection || new BG(this.node));
	}
	dispose() {
		const e = [];
		os(this.children(), e);
		for (const t of e) this.node.removeNode(t);
		(e.length = 0), (this._selection = void 0);
	}
	get context() {
		return this._context;
	}
	setOutputNodeFindMethod(e) {
		this._outputNodeFindMethod = e;
	}
	outputNode() {
		if (this._outputNodeFindMethod) return this._outputNodeFindMethod();
	}
	setChildName(e, t) {
		let i;
		if (((t = _t.sanitizeName(t)), (i = this._childrenByName.get(t)) != null))
			return e.name() === t && i.graphNodeId() === e.graphNodeId()
				? void 0
				: ((t = _t.increment(t)), this.setChildName(e, t));
		{
			const s = e.name();
			this._childrenByName.get(s) && this._childrenByName.delete(s),
				this._childrenByName.set(t, e),
				this._updateCache(),
				e.nameController.updateNameFromParent(t),
				this.node.scene().nodesController.addToInstanciatedNode(e),
				this.node.scene().graphNodesController.notifyNodePathChanged(e);
		}
	}
	_nextAvailableChildName(e) {
		return (
			(e = _t.sanitizeName(e)), this._childrenByName.get(e) ? this._nextAvailableChildName(_t.increment(e)) : e
		);
	}
	nodeContextSignature() {
		return `${this.node.context()}/${this.node.type()}`;
	}
	availableChildrenClasses() {
		return le.registeredNodes(this.node);
	}
	isValidChildType(e) {
		return this.availableChildrenClasses()[e] != null;
	}
	createNode(e, t) {
		if (typeof e == 'string') {
			const i = this._findNodeClass(e);
			return this._createAndInitNode(i, t);
		} else return this._createAndInitNode(e, t);
	}
	_createAndInitNode(e, t) {
		var i;
		const s = (t == null ? void 0 : t.nodeName) || fx.baseName(e),
			r = this._nextAvailableChildName(s),
			o = new e(this.node.scene(), r, {
				...t,
				serializerClass: (i = this.node.serializer) == null ? void 0 : i.constructor,
			});
		return o.initializeBaseAndNode(), this._addNode(o), o.lifecycle.setCreationCompleted(), o;
	}
	_findNodeClass(e) {
		const t = this.availableChildrenClasses()[e.toLowerCase()];
		if (t == null) {
			const i = `child node type '${e}' not found for node '${this.node.path()}'. Available types are: ${Object.keys(
				this.availableChildrenClasses()
			).join(', ')}, ${this._context}, ${this.node.type()}`;
			throw (console.error(i), i);
		}
		return t;
	}
	createOperationContainer(e, t, i) {
		const s = le.registeredOperation(this._context, e);
		if (s == null) {
			const r = `no operation found with context ${this._context}/${e}`;
			throw (console.error(r), r);
		} else {
			const r = new s(this.node.scene());
			return new zG(r, t, (i == null ? void 0 : i.paramsInitValueOverrides) || {});
		}
	}
	_addNode(e) {
		if (
			(e.setParent(this.node),
			this._addToNodesByType(e),
			e.params.init(),
			e.parentController.onSetParent(),
			e.nameController.runPostSetFullPathHooks(),
			e.childrenAllowed() && e.childrenController)
		)
			for (const t of e.childrenController.children()) t.nameController.runPostSetFullPathHooks();
		if (this.node.serializer) {
			const t = e.toJSON();
			t && this.node.emit(mn.CREATED, {child_node_json: t});
		}
		return (
			this.node.scene().lifecycleController.onAfterCreatedCallbackAllowed() &&
				e.lifecycle.runOnAfterCreatedCallbacks(),
			e.lifecycle.runOnAfterAddedCallbacks(),
			this.node.lifecycle.runOnChildAddCallbacks(e),
			e.requireWebGL2() && this.node.scene().webglController.setRequireWebGL2(),
			this.node.scene().missingExpressionReferencesController.checkForMissingNodeReferences(e),
			e
		);
	}
	removeNode(e) {
		var t;
		if (this.node.lockedOrInsideALockedParent()) {
			const i = this.node.selfOrLockedParent(),
				s = i == this.node ? 'it is locked' : `it is inside '${i ? i.path() : ''}', which is locked`;
			console.warn(`node '${this.node.path()}' cannot remove nodes, since ${s}`),
				console.log(this.node.graphNodeId(), this.node.name());
			return;
		}
		if (e.parent() != this.node) return console.warn(`node ${e.name()} not under parent ${this.node.path()}`);
		{
			(t = e.polyNodeController) == null || t.setLockedState(!1),
				e.lifecycle.runOnBeforeDeleteCallbacks(),
				this.selection.contains(e) && this.selection.remove([e]);
			const i = e.io.connections.firstInputConnection(),
				s = e.io.connections.inputConnections(),
				r = [];
			if ((e.io.connections.outputConnections(r), s)) for (const o of s) o && o.disconnect({setInput: !0});
			if (r) {
				for (const o of r)
					if (o && (o.disconnect({setInput: !0}), i)) {
						const a = i.nodeSrc(),
							c = i.outputIndex(),
							l = o.nodeDest(),
							u = o.inputIndex();
						l.io.inputs.setInput(u, a, c);
					}
			}
			e.setParent(null),
				this._childrenByName.delete(e.name()),
				this._updateCache(),
				this._removeFromNodesByType(e),
				this.node.scene().nodesController.removeFromInstanciatedNode(e),
				e.setSuccessorsDirty(this.node),
				e.graphDisconnectSuccessors(),
				this.node.lifecycle.runOnChildRemoveCallbacks(e),
				e.lifecycle.runOnDeleteCallbacks(),
				e.dispose(),
				e.emit(mn.DELETED, {parent_id: this.node.graphNodeId()}),
				this.node.scene().graphNodesController.notifyNodePathChanged(e);
		}
	}
	_addToNodesByType(e) {
		const t = e.graphNodeId(),
			i = e.type();
		Ai(this._childrenIdByType, i, t),
			yi(this._childrenByType, i, e),
			this._addToChildrenAndGrandchildrenByContext(e);
	}
	_removeFromNodesByType(e) {
		const t = e.graphNodeId(),
			i = e.type();
		Qv(this._childrenIdByType, i, t),
			df(this._childrenByType, i, e),
			this._removeFromChildrenAndGrandchildrenByContext(e);
	}
	_addToChildrenAndGrandchildrenByContext(e) {
		var t;
		const i = e.graphNodeId(),
			s = e.context();
		Ai(this._childrenAndGrandchildrenByContext, s, i);
		const r = this.node.parent();
		r &&
			r.childrenAllowed() &&
			((t = r.childrenController) == null || t._addToChildrenAndGrandchildrenByContext(e));
	}
	_removeFromChildrenAndGrandchildrenByContext(e) {
		var t;
		const i = e.graphNodeId(),
			s = e.context();
		Qv(this._childrenAndGrandchildrenByContext, s, i);
		const r = this.node.parent();
		r &&
			r.childrenAllowed() &&
			((t = r.childrenController) == null || t._removeFromChildrenAndGrandchildrenByContext(e));
	}
	nodesByType(e, t = []) {
		const i = this._childrenByType.get(e);
		if (((t.length = i ? i.length : 0), i)) for (let s = 0; s < i.length; s++) t[s] = i[s];
		return t;
	}
	childByName(e) {
		return this._childrenByName.get(e) || null;
	}
	hasChildrenAndGrandchildrenWithContext(e) {
		return this._childrenAndGrandchildrenByContext.get(e) != null;
	}
	_updateCache() {
		(this._children.length = 0),
			(this._childrenNames.length = 0),
			this._childrenByName.forEach((e) => {
				this._children.push(e), this._childrenNames.push(e.name());
			});
	}
	children() {
		return this._children;
	}
	childrenNames() {
		return this._childrenNames;
	}
	traverseChildren(e, t) {
		this._childrenByName.forEach((i) => {
			var s;
			e(i), (t == null || t(i) == !0) && ((s = i.childrenController) == null || s.traverseChildren(e));
		});
	}
}
class WG {
	constructor(e) {
		(this.node = e), (this._creationCompleted = !1);
	}
	dispose() {
		(this._onChildAddCallbacks = void 0),
			(this._onChildRemoveCallbacks = void 0),
			(this._onAfterCreatedCallbacks = void 0),
			(this._onAfterAddedCallbacks = void 0),
			(this._onBeforeDeletedCallbacks = void 0),
			(this._onAfterDeletedCallbacks = void 0);
	}
	setCreationCompleted() {
		this._creationCompleted || (this._creationCompleted = !0);
	}
	creationCompleted() {
		return this.node.scene().loadingController.loaded() && this._creationCompleted;
	}
	onChildAdd(e) {
		(this._onChildAddCallbacks = this._onChildAddCallbacks || []), this._onChildAddCallbacks.push(e);
	}
	runOnChildAddCallbacks(e) {
		this._runCallbacksWithChildNode(this._onChildAddCallbacks, e);
	}
	onChildRemove(e) {
		(this._onChildRemoveCallbacks = this._onChildRemoveCallbacks || []), this._onChildRemoveCallbacks.push(e);
	}
	runOnChildRemoveCallbacks(e) {
		this._runCallbacksWithChildNode(this._onChildRemoveCallbacks, e);
	}
	onAfterCreated(e) {
		(this._onAfterCreatedCallbacks = this._onAfterCreatedCallbacks || []), this._onAfterCreatedCallbacks.push(e);
	}
	runOnAfterCreatedCallbacks() {
		this._runCallbacks(this._onAfterCreatedCallbacks);
	}
	onAfterAdded(e) {
		(this._onAfterAddedCallbacks = this._onAfterAddedCallbacks || []), this._onAfterAddedCallbacks.push(e);
	}
	runOnAfterAddedCallbacks() {
		this._runCallbacks(this._onAfterAddedCallbacks);
	}
	onBeforeDeleted(e) {
		(this._onBeforeDeletedCallbacks = this._onBeforeDeletedCallbacks || []), this._onBeforeDeletedCallbacks.push(e);
	}
	runOnBeforeDeleteCallbacks() {
		this._runCallbacks(this._onBeforeDeletedCallbacks);
	}
	onAfterDeleted(e) {
		(this._onAfterDeletedCallbacks = this._onAfterDeletedCallbacks || []), this._onAfterDeletedCallbacks.push(e);
	}
	runOnDeleteCallbacks() {
		this._runCallbacks(this._onAfterDeletedCallbacks);
	}
	_runCallbacks(e) {
		if (!e) return;
		let t;
		for (t of e) t();
	}
	_runCallbacksWithChildNode(e, t) {
		if (!e) return;
		let i;
		for (i of e) i(t);
	}
}
var _x = ((n) => (
	(n.NONE = 'none'),
	(n.POWER1 = 'power1'),
	(n.POWER2 = 'power2'),
	(n.POWER3 = 'power3'),
	(n.POWER4 = 'power4'),
	(n.BACK = 'back'),
	(n.ELASTIC = 'elastic'),
	(n.BOUNCE = 'bounce'),
	(n.SLOW = 'slow'),
	(n.STEPS = 'steps'),
	(n.CIRC = 'circ'),
	(n.EXPO = 'expo'),
	(n.SINE = 'sine'),
	n
))(_x || {});
function Ua(n) {
	const t = {duration: n.duration()},
		i = n.easing() || _x.NONE;
	i && (t.ease = i);
	const s = n.delay();
	s != null && (t.delay = s);
	const r = n.repeatParams();
	return r && ((t.repeat = r.count), (t.repeatDelay = r.delay), (t.yoyo = r.yoyo)), t;
}
class Em {
	constructor() {
		this._propertiesMap = new Map();
	}
	static instance() {
		return (this._instance = this._instance || new Em());
	}
	registerProp(e, t) {
		this._propertiesMap.set(this._convert(e), t);
	}
	deRegisterProp(e) {
		this._propertiesMap.delete(this._convert(e));
	}
	registeredTimelineForProperty(e) {
		return this._propertiesMap.get(this._convert(e));
	}
	registeredPropertiesCount() {
		let e = 0;
		return (
			this._propertiesMap.forEach(() => {
				e++;
			}),
			e
		);
	}
	_convert(e) {
		if (e.object) {
			const t = e;
			return `${t.object.uuid}:${t.propertyName}`;
		} else return e;
	}
}
const ou = Em.instance();
function Fa(n) {
	const {timelineBuilder: e, timeline: t, vars: i, target: s, registerableProp: r, registerproperties: o} = n,
		a = e.position(),
		c = a ? a.toParameter() : void 0,
		l = ou.registeredTimelineForProperty(r),
		u = t.to(s, i, c),
		h = () => {
			if (l)
				if (l.stoppable) l.timeline.kill(), ou.deRegisterProp(r);
				else {
					u.kill();
					return;
				}
			o && ou.registerProp(r, {timeline: u, stoppable: e.stoppable()});
		},
		d = () => {
			ou.deRegisterProp(r);
		};
	if (i.onStart) {
		const p = i.onStart;
		i.onStart = () => {
			h(), p();
		};
	} else i.onStart = h;
	if (i.onComplete) {
		const p = i.onComplete;
		i.onComplete = () => {
			d(), p();
		};
	} else i.onComplete = d;
}
class jG {
	constructor(e) {
		(this.param = e), (this.proxyValue = e.value);
	}
	update(e) {
		if (e) {
			const t = e.evaluate(this.proxyValue)[0];
			this.param.set(t);
		} else this.param.set(this.proxyValue);
	}
}
class XG {
	constructor(e) {
		(this.param = e), (this.proxyValue = e.value);
	}
	update() {
		this.param.set(this.proxyValue);
	}
}
class $G {
	constructor(e) {
		(this.param = e), (this.proxyValue = new re()), (this._array = [0, 0]), this.proxyValue.copy(e.value);
	}
	update() {
		this.proxyValue.toArray(this._array), this.param.set(this._array);
	}
}
class qG {
	constructor(e) {
		(this.param = e), (this.proxyValue = new w()), (this._array = [0, 0, 0]), this.proxyValue.copy(e.value);
	}
	update() {
		this.proxyValue.toArray(this._array), this.param.set(this._array);
	}
}
class YG {
	constructor(e) {
		(this.param = e), (this.proxyValue = new Ke()), (this._array = [0, 0, 0, 0]), this.proxyValue.copy(e.value);
	}
	update() {
		this.proxyValue.toArray(this._array), this.param.set(this._array);
	}
}
class KG {
	constructor(e) {
		(this.param = e),
			(this.proxyValue = new Ee()),
			(this._array = [0, 0, 0]),
			this.proxyValue.copy(e.valuePreConversion());
	}
	update() {
		this.proxyValue.toArray(this._array), this.param.set(this._array);
	}
}
class ZG {
	constructor(e) {
		this._map = new Map();
		const t = e.params.all;
		for (const i of t) {
			const s = this._createParamProxy(i);
			s && this._map.set(i, s);
		}
	}
	_createParamProxy(e) {
		switch (e.type()) {
			case j.INTEGER:
				return new XG(e);
			case j.FLOAT:
				return new jG(e);
			case j.VECTOR2:
				return new $G(e);
			case j.VECTOR3:
				return new qG(e);
			case j.COLOR:
				return new KG(e);
			case j.VECTOR4:
				return new YG(e);
		}
	}
	getParamProxy(e) {
		return this._map.get(e);
	}
}
class Cm {
	constructor() {
		this._map = new Map();
	}
	static instance() {
		return (this._instance = this._instance || new Cm());
	}
	nodeProxy(e) {
		const t = this._map.get(e);
		if (t) return t;
		const i = new ZG(e);
		return this._map.set(e, i), i;
	}
	paramProxy(e) {
		return this.nodeProxy(e.node).getParamProxy(e);
	}
}
const nl = Cm.instance();
var Ac = ((n) => ((n.SET = 'set'), (n.ADD = 'add'), (n.SUBTRACT = 'subtract'), n))(Ac || {});
function Nn(n, e, t) {
	switch (t) {
		case Ac.SET:
			return e;
		case Ac.ADD:
			return n + e;
		case Ac.SUBTRACT:
			return n - e;
	}
	zt.unreachable(t);
}
function QG(n, e, t) {
	if (!(e instanceof Ke)) {
		le.warn(`TimelineBuilderProperty error: cannot animate vector4 param '${n.path()}' with targetValue`, e);
		return;
	}
	const i = nl.paramProxy(n);
	if (!i) return;
	const s = Ua(t.timelineBuilder);
	s.onUpdate = () => {
		i.update();
	};
	const r = t.timelineBuilder.operation();
	(s.x = Nn(n.value.x, e.x, r)),
		(s.y = Nn(n.value.y, e.y, r)),
		(s.z = Nn(n.value.z, e.z, r)),
		(s.w = Nn(n.value.w, e.w, r)),
		Fa({...t, vars: s, target: i.proxyValue, registerableProp: n});
}
function JG(n, e, t) {
	if (!(e instanceof Ee || e instanceof w)) {
		le.warn(`TimelineBuilderProperty error: cannot animate color param '${n.path()}' with targetValue`, e);
		return;
	}
	const i = nl.paramProxy(n);
	if (!i) return;
	const s = Ua(t.timelineBuilder);
	s.onUpdate = () => {
		i.update();
	};
	const r = t.timelineBuilder.operation(),
		o = e instanceof Ee ? e.r : e.x,
		a = e instanceof Ee ? e.g : e.y,
		c = e instanceof Ee ? e.b : e.z;
	(s.r = Nn(n.value.r, o, r)),
		(s.g = Nn(n.value.g, a, r)),
		(s.b = Nn(n.value.b, c, r)),
		Fa({...t, vars: s, target: i.proxyValue, registerableProp: n});
}
function ez(n) {
	const {vars: e, targetValue: t, targetProperty: i, propertyNames: s, operation: r} = n;
	for (const o of s) e[o] = Nn(i[o], t[o], r);
}
function tz(n, e, t) {
	if (!(e instanceof w)) {
		le.warn(`TimelineBuilderProperty error: cannot animate vector3 param '${n.path()}' with targetValue`, e);
		return;
	}
	const i = nl.paramProxy(n);
	if (!i) return;
	const s = Ua(t.timelineBuilder);
	s.onUpdate = () => {
		i.update();
	};
	const r = t.timelineBuilder.operation();
	(s.x = Nn(n.value.x, e.x, r)),
		(s.y = Nn(n.value.y, e.y, r)),
		(s.z = Nn(n.value.z, e.z, r)),
		Fa({...t, vars: s, target: i.proxyValue, registerableProp: n});
}
function nz(n, e, t) {
	if (!(e instanceof re)) {
		le.warn(`TimelineBuilderProperty error: cannot animate vector2 param '${n.path()}' with targetValue`, e);
		return;
	}
	const i = nl.paramProxy(n);
	if (!i) return;
	const s = Ua(t.timelineBuilder);
	s.onUpdate = () => {
		i.update();
	};
	const r = t.timelineBuilder.operation();
	(s.x = Nn(n.value.x, e.x, r)),
		(s.y = Nn(n.value.y, e.y, r)),
		Fa({...t, vars: s, target: i.proxyValue, registerableProp: n});
}
function iz(n, e, t) {
	if (!je(e)) {
		le.warn(`TimelineBuilderProperty error: cannot animate float/integer param '${n.path()}' with targetValue`, e);
		return;
	}
	const i = nl.paramProxy(n);
	if (!i) return;
	const s = t.timelineBuilder.keyframes(),
		r = s ? s.createInterpolant() : void 0,
		o = Ua(t.timelineBuilder);
	(o.onUpdate = () => {
		i.update(r);
	}),
		s && (e = 1);
	const a = t.timelineBuilder.operation();
	(o.proxyValue = Nn(n.value, e, a)), Fa({...t, vars: o, target: i, registerableProp: n});
}
function sz(n) {
	const {vars: e, targetValue: t, targetProperty: i, propertyNames: s, operation: r} = n;
	for (const o of s) e[o] = Nn(i, t, r);
}
function rz(n) {
	const {vars: e, targetValue: t, targetProperty: i, propertyNames: s, operation: r} = n;
	for (const o of s) e[o] = Nn(i[o], t[o], r);
}
function oz(n) {
	const {vars: e, targetValue: t, targetProperty: i} = n,
		s = {value: 0},
		r = i,
		o = new Sn().copy(i),
		a = t;
	return (
		(e.onUpdate = () => {
			r.slerpQuaternions(o, a, s.value);
		}),
		(e.value = 1),
		s
	);
}
function az(n) {
	const {vars: e, targetValue: t, targetProperty: i, propertyNames: s, operation: r} = n;
	for (const o of s) e[o] = Nn(i[o], t[o], r);
}
const VC = '.';
class ym {
	constructor() {
		this._debug = !1;
	}
	setName(e) {
		this._propertyName = e;
	}
	setTargetValue(e) {
		this._targetValue = e;
	}
	name() {
		return this._propertyName;
	}
	targetValue() {
		return this._targetValue;
	}
	setDebug(e) {
		this._debug = e;
	}
	_printDebug(e) {
		this._debug && console.log(e);
	}
	clone() {
		const e = new ym();
		if ((this._propertyName && e.setName(this._propertyName), this._targetValue != null)) {
			const t = je(this._targetValue) ? this._targetValue : this._targetValue.clone();
			e.setTargetValue(t);
		}
		return e;
	}
	addToTimeline(e) {
		const t = e.propertyTarget || e.target,
			i = t.objects(),
			s = t.node();
		this._printDebug(['addToTimeline', t, i, s]),
			i && this._populateWithObjects(i, e),
			s && this._populateWithNode(s, e);
	}
	_populateWithObjects(e, t) {
		const {timelineBuilder: i} = t;
		if ((this._printDebug(['_populateWithObjects', e]), !this._propertyName)) {
			le.warn('no property name given');
			return;
		}
		if (this._targetValue == null) {
			le.warn('no target value given');
			return;
		}
		const s = i.operation(),
			r = i.updateCallback();
		for (const o of e) {
			const a = this._sceneGraphProps(o, this._propertyName);
			if (a) {
				const c = {object: o, propertyName: this._propertyName};
				let {targetProperty: l, toTarget: u, propertyNames: h} = a;
				const d = Ua(i);
				if (r && r.updateMatrix()) {
					const p = o.matrixAutoUpdate;
					(d.onUpdate = () => {
						o.matrixAutoUpdate = !0;
					}),
						(d.onComplete = () => {
							(o.matrixAutoUpdate = p), o.matrixAutoUpdate || o.updateMatrix();
						});
				}
				l instanceof Sn &&
					this._targetValue instanceof Sn &&
					(u = oz({targetValue: this._targetValue, vars: d, targetProperty: l})),
					this._populateVarsForObjectProperty({
						targetValue: this._targetValue,
						vars: d,
						targetProperty: l,
						propertyNames: h,
						operation: s,
					}),
					u && Fa({...t, vars: d, target: u, registerableProp: c});
			}
		}
	}
	_populateVarsForObjectProperty(e) {
		const {vars: t, targetValue: i, targetProperty: s, propertyNames: r, operation: o} = e;
		function a(c) {
			le.warn(`mismatch between targetValue and targetProperty (expected ${c})`, i, s);
		}
		if (je(s))
			return je(i)
				? sz({targetValue: i, vars: t, targetProperty: s, propertyNames: r, operation: o})
				: a('number');
		if (NS(s))
			return i instanceof w
				? az({targetValue: i, vars: t, targetProperty: s, propertyNames: r, operation: o})
				: a('euler');
		if (Uc(s))
			return Uc(i)
				? rz({targetValue: i, vars: t, targetProperty: s, propertyNames: r, operation: o})
				: a('vector');
		if (Fc(s))
			return Fc(i)
				? ez({targetValue: i, vars: t, targetProperty: s, propertyNames: r, operation: o})
				: a('color');
		le.warn('targetValue and targetProp are not recognized types', i, s);
	}
	_sceneGraphProps(e, t) {
		const i = t.split(VC);
		if (i.length > 1) {
			const s = i.shift(),
				r = e[s];
			if (r) {
				const o = i.join(VC);
				return this._sceneGraphProps(r, o);
			} else le.warn(`property ${s} not found on object`, e);
		} else {
			const s = e[t];
			let r = null;
			const o = [];
			return (
				je(s)
					? ((r = e), o.push(t))
					: ((r = s),
					  this._targetValue instanceof re && o.push('x', 'y'),
					  this._targetValue instanceof w && o.push('x', 'y', 'z'),
					  this._targetValue instanceof Ke && o.push('x', 'y', 'z', 'w'),
					  this._targetValue instanceof Ee && o.push('r', 'g', 'b'),
					  this._targetValue instanceof Sn),
				{targetProperty: s, toTarget: r, propertyNames: o}
			);
		}
	}
	_populateWithNode(e, t) {
		this._printDebug(['_populateWithNode', e]);
		const i = e.p[this._propertyName];
		if ((this._printDebug(['targetParam', i]), !i)) {
			le.warn(`${this._propertyName} not found on node ${e.path()}`);
			return;
		}
		i && this._populateVarsForParam(i, t);
	}
	_populateVarsForParam(e, t) {
		if ((this._printDebug(['_populateVarsForParam', e]), this._targetValue != null)) {
			switch (e.type()) {
				case j.INTEGER:
				case j.FLOAT:
					return iz(e, this._targetValue, t);
				case j.VECTOR2:
					return nz(e, this._targetValue, t);
				case j.VECTOR3:
					return tz(e, this._targetValue, t);
				case j.COLOR:
					return JG(e, this._targetValue, t);
				case j.VECTOR4:
					return QG(e, this._targetValue, t);
			}
			le.warn(`param type cannot be animated (yet): '${e.type()}' '${e.path()}'`);
		}
	}
}
const cz = {gsap: void 0, timeline: (n) => {}};
function lz(n) {
	return cz.timeline(n);
}
class bm {
	constructor() {
		(this._timelineBuilders = []),
			(this._duration = 1),
			(this._operation = Ac.SET),
			(this._delay = 0),
			(this._stoppable = !0),
			(this._debug = !1);
	}
	setDebug(e) {
		this._debug = e;
	}
	_printDebug(e) {
		this._debug && console.log(e);
	}
	addTimelineBuilder(e) {
		this._timelineBuilders.push(e), e.setParent(this);
	}
	timelineBuilders() {
		return this._timelineBuilders;
	}
	setParent(e) {
		this._parent = e;
	}
	parent() {
		return this._parent;
	}
	setTarget(e) {
		this._target = e;
		for (const t of this._timelineBuilders) t.setTarget(e);
	}
	target() {
		return this._target;
	}
	setDuration(e) {
		if (e >= 0) {
			this._duration = e;
			for (const t of this._timelineBuilders) t.setDuration(e);
		}
	}
	duration() {
		return this._duration;
	}
	setKeyframes(e) {
		this._keyframes = e;
	}
	keyframes() {
		return this._keyframes;
	}
	setEasing(e) {
		this._easing = e;
		for (const t of this._timelineBuilders) t.setEasing(e);
	}
	easing() {
		return this._easing;
	}
	setOperation(e) {
		this._operation = e;
		for (const t of this._timelineBuilders) t.setOperation(e);
	}
	operation() {
		return this._operation;
	}
	setRepeatParams(e) {
		this._repeatParams = e;
		for (const t of this._timelineBuilders) t.setRepeatParams(e);
	}
	repeatParams() {
		return this._repeatParams;
	}
	setDelay(e) {
		this._delay = e;
		for (const t of this._timelineBuilders) t.setDelay(e);
	}
	delay() {
		return this._delay;
	}
	setPosition(e) {
		this._position = e;
	}
	position() {
		return this._position;
	}
	setStoppable(e) {
		this._stoppable = e;
	}
	stoppable() {
		return this._stoppable;
	}
	setUpdateCallback(e) {
		this._updateCallback = e;
	}
	updateCallback() {
		return this._updateCallback;
	}
	clone() {
		const e = new bm();
		if (
			(e.setDuration(this._duration),
			e.setOperation(this._operation),
			e.setDelay(this._delay),
			this._target && e.setTarget(this._target.clone()),
			this._easing && e.setEasing(this._easing),
			this._keyframes && e.setKeyframes(this._keyframes),
			this._delay && e.setDelay(this._delay),
			this._updateCallback && e.setUpdateCallback(this._updateCallback.clone()),
			this._repeatParams &&
				e.setRepeatParams({
					count: this._repeatParams.count,
					delay: this._repeatParams.delay,
					yoyo: this._repeatParams.yoyo,
				}),
			this._property)
		) {
			const t = this._property.name();
			t && e.setPropertyName(t);
			const i = this._property.targetValue();
			i != null && e.setPropertyValue(i);
		}
		this._position && e.setPosition(this._position.clone()), e.setStoppable(this._stoppable);
		for (const t of this._timelineBuilders) {
			const i = t.clone();
			e.addTimelineBuilder(i);
		}
		return e;
	}
	setPropertyName(e) {
		this.property().setName(e);
	}
	property() {
		return (this._property = this._property || new ym());
	}
	propertyName() {
		return this.property().name();
	}
	setPropertyValue(e) {
		this.property().setTargetValue(e);
	}
	propertyValue() {
		var e;
		return (e = this._property) == null ? void 0 : e.targetValue();
	}
	populate(e, t) {
		var i;
		this._printDebug(['populate', this, e, this._timelineBuilders]);
		for (const s of this._timelineBuilders) {
			const r = lz();
			if (!r) continue;
			s.setDebug(this._debug), s.populate(r, t);
			const o = ((i = s.position()) == null ? void 0 : i.toParameter()) || void 0;
			e.add(r, o);
		}
		this._property &&
			this._target &&
			(this._property.setDebug(this._debug),
			this._property.addToTimeline({timelineBuilder: this, timeline: e, target: this._target, ...t}));
	}
}
class Sm {
	setAudioNode(e) {
		this._audioNode = e;
	}
	audioNode() {
		return this._audioNode;
	}
	setSource(e) {
		(this._source = e), this._audioNode || this.setAudioNode(e);
	}
	source() {
		return this._source;
	}
	setInstrument(e) {
		(this._instrument = e), this._audioNode || this.setAudioNode(e);
	}
	instrument() {
		return this._instrument;
	}
	setOscillatorParams(e) {
		this._oscillatorParams = e;
	}
	oscillatorParams() {
		return this._oscillatorParams;
	}
	setEnvelopeParams(e) {
		this._envelopeParams = e;
	}
	envelopeParams() {
		return this._envelopeParams;
	}
	clone() {
		const e = new Sm();
		return (
			e.setAudioNode(this._audioNode),
			e.setSource(this._source),
			e.setInstrument(this._instrument),
			e.setEnvelopeParams(this._envelopeParams),
			e
		);
	}
}
const uz = {
	[fe.ANIM]: bm,
	[fe.AUDIO]: Sm,
	[fe.COP]: In,
	[fe.EVENT]: String,
	[fe.GL]: String,
	[fe.JS]: String,
	[fe.MANAGER]: Boolean,
	[fe.MAT]: An,
	[fe.OBJ]: kt,
	[fe.ROP]: String,
	[fe.POST]: Number,
	[fe.SOP]: ba,
};
class Ri {
	constructor(e) {
		this._node = e;
	}
	set_node(e) {
		this._node = e;
	}
	node() {
		return this._node;
	}
	set_content(e) {
		(this._content = e), this._post_set_content();
	}
	has_content() {
		return this._content != null;
	}
	content() {
		return this._content;
	}
	_post_set_content() {}
	coreContent() {
		return this._content;
	}
	coreContentCloned() {
		return this._content;
	}
	infos() {
		return [];
	}
}
class hz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
	setTimelineBuilder(e) {
		return this.set_content(e);
	}
	timelineBuilder() {
		return this.content();
	}
	coreContentCloned() {
		if (this._content) return this._content.clone();
	}
}
class dz extends Ri {
	setContent(e) {
		super.set_content(e);
	}
	setAudioBuilder(e) {
		return this.set_content(e);
	}
	audioBuilder() {
		return this.content();
	}
	coreContentCloned() {
		if (this._content) return this._content.clone();
	}
}
class pz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
}
class fz extends Ri {
	coreContentCloned() {
		if (this._content) return this._content.clone();
	}
	set_content(e) {
		super.set_content(e);
	}
}
class _z extends Ri {
	object() {
		return this._content;
	}
}
class mz extends Ri {
	object() {
		return this._content;
	}
}
class gz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
}
class vz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
	coreContentCloned() {
		if (this._content)
			return el.clone(this._node.scene(), this._content, {shareCustomUniforms: !0, addCustomMaterials: !0});
	}
	set_material(e) {
		this._content != null && this._content.dispose(), this.set_content(e);
	}
	has_material() {
		return this.has_content();
	}
	material() {
		return this.content();
	}
}
class Ez extends Ri {
	set_content(e) {
		super.set_content(e);
	}
	set_object(e) {
		return this.set_content(e);
	}
	has_object() {
		return this.has_content();
	}
	object() {
		return this.content();
	}
}
class Cz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
	texture() {
		return this._content;
	}
	coreContent() {
		return this._content;
	}
	coreContentCloned() {
		var e;
		const t = (e = this._content) == null ? void 0 : e.clone();
		return t && (t.needsUpdate = !0), t;
	}
	object() {
		return this.texture();
	}
	infos() {
		if (this._content != null) return [this._content];
	}
	resolution() {
		function e(t) {
			return [t.videoWidth, t.videoHeight];
		}
		if (this._content) {
			const t = this._content.image;
			if (t) {
				if (
					t instanceof HTMLImageElement ||
					t instanceof Image ||
					t instanceof ImageData ||
					t instanceof HTMLCanvasElement
				)
					return [t.width, t.height];
				if (t instanceof HTMLVideoElement) return e(t);
				if (je(t.width) && je(t.height)) return [t.width, t.height];
			}
			const i = this._content.source;
			if (i) {
				if (i instanceof HTMLVideoElement) return e(i);
				const s = i.data;
				if (s && je(s.width) && je(s.height)) return [s.width, s.height];
			}
		}
		return [-1, -1];
	}
}
class yz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
	render_pass() {
		return this._content;
	}
	object(e = {}) {
		return this.render_pass();
	}
}
class bz extends Ri {
	set_content(e) {
		super.set_content(e);
	}
	renderer() {
		return this._content;
	}
}
const Sz = {
	[fe.ANIM]: hz,
	[fe.AUDIO]: dz,
	[fe.COP]: Cz,
	[fe.EVENT]: pz,
	[fe.GL]: _z,
	[fe.JS]: mz,
	[fe.MANAGER]: gz,
	[fe.MAT]: vz,
	[fe.OBJ]: Ez,
	[fe.ROP]: bz,
	[fe.POST]: yz,
	[fe.SOP]: fz,
};
class Az {
	constructor(e) {
		(this.node = e), (this._callbacks = []), (this._callbacksTmp = []), (this._container = this._createContainer());
	}
	container() {
		return this._container;
	}
	_createContainer() {
		const e = Sz[this.node.context()];
		return new e(this.node);
	}
	_createContainerWithContent() {
		const e = this._createContainer(),
			t = uz[this.node.context()],
			i = new t();
		return e.set_content(i), e;
	}
	firstNonBypassedNode() {
		var e, t;
		return (t = (e = this.node.flags) == null ? void 0 : e.bypass) != null && t.active()
			? this.node.io.inputs.input(0)
			: this.node;
	}
	containerUnlessBypassed() {
		var e, t;
		if ((t = (e = this.node.flags) == null ? void 0 : e.bypass) != null && t.active()) {
			this.node.states.error.clear();
			const i = this.node.io.inputs.input(0);
			return i ? i.containerController.containerUnlessBypassed() : this._createContainerWithContent();
		} else return this.container();
	}
	async compute() {
		var e, t;
		if (
			(this.node.disposed() && console.warn('.compute() requested from a disposed node', this.node),
			(t = (e = this.node.flags) == null ? void 0 : e.bypass) != null && t.active())
		)
			if ((this.node.states.error.clear(), this.node.io.inputs.input(0))) {
				const s = (await this.requestInputContainer(0)) || this._container;
				return this.node.cookController.endCook(), s;
			} else return this._createContainerWithContent();
		return this.node.isDirty()
			? new Promise((i, s) => {
					var r, o;
					if (
						(this._callbacks.push(i),
						(o = (r = this.node.flags) == null ? void 0 : r.bypass) != null && o.active())
					)
						throw 'we should not be here';
					this.node.cookController.cookMain();
			  })
			: this._container;
	}
	async requestInputContainer(e) {
		const t = this.node.io.inputs.input(e);
		return t
			? await t.compute()
			: (this.node.states.error.set(`input ${e} required`), this.notifyRequesters(), null);
	}
	notifyRequesters(e) {
		(this._callbacksTmp = this._callbacks.slice()),
			this._callbacks.splice(0, this._callbacks.length),
			e || (e = this.node.containerController.container());
		let t;
		for (; (t = this._callbacksTmp.pop()); ) t(e);
		this.node.scene().cookController.removeNode(this.node);
	}
}
const Wo = le.performance.performanceManager();
class xz {
	constructor(e) {
		(this.cookController = e),
			(this._inputsStart = 0),
			(this._inputsTime = 0),
			(this._paramsStart = 0),
			(this._paramsTime = 0),
			(this._cookStart = 0),
			(this._cookTime = 0),
			(this._cooksCount = 0),
			(this._data = {inputsTime: 0, paramsTime: 0, cookTime: 0});
	}
	cooksCount() {
		return this._cooksCount;
	}
	data() {
		return (
			(this._data.inputsTime = this._inputsTime),
			(this._data.paramsTime = this._paramsTime),
			(this._data.cookTime = this._cookTime),
			this._data
		);
	}
	active() {
		return this.cookController.performanceRecordStarted();
	}
	recordInputsStart() {
		this.active() && (this._inputsStart = Wo.now());
	}
	recordInputsEnd() {
		this.active() && (this._inputsTime = Wo.now() - this._inputsStart);
	}
	recordParamsStart() {
		this.active() && (this._paramsStart = Wo.now());
	}
	recordParamsEnd() {
		this.active() && (this._paramsTime = Wo.now() - this._paramsStart);
	}
	recordCookStart() {
		this.active() && (this._cookStart = Wo.now());
	}
	recordCookEnd() {
		this.active() && ((this._cookTime = Wo.now() - this._cookStart), (this._cooksCount += 1));
	}
}
const Mz = new Map();
function Tz(n) {
	return Mz.get(n);
}
function Rz(n) {
	const e = Tz(n);
	e && OI(e);
}
class wz {
	constructor(e) {
		(this.node = e),
			(this._cooking = !1),
			(this._performanceController = new xz(this)),
			(this._inputContainers = []),
			(this._inputContents = []),
			(this._EMPTY_ARRAY = []),
			(this._inputsEvaluationRequired = !0),
			(this._corePerformance = this.node.scene().performance);
	}
	performanceRecordStarted() {
		return this._corePerformance.started();
	}
	dispose() {
		this._clearHooks();
	}
	disallowInputsEvaluation() {
		this._inputsEvaluationRequired = !1;
	}
	isCooking() {
		return this._cooking === !0;
	}
	_startCookIfNoErrors(e) {
		if (this.node.states.error.active() || this.node.disposed() == !0) this.endCook();
		else
			try {
				this._performanceController.recordCookStart();
				const t = this.node.cook(e);
				t != null &&
					t.catch((i) => {
						this._onError(i, 'node internal error', !1);
					});
			} catch (t) {
				this._onError(t, 'node internal error');
			}
	}
	async cookMain() {
		if (!this.isCooking() && this.node.disposed() != !0) {
			this._initCookingState(),
				this.node.states.error.clear(),
				this.node.scene().cookController.addNode(this.node);
			try {
				(this._inputContents.length = 0),
					this._inputsEvaluationRequired && (await this._evaluateInputs(this._inputContents)),
					this.node.params.paramsEvalRequired() && (await this._evaluateParams()),
					this._startCookIfNoErrors(this._inputContents);
			} catch (e) {
				this._onError(e, 'node inputs error');
			}
		}
	}
	_onError(e, t, i = !0) {
		if (i || !this.node.states.error.active()) {
			const s = this.node.processError(e);
			this.node.states.error.set(`${t}: '${s}'.`), le.warn(e);
		}
		this.endCook();
	}
	async cookMainWithoutInputs() {
		if ((this.node.scene().cookController.addNode(this.node), this.isCooking())) {
			le.warn('cook_main_without_inputs already cooking', this.node.path());
			return;
		}
		this._initCookingState(),
			this.node.states.error.clear(),
			this.node.params.paramsEvalRequired() && (await this._evaluateParams()),
			this._startCookIfNoErrors(this._EMPTY_ARRAY);
	}
	endCook() {
		var e, t;
		this._finalizeCookPerformance();
		const i = this.node.dirtyController.dirtyTimestamp();
		if (
			i == null ||
			i === this._cookingDirtyTimestamp ||
			((t = (e = this.node.flags) == null ? void 0 : e.bypass) != null && t.active())
		)
			this.node.removeDirtyState(), this._terminateCookProcess();
		else {
			if (this.node.disposed() == !0) return;
			le.log('COOK AGAIN', i, this._cookingDirtyTimestamp, this.node.path()),
				(this._cooking = !1),
				this.cookMain();
		}
	}
	_initCookingState() {
		(this._cooking = !0), (this._cookingDirtyTimestamp = this.node.dirtyController.dirtyTimestamp());
	}
	_terminateCookProcess() {
		var e, t;
		if (this.isCooking() || ((t = (e = this.node.flags) == null ? void 0 : e.bypass) != null && t.active())) {
			if (
				((this._cooking = !1),
				this.node.containerController.notifyRequesters(),
				this._runOnCookCompleteHooks(),
				this.node.disposed() == !0)
			)
				return;
			Rz(this.node.path());
		}
	}
	async _evaluateInputs(e) {
		this._performanceController.recordInputsStart();
		const t = this.node.io.inputs;
		(this._inputContainers.length = 0),
			this._inputsEvaluationRequired &&
				(t.isGraphNodeDirty()
					? await t.evalRequiredInputs(this._inputContainers)
					: t.containersWithoutEvaluation(this._inputContainers));
		const i = t.inputs();
		let s;
		for (let r = 0; r < i.length; r++)
			(s = this._inputContainers[r]),
				s && (t.cloneRequired(r) ? (e[r] = s.coreContentCloned()) : (e[r] = s.coreContent()));
		return this._performanceController.recordInputsEnd(), e;
	}
	async _evaluateParams() {
		this._performanceController.recordParamsStart(),
			await this.node.params.evalAll(),
			this._performanceController.recordParamsEnd();
	}
	cooksCount() {
		return this._performanceController.cooksCount();
	}
	cookTime() {
		return this._performanceController.data().cookTime;
	}
	_finalizeCookPerformance() {
		this._corePerformance.started() &&
			(this._performanceController.recordCookEnd(),
			this._corePerformance.recordNodeCookData(this.node, this._performanceController.data()));
	}
	registerOnCookEnd(e, t) {
		(this._onCookCompleteHookNames = this._onCookCompleteHookNames || []),
			(this._onCookCompleteHooks = this._onCookCompleteHooks || []),
			this._onCookCompleteHookNames.push(e),
			this._onCookCompleteHooks.push(t);
	}
	_clearHooks() {
		if (!(!this._onCookCompleteHookNames || !this._onCookCompleteHooks))
			for (const e of this._onCookCompleteHookNames) this.deregisterOnCookEnd(e);
	}
	deregisterOnCookEnd(e) {
		var t;
		if (!this._onCookCompleteHookNames || !this._onCookCompleteHooks) return;
		const i = (t = this._onCookCompleteHookNames) == null ? void 0 : t.indexOf(e);
		this._onCookCompleteHookNames.splice(i, 1),
			this._onCookCompleteHooks.splice(i, 1),
			this._onCookCompleteHookNames.length == 0 && (this._onCookCompleteHookNames = void 0),
			this._onCookCompleteHooks.length == 0 && (this._onCookCompleteHooks = void 0);
	}
	_runOnCookCompleteHooks() {
		if (this._onCookCompleteHooks) {
			const e = [...this._onCookCompleteHooks];
			for (let t of e) t();
		}
	}
	onCookEndCallbackNames() {
		return this._onCookCompleteHookNames;
	}
}
class Oz extends Yh {
	static type() {
		return j.BOOLEAN;
	}
	defaultValueSerialized() {
		return qe(this._default_value) ? this._default_value : this.convert(this._default_value) || !1;
	}
	rawInputSerialized() {
		return this._raw_input;
	}
	valueSerialized() {
		return this.value;
	}
	_copyValue(e) {
		this.set(e.value);
	}
	static areRawInputEqual(e, t) {
		return e == t;
	}
	static areValuesEqual(e, t) {
		return e == t;
	}
	convert(e) {
		if (xi(e)) return e;
		if (je(e)) return e >= 1;
		if (qe(e)) {
			if (_t.isBoolean(e)) return _t.toBoolean(e);
			if (_t.isNumber(e)) return parseFloat(e) >= 1;
		}
		return null;
	}
}
class Pz extends Sr {
	static type() {
		return j.BUTTON;
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	rawInputSerialized() {
		return this._raw_input;
	}
	valueSerialized() {
		return this.value;
	}
	_copyValue(e) {}
	static areRawInputEqual(e, t) {
		return !0;
	}
	static areValuesEqual(e, t) {
		return !0;
	}
	async pressButton() {
		(this.node.isDirty() || this.node.cookController.isCooking()) && (await this.node.compute()),
			await this.options.executeCallback();
	}
}
const Nz = ['r', 'g', 'b'],
	GC = [0, 0, 0];
function zC(n, e) {
	return n.r == e[0] && n.g == e[1] && n.b == e[2];
}
function Iz(n, e) {
	return n[0] == e[0] && n[1] == e[1] && n[2] == e[2];
}
class Dz extends tl {
	constructor() {
		super(...arguments),
			(this._value = new Ee()),
			(this._valuePreConversion = new Ee()),
			(this._valueSerializedDirty = !1),
			(this._valueSerialized = [0, 0, 0]),
			(this._valuePreConversionSerialized = [0, 0, 0]),
			(this._copiedValue = [0, 0, 0]);
	}
	static type() {
		return j.COLOR;
	}
	componentNames() {
		return Nz;
	}
	defaultValueSerialized() {
		return ft(this._default_value) ? this._default_value : this._default_value.toArray();
	}
	_prefilterInvalidRawInput(e) {
		return e instanceof Ee ? (e.toArray(GC), GC) : super._prefilterInvalidRawInput(e);
	}
	valueSerialized() {
		return this._updateValueSerializedIfRequired(), this._valueSerialized;
	}
	valuePreConversionSerialized() {
		return this._updateValueSerializedIfRequired(), this._valuePreConversionSerialized;
	}
	_copyValue(e) {
		e.value.toArray(this._copiedValue), this.set(this._copiedValue);
	}
	_cloneRawInput(e) {
		if (e instanceof Ee) return e.clone();
		{
			const t = [e[0], e[1], e[2]];
			return (
				t[0] == null && (t[0] = t[0] || 0),
				t[1] == null && (t[1] = t[1] || t[0]),
				t[2] == null && (t[2] = t[2] || t[1]),
				t
			);
		}
	}
	static areRawInputEqual(e, t) {
		return e instanceof Ee ? (t instanceof Ee ? e.equals(t) : zC(e, t)) : t instanceof Ee ? zC(t, e) : Iz(e, t);
	}
	static areValuesEqual(e, t) {
		return e.equals(t);
	}
	initComponents() {
		super.initComponents(),
			(this.r = this.components[0]),
			(this.g = this.components[1]),
			(this.b = this.components[2]),
			(this._valueSerializedDirty = !0);
	}
	postOptionsInitialize() {
		this.setValueFromComponents();
	}
	_updateValueSerializedIfRequired() {
		this._valueSerializedDirty &&
			((this._valueSerialized[0] = this._value.r),
			(this._valueSerialized[1] = this._value.g),
			(this._valueSerialized[2] = this._value.b),
			(this._valuePreConversionSerialized[0] = this._valuePreConversion.r),
			(this._valuePreConversionSerialized[1] = this._valuePreConversion.g),
			(this._valuePreConversionSerialized[2] = this._valuePreConversion.b));
	}
	valuePreConversion() {
		return this._valuePreConversion;
	}
	async setConversion(e) {
		this.options.setOption('conversion', e), this.setDirty(), await this.options.executeCallback();
	}
	setValueFromComponents() {
		(this._valuePreConversion.r = this.r.value),
			(this._valuePreConversion.g = this.g.value),
			(this._valuePreConversion.b = this.b.value),
			this._value.copy(this._valuePreConversion),
			this._applyColorConversion(),
			(this._valueSerializedDirty = !0);
	}
	_applyColorConversion() {
		const e = this.options.colorConversion();
		switch (e) {
			case $r.NONE:
				return;
			case $r.SRGB_TO_LINEAR: {
				this._value.convertSRGBToLinear();
				return;
			}
			case $r.LINEAR_TO_SRGB: {
				this._value.convertLinearToSRGB();
				return;
			}
		}
		zt.unreachable(e);
	}
}
class Lz extends Sr {
	static type() {
		return j.FOLDER;
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	rawInputSerialized() {
		return this._raw_input;
	}
	valueSerialized() {
		return this.value;
	}
	_copyValue(e) {}
	static areRawInputEqual(e, t) {
		return !0;
	}
	static areValuesEqual(e, t) {
		return !0;
	}
}
class Am extends Yh {
	static type() {
		return j.INTEGER;
	}
	defaultValueSerialized() {
		return this._default_value;
	}
	rawInputSerialized() {
		return this._raw_input;
	}
	valueSerialized() {
		return this.value;
	}
	_copyValue(e) {
		this.set(e.valueSerialized());
	}
	_prefilterInvalidRawInput(e) {
		if (ft(e)) return e[0];
		if (qe(e) && _t.isNumber(e)) {
			const t = parseInt(e);
			if (t != null) {
				const i = this.convert(t);
				if (i != null) return i;
			}
		}
		if (je(e)) {
			const t = this.convert(e);
			if (t != null) return t;
		}
		return e;
	}
	static areRawInputEqual(e, t) {
		return e == t;
	}
	static areValuesEqual(e, t) {
		return e == t;
	}
	static convert(e) {
		if (je(e)) return Math.round(e);
		if (xi(e)) return e ? 1 : 0;
		if (_t.isNumber(e)) {
			const t = parseInt(e);
			if (je(t)) return t;
		}
		return null;
	}
	convert(e) {
		const t = Am.convert(e);
		if (t != null) {
			let i = this.options.ensureInRange(t);
			return (i = this.options.ensureValueInMenuEntries(i)), i;
		} else return t;
	}
}
const Uz = ['x', 'y'],
	HC = [0, 0];
function WC(n, e) {
	return n.x == e[0] && n.y == e[1];
}
function Fz(n, e) {
	return n[0] == e[0] && n[1] == e[1];
}
class Bz extends tl {
	constructor() {
		super(...arguments), (this._value = new re()), (this._copied_value = [0, 0]);
	}
	static type() {
		return j.VECTOR2;
	}
	componentNames() {
		return Uz;
	}
	defaultValueSerialized() {
		return ft(this._default_value) ? this._default_value : this._default_value.toArray();
	}
	_prefilterInvalidRawInput(e) {
		return e instanceof re ? (e.toArray(HC), HC) : super._prefilterInvalidRawInput(e);
	}
	valueSerialized() {
		return this.value.toArray();
	}
	_copyValue(e) {
		e.value.toArray(this._copied_value), this.set(this._copied_value);
	}
	_cloneRawInput(e) {
		if (e instanceof re) return e.clone();
		{
			const t = [e[0], e[1]];
			return t[0] == null && (t[0] = t[0] || 0), t[1] == null && (t[1] = t[1] || t[0]), t;
		}
	}
	static areRawInputEqual(e, t) {
		return e instanceof re ? (t instanceof re ? e.equals(t) : WC(e, t)) : t instanceof re ? WC(t, e) : Fz(e, t);
	}
	static areValuesEqual(e, t) {
		return e.equals(t);
	}
	initComponents() {
		super.initComponents(), (this.x = this.components[0]), (this.y = this.components[1]);
	}
	setValueFromComponents() {
		(this._value.x = this.x.value), (this._value.y = this.y.value);
	}
}
const kz = ['x', 'y', 'z'],
	jC = [0, 0, 0];
function XC(n, e) {
	return n.x == e[0] && n.y == e[1] && n.z == e[2];
}
function Vz(n, e) {
	return n[0] == e[0] && n[1] == e[1] && n[2] == e[2];
}
class Gz extends tl {
	constructor() {
		super(...arguments), (this._value = new w()), (this._copied_value = [0, 0, 0]);
	}
	static type() {
		return j.VECTOR3;
	}
	componentNames() {
		return kz;
	}
	defaultValueSerialized() {
		return ft(this._default_value) ? this._default_value : this._default_value.toArray();
	}
	_prefilterInvalidRawInput(e) {
		return e instanceof w ? (e.toArray(jC), jC) : super._prefilterInvalidRawInput(e);
	}
	valueSerialized() {
		return this.value.toArray();
	}
	_copyValue(e) {
		e.value.toArray(this._copied_value), this.set(this._copied_value);
	}
	_cloneRawInput(e) {
		if (e instanceof w) return e.clone();
		{
			const t = [e[0], e[1], e[2]];
			return (
				t[0] == null && (t[0] = t[0] || 0),
				t[1] == null && (t[1] = t[1] || t[0]),
				t[2] == null && (t[2] = t[2] || t[1]),
				t
			);
		}
	}
	static areRawInputEqual(e, t) {
		return e instanceof w ? (t instanceof w ? e.equals(t) : XC(e, t)) : t instanceof w ? XC(t, e) : Vz(e, t);
	}
	static areValuesEqual(e, t) {
		return e.equals(t);
	}
	initComponents() {
		super.initComponents(),
			(this.x = this.components[0]),
			(this.y = this.components[1]),
			(this.z = this.components[2]);
	}
	setValueFromComponents() {
		(this._value.x = this.x.value), (this._value.y = this.y.value), (this._value.z = this.z.value);
	}
}
const zz = ['x', 'y', 'z', 'w'],
	$C = [0, 0, 0, 0];
function qC(n, e) {
	return n.x == e[0] && n.y == e[1] && n.z == e[2] && n.w == e[3];
}
function Hz(n, e) {
	return n[0] == e[0] && n[1] == e[1] && n[2] == e[2] && n[3] == e[3];
}
class Wz extends tl {
	constructor() {
		super(...arguments), (this._value = new Ke()), (this._copied_value = [0, 0, 0, 0]);
	}
	static type() {
		return j.VECTOR4;
	}
	componentNames() {
		return zz;
	}
	defaultValueSerialized() {
		return ft(this._default_value) ? this._default_value : this._default_value.toArray();
	}
	_prefilterInvalidRawInput(e) {
		return e instanceof Ke ? (e.toArray($C), $C) : super._prefilterInvalidRawInput(e);
	}
	valueSerialized() {
		return this.value.toArray();
	}
	_copyValue(e) {
		e.value.toArray(this._copied_value), this.set(this._copied_value);
	}
	_cloneRawInput(e) {
		if (e instanceof Ke) return e.clone();
		{
			const t = [e[0], e[1], e[2], e[3]];
			return (
				t[0] == null && (t[0] = t[0] || 0),
				t[1] == null && (t[1] = t[1] || t[0]),
				t[2] == null && (t[2] = t[2] || t[1]),
				t[3] == null && (t[3] = t[3] || t[2]),
				t
			);
		}
	}
	static areRawInputEqual(e, t) {
		return e instanceof Ke ? (t instanceof Ke ? e.equals(t) : qC(e, t)) : t instanceof Ke ? qC(t, e) : Hz(e, t);
	}
	static areValuesEqual(e, t) {
		return e.equals(t);
	}
	initComponents() {
		super.initComponents(),
			(this.x = this.components[0]),
			(this.y = this.components[1]),
			(this.z = this.components[2]),
			(this.w = this.components[3]);
	}
	setValueFromComponents() {
		(this._value.x = this.x.value),
			(this._value.y = this.y.value),
			(this._value.z = this.z.value),
			(this._value.w = this.w.value);
	}
}
const jz = {
		[j.BOOLEAN]: Oz,
		[j.BUTTON]: Pz,
		[j.COLOR]: Dz,
		[j.FLOAT]: Zh,
		[j.FOLDER]: Lz,
		[j.INTEGER]: Am,
		[j.PARAM_PATH]: rx,
		[j.NODE_PATH]: mm,
		[j.RAMP]: ns,
		[j.STRING]: gm,
		[j.VECTOR2]: Bz,
		[j.VECTOR3]: Gz,
		[j.VECTOR4]: Wz,
	},
	Xz = 'params',
	YC = [];
class $z {
	constructor(e) {
		(this.node = e),
			(this._param_create_mode = !1),
			(this._params_created = !1),
			(this._paramsByName = new Map()),
			(this._paramsList = []),
			(this._paramNames = []),
			(this._non_spare_params = []),
			(this._spare_params = []),
			(this._non_spare_param_names = []),
			(this._spare_param_names = []),
			(this._params_added_since_last_params_eval = !1),
			(this._promises = []);
	}
	dispose() {
		this._params_node && this._params_node.dispose(), os(this.all, YC);
		for (const e of YC) e.dispose();
		(this._post_create_params_hook_names = void 0),
			(this._post_create_params_hooks = void 0),
			(this._on_scene_load_hooks = void 0),
			(this._on_scene_load_hook_names = void 0);
	}
	initDependencyNode() {
		this._params_node ||
			((this._params_node = new ai(this.node.scene(), Xz)), this.node.addGraphInput(this._params_node, !1));
	}
	init() {
		this.initDependencyNode(),
			(this._param_create_mode = !0),
			this._initFromParamsConfig(),
			this.node.createParams(),
			this._postCreateParams();
	}
	_postCreateParams() {
		this._updateCaches(),
			this._initParamAccessors(),
			(this._param_create_mode = !1),
			(this._params_created = !0),
			this._runPostCreateParamsHooks();
	}
	postCreateSpareParams() {
		this._updateCaches(),
			this._initParamAccessors(),
			this.node.scene().referencesController.notifyParamsUpdated(this.node),
			this.node.emit(mn.PARAMS_UPDATED);
	}
	updateParams(e) {
		let t = !1,
			i = !1;
		const s = [];
		if (e.namesToDelete) for (const r of e.namesToDelete) this.has(r) && (this._deleteParam(r), (i = !0));
		if (e.toAdd)
			for (const r of e.toAdd) {
				const o = this.addParam(r.type, r.name, r.initValue, r.options);
				o && (r.rawInput != null && o.set(r.rawInput), (t = !0), s.push(o));
			}
		(i || t) && this.postCreateSpareParams();
		for (const r of s) this.node.scene().missingExpressionReferencesController.checkForMissingParamReferences(r);
	}
	_initFromParamsConfig() {
		var e;
		const t = this.node.paramsConfig;
		let i = !1;
		if (t) {
			const s = (e = this.node.createOptions) == null ? void 0 : e.paramsInitValueOverrides,
				r = Object.keys(t);
			for (const o of r) {
				const a = t[o];
				let c;
				s && ((c = s[o]), (i = !0)), this.addParam(a.type, o, a.init_value, a.options, c);
			}
		}
		i && this.node.setDirty(),
			this.node.createOptions && (this.node.createOptions.paramsInitValueOverrides = void 0);
	}
	_initParamAccessors() {
		let e = Object.getOwnPropertyNames(this.node.pv);
		this._removeUnneededAccessors(e), (e = Object.getOwnPropertyNames(this.node.pv));
		const t = this.all;
		for (const i of t) {
			const s = i.options.isSpare(),
				r = !e.includes(i.name());
			try {
				(r || s) &&
					(Object.defineProperty(this.node.pv, i.name(), {get: () => i.value, configurable: s}),
					Object.defineProperty(this.node.p, i.name(), {get: () => i, configurable: s}));
			} catch {}
		}
	}
	_removeUnneededAccessors(e) {
		const t = this._paramNames,
			i = [];
		for (const s of e) t.includes(s) || i.push(s);
		for (const s of i)
			Object.defineProperty(this.node.pv, s, {get: () => {}, configurable: !0}),
				Object.defineProperty(this.node.p, s, {get: () => {}, configurable: !0});
	}
	get params_node() {
		return this._params_node;
	}
	get all() {
		return this._paramsList;
	}
	get non_spare() {
		return this._non_spare_params;
	}
	get spare() {
		return this._spare_params;
	}
	get names() {
		return this._paramNames;
	}
	get non_spare_names() {
		return this._non_spare_param_names;
	}
	get spare_names() {
		return this._spare_param_names;
	}
	set_with_type(e, t, i) {
		const s = this.paramWithType(e, i);
		s ? s.set(t) : le.warn(`param ${e} not found with type ${i}`);
	}
	set_float(e, t) {
		this.set_with_type(e, t, j.FLOAT);
	}
	set_vector3(e, t) {
		this.set_with_type(e, t, j.VECTOR3);
	}
	has_param(e) {
		return this._paramsByName.has(e);
	}
	has(e) {
		return this.has_param(e);
	}
	get(e) {
		return this.param(e);
	}
	paramWithType(e, t) {
		const i = this.param(e);
		if (i && i.type() == t) return i;
	}
	getFloat(e) {
		return this.paramWithType(e, j.FLOAT);
	}
	value(e) {
		var t;
		return (t = this.param(e)) == null ? void 0 : t.value;
	}
	valueWithType(e, t) {
		var i;
		return (i = this.paramWithType(e, t)) == null ? void 0 : i.value;
	}
	boolean(e) {
		return this.valueWithType(e, j.BOOLEAN);
	}
	float(e) {
		return this.valueWithType(e, j.FLOAT);
	}
	integer(e) {
		return this.valueWithType(e, j.INTEGER);
	}
	string(e) {
		return this.valueWithType(e, j.STRING);
	}
	vector2(e) {
		return this.valueWithType(e, j.VECTOR2);
	}
	vector3(e) {
		return this.valueWithType(e, j.VECTOR3);
	}
	color(e) {
		return this.valueWithType(e, j.COLOR);
	}
	param(e) {
		const t = this._paramsByName.get(e);
		return (
			t ??
			(le.warn(
				`tried to access param '${e}' in node ${this.node.path()}, but existing params are: ${
					this.names
				} on node ${this.node.path()}`
			),
			null)
		);
	}
	_deleteParam(e) {
		const t = this._paramsByName.get(e);
		if (t) {
			if (
				(this._params_node && this._params_node.removeGraphInput(t),
				t._setupNodeDependencies(null),
				this._paramsByName.delete(e),
				t.isMultiple() && t.components)
			)
				for (const i of t.components) {
					const s = i.name();
					this._paramsByName.delete(s);
				}
			t.dispose(), t.scene().graphNodesController.notifyParamPathChanged(t);
		} else throw new Error(`param '${e}' does not exist on node ${this.node.path()}`);
	}
	addParam(e, t, i, s = {}, r) {
		const o = s.spare || !1;
		this._param_create_mode === !1 &&
			!o &&
			le.warn(
				`node ${this.node.path()} (${this.node.type()}) param '${t}' cannot be created outside of createParams`
			),
			this.node.scene() == null &&
				le.warn(`node ${this.node.path()} (${this.node.type()}) has no scene assigned`);
		const a = jz[e];
		if (a != null) {
			const c = this._paramsByName.get(t);
			c &&
				(o
					? c.type() != e && this._deleteParam(c.name())
					: le.warn(`a param named ${t} already exists`, this.node));
			const l = new a(this.node.scene(), this.node, {serializerClass: this.node.scene().paramSerializerClass()});
			if ((l.options.set(s), l.setName(t), l.setInitValue(i), l.initComponents(), r == null)) l.set(i);
			else if ((l.options.isExpressionForEntities() && l.set(i), r.raw_input != null)) l.set(r.raw_input);
			else if (r.simple_data != null) l.set(r.simple_data);
			else if (r.complex_data != null) {
				const u = r.complex_data.raw_input;
				u ? l.set(u) : l.set(i);
				const h = r.complex_data.overriden_options;
				if (h != null) {
					const d = Object.keys(h);
					for (const p of d) l.options.setOption(p, h[p]);
				}
			}
			if (
				(l.postOptionsInitialize(),
				l._setupNodeDependencies(this.node),
				this._paramsByName.set(l.name(), l),
				l.isMultiple() && l.components)
			)
				for (const u of l.components) this._paramsByName.set(u.name(), u);
			return (
				(this._params_added_since_last_params_eval = !0),
				l.scene().graphNodesController.notifyParamPathChanged(l),
				l
			);
		}
	}
	_updateCaches() {
		this._paramsList.splice(0, this._paramsList.length),
			this._paramsByName.forEach((e) => {
				this._paramsList.push(e);
			}),
			(this._paramNames = this._paramsList.map((e) => e.name())),
			(this._non_spare_params = this._paramsList.filter((e) => !e.options.isSpare())),
			(this._spare_params = this._paramsList.filter((e) => e.options.isSpare())),
			(this._non_spare_param_names = this._non_spare_params.map((e) => e.name())),
			(this._spare_param_names = this._spare_params.map((e) => e.name()));
	}
	async _evalParam(e) {
		e.isDirty() &&
			(await e.compute(),
			e.states.error.active() &&
				e.disposed() == !1 &&
				this.node.states.error.set(`param '${e.name()}' error: ${e.states.error.message()}`));
	}
	async evalParams(e) {
		let t = 0;
		for (const s of e) s.isDirty() && (t += 1);
		this._promises.length = t;
		let i = 0;
		for (const s of e) s.isDirty() && ((this._promises[i] = this._evalParam(s)), (i += 1));
		await Promise.all(this._promises), this.node.states.error.active() && this.node._setContainer(null);
	}
	paramsEvalRequired() {
		return this._params_node != null && (this._params_node.isDirty() || this._params_added_since_last_params_eval);
	}
	async evalAll() {
		var e;
		this.paramsEvalRequired() &&
			(await this.evalParams(this._paramsList),
			(e = this._params_node) == null || e.removeDirtyState(),
			(this._params_added_since_last_params_eval = !1));
	}
	onParamsCreated(e, t) {
		if (this._params_created) t();
		else {
			if (this._post_create_params_hook_names && this._post_create_params_hook_names.includes(e)) {
				le.error(`hook name ${e} already exists`);
				return;
			}
			(this._post_create_params_hook_names = this._post_create_params_hook_names || []),
				this._post_create_params_hook_names.push(e),
				(this._post_create_params_hooks = this._post_create_params_hooks || []),
				this._post_create_params_hooks.push(t);
		}
	}
	addOnSceneLoadHook(e, t) {
		(this._on_scene_load_hook_names = this._on_scene_load_hook_names || []),
			(this._on_scene_load_hooks = this._on_scene_load_hooks || []),
			this._on_scene_load_hook_names.includes(e)
				? le.warn(`hook with name ${e} already exists`, this.node)
				: (this._on_scene_load_hook_names.push(e), this._on_scene_load_hooks.push(t));
	}
	_runPostCreateParamsHooks() {
		if (this._post_create_params_hooks) for (const e of this._post_create_params_hooks) e();
	}
	runOnSceneLoadHooks() {
		if (this._on_scene_load_hooks) for (const e of this._on_scene_load_hooks) e();
	}
}
class qz {
	constructor() {}
}
const Yz = 'triggered',
	Kz = {type: Yz},
	mx = class {
		constructor(n, e, t = 0, i = 0) {
			if (
				((this._nodeSrc = n),
				(this._nodeDest = e),
				(this._outputIndex = t),
				(this._inputIndex = i),
				this._outputIndex == null)
			)
				throw 'bad output index';
			if (this._inputIndex == null) throw 'bad input index';
			(this._id = mx._nextId++),
				this._nodeSrc.io.connections &&
					this._nodeDest.io.connections &&
					(this._nodeSrc.io.connections.addOutputConnection(this),
					this._nodeDest.io.connections.addInputConnection(this));
		}
		id() {
			return this._id;
		}
		nodeSrc() {
			return this._nodeSrc;
		}
		nodeDest() {
			return this._nodeDest;
		}
		outputIndex() {
			return this._outputIndex;
		}
		inputIndex() {
			return this._inputIndex;
		}
		srcConnectionPoint() {
			const n = this._nodeSrc.io.outputs.namedOutputConnectionPoints();
			if (n) return n[this._outputIndex];
		}
		destConnectionPoint() {
			const n = this._nodeDest.io.inputs.namedInputConnectionPoints();
			if (n) return n[this._inputIndex];
		}
		disconnect(n = {}) {
			this._nodeSrc.io.connections &&
				this._nodeDest.io.connections &&
				(this._nodeSrc.io.connections.removeOutputConnection(this),
				this._nodeDest.io.connections.removeInputConnection(this)),
				n.setInput === !0 &&
					this._nodeDest.io.inputs.setInput(this._inputIndex, null, void 0, {
						ignoreLockedState: n.ignoreLockedState,
					});
		}
		_eventDispatcher() {
			return this.__eventDispatcher;
		}
		eventDispatcher() {
			return (this.__eventDispatcher = this.__eventDispatcher || new cs());
		}
	};
let gx = mx;
gx._nextId = 0;
class Zz {
	constructor(e) {
		(this.inputsController = e), (this._cloneRequiredStates = []), (this._overridden = !1), (this.node = e.node);
	}
	initInputsClonedState(e) {
		ft(e) ? (this._clonedStates = e) : (this._clonedState = e), this.updateCloneRequiredState();
	}
	overrideClonedStateAllowed() {
		if (this._clonedStates) {
			for (const e of this._clonedStates) if (e == Ft.FROM_NODE) return !0;
		}
		return this._clonedState ? this._clonedState == Ft.FROM_NODE : !1;
	}
	cloneRequiredState(e) {
		return this._cloneRequiredStates[e];
	}
	cloneRequiredStates() {
		return this._cloneRequiredStates;
	}
	_getCloneRequiredState(e) {
		const t = this._clonedStates;
		if (t) {
			const i = t[e];
			if (i != null) return this._cloneRequiredFromState(i);
		}
		return this._clonedState ? this._cloneRequiredFromState(this._clonedState) : !0;
	}
	_cloneRequiredFromState(e) {
		switch (e) {
			case Ft.ALWAYS:
				return !0;
			case Ft.NEVER:
				return !1;
			case Ft.FROM_NODE:
				return !this._overridden;
		}
		return zt.unreachable(e);
	}
	overrideClonedState(e) {
		(this._overridden = e), this.updateCloneRequiredState();
	}
	overriden() {
		return this._overridden;
	}
	updateCloneRequiredState() {
		if (this._clonedStates) {
			const e = [];
			for (let t = 0; t < this._clonedStates.length; t++) e[t] = this._getCloneRequiredState(t);
			this._cloneRequiredStates = e;
		} else if (this._clonedState) {
			const e = this.inputsController.maxInputsCount(),
				t = [];
			for (let i = 0; i < e; i++) t[i] = this._getCloneRequiredState(i);
			this._cloneRequiredStates = t;
		}
		this.node.parent() && (this.node.emit(mn.OVERRIDE_CLONABLE_STATE_UPDATE), this.node.setDirty());
	}
}
const sc = [],
	fp = 0;
class Qz {
	constructor(e) {
		(this.node = e),
			(this._graphNodeInputs = []),
			(this._inputs = []),
			(this._has_named_inputs = !1),
			(this._minInputsCount = 0),
			(this._maxInputsCount = fp),
			(this._maxInputsCountOnInput = fp),
			(this._depends_on_inputs = !0),
			(this._singleInputIndexListenedTo = null);
	}
	dispose() {
		this._graphNode && this._graphNode.dispose();
		for (const e of this._graphNodeInputs) e && e.dispose();
		(this._on_update_hooks = void 0), (this._on_update_hook_names = void 0);
	}
	setDependsOnInputs(e) {
		this._depends_on_inputs = e;
	}
	setMinCount(e) {
		this._minInputsCount = e;
	}
	minCount() {
		return this._minInputsCount;
	}
	setMaxCount(e) {
		this._maxInputsCount == fp && (this._maxInputsCountOnInput = e),
			(this._maxInputsCount = e),
			this._initGraphNodeInputs(),
			this._updateCloneRequiredState();
	}
	listenToSingleInputIndex(e) {
		this._singleInputIndexListenedTo = e;
	}
	onEnsureListenToSingleInputIndexUpdated(e) {
		this._onEnsureListenToSingleInputIndexUpdatedCallback = e;
	}
	namedInputConnectionPointsByName(e) {
		if (this._named_input_connection_points) {
			for (const t of this._named_input_connection_points) if (t && t.name() == e) return t;
		}
	}
	setNamedInputConnectionPoints(e) {
		var t;
		this._has_named_inputs = !0;
		const i =
				((t = this._named_input_connection_points) == null
					? void 0
					: t.filter((a) => (a == null ? void 0 : a.inNodeDefinition()))) || [],
			s = ff(i),
			r = new Set();
		for (const a of i) a && r.add(a.name());
		for (const a of e) a && (r.has(a.name()) || (r.add(a.name()), s.push(a)));
		const o = this.node.io.connections.inputConnections();
		if (o)
			for (const a of o) a && a.inputIndex() >= s.length && a.disconnect({setInput: !0, ignoreLockedState: !0});
		(this._named_input_connection_points = s),
			this.setMinCount(0),
			this.setMaxCount(this._named_input_connection_points.length),
			this._initGraphNodeInputs(),
			this.node.emit(mn.NAMED_INPUTS_UPDATED);
	}
	hasNamedInputs() {
		return this._has_named_inputs;
	}
	namedInputConnectionPoints() {
		return this._named_input_connection_points;
	}
	_initGraphNodeInputs() {
		for (let e = 0; e < this._maxInputsCount; e++)
			this._graphNodeInputs[e] = this._graphNodeInputs[e] || this._createGraphNodeInput(e);
	}
	_createGraphNodeInput(e) {
		const t = new ai(this.node.scene(), `input_${e}`);
		return this.graphNode().addGraphInput(t, !1), t;
	}
	graphNode() {
		return (this._graphNode = this._graphNode || this._createGraphNode());
	}
	_createGraphNode() {
		const e = new ai(this.node.scene(), 'inputs');
		return this.node.addGraphInput(e, !1), e;
	}
	maxInputsCount() {
		return this._maxInputsCount || 0;
	}
	maxInputsCountOverriden() {
		return this._maxInputsCount != this._maxInputsCountOnInput;
	}
	inputGraphNode(e) {
		return this._graphNodeInputs[e];
	}
	setCount(e, t) {
		t == null && (t = e), this.setMinCount(e), this.setMaxCount(t), this._initConnectionControllerInputs();
	}
	_initConnectionControllerInputs() {
		this.node.io.connections.initInputs();
	}
	isGraphNodeDirty() {
		var e;
		return ((e = this._graphNode) == null ? void 0 : e.isDirty()) || !1;
	}
	_isAnyInputDirty() {
		for (const e of this._inputs) if (e && e.isDirty()) return !0;
		return !1;
	}
	containersWithoutEvaluation(e) {
		e.length = 0;
		for (let t = 0; t < this._inputs.length; t++) {
			const i = this._inputs[t];
			let s = null;
			i && (s = i.containerController.containerUnlessBypassed()), e.push(s);
		}
		return e;
	}
	_existingInputIndices(e) {
		if (((e.length = 0), this._maxInputsCount > 0))
			for (let t = 0; t < this._inputs.length; t++) this._inputs[t] && e.push(t);
		return e;
	}
	async evalRequiredInputs(e) {
		var t;
		if (((e.length = 0), this.node.disposed() == !0)) return e;
		if (this._maxInputsCount > 0) {
			if ((this._existingInputIndices(sc), sc.length < this._minInputsCount))
				this.node.states.error.set('inputs are missing');
			else if (sc.length > 0) {
				if (
					(this._onEnsureListenToSingleInputIndexUpdatedCallback &&
						(await this._onEnsureListenToSingleInputIndexUpdatedCallback()),
					this._maxInputsCount == 1)
				) {
					const i = await this.evalRequiredInput(0);
					e.push(i);
				} else {
					const i = [];
					if (this._singleInputIndexListenedTo != null)
						i.push(this.evalRequiredInput(this._singleInputIndexListenedTo));
					else {
						const r = sc[sc.length - 1];
						for (let o = 0; o < this._inputs.length; o++)
							this._inputs[o] ? i.push(this.evalRequiredInput(o)) : o <= r && i.push(void 0);
					}
					const s = await Promise.all(i);
					for (const r of s) e.push(r);
				}
				this._isAnyInputDirty() || (t = this._graphNode) == null || t.removeDirtyState();
			}
		}
		return e;
	}
	async evalRequiredInput(e) {
		let t;
		const i = this.input(e);
		if ((i && ((t = await i.compute()), this._graphNodeInputs[e].removeDirtyState()), !(t && t.coreContent()))) {
			if (i) {
				const s = i.states.error.message();
				s && this.node.disposed() == !1 && this.node.states.error.set(`input ${e} is invalid (error: ${s})`);
			}
		}
		return t;
	}
	getNamedInputIndex(e) {
		var t;
		if (this._named_input_connection_points) {
			for (let i = 0; i < this._named_input_connection_points.length; i++)
				if (((t = this._named_input_connection_points[i]) == null ? void 0 : t.name()) == e) return i;
		}
		return -1;
	}
	getInputIndex(e) {
		if (qe(e)) {
			if (this.hasNamedInputs()) return this.getNamedInputIndex(e);
			throw new Error(`node ${this.node.path()} has no named inputs`);
		} else return e;
	}
	setInput(e, t, i, s) {
		if (((s == null ? void 0 : s.ignoreLockedState) || !1) == !1 && this.node.insideALockedParent()) {
			const p = this.node.lockedParent();
			console.warn(
				`node '${this.node.path()}' cannot have its inputs changed, since it is inside '${
					p ? p.path() : ''
				}', which is locked`
			);
			return;
		}
		i == null && (i = 0);
		const o = (s == null ? void 0 : s.noExceptionOnInvalidInput) || !1,
			a = this.getInputIndex(e) || 0;
		if (a < 0) {
			const p = `invalid input (${e}) for node ${this.node.path()}`;
			if (o) return;
			throw (console.warn(p), new Error(p));
		}
		let c = 0;
		if (t) {
			if (t.io.outputs.hasNamedOutputs() && ((c = t.io.outputs.getOutputIndex(i)), c == null || c < 0)) {
				const g = t.io.outputs.namedOutputConnectionPoints(),
					_ = g ? g.map((f) => f.name()) : [];
				console.warn(`node ${t.path()} does not have an output named ${i}. inputs are: ${_.join(', ')}`);
				return;
			}
			const p = t.parent(),
				m = this.node.parent();
			if (!(p && m && p.graphNodeId() == m.graphNodeId())) {
				console.warn(`node ${t.path()} does not have the same parent as ${this.node.path()}`);
				return;
			}
		}
		const l = this._graphNodeInputs[a];
		if (l == null) {
			const p = `no input at index ${a} (name: ${e}) for node '${this.node.name()}' at path '${this.node.path()}'`;
			throw (console.warn(p), new Error(p));
		}
		if (t && this.node.parent() != t.parent()) return;
		const u = this._inputs[a];
		let h = null,
			d;
		this.node.io.connections && (d = this.node.io.connections.inputConnection(a)),
			d && (h = d.outputIndex()),
			(t !== u || c != h) &&
				(u != null && this._depends_on_inputs && l.removeGraphInput(u),
				t != null
					? l.addGraphInput(t)
						? (this._depends_on_inputs || l.removeGraphInput(t),
						  d && d.disconnect({setInput: !1}),
						  (this._inputs[a] = t),
						  new gx(t, this.node, c, a))
						: console.warn(`cannot connect ${t.path()} to ${this.node.path()}`)
					: ((this._inputs[a] = null), d && d.disconnect({setInput: !1})),
				this._run_on_set_input_hooks(),
				l.setSuccessorsDirty(),
				this.node.emit(mn.INPUTS_UPDATED));
	}
	input(e) {
		return this._inputs[e];
	}
	named_input(e) {
		if (this.hasNamedInputs()) {
			const t = this.getInputIndex(e);
			return this._inputs[t];
		} else return null;
	}
	named_input_connection_point(e) {
		if (this.hasNamedInputs() && this._named_input_connection_points) {
			const t = this.getInputIndex(e);
			return this._named_input_connection_points[t];
		}
	}
	has_named_input(e) {
		return this.getNamedInputIndex(e) >= 0;
	}
	hasInput(e) {
		return this._inputs[e] != null;
	}
	inputs() {
		return this._inputs;
	}
	initInputsClonedState(e) {
		this._clonedStatesController ||
			((this._clonedStatesController = new Zz(this)), this._clonedStatesController.initInputsClonedState(e));
	}
	overrideClonedStateAllowed() {
		var e;
		return ((e = this._clonedStatesController) == null ? void 0 : e.overrideClonedStateAllowed()) || !1;
	}
	overrideClonedState(e) {
		var t;
		(t = this._clonedStatesController) == null || t.overrideClonedState(e);
	}
	clonedStateOverriden() {
		var e;
		return ((e = this._clonedStatesController) == null ? void 0 : e.overriden()) || !1;
	}
	cloneRequired(e) {
		var t;
		const i = (t = this._clonedStatesController) == null ? void 0 : t.cloneRequiredState(e);
		return i ?? !0;
	}
	cloneRequiredStates() {
		var e;
		const t = (e = this._clonedStatesController) == null ? void 0 : e.cloneRequiredStates();
		return t ?? !0;
	}
	_updateCloneRequiredState() {
		var e;
		(e = this._clonedStatesController) == null || e.updateCloneRequiredState();
	}
	add_on_set_input_hook(e, t) {
		(this._on_update_hooks = this._on_update_hooks || []),
			(this._on_update_hook_names = this._on_update_hook_names || []),
			this._on_update_hook_names.includes(e)
				? console.warn(`hook with name ${e} already exists`, this.node)
				: (this._on_update_hooks.push(t), this._on_update_hook_names.push(e));
	}
	_run_on_set_input_hooks() {
		if (this._on_update_hooks) for (const e of this._on_update_hooks) e();
	}
}
const KC = [],
	_p = [];
class Jz {
	constructor(e) {
		(this.node = e),
			(this._has_outputs = !1),
			(this._has_named_outputs = !1),
			(this._connections = []),
			(this._onPlayingStateChangeBound = this._onPlayingStateChange.bind(this)),
			(this._outputIndexCache = new Map()),
			this.node.scene().timeController.onPlayingStateChange(this._onPlayingStateChangeBound);
	}
	_onPlayingStateChange() {
		this._clearCache();
	}
	_clearCache() {
		this._outputIndexCache.clear();
	}
	dispose() {
		this.node.scene().timeController.removeOnPlayingStateChange(this._onPlayingStateChangeBound),
			this._named_output_connection_points &&
				this._named_output_connection_points.splice(0, this._named_output_connection_points.length);
	}
	setHasOneOutput() {
		this._has_outputs = !0;
	}
	setHasNoOutput() {
		this._has_outputs = !1;
	}
	hasOutputs() {
		return this._has_outputs;
	}
	hasNamedOutputs() {
		return this._has_named_outputs;
	}
	hasNamedOutput(e) {
		return this.getNamedOutputIndex(e) >= 0;
	}
	namedOutputConnectionPoints() {
		return this._named_output_connection_points;
	}
	namedOutputConnection(e) {
		if (this._named_output_connection_points) return this._named_output_connection_points[e];
	}
	getNamedOutputIndex(e) {
		if (this._named_output_connection_points) {
			let t = 0;
			for (const i of this._named_output_connection_points) {
				if (i && i.name() == e) return t;
				t++;
			}
		}
		return -1;
	}
	getOutputIndex(e) {
		let t = this._outputIndexCache.get(e);
		return t == null && ((t = this._getOutputIndex(e)), this._outputIndexCache.set(e, t)), t;
	}
	_getOutputIndex(e) {
		return e != null
			? qe(e)
				? this.hasNamedOutputs()
					? this.getNamedOutputIndex(e)
					: (console.warn(`node ${this.node.path()} has no named outputs`), -1)
				: e
			: -1;
	}
	namedOutputConnectionPointsByName(e) {
		if (this._named_output_connection_points) {
			for (const t of this._named_output_connection_points) if ((t == null ? void 0 : t.name()) == e) return t;
		}
	}
	setNamedOutputConnectionPoints(e, t = !0) {
		(this._has_named_outputs = !0), this.node.io.connections.outputConnections(this._connections);
		for (const i of this._connections) i && i.outputIndex() >= e.length && i.disconnect({setInput: !0});
		(this._named_output_connection_points = e),
			t && this.node.scene() && this.node.setDirty(this.node),
			this.node.emit(mn.NAMED_OUTPUTS_UPDATED);
	}
	used_output_names() {
		var e;
		const t = [],
			i = this.node.io.connections;
		if (i) {
			i.outputConnections(this._connections),
				gr(
					this._connections.map((r) => (r ? r.outputIndex() : null)),
					KC
				),
				(_p.length = 0);
			for (const r of KC) je(r) && _p.push(r);
			const s = this.namedOutputConnectionPoints();
			if (s)
				for (const r of _p) {
					const o = (e = s[r]) == null ? void 0 : e.name();
					o && t.push(o);
				}
		}
		return t;
	}
}
class eH {
	constructor(e) {
		(this._node = e), (this._outputConnections = new Map());
	}
	initInputs() {
		const e = this._node.io.inputs.maxInputsCount();
		for (this._inputConnections = this._inputConnections || new Array(e); this._inputConnections.length < e; )
			this._inputConnections.push(void 0);
	}
	dispose() {
		this._inputConnections && this._inputConnections.splice(0, this._inputConnections.length),
			this._outputConnections && this._outputConnections.clear();
	}
	addInputConnection(e) {
		this._inputConnections
			? (this._inputConnections[e.inputIndex()] = e)
			: console.warn('input connections array not initialized');
	}
	removeInputConnection(e) {
		if (this._inputConnections)
			if (e.inputIndex() < this._inputConnections.length) {
				this._inputConnections[e.inputIndex()] = void 0;
				let t = !0;
				for (let i = e.inputIndex(); i < this._inputConnections.length; i++)
					this._inputConnections[i] && (t = !1);
				t && (this._inputConnections = this._inputConnections.slice(0, e.inputIndex()));
			} else console.warn(`attempt to remove an input connection at index ${e.inputIndex()}`);
		else console.warn('input connections array not initialized');
	}
	inputConnection(e) {
		if (this._inputConnections) return this._inputConnections[e];
	}
	firstInputConnection() {
		if (this._inputConnections) {
			for (const e of this._inputConnections) if (e) return e;
		}
		return null;
	}
	inputConnections() {
		return this._inputConnections;
	}
	existingInputConnections() {
		const e = this._inputConnections;
		if (e) for (; e.length > 1 && e[e.length - 1] === void 0; ) e.pop();
		return e;
	}
	addOutputConnection(e) {
		const t = e.outputIndex(),
			i = e.id();
		let s = this._outputConnections.get(t);
		s || ((s = new Map()), this._outputConnections.set(t, s)), s.set(i, e);
	}
	removeOutputConnection(e) {
		const t = e.outputIndex(),
			i = e.id();
		let s = this._outputConnections.get(t);
		s && s.delete(i);
	}
	outputConnectionsByOutputIndex(e) {
		return this._outputConnections.get(e);
	}
	outputConnections(e) {
		return (
			(e.length = 0),
			this._outputConnections.forEach((t, i) => {
				t.forEach((s, r) => {
					s && e.push(s);
				});
			}),
			e
		);
	}
}
class tH {
	constructor(e) {
		this._node = e;
	}
	set_in(e) {
		this._in = e;
	}
	set_out(e) {
		this._out = e;
	}
	clear() {
		(this._in = void 0), (this._out = void 0);
	}
	in() {
		return this._in;
	}
	out() {
		return this._out;
	}
}
var xt = ((n) => (
	(n.BOOL = 'bool'),
	(n.INT = 'int'),
	(n.FLOAT = 'float'),
	(n.MAT3 = 'mat3'),
	(n.MAT4 = 'mat4'),
	(n.VEC2 = 'vec2'),
	(n.VEC3 = 'vec3'),
	(n.VEC4 = 'vec4'),
	(n.SAMPLER_2D = 'sampler2D'),
	(n.SAMPLER_2D_ARRAY = 'sampler2DArray'),
	(n.SAMPLER_3D = 'sampler3D'),
	(n.SAMPLER_CUBE = 'samplerCube'),
	(n.SSS_MODEL = 'SSSModel'),
	(n.SDF_CONTEXT = 'SDFContext'),
	(n.SDF_MATERIAL = 'SDFMaterial'),
	n
))(xt || {});
const nH = {
		bool: j.BOOLEAN,
		int: j.INTEGER,
		float: j.FLOAT,
		vec2: j.VECTOR2,
		vec3: j.VECTOR3,
		vec4: j.VECTOR4,
		mat3: j.BUTTON,
		mat4: j.BUTTON,
		sampler2D: j.RAMP,
		sampler2DArray: j.RAMP,
		sampler3D: j.RAMP,
		samplerCube: j.RAMP,
		SSSModel: j.STRING,
		SDFContext: j.STRING,
		SDFMaterial: j.STRING,
	},
	iH = {
		[j.BOOLEAN]: 'bool',
		[j.COLOR]: 'vec3',
		[j.INTEGER]: 'int',
		[j.FLOAT]: 'float',
		[j.FOLDER]: void 0,
		[j.VECTOR2]: 'vec2',
		[j.VECTOR3]: 'vec3',
		[j.VECTOR4]: 'vec4',
		[j.BUTTON]: void 0,
		[j.PARAM_PATH]: void 0,
		[j.NODE_PATH]: void 0,
		[j.RAMP]: void 0,
		[j.STRING]: void 0,
	},
	sH = {
		bool: !1,
		int: 0,
		float: 0,
		vec2: [0, 0],
		vec3: [0, 0, 0],
		vec4: [0, 0, 0, 0],
		mat3: null,
		mat4: null,
		sampler2D: ns.DEFAULT_VALUE_JSON,
		sampler2DArray: ns.DEFAULT_VALUE_JSON,
		sampler3D: ns.DEFAULT_VALUE_JSON,
		samplerCube: ns.DEFAULT_VALUE_JSON,
		SSSModel: 'SSSModel()',
		SDFContext: 'DefaultSDFContext()',
		SDFMaterial: 'DefaultSDFMaterial()',
	};
class rH extends um {
	constructor(e, t, i) {
		super(e, t),
			(this._name = e),
			(this._type = t),
			(this._init_value = i),
			(this._init_value = this._init_value || sH[this._type]);
	}
	type() {
		return this._type;
	}
	are_types_matched(e, t) {
		return e == t;
	}
	get param_type() {
		return nH[this._type];
	}
	get init_value() {
		return this._init_value;
	}
	toJSON() {
		return (this._json = this._json || this._createJSON());
	}
	_createJSON() {
		return {name: this._name, type: this._type};
	}
}
var xc = ((n) => (
	(n.BASE = 'base'), (n.DRAG = 'drag'), (n.KEYBOARD = 'keyboard'), (n.MOUSE = 'mouse'), (n.POINTER = 'pointer'), n
))(xc || {});
class Du extends um {
	constructor(e, t, i) {
		super(e, t), (this._name = e), (this._type = t), (this._event_listener = i);
	}
	type() {
		return this._type;
	}
	get param_type() {
		return j.FLOAT;
	}
	are_types_matched(e, t) {
		return t == 'base' ? !0 : e == t;
	}
	get event_listener() {
		return this._event_listener;
	}
	toJSON() {
		return (this._json = this._json || this._createJSON());
	}
	_createJSON() {
		return {name: this._name, type: this._type, isArray: !1};
	}
}
const oH = {
	[fe.ANIM]: void 0,
	[fe.AUDIO]: void 0,
	[fe.COP]: void 0,
	[fe.EVENT]: xc.BASE,
	[fe.GL]: xt.FLOAT,
	[fe.JS]: yn.FLOAT,
	[fe.MANAGER]: void 0,
	[fe.MAT]: void 0,
	[fe.OBJ]: void 0,
	[fe.POST]: void 0,
	[fe.ROP]: void 0,
	[fe.SOP]: void 0,
};
function vx(n, e, t) {
	switch (n) {
		case fe.EVENT:
			return new Du(e, t);
		case fe.GL:
			return new rH(e, t);
		case fe.JS:
			return new j3(e, t);
		default:
			return;
	}
}
function aH(n) {
	switch (n) {
		case fe.EVENT:
			return;
		case fe.GL:
			return iH;
		case fe.JS:
			return H3;
		default:
			return;
	}
}
class cH {
	constructor(e, t) {
		(this.node = e),
			(this._context = t),
			(this._raw_input_serialized_by_param_name = new Map()),
			(this._default_value_serialized_by_param_name = new Map()),
			(this._initialized = !1);
	}
	initializeNode() {
		if (this._initialized) {
			console.warn('already initialized', this.node);
			return;
		}
		(this._initialized = !0),
			this.node.params.onParamsCreated('createInputsFromParams', this._createInputsFromParams.bind(this));
	}
	initialized() {
		return this._initialized;
	}
	_createInputsFromParams() {
		const e = aH(this._context);
		if (!e) return;
		const t = [];
		for (const i of this.node.params.names) {
			let s = !0;
			if (
				(this._inputlessParamNames &&
					this._inputlessParamNames.length > 0 &&
					this._inputlessParamNames.includes(i) &&
					(s = !1),
				s && this.node.params.has(i))
			) {
				const r = this.node.params.get(i);
				if (r && !r.parentParam()) {
					const o = e[r.type()];
					if (o) {
						const a = vx(this._context, r.name(), o);
						a && t.push(a);
					}
				}
			}
		}
		this.node.io.inputs.setNamedInputConnectionPoints(t);
	}
	setInputlessParamNames(e) {
		return (this._inputlessParamNames = e);
	}
	createSpareParameters() {
		if (this.node.scene().loadingController.isLoading()) return;
		const e = this.node.params.spare_names,
			t = {};
		for (const s of e)
			if (this.node.params.has(s)) {
				const r = this.node.params.get(s);
				r &&
					(this._raw_input_serialized_by_param_name.set(s, r.rawInputSerialized()),
					this._default_value_serialized_by_param_name.set(s, r.defaultValueSerialized()),
					(t.namesToDelete = t.namesToDelete || []),
					t.namesToDelete.push(s));
			}
		const i = this.node.io.inputs.namedInputConnectionPoints();
		if (i) {
			let s = 0;
			for (const r of i) {
				if (r) {
					const o = this.node.io.inputs.input(s) != null,
						a = r.name(),
						c = r.param_type;
					if (c) {
						let l = r.init_value;
						const u = this._default_value_serialized_by_param_name.get(a);
						let h = this.node.paramDefaultValue(a);
						if ((h != null ? (l = h) : u != null ? (l = u) : (l = r.init_value), ft(r.init_value)))
							if (je(l)) {
								const d = new Array(r.init_value.length);
								d.fill(l), (l = d);
							} else ft(l) && l.length == r.init_value.length && u != null && (l = r.init_value);
						l != null &&
							c != j.BUTTON &&
							((t.toAdd = t.toAdd || []),
							t.toAdd.push({
								name: a,
								type: c,
								initValue: Ju(l),
								rawInput: Ju(l),
								options: {
									spare: !0,
									editable: !o,
									computeOnDirty: c != j.PARAM_PATH,
									dependentOnFoundParam: !1,
								},
							}));
					}
				}
				s++;
			}
		}
		this.node.params.updateParams(t);
		for (const s of this.node.params.spare)
			if (!s.parentParam()) {
				const r = this._raw_input_serialized_by_param_name.get(s.name());
				r && s.set(r);
			}
	}
}
function au(n, e) {
	if (n.length != e.length) return !1;
	for (let t = 0; t < n.length; t++) if (n[t] != e[t]) return !1;
	return !0;
}
class lH {
	constructor(e, t) {
		(this.node = e),
			(this._context = t),
			(this._create_spare_params_from_inputs = !0),
			(this._functions_overridden = !1),
			(this._input_name_function = (i) => `in${i}`),
			(this._output_name_function = (i) => (i == 0 ? 'val' : `val${i}`)),
			(this._expected_input_types_function = () => {
				const i = this.first_input_connection_type() || this.default_connection_type();
				return [i, i];
			}),
			(this._expected_output_types_function = () => [this._expected_input_types_function()[0]]),
			(this._update_signature_if_required_bound = this.update_signature_if_required.bind(this)),
			(this._initialized = !1),
			(this._successorsCopy = []),
			(this._spare_params_controller = new cH(this.node, this._context));
	}
	default_connection_type() {
		return oH[this._context];
	}
	createConnectionPoint(e, t) {
		return vx(this._context, e, t);
	}
	functions_overridden() {
		return this._functions_overridden;
	}
	initialized() {
		return this._initialized;
	}
	set_create_spare_params_from_inputs(e) {
		this._create_spare_params_from_inputs = e;
	}
	set_input_name_function(e) {
		this._initialize_if_required(), (this._input_name_function = e);
	}
	set_output_name_function(e) {
		this._initialize_if_required(), (this._output_name_function = e);
	}
	set_expected_input_types_function(e) {
		this._initialize_if_required(), (this._functions_overridden = !0), (this._expected_input_types_function = e);
	}
	set_expected_output_types_function(e) {
		this._initialize_if_required(), (this._functions_overridden = !0), (this._expected_output_types_function = e);
	}
	input_name(e) {
		return this._wrapped_input_name_function(e);
	}
	output_name(e) {
		return this._wrapped_output_name_function(e);
	}
	initializeNode() {
		if (this._initialized) {
			console.warn('already initialized', this.node);
			return;
		}
		(this._initialized = !0),
			this.node.io.inputs.add_on_set_input_hook(
				'_update_signature_if_required',
				this._update_signature_if_required_bound
			),
			this.node.params.addOnSceneLoadHook(
				'_update_signature_if_required',
				this._update_signature_if_required_bound
			),
			this.node.params.onParamsCreated(
				'_update_signature_if_required_bound',
				this._update_signature_if_required_bound
			),
			this.node.addPostDirtyHook('_update_signature_if_required', this._update_signature_if_required_bound),
			this._spare_params_controller.initialized() || this._spare_params_controller.initializeNode();
	}
	_initialize_if_required() {
		this._initialized || this.initializeNode();
	}
	get spare_params() {
		return this._spare_params_controller;
	}
	update_signature_if_required() {
		(!this.node.lifecycle.creationCompleted() || !this._inputsOutputsMatchExpectations()) &&
			(this.update_connection_types(),
			this.node.removeDirtyState(),
			this.node.scene().loadingController.isLoading() || this.make_successors_update_signatures());
	}
	make_successors_update_signatures() {
		const e = this.node.graphAllSuccessors();
		if ((os(e, this._successorsCopy), this.node.childrenAllowed())) {
			const t = this.node.nodesByType(Af.INPUT),
				i = this.node.nodesByType(Af.OUTPUT);
			for (const s of t) this._successorsCopy.push(s);
			for (const s of i) this._successorsCopy.push(s);
		}
		for (const t of this._successorsCopy) {
			const i = t;
			i.io &&
				i.io.has_connection_points_controller &&
				i.io.connection_points.initialized() &&
				i.io.connection_points.update_signature_if_required();
		}
	}
	update_connection_types() {
		const t = this._wrapped_expected_input_types_function(),
			i = this._wrapped_expected_output_types_function(),
			s = [];
		for (let o = 0; o < t.length; o++) {
			const a = t[o],
				c = this.createConnectionPoint(this._wrapped_input_name_function(o), a);
			s.push(c);
		}
		const r = [];
		for (let o = 0; o < i.length; o++) {
			const a = i[o],
				c = this.createConnectionPoint(this._wrapped_output_name_function(o), a);
			r.push(c);
		}
		this.node.io.inputs.setNamedInputConnectionPoints(s),
			this.node.io.outputs.setNamedOutputConnectionPoints(r, !1),
			this._create_spare_params_from_inputs && this._spare_params_controller.createSpareParameters();
	}
	_inputsOutputsMatchExpectations() {
		const e = this.node.io.inputs.namedInputConnectionPoints(),
			t = this.node.io.outputs.namedOutputConnectionPoints();
		if (!(e && t)) return !1;
		const i = au(
				e.filter((a) => !(a != null && a.inNodeDefinition())).map((a) => (a == null ? void 0 : a.type())),
				this._wrapped_expected_input_types_function()
			),
			s = au(
				t.map((a) => (a == null ? void 0 : a.type())),
				this._wrapped_expected_output_types_function()
			),
			r = au(
				e.filter((a) => !(a != null && a.inNodeDefinition())).map((a) => (a == null ? void 0 : a.name())),
				e
					.filter((a) => !(a != null && a.inNodeDefinition()))
					.map((a, c) => this._wrapped_input_name_function(c))
			),
			o = au(
				t.map((a) => (a == null ? void 0 : a.name())),
				t.map((a, c) => this._wrapped_output_name_function(c))
			);
		return i && s && r && o;
	}
	_wrapped_expected_input_types_function() {
		if (this.node.scene().loadingController.isLoading()) {
			const e = this.node.io.saved_connection_points_data.in();
			if (e) return e.map((t) => t.type);
		}
		return this._expected_input_types_function();
	}
	_wrapped_expected_output_types_function() {
		if (this.node.scene().loadingController.isLoading()) {
			const e = this.node.io.saved_connection_points_data.out();
			if (e) return e.map((t) => t.type);
		}
		return this._expected_output_types_function();
	}
	_wrapped_input_name_function(e) {
		if (this.node.scene().loadingController.isLoading()) {
			const t = this.node.io.saved_connection_points_data.in();
			if (t) return t[e].name;
		}
		return this._input_name_function(e);
	}
	_wrapped_output_name_function(e) {
		if (this.node.scene().loadingController.isLoading()) {
			const t = this.node.io.saved_connection_points_data.out();
			if (t) return t[e].name;
		}
		return this._output_name_function(e);
	}
	first_input_connection_type() {
		return this.input_connection_type(0);
	}
	input_connection_type(e) {
		const t = this.node.io.connections.inputConnections();
		if (!t) return;
		const i = t[e];
		if (!i) return;
		const s = i.srcConnectionPoint();
		if (s) return s.type();
	}
}
class uH {
	constructor(e) {
		(this.node = e), (this._connections = new eH(this.node));
	}
	dispose() {
		this.inputs.dispose(), this.outputs.dispose(), this.connections.dispose();
	}
	get connections() {
		return this._connections;
	}
	get inputs() {
		return (this._inputs = this._inputs || new Qz(this.node));
	}
	hasInputs() {
		return this._inputs != null;
	}
	get outputs() {
		return (this._outputs = this._outputs || new Jz(this.node));
	}
	has_outputs() {
		return this._outputs != null;
	}
	get connection_points() {
		return (this._connection_points = this._connection_points || new lH(this.node, this.node.context()));
	}
	get has_connection_points_controller() {
		return this._connection_points != null;
	}
	get saved_connection_points_data() {
		return (this._saved_connection_points_data = this._saved_connection_points_data || new tH(this.node));
	}
	clear_saved_connection_points_data() {
		this._saved_connection_points_data &&
			(this._saved_connection_points_data.clear(), (this._saved_connection_points_data = void 0));
	}
}
class hH {
	constructor() {}
}
const dH = 'default';
class wi extends ai {
	constructor(e, t = 'BaseNode', i) {
		super(e, t),
			(this.createOptions = i),
			(this.containerController = new Az(this)),
			(this.pv = new qz()),
			(this.p = new hH()),
			(this._initialized = !1);
		const s = i == null ? void 0 : i.serializerClass;
		s && (this._serializer = new s(this));
	}
	copy_param_values(e) {
		const t = this.params.non_spare;
		for (const i of t) {
			const s = e.params.get(i.name());
			s && i.copyValue(s);
		}
	}
	dataType() {
		return dH;
	}
	get parentController() {
		return (this._parentController = this._parentController || new FG(this));
	}
	static displayedInputNames() {}
	displayedInputNames() {
		return this.constructor.displayedInputNames();
	}
	childrenControllerContext() {
		return this._childrenControllerContext;
	}
	_create_childrenController() {
		if (this._childrenControllerContext) return new HG(this, this._childrenControllerContext);
	}
	get childrenController() {
		return (this._childrenController = this._childrenController || this._create_childrenController());
	}
	childrenAllowed() {
		return this._childrenControllerContext != null;
	}
	sceneReadonly() {
		return !1;
	}
	get uiData() {
		return (this._uiData = this._uiData || new TG(this));
	}
	get states() {
		return (this._states = this._states || new UG(this));
	}
	get lifecycle() {
		return (this._lifecycle = this._lifecycle || new WG(this));
	}
	get serializer() {
		return this._serializer;
	}
	get cookController() {
		return (this._cookController = this._cookController || new wz(this));
	}
	get io() {
		return (this._io = this._io || new uH(this));
	}
	get nameController() {
		return (this._nameController = this._nameController || new fx(this));
	}
	setName(e) {
		this.nameController.setName(e);
	}
	_setCoreName(e) {
		this._name = e;
	}
	get params() {
		return (this._paramsController = this._paramsController || new $z(this));
	}
	initializeBaseAndNode() {
		var e;
		this._initialized
			? console.warn('node already initialized')
			: ((this._initialized = !0),
			  (e = this.displayNodeController) == null || e.initializeNode(),
			  this.initializeBaseNode(),
			  this.initializeNode(),
			  this.polyNodeController && this.polyNodeController.initializeNode());
	}
	initializeBaseNode() {}
	initializeNode() {}
	static type() {
		throw 'type to be overriden';
	}
	type() {
		return this.constructor.type();
	}
	static context() {
		throw (console.error('node has no node_context', this), 'context requires override');
	}
	context() {
		return this.constructor.context();
	}
	static requireWebGL2() {
		return !1;
	}
	requireWebGL2() {
		return this.constructor.requireWebGL2();
	}
	setParent(e) {
		this.parentController.setParent(e);
	}
	parent() {
		return this.parentController.parent();
	}
	insideALockedParent() {
		return this.lockedParent() != null;
	}
	lockedOrInsideALockedParent() {
		var e;
		return ((e = this.polyNodeController) == null ? void 0 : e.locked()) || this.insideALockedParent();
	}
	selfOrLockedParent() {
		var e;
		return (e = this.polyNodeController) != null && e.locked() ? this : this.lockedParent();
	}
	lockedParent() {
		const e = this.parent();
		return e ? (e.polyNodeController && e.polyNodeController.locked() ? e : e.lockedParent()) : null;
	}
	firstAncestorWithContext(e) {
		return this.parentController.firstAncestorWithContext(e);
	}
	root() {
		return this._scene.root();
	}
	path(e) {
		return this.parentController.path(e);
	}
	createParams() {}
	addParam(e, t, i, s) {
		var r;
		return (r = this._paramsController) == null ? void 0 : r.addParam(e, t, i, s);
	}
	paramDefaultValue(e) {
		return null;
	}
	cook(e) {
		return null;
	}
	onCookEnd(e, t) {
		this.cookController.registerOnCookEnd(e, t);
	}
	async compute() {
		var e, t;
		return this.isDirty() || ((t = (e = this.flags) == null ? void 0 : e.bypass) != null && t.active())
			? await this.containerController.compute()
			: this.containerController.container();
	}
	_setContainer(e) {
		this.containerController.container().set_content(e), this.cookController.endCook();
	}
	createNode(e, t) {
		var i;
		return (i = this.childrenController) == null ? void 0 : i.createNode(e, t);
	}
	createOperationContainer(e, t, i) {
		var s;
		return (s = this.childrenController) == null ? void 0 : s.createOperationContainer(e, t, i);
	}
	removeNode(e) {
		var t;
		(t = this.childrenController) == null || t.removeNode(e);
	}
	dispose() {
		super.dispose(),
			this.setParent(null),
			this._nameController && (this._nameController.dispose(), (this._nameController = void 0)),
			this._io && (this._io.dispose(), (this._io = void 0)),
			this._lifecycle && (this._lifecycle.dispose(), (this._lifecycle = void 0)),
			this.displayNodeController && this.displayNodeController.dispose(),
			this._childrenController && (this._childrenController.dispose(), (this._childrenController = void 0)),
			this._paramsController && (this._paramsController.dispose(), (this._paramsController = void 0)),
			this._cookController && (this._cookController.dispose(), (this._cookController = void 0)),
			this._serializer && (this._serializer.dispose(), (this._serializer = void 0)),
			this._uiData && (this._uiData.dispose(), (this._uiData = void 0));
	}
	children() {
		var e;
		return ((e = this.childrenController) == null ? void 0 : e.children()) || [];
	}
	node(e) {
		var t;
		return ((t = this.parentController) == null ? void 0 : t.findNode(e)) || null;
	}
	nodeSibling(e) {
		var t;
		const i = this.parent();
		if (i) {
			const s = (t = i.childrenController) == null ? void 0 : t.childByName(e);
			if (s) return s;
		}
		return null;
	}
	nodesByType(e) {
		var t;
		return ((t = this.childrenController) == null ? void 0 : t.nodesByType(e)) || [];
	}
	setInput(e, t, i, s) {
		this.io.inputs.setInput(e, t, i, s);
	}
	emit(e, t = null) {
		this.scene().dispatchController.dispatch(this, e, t);
	}
	_eventsDispatcher() {
		return (this.__eventsDispatcher = this.__eventsDispatcher || new cs());
	}
	dispatchEvent(e) {
		this._eventsDispatcher().dispatchEvent(e);
	}
	addEventListener(e, t) {
		this._eventsDispatcher().addEventListener(e, t);
	}
	removeEventListener(e, t) {
		this._eventsDispatcher().removeEventListener(e, t);
	}
	toJSON(e = !1) {
		if (this._serializer) return this._serializer.toJSON(e);
	}
	requiredModules() {}
	usedAssembler() {}
	integrationData() {}
	processError(e) {
		return e;
	}
	updateObjectOnAdd(e, t) {}
	updateObjectOnRemove(e, t) {}
}
function Jo(n, e) {
	e(n);
	const t = n.children.length;
	for (let i = 0; i < t; i++) {
		const s = n.children[i];
		s && Jo(s, e);
	}
}
const pH = 'pointsCountFromObject',
	fH = 'corePrimitiveClassFactory',
	Ex = {[pH]: qh, [fH]: _m, ActorEvaluator: MG, computed: xI, ref: _i, watch: wS},
	_H = Object.keys(Ex);
_H.map((n) => Ex[n]);
const mH = 'ActorCompilationController-DUMMY';
function gH() {
	const n = new kt();
	return (n.name = mH), n;
}
const oh = gH();
function Cx(n) {
	var e;
	return (
		n.root().mainCameraController.cameraSync() ||
		((e = n.viewersRegister.lastRenderedViewer()) == null ? void 0 : e.camera()) ||
		n.root().mainCameraController.dummyPerspectiveCamera()
	);
}
const vH = `varying vec2 vUv;

void main() {
	vUv = uv;
	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}`,
	EH = `#include <packing>

varying vec2 vUv;
uniform sampler2D tDiffuse;
uniform sampler2D tDepth;
uniform float cameraNear;
uniform float cameraFar;


float readDepth( sampler2D depthSampler, vec2 coord ) {
	float fragCoordZ = texture2D( depthSampler, coord ).x;
	float viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );
	return viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );
}

void main() {
	float alpha = texture2D( tDiffuse, vUv ).a;
	float depth = readDepth( tDepth, vUv );

	gl_FragColor.rgb = vec3( depth );
	gl_FragColor.a = alpha;
}`;
function CH() {
	const n = new zb(-1, 1, 1, -1, 0, 1),
		e = new ti({
			vertexShader: vH,
			fragmentShader: EH,
			uniforms: {
				cameraNear: {value: n.near},
				cameraFar: {value: n.far},
				tDiffuse: {value: null},
				tDepth: {value: null},
			},
		}),
		t = new xh(2, 2),
		i = new On(t, e),
		s = new Th();
	return s.add(i), {scene: s, camera: n, material: e};
}
function yH(n, e, t) {
	e.isPerspectiveCamera || e.isOrthographicCamera
		? ((n.material.uniforms.cameraNear.value = e.near),
		  (n.material.uniforms.cameraFar.value = e.far),
		  (n.material.uniforms.tDiffuse.value = t.texture),
		  (n.material.uniforms.tDepth.value = t.depthTexture))
		: console.warn('camera is not a PerspectiveCamera or OrthographicCamera');
}
function bH(n, e) {
	(e.x = 0.5 * (n.x + 1)), (e.y = 0.5 * (1 - n.y));
}
function SH() {
	const n = new E_(1, 1);
	return (n.type = Ns), n;
}
class AH {
	constructor() {
		(this._colorWriteRenderTarget = new Gi(1, 1, {
			minFilter: qt,
			magFilter: qt,
			format: wn,
			type: jn,
			colorSpace: tn,
			depthTexture: SH(),
		})),
			(this._depthReadRenderTarget = new Gi(1, 1, {
				minFilter: qt,
				magFilter: qt,
				format: wn,
				type: jn,
				colorSpace: tn,
			})),
			(this._renderScene = new Th()),
			(this._depthReadSetup = CH()),
			(this._restoreContext = {object: {parent: null}, renderer: {toneMapping: Ci, outputColorSpace: tn}}),
			(this._read = new Float32Array(4));
	}
	renderColor(e, t, i, s, r, o, a) {
		return this._doRender(e, t, s, i, r, o, a, !1), a;
	}
	renderDepth(e, t, i, s, r, o) {
		return this._doRender(e, t, i, null, s, r, o, !0), o;
	}
	_doRender(e, t, i, s, r, o, a, c) {
		const l = e.renderersRegister.lastRegisteredRenderer();
		return l
			? l instanceof ss
				? (i == null && (i = Cx(e)),
				  this._prepare(t, s, r, l),
				  this._render(o, i, l, a, c),
				  this._restore(t, l),
				  a)
				: (console.log('renderPixel: renderer found is not WebGLRenderer'), a)
			: a;
	}
	_prepare(e, t, i, s) {
		(this._restoreContext.renderer.outputColorSpace = s.outputColorSpace),
			(this._restoreContext.renderer.toneMapping = s.toneMapping),
			(this._restoreContext.object.parent = e.parent),
			(this._renderScene.background = i),
			(this._renderScene.overrideMaterial = t || null),
			this._renderScene.attach(e),
			(s.toneMapping = Ci),
			(s.outputColorSpace = tn);
	}
	_render(e, t, i, s, r) {
		t.setViewOffset(
			i.domElement.width,
			i.domElement.height,
			e.x * i.domElement.width,
			e.y * i.domElement.height,
			1,
			1
		),
			i.setRenderTarget(this._colorWriteRenderTarget),
			i.clear(),
			i.render(this._renderScene, t),
			r
				? (yH(this._depthReadSetup, t, this._colorWriteRenderTarget),
				  i.setRenderTarget(this._depthReadRenderTarget),
				  i.render(this._depthReadSetup.scene, this._depthReadSetup.camera),
				  i.readRenderTargetPixels(this._depthReadRenderTarget, 0, 0, 1, 1, this._read))
				: i.readRenderTargetPixels(this._colorWriteRenderTarget, 0, 0, 1, 1, this._read),
			i.setRenderTarget(null),
			t.clearViewOffset(),
			s.fromArray(this._read);
	}
	_restore(e, t) {
		var i;
		(t.outputColorSpace = this._restoreContext.renderer.outputColorSpace),
			(t.toneMapping = this._restoreContext.renderer.toneMapping),
			(i = this._restoreContext.object.parent) == null || i.attach(e);
	}
}
var bi = ((n) => ((n[(n.LEFT = 0)] = 'LEFT'), (n[(n.MIDDLE = 1)] = 'MIDDLE'), (n[(n.RIGHT = 2)] = 'RIGHT'), n))(
		bi || {}
	),
	Fi = ((n) => (
		(n[(n.NONE = 0)] = 'NONE'),
		(n[(n.LEFT = 1)] = 'LEFT'),
		(n[(n.RIGHT = 2)] = 'RIGHT'),
		(n[(n.LEFT_RIGHT = 3)] = 'LEFT_RIGHT'),
		(n[(n.MIDDLE = 4)] = 'MIDDLE'),
		(n[(n.LEFT_MIDDLE = 5)] = 'LEFT_MIDDLE'),
		(n[(n.MIDDLE_RIGHT = 6)] = 'MIDDLE_RIGHT'),
		(n[(n.LEFT_MIDDLE_RIGHT = 7)] = 'LEFT_MIDDLE_RIGHT'),
		n
	))(Fi || {});
function xH(n) {
	for (const e of n) if (e.cpu != null) return !0;
	return !1;
}
function ZC(n) {
	for (const e of n) if (e.gpu != null) return !0;
	return !1;
}
function MH(n) {
	for (const e of n) if (e.gpu != null && e.gpu.worldPosMaterial == null) return !0;
	return !1;
}
function TH(n, e) {
	return (
		n.traverseChildren == e.traverseChildren &&
		n.pointsThreshold == e.pointsThreshold &&
		n.lineThreshold == e.lineThreshold
	);
}
function RH(n) {
	let e;
	for (const t of n)
		if (t.cpu != null) {
			if (e == null) e = t.cpu;
			else if (!TH(e, t.cpu)) return !1;
		}
	return !0;
}
function wH(n, e) {
	(e.traverseChildren = !1), (e.pointsThreshold = -1), (e.lineThreshold = -1);
	for (const t of n)
		t.cpu != null &&
			(e.traverseChildren == !1 && t.cpu.traverseChildren == !0 && (e.traverseChildren = t.cpu.traverseChildren),
			e.pointsThreshold < t.cpu.pointsThreshold && (e.pointsThreshold = t.cpu.pointsThreshold),
			e.lineThreshold < t.cpu.lineThreshold && (e.lineThreshold = t.cpu.lineThreshold));
	return e;
}
function mp(n, e) {
	switch (n) {
		case 0:
			return e == !0;
		case 1:
			return !0;
		case 2:
			return e == !1;
	}
	zt.unreachable(n);
}
function ed(n, e) {
	return mp(n.modifier.ctrl, e.ctrl) && mp(n.modifier.shift, e.shift) && mp(n.modifier.alt, e.alt);
}
function Ba(n, e) {
	switch (e.button) {
		case bi.LEFT: {
			if (n.button.left == !1) return !1;
			break;
		}
		case bi.MIDDLE: {
			if (n.button.middle == !1) return !1;
			break;
		}
		case bi.RIGHT: {
			if (n.button.right == !1) return !1;
			break;
		}
	}
	return ed(n, e);
}
function yx(n, e) {
	switch (e.buttons) {
		case Fi.LEFT: {
			if (n.button.left == 2 || n.button.middle == 0 || n.button.right == 0) return !1;
			break;
		}
		case Fi.MIDDLE: {
			if (n.button.left == 0 || n.button.middle == 2 || n.button.right == 0) return !1;
			break;
		}
		case Fi.RIGHT: {
			if (n.button.left == 0 || n.button.middle == 0 || n.button.right == 2) return !1;
			break;
		}
		case Fi.LEFT_RIGHT: {
			if (n.button.left == 2 || n.button.middle == 0 || n.button.right == 2) return !1;
			break;
		}
		case Fi.LEFT_MIDDLE: {
			if (n.button.left == 2 || n.button.middle == 2 || n.button.right == 0) return !1;
			break;
		}
		case Fi.MIDDLE_RIGHT: {
			if (n.button.left == 0 || n.button.middle == 2 || n.button.right == 2) return !1;
			break;
		}
		case Fi.LEFT_MIDDLE_RIGHT: {
			if (n.button.left == 2 || n.button.middle == 2 || n.button.right == 2) return !1;
			break;
		}
	}
	return ed(n, e);
}
function OH(n, e) {
	for (const t of n) if (Ba(t.config, e)) return !0;
	return !1;
}
function PH(n, e) {
	for (const t of n) if (yx(t.config, e)) return !0;
	return !1;
}
function NH(n, e) {
	for (const t of n) if (ed(t.config, e)) return !0;
	return !1;
}
function ho(n, e) {
	(e.button = n.button || bi.LEFT), (e.ctrl = n.ctrlKey), (e.shift = n.shiftKey), (e.alt = n.altKey);
}
function xm(n, e) {
	(e.buttons = n.buttons || Fi.LEFT), (e.ctrl = n.ctrlKey), (e.shift = n.shiftKey), (e.alt = n.altKey);
}
const QC = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1},
	ah = {buttons: Fi.LEFT, ctrl: !1, shift: !1, alt: !1};
function il(n, e, t, i) {
	(i.length = 0), ho(n, QC);
	for (const s of e) {
		const r = t.get(s);
		r && OH(r, QC) && i.push(s);
	}
}
function IH(n, e, t, i) {
	(i.length = 0), xm(n, ah);
	for (const s of e) {
		const r = t.get(s);
		r && PH(r, ah) && i.push(s);
	}
}
function DH(n, e, t, i) {
	(i.length = 0), xm(n, ah);
	for (const s of e) {
		const r = t.get(s);
		r && NH(r, ah) && i.push(s);
	}
}
const gp = {pointsThreshold: 0.1, lineThreshold: 0.1},
	LH = {traverseChildren: !1, pointsThreshold: 0.1, lineThreshold: 0.1, intersectionRef: _i(null)};
function UH(n, e) {
	return n.distance - e.distance;
}
const vp = new re(),
	Pr = new Ke(),
	FH = new w(),
	JC = new w(),
	ey = new w(),
	Ep = new w();
class Gs {
	constructor(e) {
		(this.actorsManager = e),
			(this._objects = []),
			(this._propertiesListByObject = new Map()),
			(this._intersectsByObject = new WeakMap()),
			(this._closestIntersects = new Map()),
			(this._objectByClosestIntersect = new Map()),
			(this._closestIntersectsSorted = []),
			(this._renderPixelController = new AH()),
			(this._scene = e.scene);
	}
	objects(e) {
		os(this._objects, e);
	}
	_setIntersectedState(e, t) {
		if (e.length == 0) return;
		this._closestIntersects.clear(), this._objectByClosestIntersect.clear();
		const i = this._scene.eventsDispatcher.pointerEventsController,
			s = i.raycaster().value;
		i.updateRaycast(gp);
		const r = this._gpuObjectsPresent(),
			o = r == !0 ? Cx(this._scene) : null;
		if (r == !0 && o) {
			const c = i.cursor().value;
			bH(c, vp),
				this._gpuDepthBufferReadRequired() &&
					(FH.copy(s.ray.direction).normalize(),
					JC.set(c.x, c.y, -1).unproject(o),
					ey.set(c.x, c.y, 1).unproject(o));
		}
		for (const c of e) {
			t.set(c, !1);
			const l = this._propertiesListByObject.get(c),
				u = this._intersectsByObject.get(c);
			if (l && u) {
				if (((u.length = 0), xH(l))) {
					const h = RH(l) ? l[0].cpu : wH(l, LH);
					(gp.pointsThreshold = h.pointsThreshold),
						(gp.lineThreshold = h.lineThreshold),
						s.intersectObject(c, h.traverseChildren, u);
					const d = u[0];
					this._closestIntersects.set(c, d), d && this._objectByClosestIntersect.set(d, c);
				}
				if (ZC(l)) {
					const h = l[0].gpu;
					if (h && o) {
						const d = h.worldPosMaterial;
						if (
							(d != null
								? this._renderPixelController.renderColor(
										this._scene,
										c,
										h.worldPosMaterial,
										o,
										null,
										vp,
										Pr
								  )
								: this._renderPixelController.renderDepth(this._scene, c, o, null, vp, Pr),
							Pr.w > 0)
						) {
							d ? Ep.set(Pr.x, Pr.y, Pr.z) : Ep.copy(JC).lerp(ey, Pr.x);
							const m = {distance: Ep.distanceTo(s.ray.origin)};
							this._closestIntersects.set(c, m), m && this._objectByClosestIntersect.set(m, c);
						} else this._closestIntersects.set(c, void 0);
					}
				}
			}
		}
		this._closestIntersectsSorted.length = 0;
		for (const c of e) {
			const l = this._closestIntersects.get(c);
			l && this._closestIntersectsSorted.push(l);
			const u = this._propertiesListByObject.get(c);
			if (u)
				for (const h of u) {
					const d = h.cpu;
					if (d) d.intersectionRef.value = l || null;
					else {
						const p = h.gpu;
						p && (p.distanceRef.value = l ? l.distance : -1);
					}
				}
		}
		this._closestIntersectsSorted.sort(UH);
		let a = !1;
		for (const c of this._closestIntersectsSorted) {
			const l = this._objectByClosestIntersect.get(c);
			if (l) {
				const u = this._propertiesListByObject.get(l);
				if (u) {
					let h = !1;
					for (const d of u)
						(a == !1 || d.priority.skipIfObjectsInFront == !0) && t.set(l, !0),
							d.priority.blockObjectsBehind == !0 && (h = !0);
					a = h;
				}
			}
		}
		this._objectByClosestIntersect.clear();
	}
	_gpuObjectsPresent() {
		const e = this._objects;
		for (const t of e) {
			const i = this._propertiesListByObject.get(t);
			if (i && ZC(i)) return !0;
		}
		return !1;
	}
	_gpuDepthBufferReadRequired() {
		const e = this._objects;
		for (const t of e) {
			const i = this._propertiesListByObject.get(t);
			if (i && MH(i)) return !0;
		}
		return !1;
	}
	addPropertiesForObject(e, t) {
		if (e == oh) return;
		yi(this._propertiesListByObject, e, t),
			this._objects.indexOf(e) < 0 && (this._objects.push(e), this._intersectsByObject.set(e, []));
	}
	removePropertiesForObject(e, t) {
		if (e == oh) return;
		const i = this._propertiesListByObject.get(e);
		if (i) {
			const s = i.indexOf(t);
			if ((i.splice(s, 1), i.length == 0)) {
				const r = this._objects.indexOf(e);
				r >= 0 &&
					(this._objects.splice(r, 1),
					this._intersectsByObject.delete(e),
					this._propertiesListByObject.delete(e));
			}
		}
	}
}
class BH extends Gs {
	constructor() {
		super(...arguments), (this._propertiesListByObject = new Map()), (this._intersectedStateByObject = new Map());
	}
	process() {
		this._setIntersectedState(this._objects, this._intersectedStateByObject);
		const e = this._objects;
		for (const t of e) {
			const i = this._propertiesListByObject.get(t);
			if (i)
				for (const s of i) {
					const r = s.hover.hoveredStateRef.value,
						o = this._intersectedStateByObject.get(t) || !1;
					o != r && ((s.hover.hoveredStateRef.value = o), s.hover.onHoveredStateChange());
				}
		}
	}
}
const ty = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1};
class kH extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateByObject = new Map()),
			(this._objectsMatchingEventConfig = []);
	}
	onPointerdown(e) {
		if (
			(il(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
			this._objectsMatchingEventConfig.length == 0)
		)
			return;
		this._setIntersectedState(this._objectsMatchingEventConfig, this._intersectedStateByObject), ho(e, ty);
		const t = this._objects;
		for (const i of t) {
			const s = this._propertiesListByObject.get(i);
			if (s && this._intersectedStateByObject.get(i) == !0)
				for (const o of s) Ba(o.config, ty) && o.pointerdown.callback();
		}
	}
}
const ny = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1};
class VH extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateByObject = new Map()),
			(this._objectsMatchingEventConfig = []);
	}
	onPointerup(e) {
		if (
			(il(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
			this._objectsMatchingEventConfig.length == 0)
		)
			return;
		this._setIntersectedState(this._objectsMatchingEventConfig, this._intersectedStateByObject), ho(e, ny);
		const t = this._objects;
		for (const i of t) {
			const s = this._propertiesListByObject.get(i);
			if (s && this._intersectedStateByObject.get(i) == !0)
				for (const o of s) Ba(o.config, ny) && o.pointerup.callback();
		}
	}
}
const iy = new re(),
	Cp = new re();
class Mm {
	constructor() {
		(this._lastCursorPosSet = !1),
			(this._movedCursorDistance = 0),
			(this._lastCursorPos = new re()),
			(this._bound = {pointermove: this._onPointermove.bind(this)});
	}
	addPointermoveEventListener(e) {
		(this.cursorRef = e),
			(this._movedCursorDistance = 0),
			(this._lastCursorPosSet = !1),
			document.addEventListener('pointermove', this._bound.pointermove),
			document.addEventListener('touchmove', this._bound.pointermove);
	}
	removeEventListener() {
		document.removeEventListener('pointermove', this._bound.pointermove),
			document.removeEventListener('touchmove', this._bound.pointermove);
	}
	movedCursorDistance() {
		return this._movedCursorDistance;
	}
	_onPointermove() {
		if (!this.cursorRef) return;
		const e = this.cursorRef.value;
		this._lastCursorPosSet == !1 && (this._lastCursorPos.copy(e), (this._lastCursorPosSet = !0)),
			Cp.copy(e),
			iy.copy(Cp).sub(this._lastCursorPos),
			(this._movedCursorDistance += iy.manhattanLength() / 2),
			this._lastCursorPos.copy(Cp);
	}
}
const sy = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1};
function GH(n, e) {
	for (const t of n) if (e < t.click.maxCursorMoveDistance) return !0;
	return !1;
}
class zH extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateOnPointerdownByObject = new Map()),
			(this._intersectedStateOnPointerupByObject = new Map()),
			(this._objectsMatchingEventConfig = []),
			(this._objectsIntersectedOnPointerdown = []),
			(this._cursorMoveMonitor = new Mm()),
			(this._pointerdownReceivedAt = 0),
			(this._bound = {pointerup: this._onPointerup.bind(this)});
	}
	onPointerdown(e) {
		(this._pointerdownEvent = e),
			(this._pointerdownReceivedAt = performance.now()),
			this._objects.length != 0 &&
				(il(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
				this._objectsMatchingEventConfig.length != 0 &&
					(document.addEventListener('pointerup', this._bound.pointerup),
					document.addEventListener('touchend', this._bound.pointerup),
					this._cursorMoveMonitor.addPointermoveEventListener(
						this._scene.eventsDispatcher.pointerEventsController.cursor()
					),
					this._setIntersectedState(
						this._objectsMatchingEventConfig,
						this._intersectedStateOnPointerdownByObject
					)));
	}
	_onPointerup() {
		document.removeEventListener('pointerup', this._bound.pointerup),
			document.removeEventListener('touchend', this._bound.pointerup),
			this._cursorMoveMonitor.removeEventListener();
		const e = this._pointerdownEvent;
		if (!e) return;
		this._pointerdownEvent = void 0;
		const t = performance.now() - this._pointerdownReceivedAt,
			i = this._cursorMoveMonitor.movedCursorDistance(),
			s = this._objectsMatchingEventConfig;
		this._objectsIntersectedOnPointerdown.length = 0;
		for (const o of s) {
			const a = this._propertiesListByObject.get(o);
			a &&
				GH(a, i) &&
				this._intersectedStateOnPointerdownByObject.get(o) &&
				this._objectsIntersectedOnPointerdown.push(o);
		}
		if (this._objectsIntersectedOnPointerdown.length == 0) return;
		this._setIntersectedState(s, this._intersectedStateOnPointerupByObject), ho(e, sy);
		const r = this._objectsIntersectedOnPointerdown;
		for (const o of r) {
			const a = this._propertiesListByObject.get(o);
			if (a && this._intersectedStateOnPointerupByObject.get(o) == !0)
				for (const l of a)
					i < l.click.maxCursorMoveDistance &&
						t < l.click.maxDuration &&
						Ba(l.config, sy) &&
						l.click.callback();
		}
	}
}
const ry = {buttons: Fi.LEFT, ctrl: !1, shift: !1, alt: !1};
function HH(n, e) {
	for (const t of n) if (e < t.click.maxCursorMoveDistance) return !0;
	return !1;
}
class WH extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateOnMousedownByObject = new Map()),
			(this._intersectedStateOnMouseupByObject = new Map()),
			(this._objectsMatchingEventConfig = []),
			(this._objectsIntersectedOnMousedown = []),
			(this._cursorMoveMonitor = new Mm()),
			(this._mousedownReceivedAt = 0),
			(this._bound = {mouseup: this._onMouseup.bind(this)});
	}
	onMousedown(e) {
		(this._mousedownEvent = e),
			(this._mousedownReceivedAt = performance.now()),
			this._objects.length != 0 &&
				(IH(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
				this._objectsMatchingEventConfig.length != 0 &&
					(document.addEventListener('mouseup', this._bound.mouseup),
					document.addEventListener('touchend', this._bound.mouseup),
					this._cursorMoveMonitor.addPointermoveEventListener(
						this._scene.eventsDispatcher.pointerEventsController.cursor()
					),
					this._setIntersectedState(
						this._objectsMatchingEventConfig,
						this._intersectedStateOnMousedownByObject
					)));
	}
	_onMouseup() {
		document.removeEventListener('mouseup', this._bound.mouseup),
			document.removeEventListener('touchend', this._bound.mouseup),
			this._cursorMoveMonitor.removeEventListener();
		const e = this._mousedownEvent;
		if (!e) return;
		this._mousedownEvent = void 0;
		const t = performance.now() - this._mousedownReceivedAt,
			i = this._cursorMoveMonitor.movedCursorDistance(),
			s = this._objectsMatchingEventConfig;
		this._objectsIntersectedOnMousedown.length = 0;
		for (const o of s) {
			const a = this._propertiesListByObject.get(o);
			a &&
				HH(a, i) &&
				this._intersectedStateOnMousedownByObject.get(o) &&
				this._objectsIntersectedOnMousedown.push(o);
		}
		if (this._objectsIntersectedOnMousedown.length == 0) return;
		this._setIntersectedState(s, this._intersectedStateOnMouseupByObject), xm(e, ry);
		const r = this._objectsIntersectedOnMousedown;
		for (const o of r) {
			const a = this._propertiesListByObject.get(o);
			if (a && this._intersectedStateOnMouseupByObject.get(o) == !0)
				for (const l of a)
					i < l.click.maxCursorMoveDistance &&
						t < l.click.maxDuration &&
						yx(l.config, ry) &&
						l.click.callback();
		}
	}
}
class jH extends Gs {
	constructor() {
		super(...arguments), (this._propertiesListByObject = new Map()), (this._intersectedStateByObject = new Map());
	}
	onContextmenu(e) {
		this._setIntersectedState(this._objects, this._intersectedStateByObject);
		const t = this._objects;
		for (const i of t) {
			const s = this._propertiesListByObject.get(i);
			if (s && this._intersectedStateByObject.get(i) == !0) for (const o of s) o.contextmenu.callback();
		}
	}
}
const oy = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1};
function XH(n, e) {
	for (const t of n) if (e < t.longPress.maxCursorMoveDistance) return !0;
	return !1;
}
class $H extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateOnPointerdownByObject = new Map()),
			(this._intersectedStateOnTimeoutByObject = new Map()),
			(this._objectsMatchingEventConfig = []),
			(this._objectsByLongPressDuration = new Map()),
			(this._timerByDuration = new Map()),
			(this._cursorMoveMonitor = new Mm()),
			(this._bound = {pointerup: this._onPointerup.bind(this)});
	}
	onPointerdown(e) {
		if (
			this._objects.length == 0 ||
			(il(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
			this._objectsMatchingEventConfig.length == 0)
		)
			return;
		document.addEventListener('pointerup', this._bound.pointerup),
			document.addEventListener('touchend', this._bound.pointerup),
			this._cursorMoveMonitor.addPointermoveEventListener(
				this._scene.eventsDispatcher.pointerEventsController.cursor()
			),
			this._objectsByLongPressDuration.clear(),
			this._timerByDuration.clear(),
			this._setIntersectedState(this._objectsMatchingEventConfig, this._intersectedStateOnPointerdownByObject),
			(() => {
				const i = this._objects;
				for (const s of i) {
					const r = this._propertiesListByObject.get(s);
					if (r && this._intersectedStateOnPointerdownByObject.get(s) == !0)
						for (const a of r) yi(this._objectsByLongPressDuration, a.longPress.duration, s);
				}
			})(),
			ho(e, oy),
			this._objectsByLongPressDuration.forEach((i, s) => {
				const o = setTimeout(() => {
					const a = this._cursorMoveMonitor.movedCursorDistance();
					this._timerByDuration.delete(s),
						this._setIntersectedState(this._objects, this._intersectedStateOnTimeoutByObject);
					for (const c of i) {
						const l = this._propertiesListByObject.get(c);
						if (l && XH(l, a) && this._intersectedStateOnTimeoutByObject.get(c))
							for (const h of l)
								a < h.longPress.maxCursorMoveDistance && Ba(h.config, oy) && h.longPress.callback();
					}
				}, s);
				this._timerByDuration.set(s, o);
			});
	}
	_onPointerup() {
		document.removeEventListener('pointerup', this._bound.pointerup),
			document.removeEventListener('touchend', this._bound.pointerup),
			this._cursorMoveMonitor.removeEventListener(),
			this._timerByDuration.forEach((e, t) => {
				clearTimeout(e);
			}),
			this._timerByDuration.clear();
	}
}
const cu = new re(),
	ay = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1};
function dc(n) {
	return n > Math.PI && (n -= Math.PI * 2), DS(n);
}
dc(cu.set(-1, 0).angle()), dc(cu.set(1, 0).angle()), dc(cu.set(0, 1).angle()), dc(cu.set(0, -1).angle());
function qH(n, e) {
	return e >= n.angle - n.angleMargin && e <= n.angle + n.angleMargin;
}
const yp = new re();
class YH extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateOnPointerdownByObject = new Map()),
			(this._intersectedStateOnPointerupByObject = new Map()),
			(this._objectsMatchingEventConfig = []),
			(this._objectsIntersectedOnPointerdown = []),
			(this._cursorOnPointerdown = new re()),
			(this._cursorOnPointerup = new re()),
			(this._bound = {pointerup: this._onPointerup.bind(this)});
	}
	onPointerdown(e) {
		(this._pointerdownEvent = e),
			this._objects.length != 0 &&
				(il(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
				this._objectsMatchingEventConfig.length != 0 &&
					(document.addEventListener('pointerup', this._bound.pointerup),
					document.addEventListener('touchend', this._bound.pointerup),
					this._setIntersectedState(
						this._objectsMatchingEventConfig,
						this._intersectedStateOnPointerdownByObject
					),
					this._getCursor(this._cursorOnPointerdown)));
	}
	_onPointerup(e) {
		document.removeEventListener('pointerup', this._bound.pointerup),
			document.removeEventListener('touchend', this._bound.pointerup);
		const t = this._pointerdownEvent;
		if (!t) return;
		this._pointerdownEvent = void 0;
		const i = this._objects;
		this._objectsIntersectedOnPointerdown.length = 0;
		for (const c of i)
			this._propertiesListByObject.get(c) &&
				this._intersectedStateOnPointerdownByObject.get(c) &&
				this._objectsIntersectedOnPointerdown.push(c);
		if (this._objectsIntersectedOnPointerdown.length == 0) return;
		this._getCursor(this._cursorOnPointerup), yp.copy(this._cursorOnPointerup).sub(this._cursorOnPointerdown);
		let s = yp.angle();
		const r = dc(s),
			o = yp.manhattanLength();
		this._setIntersectedState(i, this._intersectedStateOnPointerupByObject), ho(t, ay);
		const a = this._objectsIntersectedOnPointerdown;
		for (const c of a) {
			const l = this._propertiesListByObject.get(c);
			if (l && this._intersectedStateOnPointerupByObject.get(c) == !0)
				for (const h of l) o > h.swipe.minDistance && qH(h.swipe, r) && Ba(h.config, ay) && h.swipe.callback();
		}
	}
	_getCursor(e) {
		const i = this._scene.eventsDispatcher.pointerEventsController.cursor().value;
		e.copy(i);
	}
}
class bx {
	constructor(e) {
		(this.actorsManager = e),
			(this._objects = []),
			(this._propertiesListByObject = new Map()),
			(this._scene = e.scene);
	}
	addPropertiesForObject(e, t) {
		if (e == oh) return;
		yi(this._propertiesListByObject, e, t), this._objects.indexOf(e) < 0 && this._objects.push(e);
	}
	removePropertiesForObject(e, t) {
		if (e == oh) return;
		const i = this._propertiesListByObject.get(e);
		if (!i) return;
		const s = i.indexOf(t);
		if ((i.splice(s, 1), i.length == 0)) {
			const r = this._objects.indexOf(e);
			r >= 0 && (this._objects.splice(r, 1), this._propertiesListByObject.delete(e));
		}
	}
}
class KH extends bx {
	constructor() {
		super(...arguments), (this._propertiesListByObject = new Map()), (this._intersectedStateByObject = new Map());
	}
	onPointerdown(e) {
		const t = this._objects;
		for (const i of t) {
			const s = this._propertiesListByObject.get(i);
			if (s) for (const r of s) r.pointerdown.callback();
		}
	}
}
class ZH extends bx {
	constructor() {
		super(...arguments), (this._propertiesListByObject = new Map()), (this._intersectedStateByObject = new Map());
	}
	onPointerup(e) {
		const t = this._objects;
		for (const i of t) {
			const s = this._propertiesListByObject.get(i);
			if (s) for (const r of s) r.pointerup.callback();
		}
	}
}
const cy = {button: bi.LEFT, ctrl: !1, shift: !1, alt: !1};
class QH extends Gs {
	constructor() {
		super(...arguments),
			(this._propertiesListByObject = new Map()),
			(this._intersectedStateOnDoubleClickByObject = new Map()),
			(this._objectsMatchingEventConfig = []);
	}
	onDoubleClick(e) {
		if (
			this._objects.length != 0 &&
			(DH(e, this._objects, this._propertiesListByObject, this._objectsMatchingEventConfig),
			this._objectsMatchingEventConfig.length != 0)
		) {
			this._setIntersectedState(this._objectsMatchingEventConfig, this._intersectedStateOnDoubleClickByObject),
				ho(e, cy);
			for (const t of this._objectsMatchingEventConfig) {
				const i = this._propertiesListByObject.get(t);
				if (i && this._intersectedStateOnDoubleClickByObject.get(t) == !0)
					for (const r of i) ed(r.config, cy) && r.doubleClick.callback();
			}
		}
	}
}
const ly = 'actorBuilderNodeIds',
	Sx = {
		[Be.ON_KEY]: 'onTick',
		[Be.ON_KEYDOWN]: 'onTick',
		[Be.ON_KEYPRESS]: 'onTick',
		[Be.ON_KEYUP]: 'onTick',
		[Be.ON_MAPBOX_CAMERA_MOVE]: 'onTick',
		[Be.ON_MAPBOX_CAMERA_MOVE_START]: 'onTick',
		[Be.ON_MAPBOX_CAMERA_MOVE_END]: 'onTick',
		[Be.ON_OBJECT_ATTRIBUTE_UPDATE]: 'onTick',
		onContextMenu: 'onTick',
		[Be.ON_OBJECT_DISPATCH_EVENT]: 'instant',
		onPointermove: 'onTick',
		[Be.ON_PERFORMANCE_CHANGE]: 'instant',
		[Be.ON_POINTERDOWN]: 'onTick',
		[Be.ON_POINTERUP]: 'onTick',
		[Be.ON_SCENE_PAUSE]: 'instant',
		[Be.ON_SCENE_PLAY]: 'instant',
		[Be.ON_SCENE_RESET]: 'instant',
		[Be.ON_TICK]: 'onTick',
		[Be.ON_VIDEO_EVENT]: 'onTick',
		[Be.ON_WEBXR_CONTROLLER_EVENT]: 'onTick',
	};
new Set(lx.filter((n) => Sx[n] == 'onTick'));
new Set(lx.filter((n) => Sx[n] == 'instant'));
class JH {
	constructor(e) {
		(this.scene = e),
			(this.rayObjectIntersectionClick = new zH(this)),
			(this.rayObjectIntersectionDoubleClick = new QH(this)),
			(this.rayObjectIntersectionMouseClick = new WH(this)),
			(this.rayObjectIntersectionContextmenu = new jH(this)),
			(this.rayObjectIntersectionHover = new BH(this)),
			(this.rayObjectIntersectionLongPress = new $H(this)),
			(this.rayObjectIntersectionPointerdown = new kH(this)),
			(this.rayObjectIntersectionPointerup = new VH(this)),
			(this.rayObjectIntersectionSwipe = new YH(this)),
			(this.pointerdown = new KH(this)),
			(this.pointerup = new ZH(this)),
			(this._onEventTickBound = this._onEventTick.bind(this)),
			(this._onEventSceneResetBound = this._onEventSceneReset.bind(this)),
			(this._onEventScenePlayBound = this._onEventScenePlay.bind(this)),
			(this._onEventScenePauseBound = this._onEventScenePause.bind(this)),
			(this._onEventPerformanceChangeBound = this._onEventPerformanceChange.bind(this));
	}
	registerEvaluatorGenerator(e) {
		this.scene.eventsDispatcher.registerEvaluatorGenerator(e);
	}
	unregisterEvaluatorGenerator(e) {
		this.scene.eventsDispatcher.unregisterEvaluatorGenerator(e);
	}
	assignActorBuilder(e, t) {
		let i = this.objectActorNodeIds(e);
		i || ((i = []), (e.userData[ly] = i));
		const s = t.graphNodeId();
		i.includes(s) || i.push(s), le.onObjectsAddRemoveHooks.assignOnRemoveHookHandler(e, t);
	}
	objectActorNodeIds(e) {
		return e.userData[ly];
	}
	get keyboardEventsController() {
		return (this._keyboardEventsController = this._keyboardEventsController || new AG(this));
	}
	get manualTriggerController() {
		return (this._manualTriggerController = this._manualTriggerController || new SG(this));
	}
	tick() {
		var e;
		this.rayObjectIntersectionHover.process(),
			(e = this._keyboardEventsController) == null || e.runTriggers(),
			Jo(this.scene.threejsScene(), (t) => {
				this.triggerEventNodes(t, 'onPointermove'), this._onEventTickBound(t);
			});
	}
	runOnEventSceneReset() {
		this._onEventSceneResetTraverse();
	}
	runOnEventScenePlay() {
		this._onEventScenePlayTraverse();
	}
	runOnEventScenePause() {
		this._onEventScenePauseTraverse();
	}
	runOnEventPerformanceChange() {
		this._onEventPerformanceChangeTraverse();
	}
	_onEventTick(e) {
		this.triggerEventNodes(e, Be.ON_TICK);
	}
	_onEventSceneReset(e) {
		this.triggerEventNodes(e, Be.ON_SCENE_RESET);
	}
	_onEventSceneResetTraverse() {
		Jo(this.scene.threejsScene(), this._onEventSceneResetBound);
	}
	_onEventScenePlay(e) {
		this.triggerEventNodes(e, Be.ON_SCENE_PLAY);
	}
	_onEventScenePlayTraverse() {
		Jo(this.scene.threejsScene(), this._onEventScenePlayBound);
	}
	_onEventScenePause(e) {
		this.triggerEventNodes(e, Be.ON_SCENE_PAUSE);
	}
	_onEventScenePauseTraverse() {
		Jo(this.scene.threejsScene(), this._onEventScenePauseBound);
	}
	_onEventPerformanceChange(e) {
		this.triggerEventNodes(e, Be.ON_PERFORMANCE_CHANGE);
	}
	_onEventPerformanceChangeTraverse() {
		Jo(this.scene.threejsScene(), this._onEventPerformanceChangeBound);
	}
	triggerEventNodes(e, t) {
		const i = this.objectActorNodeIds(e);
		if (i)
			for (const s of i) {
				if (e.parent == null) return;
				const r = this.scene.graph.nodeFromId(s);
				r && this.triggerEventNode(r, e, t);
			}
	}
	triggerEventNode(e, t, i) {
		const s = e.compilationController.evaluatorGenerator();
		this._triggerEvaluatorGenerator(s, t, i);
	}
	_triggerEvaluatorGenerator(e, t, i) {
		const s = e.findOrCreateEvaluator(t);
		s[i] && s[i]();
	}
}
const uy = [];
class e2 {
	constructor(e) {
		(this.scene = e),
			(this._cameraObjectsRecentlyUpdated = []),
			(this._errorMessageDisplayed = !1),
			(this._onCameraObjectsUpdatedCallbacks = []),
			(this._coreGraphNode = new ai(this.scene, 'SceneCamerasController'));
	}
	coreGraphNode() {
		return this._coreGraphNode;
	}
	dispose() {
		this._coreGraphNode.dispose();
	}
	updateFromChangeInObject(e) {
		this._cameraObjects(e, this._cameraObjectsRecentlyUpdated),
			this._cameraObjectsRecentlyUpdated.length > 0 && this._coreGraphNode.setDirty();
		for (const t of this._onCameraObjectsUpdatedCallbacks) t();
	}
	cameraObjects(e) {
		return this._cameraObjects(this.scene.threejsScene(), e), e;
	}
	_cameraObjects(e, t) {
		t.splice(0, t.length),
			e.traverse((i) => {
				le.camerasRegister.objectRegistered(i) && t.push(i);
			});
	}
	cameraObjectsRecentlyUpdated() {
		return this._cameraObjectsRecentlyUpdated;
	}
	setMainCamera(e) {
		this.scene.root().mainCameraController.setCamera(e);
	}
	setMainCameraPath(e) {
		this.scene.root().mainCameraController.setCameraPath(e);
	}
	mainCameraPath() {
		return this.scene.root().mainCameraController.rawCameraPath();
	}
	async mainCamera(e) {
		if (this.scene.disposed()) return null;
		let t = !0;
		(e == null ? void 0 : e.printCameraNotFoundError) != null && (t = e.printCameraNotFoundError);
		const i = e == null ? void 0 : e.cameraMaskOverride;
		i != null && this.scene.root().mainCameraController.setCameraPath(i);
		const s = (l) => {
				this._errorMessageDisplayed != !0 && t && (console.error(l), (this._errorMessageDisplayed = !0));
			},
			r = await this.scene.root().mainCameraController.camera();
		if (r) return r;
		let o = !0;
		(e == null ? void 0 : e.findAnyCamera) != null && (o = e.findAnyCamera);
		const c = `No camera found at path '${await this.scene
			.root()
			.mainCameraController.cameraPath()}'. Make sure to set the root parameter 'mainCameraPath' to match a camera (from the top menu Windows->Root Node Params)`;
		if (o) {
			const l = this._findAnyCameraObject();
			if (l) return s(c), l;
		}
		return s(c), null;
	}
	_findAnyCameraObject() {
		return this.cameraObjects(uy), uy[0];
	}
	async createMainViewer(e) {
		const t = await this.mainCamera({cameraMaskOverride: e == null ? void 0 : e.cameraMaskOverride});
		if (t) return le.camerasRegister.createViewer({...e, camera: t, scene: this.scene});
	}
	onCameraObjectsUpdated(e) {
		this._onCameraObjectsUpdatedCallbacks.indexOf(e) >= 0 || this._onCameraObjectsUpdatedCallbacks.push(e);
	}
	removeOnCameraObjectsUpdated(e) {
		const t = this._onCameraObjectsUpdatedCallbacks.indexOf(e);
		t >= 0 && this._onCameraObjectsUpdatedCallbacks.splice(t, 1);
	}
}
class t2 {
	constructor(e) {
		(this._scene = e),
			(this._queue = new Map()),
			(this._nodeIdsInFlushingQueue = new Set()),
			(this._blockLevel = 0);
	}
	block() {
		this._blockLevel += 1;
	}
	unblock() {
		(this._blockLevel -= 1),
			!(this._blockLevel > 0) && (this._blockLevel < 0 && (this._blockLevel = 0), this._processQueue());
	}
	blocked() {
		return this._blockLevel > 0 || this._scene.loadingController.isLoading();
	}
	enqueue(e, t) {
		e.dirtyController.hasPostDirtyHooks() &&
			(this._queue.has(e.graphNodeId()) ||
				this._nodeIdsInFlushingQueue.has(e.graphNodeId()) ||
				this._queue.set(e.graphNodeId(), t));
	}
	_processQueue() {
		if (this.blocked() || this._queue.size == 0) return;
		const e = [],
			t = [];
		this._queue.forEach((s, r) => {
			e.push(s), t.push(r), this._nodeIdsInFlushingQueue.add(r);
		}),
			this._queue.clear();
		let i = 0;
		for (const s of e) {
			const r = t[i];
			this._processItem(s, r), this._nodeIdsInFlushingQueue.delete(r), i++;
		}
	}
	_processItem(e, t) {
		const i = this._scene.graph.nodeFromId(t);
		i && i.dirtyController.runPostDirtyHooks(e);
	}
}
class n2 {
	constructor() {
		(this._cookingNodesById = new Map()),
			(this._nodeIdsHavingCookedAtLeastOnce = new Set()),
			(this._nodeIdsCookingMoreThanOnce = new Set()),
			(this._resolves = []);
	}
	addNode(e) {
		const t = e.graphNodeId();
		this._cookingNodesById.set(t, e),
			this._nodeIdsHavingCookedAtLeastOnce.has(t) || this._nodeIdsCookingMoreThanOnce.add(t),
			this._nodeIdsHavingCookedAtLeastOnce.add(t);
	}
	removeNode(e) {
		const t = e.graphNodeId();
		this._cookingNodesById.delete(t),
			this._nodeIdsCookingMoreThanOnce.delete(t),
			this._cookingNodesById.size == 0 && this.flush();
	}
	cookingNodes(e = []) {
		return (
			(e.length = 0),
			this._cookingNodesById.forEach((t, i) => {
				e.push(t);
			}),
			e
		);
	}
	allNodesHaveCookedAtLeastOnce() {
		return this._nodeIdsCookingMoreThanOnce.size == 0;
	}
	flush() {
		let e;
		for (; (e = this._resolves.pop()); ) e();
	}
	async waitForCooksCompleted() {
		if (this._cookingNodesById.size != 0)
			return new Promise((e, t) => {
				this._resolves.push(e);
			});
	}
}
const cn = [],
	di = new Set();
class i2 {
	constructor() {
		(this._nextId = 0),
			(this._successors = new Map()),
			(this._predecessors = new Map()),
			(this._nodesById = new Map()),
			(this._forbiddenTriggerNodeIds = new Map()),
			(this._selfDirtyForbidden = new Set()),
			(this._nodesCount = 0),
			(this._debugging = !1),
			(this._addedNodesDuringDebugging = new Map()),
			(this._boundPredecessorIds = this.predecessorIds.bind(this)),
			(this._boundSuccessorIds = this.successorIds.bind(this));
	}
	startDebugging() {
		this._debugging = !0;
	}
	stopDebugging() {
		this._debugging = !1;
	}
	printDebug() {
		this._addedNodesDuringDebugging.forEach((e, t) => {
			console.log(t, e, e.graphPredecessors(), e.graphSuccessors());
		});
	}
	setScene(e) {
		this._scene = e;
	}
	scene() {
		return this._scene;
	}
	nextId() {
		return (this._nextId += 1), this._nextId;
	}
	nodesFromIds(e, t) {
		t.length = 0;
		for (const i of e) {
			const s = this.nodeFromId(i);
			s && t.push(s);
		}
	}
	nodeFromId(e) {
		return this._nodesById.get(e);
	}
	hasNode(e) {
		return this._nodesById.get(e.graphNodeId()) != null;
	}
	addNode(e) {
		this._nodesById.set(e.graphNodeId(), e),
			(this._nodesCount += 1),
			this._debugging && this._addedNodesDuringDebugging.set(e.graphNodeId(), e);
	}
	removeNode(e) {
		this.disconnectPredecessors(e), this.disconnectSuccessors(e);
		const t = e.graphNodeId();
		this._nodesById.delete(t),
			this._successors.delete(t),
			this._predecessors.delete(t),
			(this._nodesCount -= 1),
			this._forbiddenTriggerNodeIds.delete(t),
			this._forbiddenTriggerNodeIds.forEach((i, s) => {
				i.has(s) && i.delete(s);
			}),
			this._selfDirtyForbidden.delete(t),
			this._debugging && this._addedNodesDuringDebugging.delete(t);
	}
	nodesCount() {
		return this._nodesCount;
	}
	connect(e, t, i = !0) {
		const s = e.graphNodeId(),
			r = t.graphNodeId();
		return this.hasNode(e) && this.hasNode(t)
			? (i && (i = !(this._scene ? this._scene.loadingController.isLoading() : !0)),
			  (i ? e.hasPredecessor(t) : !1)
					? !1
					: (this._createConnection(s, r), e.clearCachesWithPredecessorsAndSuccessors(), !0))
			: (console.warn(`attempt to connect non existing node ${s} or ${r}`), !1);
	}
	disconnect(e, t) {
		this._removeConnection(e.graphNodeId(), t.graphNodeId()),
			e.clearCachesWithPredecessorsAndSuccessors(),
			t.clearCachesWithPredecessorsAndSuccessors();
	}
	disconnectPredecessors(e) {
		const t = this.predecessors(e);
		if (t) for (const i of t) this.disconnect(i, e);
	}
	disconnectSuccessors(e) {
		const t = this.successors(e);
		if (t) for (const i of t) this.disconnect(e, i);
	}
	predecessorIds(e) {
		var t;
		return (t = this._predecessors.get(e)) == null ? void 0 : t.idsArray;
	}
	predecessors(e) {
		var t;
		return (t = this._predecessors.get(e.graphNodeId())) == null ? void 0 : t.nodes;
	}
	successorIds(e) {
		var t;
		return (t = this._successors.get(e)) == null ? void 0 : t.idsArray;
	}
	successors(e) {
		var t;
		return (t = this._successors.get(e.graphNodeId())) == null ? void 0 : t.nodes;
	}
	allPredecessorIds(e, t) {
		for (t.length = 0, di.clear(), cn.length = 1, cn[0] = e.graphNodeId(); cn.length > 0; ) {
			const i = cn.pop(),
				s = this._boundPredecessorIds(i);
			if (s) for (const r of s) di.has(r) || (di.add(r), t.push(r), cn.push(r));
		}
	}
	allSuccessorIds(e, t) {
		(t.length = 0), di.clear(), (cn.length = 1), (cn[0] = e.graphNodeId());
		const i = this._forbiddenTriggerNodeIds.get(e.graphNodeId());
		for (; cn.length > 0; ) {
			const s = cn.pop(),
				r = this._boundSuccessorIds(s);
			if (r) for (const o of r) di.has(o) || (di.add(o), (i == null || !i.has(o)) && (t.push(o), cn.push(o)));
		}
	}
	allPredecessors(e, t) {
		for (t.length = 0, di.clear(), cn.length = 1, cn[0] = e.graphNodeId(); cn.length > 0; ) {
			const i = cn.pop(),
				s = this._boundPredecessorIds(i);
			if (s) {
				for (const r of s)
					if (!di.has(r)) {
						di.add(r);
						const o = this._nodesById.get(r);
						o && t.push(o), cn.push(r);
					}
			}
		}
	}
	allSuccessors(e, t) {
		(t.length = 0), di.clear(), (cn.length = 1), (cn[0] = e.graphNodeId());
		const i = this._forbiddenTriggerNodeIds.get(e.graphNodeId());
		for (; cn.length > 0; ) {
			const s = cn.pop(),
				r = this._boundSuccessorIds(s);
			if (r) {
				for (const o of r)
					if (!di.has(o) && (di.add(o), i == null || !i.has(o))) {
						const a = this._nodesById.get(o);
						a && t.push(a), cn.push(o);
					}
			}
		}
	}
	_createConnection(e, t) {
		let i = this._successors.get(e),
			s = this._predecessors.get(t);
		if (
			(i || ((i = {idsSet: new Set(), idsArray: [], nodes: []}), this._successors.set(e, i)),
			s || ((s = {idsSet: new Set(), idsArray: [], nodes: []}), this._predecessors.set(t, s)),
			!i.idsSet.has(t))
		) {
			i.idsSet.add(t), i.idsArray.push(t);
			const r = this._nodesById.get(t);
			if (r) i.nodes.push(r);
			else throw new Error(`creating connection with node not in graph ${t}`);
		}
		if (!s.idsSet.has(e)) {
			s.idsSet.add(e), s.idsArray.push(e);
			const r = this._nodesById.get(e);
			if (r) s.nodes.push(r);
			else throw new Error(`creating connection with node not in graph ${e}`);
		}
	}
	_removeConnection(e, t) {
		const i = this._successors.get(e);
		if (i && i.idsSet.has(t)) {
			i.idsSet.delete(t);
			const r = i.idsArray.indexOf(t);
			r >= 0
				? (i.idsArray.splice(r, 1), i.nodes.splice(r, 1))
				: console.warn(`could not find id ${t} in successorsData.idsArray`, i.idsArray);
		}
		const s = this._predecessors.get(t);
		if (s && s.idsSet.has(e)) {
			s.idsSet.delete(e);
			const r = s.idsArray.indexOf(e);
			r >= 0
				? (s.idsArray.splice(r, 1), s.nodes.splice(r, 1))
				: console.warn(`could not find id ${e} in predecessorsData.idsArray`, s.idsArray);
		}
	}
	setForbiddenTriggerNodes(e, t) {
		var i;
		if (((i = this._forbiddenTriggerNodeIds.get(e.graphNodeId())) == null || i.clear(), ft(t)))
			for (const s of t) Ai(this._forbiddenTriggerNodeIds, e.graphNodeId(), s.graphNodeId());
		else Ai(this._forbiddenTriggerNodeIds, e.graphNodeId(), t.graphNodeId());
	}
	clearForbiddenTriggerNodes(e) {
		this._forbiddenTriggerNodeIds.delete(e.graphNodeId());
	}
	setSelfDirtyForbidden(e, t) {
		t ? this._selfDirtyForbidden.add(e.graphNodeId()) : this._selfDirtyForbidden.delete(e.graphNodeId());
	}
	selfDirtyForbidden(e) {
		return this._selfDirtyForbidden.has(e.graphNodeId());
	}
}
class s2 {
	constructor(e) {
		(this._node = e),
			(this._cooks_count = 0),
			(this._total_cook_time = 0),
			(this._total_inputs_time = 0),
			(this._total_params_time = 0);
	}
	update_cook_data(e) {
		(this._cooks_count += 1),
			(this._total_cook_time += e.cookTime),
			(this._total_inputs_time += e.inputsTime),
			(this._total_params_time += e.paramsTime);
	}
	total_time() {
		return this._total_cook_time + this._total_inputs_time + this._total_params_time;
	}
	total_cook_time() {
		return this._total_cook_time;
	}
	cook_time_per_iteration() {
		return this._cooks_count > 0 ? this._total_cook_time / this._cooks_count : 0;
	}
	total_inputs_time() {
		return this._total_inputs_time;
	}
	inputs_time_per_iteration() {
		return this._cooks_count > 0 ? this._total_inputs_time / this._cooks_count : 0;
	}
	total_params_time2() {
		return this._total_params_time;
	}
	params_time_per_iteration2() {
		return this._cooks_count > 0 ? this._total_params_time / this._cooks_count : 0;
	}
	cooks_count() {
		return this._cooks_count;
	}
	print_object() {
		return {
			fullPath: this._node.path(),
			cooks_count: this.cooks_count(),
			total_time: this.total_time(),
			total_cook_time: this.total_cook_time(),
			cook_time_per_iteration: this.cook_time_per_iteration(),
			inputs_time_per_iteration: this.inputs_time_per_iteration(),
			params_time_per_iteration: this.params_time_per_iteration2(),
		};
	}
}
class r2 {
	constructor() {
		(this._started = !1),
			(this._start_time = 0),
			(this._previous_timestamp = 0),
			(this._nodes_cook_data = {}),
			(this._durations_by_name = {}),
			(this._durations_count_by_name = {});
	}
	profile(e, t) {
		const i = le.performance.performanceManager(),
			s = i.now();
		t();
		const r = i.now() - s;
		console.log(`${e}: ${r}`);
	}
	start() {
		if (!this._started) {
			this.reset(), (this._started = !0);
			const e = le.performance.performanceManager();
			(this._start_time = e.now()), (this._nodes_cook_data = {}), (this._previous_timestamp = this._start_time);
		}
	}
	stop() {
		this.reset();
	}
	reset() {
		(this._started = !1),
			(this._start_time = null),
			(this._durations_by_name = {}),
			(this._durations_count_by_name = {}),
			(this._nodes_cook_data = {});
	}
	started() {
		return this._started;
	}
	recordNodeCookData(e, t) {
		const i = e.graphNodeId();
		this._nodes_cook_data[i] == null && (this._nodes_cook_data[i] = new s2(e)),
			this._nodes_cook_data[i].update_cook_data(t);
	}
	record(e) {
		this.started() || this.start();
		const t = performance.now();
		return (
			this._durations_by_name[e] == null && (this._durations_by_name[e] = 0),
			(this._durations_by_name[e] += t - this._previous_timestamp),
			this._durations_count_by_name[e] == null && (this._durations_count_by_name[e] = 0),
			(this._durations_count_by_name[e] += 1),
			(this._previous_timestamp = t)
		);
	}
	print() {
		this.print_node_cook_data(), this.print_recordings();
	}
	print_node_cook_data() {
		let e = Object.values(this._nodes_cook_data);
		e = pf(e, (r) => r.total_cook_time());
		const t = e.map((r) => r.print_object());
		console.log('--------------- NODES COOK TIME -----------');
		const i = [],
			s = pf(t, (r) => -r.total_cook_time);
		for (const r of s) i.push(r);
		return console.table(i), t;
	}
	print_recordings() {
		const e = Ju(this._durations_by_name),
			t = Ju(this._durations_count_by_name),
			i = [],
			s = {};
		for (const a of Object.keys(e)) {
			const c = e[a];
			i.push(c), s[c] == null && (s[c] = []), s[c].push(a);
		}
		i.sort((a, c) => a - c);
		const r = [];
		gr(i, r), console.log('--------------- PERF RECORDINGS -----------');
		const o = [];
		for (const a of r) {
			const c = s[a];
			for (const l of c) {
				const u = t[l],
					h = a / u,
					d = {duration: a, name: l, count: u, duration_per_iteration: h};
				o.push(d);
			}
		}
		return console.table(o), o;
	}
}
class o2 {
	constructor(e) {
		this.scene = e;
	}
	setListener(e) {
		this._eventsListener
			? console.warn('scene already has a listener')
			: ((this._eventsListener = e), this._runOnAddListenerCallbacks());
	}
	onAddListener(e) {
		this._eventsListener
			? e()
			: ((this._onAddListenerCallbacks = this._onAddListenerCallbacks || []),
			  this._onAddListenerCallbacks.push(e));
	}
	_runOnAddListenerCallbacks() {
		if (this._onAddListenerCallbacks) {
			let e;
			for (; (e = this._onAddListenerCallbacks.pop()); ) e();
			this._onAddListenerCallbacks = void 0;
		}
	}
	dispatch(e, t, i) {
		var s;
		(s = this._eventsListener) == null || s.processEvents(e, t, i);
	}
	emitAllowed() {
		return (
			this._eventsListener != null &&
			this.scene.loadingController.loaded() &&
			this.scene.loadingController.autoUpdating()
		);
	}
	processActorEvaluator(e) {
		var t;
		return (t = this._eventsListener) == null ? void 0 : t.processActorEvaluator(e);
	}
	actorEvaluatorDebug(e) {
		var t;
		return (t = this._eventsListener) == null ? void 0 : t.actorEvaluatorDebug(e);
	}
}
class a2 {
	constructor() {
		this._paramsById = new Map();
	}
	registerParam(e) {
		this._paramsById.set(e.graphNodeId(), e);
	}
	deregisterParam(e) {
		this._paramsById.delete(e.graphNodeId());
	}
	regenerateReferringExpressions(e) {
		e.nameController.graphNode().setSuccessorsDirty(e);
	}
}
class c2 {
	constructor(e) {
		(this.scene = e), (this._lifecycleOnAfterCreatedAllowed = !0);
	}
	onAfterCreatedCallbackAllowed() {
		return this.scene.loadingController.loaded() && this._lifecycleOnAfterCreatedAllowed;
	}
	onAfterCreatedPrevent(e) {
		(this._lifecycleOnAfterCreatedAllowed = !1), e(), (this._lifecycleOnAfterCreatedAllowed = !0);
	}
}
class l2 {
	constructor(e) {
		(this.scene = e), (this._loadingState = !0), (this._autoUpdating = !1);
	}
	markAsLoading() {
		this._setLoadingState(!0);
	}
	markAsLoaded() {
		this.scene.missingExpressionReferencesController.resolveMissingReferences(),
			this._setLoadingState(!1),
			this._triggerLoadedEvent();
	}
	dispatchReadyEvent() {
		globalThis.Event && this.scene.eventsDispatcher.sceneEventsController.dispatch(CB);
	}
	_triggerLoadedEvent() {
		globalThis.Event && this.scene.eventsDispatcher.sceneEventsController.dispatch(EB);
	}
	_setLoadingState(e) {
		(this._loadingState = e), this.setAutoUpdate(!this._loadingState), this.scene.cooker.unblock();
	}
	isLoading() {
		return this._loadingState;
	}
	loaded() {
		return !this._loadingState;
	}
	autoUpdating() {
		return this._autoUpdating;
	}
	setAutoUpdate(e) {
		if (this._autoUpdating !== e && ((this._autoUpdating = e), this._autoUpdating)) {
			const t = this.scene.root();
			t && t.processQueue();
		}
	}
}
class u2 {
	constructor(e, t) {
		(this.param = e), (this.path = t);
	}
	absolutePath() {
		if (this.param.node) return Ct.makeAbsolutePath(this.param.node, this.path);
	}
	matchesPath(e) {
		return this.absolutePath() == e;
	}
	resolveMissingDependencies() {
		const e = this.param.rawInputSerialized();
		this.param.set(this.param.defaultValue()), this.param.set(e);
	}
}
const bp = [],
	lu = [],
	uu = [];
class h2 {
	constructor(e) {
		(this.scene = e), (this.references = new Map()), (this._toIgnore = new WeakMap());
	}
	register(e, t, i) {
		if (i && this._toIgnore.get(i) == !0) return;
		const s = new u2(e, t);
		return Ai(this.references, e.graphNodeId(), s), s;
	}
	deregisterParam(e) {
		this.references.delete(e.graphNodeId());
	}
	registerToIgnore(e) {
		this._toIgnore.set(e, !0);
	}
	resolveMissingReferences() {
		(bp.length = 0),
			this.references.forEach((e) => {
				e.forEach((t) => {
					this._isReferenceResolvable(t) && bp.push(t);
				});
			});
		for (const e of bp) e.resolveMissingDependencies();
	}
	_isReferenceResolvable(e) {
		const t = e.absolutePath();
		if (t) {
			if (this.scene.node(t)) return !0;
			{
				const s = Ct.splitParentChild(t);
				if (s.child) {
					const r = this.scene.node(s.parent);
					if (r && r.params.get(s.child)) return !0;
				}
			}
		}
	}
	checkForMissingNodeReferences(e) {
		if (e.scene().loadingController.loaded()) {
			this._checkForMissingReferencesForNode(e);
			for (const t of e.params.all) this._checkForMissingReferencesForParam(t);
		}
	}
	checkForMissingParamReferences(e) {
		e.scene().loadingController.loaded() && this._checkForMissingReferencesForParam(e);
	}
	_checkForMissingReferencesForNode(e) {
		const t = e.graphNodeId();
		Zv(this.references, uu);
		for (const i of uu) {
			let s = !1;
			Hi(i, lu);
			for (const r of lu) r.matchesPath(e.path()) && ((s = !0), r.resolveMissingDependencies());
			s && this.references.delete(t);
		}
	}
	_checkForMissingReferencesForParam(e) {
		const t = e.graphNodeId();
		Zv(this.references, uu);
		for (const i of uu) {
			let s = !1;
			Hi(i, lu);
			for (const r of lu) r.matchesPath(e.path()) && ((s = !0), r.resolveMissingDependencies());
			s && this.references.delete(t);
		}
	}
}
class d2 {
	constructor(e) {
		(this.scene = e), (this._graphNodeIdByPath = new Map()), (this._pathByGraphNodeId = new Map());
	}
	notifyNodePathChanged(e) {
		var t;
		this._notifyGraphNodePathChanged(e);
		const i = e.params.all;
		for (const s of i) this.notifyParamPathChanged(s);
		(t = e.childrenController) == null ||
			t.traverseChildren((s) => {
				this._notifyGraphNodePathChanged(s);
			});
	}
	notifyParamPathChanged(e) {
		this._notifyGraphNodePathChanged(e);
	}
	_notifyGraphNodePathChanged(e) {
		const t = e.graphNodeId(),
			i = e.path(),
			s = this._pathByGraphNodeId.get(t);
		if (s != null) {
			const o = this._graphNodeIdByPath.get(s);
			o && (o.value = null);
		}
		if (e.disposed()) return;
		const r = this._findOrCreateRef(i);
		(r.value = t), this._pathByGraphNodeId.set(t, i);
	}
	pathRef(e) {
		return this._findOrCreateRef(e);
	}
	_findOrCreateRef(e) {
		let t = this._graphNodeIdByPath.get(e);
		return t || ((t = _i(null)), this._graphNodeIdByPath.set(e, t)), t;
	}
}
class p2 extends wi {
	static context() {
		return fe.MANAGER;
	}
}
const f2 = /\/+/g;
function _2(n, e) {
	return Tm(n, e);
}
function Tm(n, e, t = '') {
	for (const i of e.children) {
		const s = Sa(i.name),
			r = Sa(`${t}/${s}`);
		if (Ds(r, n)) return i;
		const o = Tm(n, i, r);
		if (o) return o;
	}
}
function Ax(n, e, t = !1) {
	const i = [];
	return (
		Rm(
			n,
			(s) => {
				i.push(s);
			},
			e,
			t
		),
		i
	);
}
function m2(n, e, t = [], i = '') {
	return (
		Rm(
			n,
			(s) => {
				t.push(s);
			},
			e
		),
		t
	);
}
function Rm(n, e, t, i = !1) {
	wm(n, t, e, i);
}
function wm(n, e, t, i, s) {
	const r = Sa(e.name),
		o = Sa(s != null ? `${s}/${r}` : r);
	let a = Ds(o, n);
	i && (a = !a), a && t(e);
	for (const c of e.children) wm(n, c, t, i, o);
}
function Sa(n) {
	return n.replace(f2, '/');
}
function xx(n, e) {
	const t = n.parent;
	if (t && n != e) {
		const i = xx(t, e);
		return Sa(`${i}/${n.name}`);
	} else return n.name;
}
class Ti {}
Ti.findObjectByMask = _2;
Ti.findObjectByMaskInObject = Tm;
Ti.objectsByMask = Ax;
Ti.objectsByMaskInObject = m2;
Ti.traverseObjectsWithMask = Rm;
Ti.traverseObjectsWithMaskInObject = wm;
Ti.objectPath = xx;
Ti.sanitizePath = Sa;
const g2 = '/';
class v2 {
	constructor(e) {
		this.scene = e;
	}
	findObjectByMask(e) {
		return Ti.findObjectByMask(e, this.scene.threejsScene());
	}
	objectsByMask(e, t) {
		return Ax(e, t || this.scene.threejsScene(), !1);
	}
	traverseObjectsWithMask(e, t, i, s = !1) {
		Ti.traverseObjectsWithMaskInObject(e, i || this.scene.threejsScene(), t, s);
	}
}
const Sp = {
	computeOnDirty: !1,
	callback: (n) => {
		Mx.update(n);
	},
};
function E2(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.displayAudioIcon = M.BOOLEAN(0, {...Sp, separatorBefore: !0})),
				(this.audioIconColor = M.COLOR([0, 0, 0], {...Sp, visibleIf: {displayAudioIcon: 1}})),
				(this.audioIconStyle = M.STRING(
					'position: absolute; top: 10px; right: 10px; width: 24px; height: 24px; cursor: pointer',
					{...Sp, visibleIf: {displayAudioIcon: 1}}
				));
		}
	};
}
class Mx {
	constructor(e) {
		(this.node = e), (this._callbacksByName = new Map());
	}
	async toggleSound() {
		this.audioListeners().forEach((e) => {
			e.toggleSound();
		}),
			this.update(),
			this._runOnToggleSoundCallbacks();
	}
	soundOn() {
		const e = this.audioListeners()[0];
		return (e && e.pv.soundOn) || !1;
	}
	update() {
		this._updateViewers();
	}
	audioListeners() {
		return this.node.nodesByType('audioListener');
	}
	_updateViewers() {
		this.node.scene().viewersRegister.traverseViewers((e) => {
			e.audioController().update();
		});
	}
	static update(e) {
		e.audioController.update();
	}
	onToggleSound(e, t) {
		if (this._callbacksByName.get(e)) {
			console.warn(`callback already registered ith name '${e}'`);
			return;
		}
		this._callbacksByName.set(e, t);
	}
	_runOnToggleSoundCallbacks() {
		const e = this.soundOn();
		this._callbacksByName.forEach((t) => {
			t(e);
		});
	}
}
const C2 = {
	computeOnDirty: !1,
	callback: (n) => {
		Tx.update(n);
	},
};
function y2(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.autoUpdate = M.BOOLEAN(1, {...C2, separatorBefore: !0}));
		}
	};
}
class Tx {
	constructor(e) {
		this.node = e;
	}
	async update() {
		const e = this.node.object,
			t = this.node.pv;
		t.autoUpdate != e.matrixWorldAutoUpdate && (e.matrixWorldAutoUpdate = t.autoUpdate);
	}
	static async update(e) {
		e.sceneAutoUpdateController.update();
	}
}
const tr = ['none', 'color', 'texture'],
	rc = {
		cook: !1,
		callback: (n) => {
			Rx.update(n);
		},
	};
function b2(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.backgroundMode = M.INTEGER(tr.indexOf('color'), {
					menu: {entries: tr.map((t, i) => ({name: t, value: i}))},
					...rc,
					separatorBefore: !0,
				})),
				(this.bgColor = M.COLOR([0.01, 0.01, 0.01], {visibleIf: {backgroundMode: tr.indexOf('color')}, ...rc})),
				(this.bgTexture = M.NODE_PATH('', {
					visibleIf: {backgroundMode: tr.indexOf('texture')},
					nodeSelection: {context: fe.COP},
					...rc,
				})),
				(this.bgBlur = M.FLOAT(0, {
					visibleIf: {backgroundMode: tr.indexOf('texture')},
					range: [0, 1],
					rangeLocked: [!0, !1],
					...rc,
				})),
				(this.bgIntensity = M.FLOAT(1, {
					visibleIf: {backgroundMode: tr.indexOf('texture')},
					range: [0, 2],
					rangeLocked: [!0, !1],
					...rc,
				}));
		}
	};
}
const S2 = 'SceneBackgroundController';
class Rx {
	constructor(e) {
		(this.node = e), (this._updateBound = this.update.bind(this));
	}
	addHooks() {
		const e = this.node.p,
			t = [e.backgroundMode, e.bgColor, e.bgTexture];
		for (const i of t) i.addPostDirtyHook(S2, this._updateBound);
	}
	setMode(e) {
		this.node.p.backgroundMode.set(tr.indexOf(e));
	}
	backgroundMode() {
		return tr[this.node.pv.backgroundMode];
	}
	async update() {
		const e = this.backgroundMode();
		switch (e) {
			case 'none':
				return this._setBackgroundNone();
			case 'color':
				return await this._setBackgroundColor();
			case 'texture':
				return await this._setBackgroundTexture();
		}
		zt.unreachable(e);
	}
	_setBackgroundNone() {
		const e = this.node.object;
		e.background = null;
	}
	async _setBackgroundColor() {
		const e = this.node.object,
			t = this.node.pv;
		await this.node.p.bgColor.compute(),
			e.background && e.background instanceof Ee ? e.background.copy(t.bgColor) : (e.background = t.bgColor);
	}
	async _setBackgroundTexture() {
		const e = this.node.object,
			t = this.node.pv,
			i = t.bgTexture.nodeWithContext(fe.COP);
		if (i) {
			const s = await i.compute();
			e.background = s.texture();
		} else this.node.states.error.set('bgTexture node not found'), (e.background = null);
		(e.backgroundBlurriness = t.bgBlur), (e.backgroundIntensity = t.bgIntensity);
	}
	static update(e) {
		e.sceneBackgroundController.update();
	}
}
const hy = {
	cook: !1,
	callback: (n) => {
		wx.update(n);
	},
};
function A2(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useEnvironment = M.BOOLEAN(0, {...hy, separatorBefore: !0})),
				(this.environment = M.NODE_PATH('', {
					visibleIf: {useEnvironment: 1},
					nodeSelection: {context: fe.COP},
					...hy,
				}));
		}
	};
}
const x2 = 'SceneEnvController';
class wx {
	constructor(e) {
		(this.node = e), (this._updateBound = this.update.bind(this));
	}
	addHooks() {
		const e = this.node.p,
			t = [e.useEnvironment, e.environment];
		for (const i of t) i.addPostDirtyHook(x2, this._updateBound);
	}
	async update() {
		const e = this.node.object,
			t = this.node.pv;
		if (t.useEnvironment) {
			const i = t.environment.nodeWithContext(fe.COP);
			i
				? i.compute().then((s) => {
						e.environment = s.texture();
				  })
				: ((e.environment = null), this.node.states.error.set('environment node not found'));
		} else e.environment = null;
	}
	static async update(e) {
		e.sceneEnvController.update();
	}
}
const jo = {
		computeOnDirty: !1,
		callback: (n) => {
			Ox.update(n);
		},
	},
	ea = ['linear', 'exponential'];
function M2(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useFog = M.BOOLEAN(0, {...jo, separatorBefore: !0})),
				(this.fogType = M.INTEGER(ea.indexOf('exponential'), {
					visibleIf: {useFog: 1},
					menu: {entries: ea.map((t, i) => ({name: t, value: i}))},
					...jo,
				})),
				(this.fogColor = M.COLOR([1, 1, 1], {visibleIf: {useFog: 1}, ...jo})),
				(this.fogNear = M.FLOAT(1, {
					range: [0, 100],
					rangeLocked: [!0, !1],
					visibleIf: {useFog: 1, fogType: ea.indexOf('linear')},
					...jo,
				})),
				(this.fogFar = M.FLOAT(100, {
					range: [0, 100],
					rangeLocked: [!0, !1],
					visibleIf: {useFog: 1, fogType: ea.indexOf('linear')},
					...jo,
				})),
				(this.fogDensity = M.FLOAT(25e-5, {visibleIf: {useFog: 1, fogType: ea.indexOf('exponential')}, ...jo}));
		}
	};
}
class Ox {
	constructor(e) {
		this.node = e;
	}
	async update() {
		const e = this.node.object,
			t = this.node.pv;
		if (t.useFog)
			if (t.fogType == ea.indexOf('linear')) {
				const i = this.fog2(t);
				(e.fog = i), (i.color = t.fogColor), (i.near = t.fogNear), (i.far = t.fogFar);
			} else {
				const i = this.fogExp2(t);
				(e.fog = this.fogExp2(t)), (i.color = t.fogColor), (i.density = t.fogDensity);
			}
		else e.fog && (e.fog = null);
	}
	fog2(e) {
		return (this._fog = this._fog || new S_(16777215, e.fogNear, e.fogFar));
	}
	fogExp2(e) {
		return (this._fogExp2 = this._fogExp2 || new b_(16777215, e.fogDensity));
	}
	static async update(e) {
		e.sceneFogController.update();
	}
}
const dy = {
	computeOnDirty: !1,
	callback: (n) => {
		Px.update(n);
	},
};
function T2(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useOverrideMaterial = M.BOOLEAN(0, {...dy, separatorBefore: !0})),
				(this.overrideMaterial = M.NODE_PATH('', {
					visibleIf: {useOverrideMaterial: 1},
					nodeSelection: {context: fe.MAT},
					dependentOnFoundNode: !1,
					...dy,
				}));
		}
	};
}
class Px {
	constructor(e) {
		this.node = e;
	}
	async update() {
		const e = this.node.object,
			t = this.node.pv;
		if (t.useOverrideMaterial) {
			const i = t.overrideMaterial.nodeWithContext(fe.MAT);
			if (i) {
				const s = await i.compute();
				e.overrideMaterial = s.material();
			} else (e.overrideMaterial = null), this.node.states.error.set('overrideMaterial node not found');
		} else e.overrideMaterial = null;
	}
	static async update(e) {
		e.sceneMaterialOverrideController.update();
	}
}
let py;
function R2() {
	return (py = py || new Rn());
}
function w2(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.mainCameraPath = M.STRING('', {cook: !1, separatorBefore: !0, objectMask: !0}));
		}
	};
}
class O2 {
	constructor(e) {
		this.node = e;
	}
	setCamera(e) {
		const t = Ti.objectPath(e);
		this.setCameraPath(t);
	}
	setCameraPath(e) {
		this.mainCameraPathParam().set(e);
	}
	mainCameraPathParam() {
		return this.node.p.mainCameraPath;
	}
	rawCameraPath() {
		return this.mainCameraPathParam().rawInput();
	}
	async cameraPath() {
		const e = this.mainCameraPathParam();
		return e.isDirty() && (await e.compute()), e.value;
	}
	_cameraPathSync() {
		return this.mainCameraPathParam().value;
	}
	cameraSync() {
		const e = this._cameraPathSync();
		return this.node.scene().objectsController.findObjectByMask(e);
	}
	dummyPerspectiveCamera() {
		return R2();
	}
	cameraSyncOrDummy() {
		return this.cameraSync();
	}
	async camera() {
		const e = await this.cameraPath();
		return this.node.scene().objectsController.findObjectByMask(e);
	}
	async cameraCreatorNode() {
		const t = (await this.cameraPath()).split(Ct.SEPARATOR),
			i = t[1],
			s = this.node.node(i);
		return (s && t.length != 2 && s.displayNodeController && s.displayNodeController.displayNode()) || s;
	}
}
const Nx = 'RootNode';
class P2 extends vB(E2(T2(A2(M2(w2(b2(y2(nn)))))))) {}
const N2 = new P2();
class I2 extends p2 {
	constructor() {
		super(...arguments),
			(this.paramsConfig = N2),
			(this._object = this._createScene()),
			(this._queuedNodesById = new Map()),
			(this.audioController = new Mx(this)),
			(this.sceneAutoUpdateController = new Tx(this)),
			(this.sceneBackgroundController = new Rx(this)),
			(this.sceneEnvController = new wx(this)),
			(this.sceneFogController = new Ox(this)),
			(this.loadProgress = new to(this)),
			(this.sceneMaterialOverrideController = new Px(this)),
			(this.mainCameraController = new O2(this)),
			(this._childrenControllerContext = fe.OBJ);
	}
	static type() {
		return 'root';
	}
	cook() {
		this.cookController.endCook();
	}
	initializeNode() {
		this.params.onParamsCreated('init controllers', () => {
			this.sceneEnvController.addHooks(), this.sceneBackgroundController.addHooks();
		}),
			this.lifecycle.onChildAdd(this._onChildAdd.bind(this)),
			this.lifecycle.onChildRemove(this._onChildRemove.bind(this));
	}
	_createScene() {
		const e = new Th();
		return (e.name = g2), (e.matrixAutoUpdate = !0), e;
	}
	get object() {
		return this._object;
	}
	createNode(e, t) {
		return super.createNode(e, t);
	}
	children() {
		return super.children();
	}
	nodesByType(e) {
		return super.nodesByType(e);
	}
	_updateScene() {
		this.sceneAutoUpdateController.update(),
			this.sceneBackgroundController.update(),
			this.sceneEnvController.update(),
			this.sceneFogController.update(),
			this.sceneMaterialOverrideController.update();
	}
	_addToQueue(e) {
		const t = e.graphNodeId();
		return this._queuedNodesById.has(t) || this._queuedNodesById.set(t, e), e;
	}
	processQueue() {
		this._updateScene();
		const e = new Map(),
			t = [];
		this._queuedNodesById.forEach((i, s) => {
			const r = `_____${i.renderOrder}__${i.path()}`;
			t.push(r), e.set(r, i);
		}),
			this._queuedNodesById.clear();
		for (const i of t) {
			const s = e.get(i);
			s && (e.delete(i), this._addToScene(s));
		}
	}
	_updateObject(e) {
		return this.scene().loadingController.autoUpdating()
			? (e.isDisplayed() && !e.cookController.isCooking() && e.compute(), this._addToScene(e))
			: this._addToQueue(e);
	}
	getParentForNode(e) {
		if (e.attachableToHierarchy()) {
			const t = e.io.inputs.input(0);
			return t ? t.childrenGroup() : this._object;
		} else return null;
	}
	_addToScene(e) {
		if (e.attachableToHierarchy()) {
			const t = this.getParentForNode(e);
			t &&
				(e.usedInScene()
					? (e.childrenDisplayController
							? e.childrenDisplayController.requestDisplayNodeContainer()
							: e.compute(),
					  e.addObjectToParent(t))
					: e.removeObjectFromParent());
		}
	}
	_removeFromScene(e) {
		e.removeObjectFromParent();
	}
	areChildrenCooking() {
		const e = this.children();
		for (const t of e) if (t.cookController.isCooking() || t.isDisplayNodeCooking()) return !0;
		return !1;
	}
	addToParentTransform(e) {
		this._updateObject(e);
	}
	removeFromParentTransform(e) {
		this._updateObject(e);
	}
	_onChildAdd(e) {
		e && this._updateObject(e);
	}
	_onChildRemove(e) {
		e && this._removeFromScene(e);
	}
}
class D2 {
	constructor(e) {
		(this.scene = e), (this._nodeContextSignatures = {}), (this._instanciatedNodesByContextAndType = new Map());
	}
	createRoot(e) {
		(this._root = new I2(this.scene, Nx, e)), this._root.initializeBaseAndNode(), this._root.params.init();
	}
	root() {
		return this._root;
	}
	_traverseNode(e, t) {
		const i = e.children();
		if (!(!i || i.length == 0)) for (const s of i) s.childrenController && this._traverseNode(s, t), t(s);
	}
	traverseNodes(e) {
		this._traverseNode(this._root, e);
	}
	clear() {
		var e;
		const t = this.root().children();
		for (const i of t) (e = this.root().childrenController) == null || e.removeNode(i);
	}
	node(e) {
		return e === '/' ? this.root() : this.root().node(e);
	}
	allNodes() {
		let e = [this.root()],
			t = [this.root()],
			i = 0;
		for (; t.length > 0 && i < 10; ) {
			const s = t.map((r) => (r.childrenAllowed() ? r.children() : [])).flat();
			(e = e.concat(s)), (t = s), (i += 1);
		}
		return e.flat();
	}
	nodesFromMask(e) {
		const t = this.allNodes(),
			i = [];
		for (const s of t) {
			const r = s.path();
			Ds(r, e) && i.push(s);
		}
		return i;
	}
	resetNodeContextSignatures() {
		this._nodeContextSignatures = {};
	}
	registerNodeContextSignature(e) {
		e.childrenAllowed() &&
			e.childrenController &&
			(this._nodeContextSignatures[e.childrenController.nodeContextSignature()] = !0);
	}
	nodeContextSignatures() {
		return Object.keys(this._nodeContextSignatures)
			.sort()
			.map((e) => e.toLowerCase());
	}
	addToInstanciatedNode(e) {
		const t = e.context(),
			i = e.type();
		let s = this._instanciatedNodesByContextAndType.get(t);
		s || ((s = new Map()), this._instanciatedNodesByContextAndType.set(t, s));
		let r = s.get(i);
		r || ((r = new Map()), s.set(i, r)), r.set(e.graphNodeId(), e);
	}
	removeFromInstanciatedNode(e) {
		const t = e.context(),
			i = e.type(),
			s = this._instanciatedNodesByContextAndType.get(t);
		if (!s) return;
		const r = s.get(i);
		r && r.delete(e.graphNodeId());
	}
	nodesByType(e) {
		const t = [];
		return (
			this._traverseNode(this.scene.root(), (i) => {
				i.type() == e && t.push(i);
			}),
			t
		);
	}
	nodesByContextAndType(e, t) {
		const i = [],
			s = this._instanciatedNodesByContextAndType.get(e);
		if (s) {
			const r = s.get(t);
			r &&
				r.forEach((o) => {
					i.push(o);
				});
		}
		return i;
	}
	hasNodesByContextAndType(e, t) {
		const i = this._instanciatedNodesByContextAndType.get(e);
		if (!i) return !1;
		const s = i.get(t);
		return s ? s.size != 0 : !1;
	}
}
var Wr = ((n) => (
	(n.contextmenu = 'contextmenu'),
	(n.pointerdown = 'pointerdown'),
	(n.pointermove = 'pointermove'),
	(n.pointerup = 'pointerup'),
	(n.touchstart = 'touchstart'),
	(n.touchmove = 'touchmove'),
	(n.touchend = 'touchend'),
	n
))(Wr || {});
const L2 = ['contextmenu', 'pointerdown', 'pointermove', 'pointerup'];
var ch = ((n) => ((n.CANVAS = 'canvas'), (n.DOCUMENT = 'document'), n))(ch || {});
class ka {
	constructor(e) {
		(this.dispatcher = e),
			(this._activeEventDatas = []),
			(this._activeEventDataTypes = new Set()),
			(this._eventNodes = new Set()),
			(this._requireCanvasEventListeners = !1),
			(this._actorEvaluators = new Set()),
			(this._actorEvaluatorsByEventNames = new Map());
	}
	registerEventNode(e) {
		this._eventNodes.add(e), this.updateViewerEventListeners();
	}
	unregisterEventNode(e) {
		this._eventNodes.delete(e), this.updateViewerEventListeners();
	}
	registerEvaluatorGenerator(e) {
		this._actorEvaluators.add(e), this._updateActorEvaluatorCache(), this.updateViewerEventListeners();
	}
	unregisterEvaluatorGenerator(e) {
		this._actorEvaluators.delete(e), this._updateActorEvaluatorCache(), this.updateViewerEventListeners();
	}
	_updateActorEvaluatorCache() {
		this._actorEvaluatorsByEventNames.clear(),
			this._actorEvaluators.forEach((e) => {
				const t = e.eventDatas;
				t &&
					t.forEach((i) => {
						const s = i.type,
							r = i.emitter;
						let o = this._actorEvaluatorsByEventNames.get(s);
						o || ((o = new Map()), this._actorEvaluatorsByEventNames.set(s, o)), Ai(o, r, e);
					});
			});
	}
	processEvent(e) {
		var t;
		if (this._activeEventDatas.length == 0) return;
		const i = (t = e.event) == null ? void 0 : t.type;
		(i && !this._activeEventDataTypes.has(i)) ||
			this._eventNodes.forEach((s) => {
				s.processEvent(e);
			});
	}
	updateViewerEventListeners() {
		this._updateActiveEventTypes(),
			this._requireCanvasEventListeners &&
				this.dispatcher.scene.viewersRegister.traverseViewers((e) => {
					e.eventsController().updateEvents(this);
				});
	}
	activeEventDatas() {
		return this._activeEventDatas;
	}
	_updateActiveEventTypes() {
		const e = (o) => {
				this._activeEventDatas.push(o), this._activeEventDataTypes.add(o.type);
			},
			t = () => {
				this._activeEventDatas.splice(0, this._activeEventDatas.length), this._activeEventDataTypes.clear();
			},
			i = () => {
				let o = new Map();
				this._actorEvaluatorsByEventNames.forEach((c, l) => {
					c.forEach((u, h) => {
						u.forEach((d) => {
							Ai(o, h, l);
						});
					});
				});
				const a = [];
				return (
					o.forEach((c, l) => {
						for (const u of c) {
							const h = {type: u, emitter: l};
							a.push(h);
						}
					}),
					a
				);
			},
			s = () => {
				const o = i();
				if (o) for (const a of o) e(a);
			},
			r = () => {
				const o = new Set();
				this._eventNodes.forEach((a) => {
					if (a.parent()) {
						const c = a.activeEventDatas();
						for (const l of c) o.add(l);
					}
				}),
					o.forEach((a, c) => {
						e(c);
					});
			};
		t(), e({type: Wr.pointermove, emitter: ch.DOCUMENT}), e({type: Wr.touchmove, emitter: ch.DOCUMENT}), s(), r();
	}
}
const U2 = ['dragover'];
class F2 extends ka {
	constructor() {
		super(...arguments), (this._requireCanvasEventListeners = !0);
	}
	type() {
		return 'drag';
	}
	acceptedEventTypes() {
		return new Set([...U2]);
	}
}
var Lu = ((n) => ((n.keydown = 'keydown'), (n.keypress = 'keypress'), (n.keyup = 'keyup'), n))(Lu || {});
const Ix = ['keydown', 'keypress', 'keyup'],
	B2 = {
		[Lu.keydown]: [Be.ON_KEY, Be.ON_KEYDOWN],
		[Lu.keypress]: [Be.ON_KEYPRESS],
		[Lu.keyup]: [Be.ON_KEY, Be.ON_KEYUP],
	};
class k2 extends ka {
	constructor(e) {
		super(e),
			(this._requireCanvasEventListeners = !0),
			(this._currentEvents = []),
			(this._lastProcessedFrame = -1),
			(this.timeController = this.dispatcher.scene.timeController),
			(this.keyboardEventsController = this.dispatcher.scene.actorsManager.keyboardEventsController);
	}
	type() {
		return 'keyboard';
	}
	acceptedEventTypes() {
		return new Set(Ix.map((e) => `${e}`));
	}
	currentEvents() {
		return this._currentEvents;
	}
	processEvent(e) {
		super.processEvent(e);
		const {event: t} = e;
		if (!t) return;
		const i = t.type,
			s = this._actorEvaluatorsByEventNames.get(i);
		if (!s) return;
		if (this.timeController.playing()) {
			const c = this.timeController.frame();
			c != this._lastProcessedFrame && ((this._lastProcessedFrame = c), (this._currentEvents.length = 0)),
				this._currentEvents.push(t);
		} else this._currentEvents[0] = t;
		const r = e.emitter;
		if (!r) return;
		const o = s.get(r);
		if (!o) return;
		const a = B2[i];
		if (a) for (const c of a) this.keyboardEventsController.addTriggeredEvaluators(o, c);
	}
}
var kf = ((n) => (
	(n.auxclick = 'auxclick'),
	(n.click = 'click'),
	(n.contextmenu = 'contextmenu'),
	(n.dblclick = 'dblclick'),
	(n.mousedown = 'mousedown'),
	(n.mouseenter = 'mouseenter'),
	(n.mouseleave = 'mouseleave'),
	(n.mousemove = 'mousemove'),
	(n.mouseover = 'mouseover'),
	(n.mouseout = 'mouseout'),
	(n.mouseup = 'mouseup'),
	(n.pointerlockchange = 'pointerlockchange'),
	(n.pointerlockerror = 'pointerlockerror'),
	(n.select = 'select'),
	(n.wheel = 'wheel'),
	n
))(kf || {});
const V2 = [
	'auxclick',
	'click',
	'contextmenu',
	'dblclick',
	'mousedown',
	'mouseenter',
	'mouseleave',
	'mousemove',
	'mouseover',
	'mouseout',
	'mouseup',
	'pointerlockchange',
	'pointerlockerror',
	'select',
	'wheel',
];
class G2 extends ka {
	constructor() {
		super(...arguments), (this._requireCanvasEventListeners = !0);
	}
	type() {
		return 'mouse';
	}
	acceptedEventTypes() {
		return new Set([...V2]);
	}
}
var Dx = ((n) => ((n.touchstart = 'touchstart'), (n.touchmove = 'touchmove'), (n.touchend = 'touchend'), n))(Dx || {});
const z2 = ['touchstart', 'touchmove', 'touchend'];
function Lx() {
	const n = new ON();
	return zA.updateRaycaster(n), n;
}
function Ux() {
	return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}
function Fx() {
	return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
}
function Bx() {
	return /(Android)/g.test(navigator.userAgent);
}
function Vf() {
	return (
		Ux() ||
		Fx() ||
		Bx() ||
		'ontouchstart' in window ||
		(window.DocumentTouch != null && document instanceof window.DocumentTouch)
	);
}
function H2() {
	return navigator && navigator.userAgent != null && navigator.userAgent.indexOf('Chrome') != -1;
}
function W2() {
	return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
}
function kx() {
	return window.innerHeight > window.innerWidth;
}
function j2() {
	return !kx();
}
function X2() {
	var n, e;
	const t = window.orientation;
	return (
		t ??
		(((e = (n = window == null ? void 0 : window.screen) == null ? void 0 : n.orientation) == null
			? void 0
			: e.angle) ||
			0)
	);
}
class Cr {
	static isChrome() {
		return this._isChrome == null && (this._isChrome = H2()), this._isChrome;
	}
	static isSafari() {
		return this._isSafari == null && (this._isSafari = W2()), this._isSafari;
	}
	static isMobile() {
		return this._isMobile == null && (this._isMobile = Ux()), this._isMobile;
	}
	static isiOS() {
		return this._isiOS == null && (this._isiOS = Fx()), this._isiOS;
	}
	static isAndroid() {
		return this._isAndroid == null && (this._isAndroid = Bx()), this._isAndroid;
	}
	static isTouchDevice() {
		return this._isTouchDevice == null && (this._isTouchDevice = Vf()), this._isTouchDevice;
	}
}
Cr.isPortrait = kx;
Cr.isLandscape = j2;
Cr.screenOrientation = X2;
function $2(n) {
	return !isNaN(n.x) && !isNaN(n.y) && isFinite(n.x) && isFinite(n.y);
}
class Om {
	constructor() {
		(this._rectByCanvas = new Map()),
			(this._resetCacheBound = this._resetCache.bind(this)),
			window.addEventListener('resize', this._resetCacheBound),
			document.addEventListener('scroll', this._resetCacheBound);
	}
	static instance() {
		return (this._instance = this._instance || new Om());
	}
	setEventOffset(e, t, i) {
		let s = this._rectByCanvas.get(t);
		s || ((s = t.getBoundingClientRect()), this._rectByCanvas.set(t, s)),
			(i.offsetX = e.clientX - s.left),
			(i.offsetY = e.clientY - s.top);
	}
	_resetCache() {
		this._rectByCanvas.clear();
	}
	resetCacheForCanvas(e) {
		this._rectByCanvas.delete(e);
	}
}
const Gf = Om.instance(),
	Xo = {offsetX: 0, offsetY: 0};
class q2 {
	setCursorForCPU(e, t) {
		this.setCursor(e, t), (t.x = t.x * 2 - 1), (t.y = -t.y * 2 + 1);
	}
	setCursorForGPU(e, t) {
		this.setCursor(e, t), (t.y = 1 - t.y);
	}
	setCursor(e, t) {
		var i;
		const s = (i = e.viewer) == null ? void 0 : i.canvas();
		if (!s) return;
		const r = e.event;
		if (
			((r instanceof PointerEvent || r instanceof MouseEvent || r instanceof DragEvent) &&
				Gf.setEventOffset(r, s, Xo),
			window.TouchEvent && r instanceof TouchEvent)
		) {
			const o = r.touches[0];
			o && Gf.setEventOffset(o, s, Xo);
		}
		this._updateFromCursor(s, t);
	}
	_updateFromCursor(e, t) {
		if (
			(e.offsetWidth <= 0 || e.offsetHeight <= 0
				? (console.warn('_updateFromCursor: zero size canvas'), t.set(0, 0))
				: ((t.x = Xo.offsetX / e.offsetWidth), (t.y = Xo.offsetY / e.offsetHeight)),
			!$2(t))
		) {
			console.warn('invalid number detected'),
				console.warn(t.toArray(), Xo.offsetX, Xo.offsetY, e.offsetWidth, e.offsetHeight);
			return;
		}
	}
}
class Y2 extends ka {
	constructor(e) {
		super(e),
			(this._requireCanvasEventListeners = !0),
			(this._cursorHelper = new q2()),
			(this._cursor0 = _i(new re(-1e3, -1e3))),
			(this._raycaster0 = _i(Lx()));
	}
	type() {
		return 'pointer';
	}
	acceptedEventTypes() {
		return new Set([...L2]);
	}
	setRaycaster(e) {
		this._raycaster0.value = e;
	}
	processEvent(e) {
		this._cursorHelper.setCursorForCPU(e, this._cursor0.value), super.processEvent(e);
		const {viewer: t, event: i} = e;
		if (!(i && t)) {
			console.log('either event or viewer missing');
			return;
		}
		t.raycastersController.setCursor0(this._cursor0.value), t.raycastersController.updateRaycasters();
		const s = i.type;
		if (s == Wr.pointermove) return;
		const r = this._actorEvaluatorsByEventNames.get(s);
		if (!r) return;
		const o = e.emitter;
		if (!(!o || !r.get(o)) && e.event) {
			const c = this.dispatcher.scene.actorsManager;
			switch (s) {
				case kf.mousedown: {
					c.rayObjectIntersectionMouseClick.onMousedown(e.event);
					return;
				}
				case kf.dblclick:
					c.rayObjectIntersectionDoubleClick.onDoubleClick(e.event);
				case Wr.pointerdown: {
					c.rayObjectIntersectionClick.onPointerdown(e.event),
						c.rayObjectIntersectionLongPress.onPointerdown(e.event),
						c.rayObjectIntersectionPointerdown.onPointerdown(e.event),
						c.pointerdown.onPointerdown(e.event),
						c.rayObjectIntersectionSwipe.onPointerdown(e.event);
					return;
				}
				case Wr.pointerup:
					if (!Vf()) {
						c.rayObjectIntersectionPointerup.onPointerup(e.event), c.pointerup.onPointerup(e.event);
						return;
					}
				case Wr.contextmenu: {
					c.rayObjectIntersectionContextmenu.onContextmenu(e.event);
					return;
				}
				case Dx.touchend:
					if (Vf()) {
						c.rayObjectIntersectionPointerup.onPointerup(e.event), c.pointerup.onPointerup(e.event);
						return;
					}
			}
		}
	}
	raycaster() {
		return this._raycaster0;
	}
	cursor() {
		return this._cursor0;
	}
	updateRaycast(e) {
		const t = this._raycaster0.value.params.Points;
		t && (t.threshold = e.pointsThreshold);
		const i = this._raycaster0.value.params.Line;
		i && (i.threshold = e.lineThreshold);
	}
}
const K2 = ['resize'];
class Z2 extends ka {
	constructor() {
		super(...arguments), (this._requireCanvasEventListeners = !0);
	}
	type() {
		return 'window';
	}
	acceptedEventTypes() {
		return new Set(K2.map((e) => `${e}`));
	}
}
class Q2 extends ka {
	constructor() {
		super(...arguments), (this._requireCanvasEventListeners = !0);
	}
	type() {
		return 'touch';
	}
	acceptedEventTypes() {
		return new Set([...z2]);
	}
}
class J2 {
	constructor() {}
	dispatchTrigger(e) {
		var t;
		(t = e._eventDispatcher()) == null || t.dispatchEvent(Kz);
	}
}
var Fr = ((n) => (
	(n.DRAG = 'drag'),
	(n.KEYBOARD = 'keyboard'),
	(n.MOUSE = 'mouse'),
	(n.POINTER = 'pointer'),
	(n.TOUCH = 'touch'),
	(n.WINDOW = 'window'),
	n
))(Fr || {});
class eW {
	constructor(e) {
		(this.scene = e),
			(this._controllers = []),
			(this.sceneEventsController = new SB()),
			(this.pointerEventsController = this._createController(Y2));
	}
	registerEvaluatorGenerator(e) {
		const t = this._findOrCreateControllerForEvaluator(e);
		t && t.forEach((i) => i.registerEvaluatorGenerator(e));
	}
	unregisterEvaluatorGenerator(e) {
		const t = this._findOrCreateControllerForEvaluator(e);
		t && t.forEach((i) => i.unregisterEvaluatorGenerator(e));
	}
	registerEventNode(e) {
		const t = this._findOrCreateControllerForEventNode(e);
		t && t.registerEventNode(e);
	}
	unregisterEventNode(e) {
		const t = this._findOrCreateControllerForEventNode(e);
		t && t.unregisterEventNode(e);
	}
	updateViewerEventListeners(e) {
		const t = this._findOrCreateControllerForEventNode(e);
		t && t.updateViewerEventListeners();
	}
	traverseControllers(e) {
		for (const t of this._controllers) e(t);
	}
	setRaycaster(e) {
		this.pointerEventsController.setRaycaster(e);
	}
	_findOrCreateControllerForEventNode(e) {
		return this._findOrCreateControllerForEventInputType(e.type());
	}
	_findOrCreateControllerForEvaluator(e) {
		const t = e.eventDatas;
		if (!t) return;
		const i = new Set();
		return (
			t.forEach((s) => {
				const r = this._findOrCreateControllerForJsType(s.jsType);
				r && i.add(r);
			}),
			i
		);
	}
	_findOrCreateControllerForEventInputType(e) {
		switch (e) {
			case Fr.KEYBOARD:
				return this.keyboardEventsController;
			case Fr.MOUSE:
				return this.mouseEventsController;
			case Fr.DRAG:
				return this.dragEventsController;
			case Fr.POINTER:
				return this.pointerEventsController;
			case Fr.TOUCH:
				return this.touchEventsController;
			case Fr.WINDOW:
				return this.windowEventsController;
		}
	}
	_findOrCreateControllerForJsType(e) {
		switch (e) {
			case Be.CURSOR:
			case Be.ON_OBJECT_CLICK:
			case Be.ON_OBJECT_CONTEXT_MENU:
			case Be.ON_OBJECT_HOVER:
			case Be.ON_OBJECT_LONG_PRESS:
			case Be.ON_OBJECT_MOUSE_CLICK:
			case Be.ON_OBJECT_POINTERDOWN:
			case Be.ON_OBJECT_POINTERUP:
			case Be.ON_POINTERDOWN:
			case Be.ON_POINTERUP:
			case Be.RAY_FROM_CURSOR:
				return this.pointerEventsController;
			case Be.ON_KEY:
			case Be.ON_KEYDOWN:
			case Be.ON_KEYPRESS:
			case Be.ON_KEYUP:
				return this.keyboardEventsController;
		}
		console.warn('no event controller defined for jsType', e);
	}
	get keyboardEventsController() {
		return (this._keyboardEventsController = this._keyboardEventsController || this._createController(k2));
	}
	get mouseEventsController() {
		return (this._mouseEventsController = this._mouseEventsController || this._createController(G2));
	}
	get dragEventsController() {
		return (this._dragEventsController = this._dragEventsController || this._createController(F2));
	}
	get windowEventsController() {
		return (this._windowEventsController = this._windowEventsController || this._createController(Z2));
	}
	get touchEventsController() {
		return (this._touchEventsController = this._touchEventsController || this._createController(Q2));
	}
	_createController(e) {
		const t = new e(this);
		return this._controllers.includes(t) || this._controllers.push(t), t;
	}
	get connectionTriggerDispatcher() {
		return (this._connectionTriggerDispatcher = this._connectionTriggerDispatcher || new J2());
	}
}
class tW {
	constructor(e) {
		(this.scene = e), (this._performanceRef = _i(1));
	}
	ref() {
		return this._performanceRef;
	}
	onPerformanceChange(e) {
		this._performanceRef.value = e;
	}
}
const Ap = [],
	hu = [];
class nW {
	constructor(e) {
		(this.scene = e),
			(this._referenced_nodes_by_src_param_id = new Map()),
			(this._referencing_params_by_referenced_node_id = new Map()),
			(this._referencing_params_by_all_named_node_ids = new Map());
	}
	setReferenceFromParam(e, t) {
		this._referenced_nodes_by_src_param_id.set(e.graphNodeId(), t),
			yi(this._referencing_params_by_referenced_node_id, t.graphNodeId(), e);
	}
	setNamedNodesFromParam(e) {
		e.decomposedPath.namedNodes(hu);
		for (const t of hu) yi(this._referencing_params_by_all_named_node_ids, t.graphNodeId(), e);
	}
	resetReferenceFromParam(e) {
		const t = this._referenced_nodes_by_src_param_id.get(e.graphNodeId());
		if (t) {
			df(this._referencing_params_by_referenced_node_id, t.graphNodeId(), e), e.decomposedPath.namedNodes(hu);
			for (const i of hu) df(this._referencing_params_by_all_named_node_ids, i.graphNodeId(), e);
			this._referenced_nodes_by_src_param_id.delete(e.graphNodeId());
		}
	}
	referencing_params(e) {
		return this._referencing_params_by_referenced_node_id.get(e.graphNodeId());
	}
	referencingNodes(e, t) {
		const i = this._referencing_params_by_referenced_node_id.get(e.graphNodeId());
		if (((t.length = 0), i)) {
			const s = new Map();
			for (const r of i) {
				const o = r.node;
				s.set(o.graphNodeId(), o);
			}
			s.forEach((r) => {
				t.push(r);
			});
		}
		return t;
	}
	nodesReferencedBy(e, t) {
		const i = new Set([j.NODE_PATH]);
		Ap.length = 0;
		for (const o of e.params.all) i.has(o.type()) && Ap.push(o);
		const s = new Map(),
			r = [];
		for (const o of Ap) this._check_param(o, s, r);
		for (const o of r) s.set(o.node.graphNodeId(), o.node);
		return (
			(t.length = 0),
			s.forEach((o) => {
				t.push(o);
			}),
			t
		);
	}
	_check_param(e, t, i) {
		if (e instanceof mm) {
			const s = e.value.node();
			s && t.set(s.graphNodeId(), s);
			return;
		}
	}
	notifyNameUpdated(e) {
		const t = this._referencing_params_by_all_named_node_ids.get(e.graphNodeId());
		if (t) {
			const i = ff(t);
			for (const s of i) s.notifyPathRebuildRequired(e);
		}
	}
	notifyParamsUpdated(e) {
		const t = this._referencing_params_by_all_named_node_ids.get(e.graphNodeId());
		if (t) {
			const i = ff(t);
			for (const s of i) s.options.isSelectingParam() && s.notifyTargetParamOwnerParamsUpdated(e);
		}
	}
}
var Br = ((n) => (
	(n.TIME = 'time'),
	(n.RESOLUTION = 'resolution'),
	(n.SPOTLIGHTS_RAYMARCHING = 'spotLightsRayMarching'),
	(n.DIRECTIONALLIGHTS_RAYMARCHING = 'directionalLightsRayMarching'),
	(n.POINTLIGHTS_RAYMARCHING = 'pointLightsRayMarching'),
	n
))(Br || {});
const fy = {resolution: {value: new re(1e3, 1e3)}};
class iW {
	constructor(e) {
		this.scene = e;
	}
	addUniforms(e, t) {
		const {
			paramConfigs: i,
			additionalTextureUniforms: s,
			timeDependent: r,
			resolutionDependent: o,
			raymarchingLightsWorldCoordsDependent: a,
		} = t;
		for (const l of i) e[l.uniformName()] = l.uniform();
		const c = Object.keys(s);
		for (const l of c) {
			const u = s[l];
			e[l] = u;
		}
		r ? this.addTimeUniform(e) : this.removeTimeUniform(e),
			o ? this.addResolutionUniforms(e) : this.removeResolutionUniform(e),
			a ? this.addRaymarchingUniforms(e) : this.removeRaymarchingUniform(e);
	}
	addTimeUniform(e) {
		e.time = this.scene.timeController.timeUniform();
	}
	removeTimeUniform(e) {
		delete e.time;
	}
	timeUniformValue() {
		return this.scene.timeController.timeUniform().value;
	}
	addResolutionUniforms(e) {
		e.resolution = fy.resolution;
	}
	removeResolutionUniform(e) {
		delete e.resolution;
	}
	updateResolution(e, t) {
		fy.resolution.value.copy(e).multiplyScalar(t);
	}
	addRaymarchingUniforms(e) {
		this.scene.sceneTraverser.addLightsRayMarchingUniform(e);
	}
	removeRaymarchingUniform(e) {
		this.scene.sceneTraverser.removeLightsRayMarchingUniform(e);
	}
}
class sW {
	constructor(e) {
		(this._scene = e), (this._viewersById = new Map());
	}
	registerViewer(e) {
		this._viewersById.set(e.id(), e), this._updateCache();
	}
	unregisterViewer(e) {
		this._viewersById.delete(e.id()), this._updateCache();
	}
	traverseViewers(e) {
		this._viewersById.forEach(e);
	}
	viewer(e) {
		const t = {camera: e.camera, canvas: e.canvas, scene: this._scene};
		return le.camerasRegister.createViewer(t);
	}
	firstViewer() {
		return this._firstViewer;
	}
	markViewerAsRendered(e) {
		this._lastRenderedViewer = e;
	}
	lastRenderedViewer() {
		return this._lastRenderedViewer;
	}
	_updateCache() {
		(this._firstViewer = void 0),
			this._viewersById.forEach((e) => {
				this._firstViewer = this._firstViewer || e;
			});
	}
	graphNode() {
		return (this._graphNode = this._graphNode || this._createGraphNode());
	}
	_createGraphNode() {
		return new ai(this._scene, 'SceneViewersRegister');
	}
	markViewerAsSizeUpdated(e) {
		var t;
		this._viewersById.has(e.id()) && ((t = this._graphNode) == null || t.setDirty());
	}
}
class rW {
	constructor() {
		this._requireWebGL2 = !1;
	}
	requireWebGL2() {
		return this._requireWebGL2;
	}
	setRequireWebGL2() {
		this._requireWebGL2 || ((this._requireWebGL2 = !0), le.renderersController.setRequireWebGL2());
	}
}
class oW {
	constructor(e) {
		(this._scene = e), (this._onWindowResizeBound = this._onWindowResize.bind(this));
	}
	graphNode() {
		return (this._graphNode = this._graphNode || this._createGraphNode());
	}
	_createGraphNode() {
		const e = new ai(this._scene, 'SceneWindowController');
		return window.addEventListener('resize', this._onWindowResizeBound), e;
	}
	_onWindowResize() {
		this.graphNode().setSuccessorsDirty();
	}
	dispose() {
		window.removeEventListener('resize', this._onWindowResizeBound);
	}
}
class aW {
	constructor() {
		(this._params_by_id = new Map()), (this._assetsRoot = null);
	}
	register_param(e) {
		this._params_by_id.set(e.graphNodeId(), e);
	}
	deregister_param(e) {
		this._params_by_id.delete(e.graphNodeId());
	}
	traverse_params(e) {
		this._params_by_id.forEach((t, i) => {
			e(t);
		});
	}
	root() {
		return this._assetsRoot;
	}
	setRoot(e) {
		e == '' && (e = null), (this._assetsRoot = e);
	}
}
var ws = ((n) => (
		(n.PENUMBRA = 'raymarchingPenumbra'),
		(n.SHADOW_BIAS_ANGLE = 'raymarchingShadowBiasAngle'),
		(n.SHADOW_BIAS_DISTANCE = 'raymarchingShadowBiasDistance'),
		n
	))(ws || {}),
	qr = ((n) => (
		(n[(n.SPOT = 0)] = 'SPOT'),
		(n[(n.DIRECTIONAL = 1)] = 'DIRECTIONAL'),
		(n[(n.HEMISPHERE = 2)] = 'HEMISPHERE'),
		(n[(n.POINT = 3)] = 'POINT'),
		n
	))(qr || {});
function Vx(n) {
	if (n.isSpotLight) return 0;
	if (n.isDirectionalLight) return 1;
	if (n.isHemisphereLight) return 2;
	if (n.isPointLight) return 3;
}
function Pm(n, e, t, i) {
	e.value[t] = e.value[t] || i();
	const s = ws.PENUMBRA;
	e.value[t].penumbra != n.userData[s] && ((e.value[t].penumbra = n.userData[s]), (e.value.needsUpdate = !0));
}
function Nm(n, e, t, i) {
	(e.value[t] = e.value[t] || i()),
		e.value[t].shadowBiasAngle != n.userData[ws.SHADOW_BIAS_ANGLE] &&
			((e.value[t].shadowBiasAngle = n.userData[ws.SHADOW_BIAS_ANGLE]), (e.value.needsUpdate = !0)),
		e.value[t].shadowBiasDistance != n.userData[ws.SHADOW_BIAS_DISTANCE] &&
			((e.value[t].shadowBiasDistance = n.userData[ws.SHADOW_BIAS_DISTANCE]), (e.value.needsUpdate = !0));
}
function _y() {
	return {penumbra: 0, shadowBiasAngle: 0, shadowBiasDistance: 0};
}
let Uu = 0;
const cW = (n, e) => {
	Pm(n, e, Uu, _y), Nm(n, e, Uu, _y), Uu++;
};
function lW() {
	Uu = 0;
}
function my() {
	return {penumbra: 0, shadowBiasAngle: 0, shadowBiasDistance: 0};
}
let Fu = 0;
const uW = (n, e) => {
	Pm(n, e, Fu, my), Nm(n, e, Fu, my), Fu++;
};
function hW() {
	Fu = 0;
}
function gy() {
	return {penumbra: 0, shadowBiasAngle: 0, shadowBiasDistance: 0};
}
let Bu = 0;
const dW = (n, e) => {
	Pm(n, e, Bu, gy), Nm(n, e, Bu, gy), Bu++;
};
function pW() {
	Bu = 0;
}
function fW(n) {
	switch (Vx(n)) {
		case qr.SPOT:
			return cW;
		case qr.DIRECTIONAL:
			return uW;
		case qr.POINT:
			return dW;
	}
}
class _W {
	constructor(e) {
		(this.scene = e),
			(this._spotLightsRayMarching = {value: []}),
			(this._directionalLightsRayMarching = {value: []}),
			(this._pointLightsRayMarching = {value: []}),
			(this._updateUniformsFunctionByLight = new WeakMap()),
			(this._uniformsByLight = new WeakMap()),
			(this._onObjectTraverseBound = this._onObjectTraverse.bind(this));
	}
	traverseScene(e) {
		lW(), hW(), pW(), (e = e || this.scene.threejsScene()), e.traverse(this._onObjectTraverseBound);
	}
	_onObjectTraverse(e) {
		let t = this._updateUniformsFunctionByLight.get(e);
		if ((t || (e.isLight && ((t = fW(e)), t && this._updateUniformsFunctionByLight.set(e, t))), !t)) return t;
		let i = this._uniformsByLight.get(e);
		i || ((i = this._updateUniformsForLight(e)), i && this._uniformsByLight.set(e, i)), i && t(e, i);
	}
	_updateUniformsForLight(e) {
		switch (Vx(e)) {
			case qr.SPOT:
				return this._spotLightsRayMarching;
			case qr.DIRECTIONAL:
				return this._directionalLightsRayMarching;
			case qr.POINT:
				return this._pointLightsRayMarching;
		}
	}
	addLightsRayMarchingUniform(e) {
		(e[Br.SPOTLIGHTS_RAYMARCHING] = this._spotLightsRayMarching),
			(e[Br.DIRECTIONALLIGHTS_RAYMARCHING] = this._directionalLightsRayMarching),
			(e[Br.POINTLIGHTS_RAYMARCHING] = this._pointLightsRayMarching);
	}
	removeLightsRayMarchingUniform(e) {
		delete e[Br.SPOTLIGHTS_RAYMARCHING],
			delete e[Br.DIRECTIONALLIGHTS_RAYMARCHING],
			delete e[Br.POINTLIGHTS_RAYMARCHING];
	}
}
const vy = [];
class mW {
	constructor(e) {
		(this.scene = e),
			(this._renderersById = new Map()),
			(this._registerTimeByRenderer = new Map()),
			(this._resolves = []);
	}
	registerRenderer(e, t) {
		let i = !0;
		(t == null ? void 0 : t.assignId) == !1 && (i = !1), i && le.renderersController.assignIdToRenderer(e);
		const s = le.renderersController.rendererId(e);
		s != null &&
			(this._renderersById.set(s, e),
			this._registerTimeByRenderer.set(e, performance.now()),
			this._updateCache(),
			this._renderersById.size == 1 && this._flushCallbacksWithRenderer(e));
	}
	dispose() {
		this.renderers(vy);
		for (const e of vy) this.deregisterRenderer(e);
	}
	deregisterRenderer(e) {
		const t = le.renderersController.rendererId(e);
		t != null && (this._renderersById.delete(t), e.dispose(), this._updateCache());
	}
	lastRegisteredRenderer() {
		return this._lastRegisteredRenderer;
	}
	renderers(e) {
		return (
			this._renderersById.forEach((t) => {
				e.push(t);
			}),
			e
		);
	}
	_updateCache() {
		(this._lastRegisteredRenderer = void 0),
			this._registerTimeByRenderer.forEach((e, t) => {
				if (this._lastRegisteredRenderer == null) this._lastRegisteredRenderer = t;
				else {
					const i = this._registerTimeByRenderer.get(this._lastRegisteredRenderer);
					i != null && e > i && (this._lastRegisteredRenderer = t);
				}
			});
	}
	_flushCallbacksWithRenderer(e) {
		const t = [];
		os(this._resolves, t), (this._resolves.length = 0);
		for (const i of t) i(e);
	}
	async waitForAbstractRenderer() {
		return this._lastRegisteredRenderer
			? this._lastRegisteredRenderer
			: new Promise((e, t) => {
					this._resolves.push(e);
			  });
	}
	async waitForRenderer() {
		let e = await this.waitForAbstractRenderer();
		if (e instanceof ss || ((e = e.webGLRenderer), e && e instanceof ss)) return e;
		e && (e instanceof ss || console.log('unexpected renderer:', {renderer: e}));
	}
}
class gW {
	constructor(e) {
		(this.scene = e),
			(this._activeXRController = null),
			(this._activeARController = null),
			(this._activeVRController = null);
	}
	_setActiveXRController(e) {
		this._activeXRController = e;
	}
	activeXRController() {
		return this._activeXRController;
	}
	setARControllerCreationFunction(e) {
		this._ARControllerCreateFunction = e;
	}
	ARControllerCreateFunction() {
		return this._ARControllerCreateFunction;
	}
	setActiveARController(e) {
		(this._activeARController = e), this._setActiveXRController(e);
	}
	activeARController() {
		return this._activeARController;
	}
	setVRControllerCreationFunction(e) {
		this._VRControllerCreateFunction = e;
	}
	VRControllerCreateFunction() {
		return this._VRControllerCreateFunction;
	}
	setActiveVRController(e) {
		(this._activeVRController = e), this._setActiveXRController(e);
	}
	activeVRController() {
		return this._activeVRController;
	}
}
class Im {
	constructor(e) {
		(this._cooker = new t2(this)),
			(this.cookController = new n2()),
			(this._graph = new i2()),
			(this.lifecycleController = new c2(this)),
			(this.loadingController = new l2(this)),
			(this.missingExpressionReferencesController = new h2(this)),
			(this.expressionsController = new a2()),
			(this.nodesController = new D2(this)),
			(this.graphNodesController = new d2(this)),
			(this.renderersRegister = new mW(this)),
			(this._objectsController = new v2(this)),
			(this._referencesController = new nW(this)),
			(this.perfMonitor = new tW(this)),
			(this.sceneTraverser = new _W(this)),
			(this.timeController = new Gh(this)),
			(this._disposed = !1),
			this._graph.setScene(this),
			(this._paramSerializerClass = e == null ? void 0 : e.paramsSerializerClass),
			this.nodesController.createRoot(e == null ? void 0 : e.root),
			le.scenesRegister.registerScene(this);
	}
	threejsScene() {
		return this.root().object;
	}
	setUuid(e) {
		return (this._uuid = e);
	}
	get uuid() {
		return this._uuid;
	}
	setName(e) {
		return (this._name = Im.sanitizeName(e));
	}
	static sanitizeName(e) {
		return (e = _t.sanitizeName(e)), (e = e.toLowerCase()), e;
	}
	name() {
		return this._name;
	}
	get camerasController() {
		return (this._camerasController = this._camerasController || new e2(this));
	}
	mainCamera() {
		return this.camerasController.mainCamera();
	}
	get cooker() {
		return this._cooker;
	}
	get actorsManager() {
		return (this._actorsManager = this._actorsManager || new JH(this));
	}
	get assets() {
		return (this._assetsController = this._assetsController || new aW());
	}
	async waitForCooksCompleted() {
		return await this.cookController.waitForCooksCompleted();
	}
	get dispatchController() {
		return (this._dispatchController = this._dispatchController || new o2(this));
	}
	get eventsDispatcher() {
		return (this._eventsDispatcher = this._eventsDispatcher || new eW(this));
	}
	get webXR() {
		return (this._webXRController = this._webXRController || new gW(this));
	}
	setRaycaster(e) {
		this.eventsDispatcher.setRaycaster(e);
	}
	get graph() {
		return this._graph;
	}
	createNode(e, t) {
		return this.root().createNode(e, t);
	}
	nodesByType(e) {
		return this.nodesController.nodesByType(e);
	}
	get objectsController() {
		return this._objectsController;
	}
	findObjectByMask(e) {
		return this._objectsController.findObjectByMask(e);
	}
	objectsByMask(e, t) {
		return this._objectsController.objectsByMask(e, t);
	}
	get referencesController() {
		return this._referencesController;
	}
	get performance() {
		return (this._performance = this._performance || new r2());
	}
	get viewersRegister() {
		return (this._viewersRegister = this._viewersRegister || new sW(this));
	}
	update(e, t) {
		this.timeController.setDelta(e),
			this.timeController.incrementTimeIfPlaying(xB),
			this.sceneTraverser.traverseScene(t == null ? void 0 : t.scene);
	}
	setFrame(e) {
		this.timeController.setFrame(e);
	}
	setFrameToStart() {
		this.timeController.setFrameToStart();
	}
	frame() {
		return this.timeController.frame();
	}
	time() {
		return this.timeController.time();
	}
	maxFrame() {
		return this.timeController.maxFrame();
	}
	play() {
		this.timeController.play();
	}
	pause() {
		this.timeController.pause();
	}
	incrementTime(e) {
		this.timeController.incrementTime(e);
	}
	incrementTimeIfPlaying(e) {
		this.timeController.incrementTimeIfPlaying(e);
	}
	registerRenderer(e, t) {
		return this.renderersRegister.registerRenderer(e, t);
	}
	get uniformsController() {
		return (this._uniformsController = this._uniformsController || new iW(this));
	}
	get webglController() {
		return (this._webglController = this._webglController || new rW());
	}
	get windowController() {
		return (this._windowController = this._windowController || new oW(this));
	}
	dispose() {
		this._disposed != !0 &&
			((this._disposed = !0),
			this.batchUpdates(() => {
				this.nodesController.traverseNodes((e) => {
					var t;
					(t = e.parent()) == null || t.removeNode(e);
				});
			}),
			this._windowController && (this._windowController.dispose(), (this._windowController = void 0)),
			this.timeController.dispose(),
			this.renderersRegister.dispose(),
			this.camerasController.dispose(),
			this.root().dispose(),
			le.scenesRegister.deregisterScene(this));
	}
	disposed() {
		return this._disposed;
	}
	paramSerializerClass() {
		return this._paramSerializerClass;
	}
	async batchUpdates(e) {
		this._cooker.block(), await e(), this._cooker.unblock();
	}
	node(e) {
		return this.nodesController.node(e);
	}
	root() {
		return this.nodesController.root();
	}
	traverseNodes(e) {
		this.nodesController.traverseNodes(e);
	}
	registerOnBeforeTick(e, t) {
		this.timeController.registerOnBeforeTick(e, t);
	}
	unRegisterOnBeforeTick(e) {
		this.timeController.unRegisterOnBeforeTick(e);
	}
	registeredBeforeTickCallbacks() {
		return this.timeController.registeredBeforeTickCallbacks();
	}
	hasBeforeTickCallback(e) {
		return this.timeController.hasBeforeTickCallback(e);
	}
	registerOnAfterTick(e, t) {
		this.timeController.registerOnAfterTick(e, t);
	}
	unRegisterOnAfterTick(e) {
		this.timeController.unRegisterOnAfterTick(e);
	}
	registeredAfterTickCallbacks() {
		return this.timeController.registeredAfterTickCallbacks();
	}
	hasAfterTickCallback(e) {
		return this.timeController.hasAfterTickCallback(e);
	}
}
class vW {
	constructor(e) {
		(this._warnings = []), (this._readonly = !1), (this._loadedWithoutAssemblers = !1);
	}
	warnings() {
		return this._warnings;
	}
	readonly() {
		return this._readonly;
	}
	loadedWithoutAssemblers() {
		return this._loadedWithoutAssemblers;
	}
	reset() {
		this._warnings = [];
	}
	markAsLoadedWithoutAssemblers() {
		(this._readonly = !0), (this._loadedWithoutAssemblers = !0);
	}
	addWarning(e) {
		this._warnings.push(e), Oc.debugLoadProgress() && console.warn(e);
	}
}
class td {
	constructor(e, t) {
		(this._data = e), (this._options = t), (this.report = new vW(this));
	}
	static async loadData(e, t) {
		return await new td(e, t).scene(t == null ? void 0 : t.serializers);
	}
	setMigrateHelper(e) {
		this._migrateHelper = e;
	}
	migrateHelper() {
		return this._migrateHelper;
	}
	oldPolygonjsSceneVersion() {
		var e;
		const t = this._data.properties;
		if (t) return (e = t.versions) == null ? void 0 : e.polygonjs;
	}
	scene(e) {
		this._migrateHelper && (this._data = this._migrateHelper.migrateData(this._data)),
			Oc.debugLoadProgress() && console.log(`polygonjs version:${this.oldPolygonjsSceneVersion()}`);
		const t = this._data.root,
			s = {
				paramsInitValueOverrides: uo.non_spare_params_data_value(t.params),
				nodeName: Nx,
				serializerClass: e == null ? void 0 : e.nodeSerializerClass,
			},
			r = this._data.embeddedPolyNodes;
		if (r) {
			const h = Object.keys(r);
			for (let d of h) {
				const p = d.split('/'),
					m = p[0],
					g = p[1],
					_ = r[d];
				Qh.createNodeClassAndRegister({node_context: m, node_type: g, data: _});
			}
		}
		const o = new Im({root: s, paramsSerializerClass: e == null ? void 0 : e.paramsSerializerClass});
		this._options &&
			(this._options.sceneName && o.setName(this._options.sceneName),
			this._options.measurePerformanceOnLoad == !0 && o.performance.start()),
			o.loadingController.markAsLoading();
		const a = this._data.properties;
		if (a) {
			const h = a.maxFrame || 600;
			o.timeController.setMaxFrame(h);
			const d = a.maxFrameLocked;
			d && o.timeController.setMaxFrameLocked(d);
			const p = a.realtimeState;
			p != null && o.timeController.setRealtimeState(p), o.setFrame(a.frame || Gh.START_FRAME);
			const m = a.mainCameraNodePath || a.mainCameraPath;
			m && o.camerasController.setMainCameraPath(m);
		}
		o.cooker.block(), (this._base_operations_composer_nodes_with_resolve_required = void 0);
		const l = new ax().dispatchNode(o.root());
		t && l.process_data(this, t);
		const u = this._data.ui;
		return (
			u && l.process_ui_data(this, u),
			this._resolve_operation_containers_with_path_param_resolve(),
			this._options &&
				(this._options.nodeCookWatcher && this._options.nodeCookWatcher(o),
				this._options.configureScene && this._options.configureScene(o)),
			o.loadingController.markAsLoaded(),
			o.cooker.unblock(),
			o
		);
	}
	shadersData() {
		return this._data.shaders;
	}
	jsFunctionBodiesData() {
		return this._data.jsFunctionBodies;
	}
	add_operations_composer_node_with_path_param_resolve_required(e) {
		this._base_operations_composer_nodes_with_resolve_required ||
			(this._base_operations_composer_nodes_with_resolve_required = []),
			this._base_operations_composer_nodes_with_resolve_required.push(e);
	}
	_resolve_operation_containers_with_path_param_resolve() {
		if (this._base_operations_composer_nodes_with_resolve_required)
			for (let e of this._base_operations_composer_nodes_with_resolve_required)
				e.resolveOperationContainersPathParams();
	}
}
class Mc {
	constructor(e) {
		(this.options = e),
			(this._onLoadCompleteCalled = !1),
			(this._progress = 0),
			(this._viewerMarkedAsReady = !1),
			(this._sceneMarkedAsReady = !1),
			this._debug2('new ScenePlayerImporter', e);
	}
	static async loadSceneData(e) {
		const t = new Mc(e);
		return {scene: await t.loadScene(e.serializers), viewer: t._viewer};
	}
	async _onLoadComplete(e) {
		this._onLoadCompleteCalled != !0 &&
			((this._onLoadCompleteCalled = !0),
			this._viewer && this._markViewerAsReady(this._viewer),
			await this._markSceneAsReady(e));
	}
	_markViewerAsReady(e) {
		this._viewerMarkedAsReady ||
			((this._viewerMarkedAsReady = !0), e.markAsReady(), this._dispatchEvent(rr.VIEWER_READY));
	}
	async _markSceneAsReady(e) {
		this._sceneMarkedAsReady ||
			((this._sceneMarkedAsReady = !0),
			await e.cookController.waitForCooksCompleted(),
			e.setFrame(Gh.START_FRAME),
			this.options.autoPlay != !1 && e.play(),
			e.loadingController.dispatchReadyEvent(),
			this._dispatchEvent(rr.SCENE_READY));
	}
	_onNodesCookProgress(e, t) {
		const i = rM.nodes;
		((r, o) => {
			var a;
			const c = i.start + i.mult * r;
			(this._progress = c),
				this.options.onProgress && this.options.onProgress(c, o),
				sM.dispatchProgressEvent(c, (a = this._scene) == null ? void 0 : a.name());
		})(e, t),
			e >= 1 && this._onLoadComplete(t.scene);
	}
	async _watchNodesProgress(e) {
		e.root().loadProgress.watchNodesProgress((t, i) => {
			this._onNodesCookProgress(t, i);
		});
	}
	async loadScene(e) {
		const t = () =>
			new Promise(async (r) => {
				const o = this.options.configureScene,
					c = new td(this.options.sceneData, {
						sceneName: this.options.sceneName,
						configureScene: o,
						nodeCookWatcher: (u) => {
							this._watchNodesProgress(u);
						},
					}).scene(e);
				c.timeController.forbidPlayUntilAllNodesCooked(),
					(this._scene = c),
					this._dispatchEvent(rr.SCENE_CREATED),
					this.options.renderer && c.renderersRegister.registerRenderer(this.options.renderer);
				const l = async () => {
					const u = await c.camerasController.mainCamera({
						findAnyCamera: !1,
						printCameraNotFoundError: this._progress >= 1,
						cameraMaskOverride: this.options.cameraMaskOverride,
					});
					this._debug2('scene.camerasController:', {
						camera: u,
						cameraPath: c.root().mainCameraController.rawCameraPath(),
					}),
						u && this._onCameraCreatorNodeLoadedResolve && this._onCameraCreatorNodeLoadedResolve();
				};
				(this._onCameraCreatorNodeLoadedResolve = () => {
					c.camerasController.removeOnCameraObjectsUpdated(l), r(c);
				}),
					c.camerasController.onCameraObjectsUpdated(l);
			});
		this._scene = await t();
		const i = this._scene;
		return (
			await (async () => {
				const r = this._domElement();
				let o = !1;
				this.options.createViewer != null && (o = this.options.createViewer),
					(r || o) &&
						((this._viewer = await i.camerasController.createMainViewer({
							autoRender: !1,
							renderer: this.options.renderer,
							cameraMaskOverride: this.options.cameraMaskOverride,
						})),
						this._viewer &&
							(r && this._viewer.mount(r),
							this._sceneMarkedAsReady == !0 && this._markViewerAsReady(this._viewer),
							this._dispatchEvent(rr.VIEWER_MOUNTED)));
			})(),
			i
		);
	}
	_domElement() {
		const e = this.options.domElement;
		if (e)
			if (qe(e)) {
				const t = document.getElementById(e);
				if (t) return t;
			} else return e;
	}
	_dispatchEvent(e) {
		this._debug2('_dispatchEvent', {eventName: e, scene: this._scene, viewer: this._viewer});
		const t = [this._domElement(), document];
		if (!this._scene) {
			console.warn('no event emitted as no scene preset');
			return;
		}
		const i = {scene: this._scene, viewer: this._viewer},
			s = (r) => new CustomEvent(r, {detail: i});
		for (let r of t) r && (r.dispatchEvent(s(e)), this._scene && r.dispatchEvent(s(`${e}-${this._scene.name()}`)));
	}
	_debug(e) {
		Mc._debug(e);
	}
	_debug2(e, t) {
		Mc._debug2(e, t);
	}
	static _debug(e) {
		to.debug(e);
	}
	static _debug2(e, t) {
		to.debug2(e, t);
	}
}
class pt {
	constructor(e) {
		this.param = e;
	}
	node() {
		return (this._node = this._node || this.param.node);
	}
	static requiredArguments() {
		return console.warn('Expression.Method._Base.required_arguments virtual method call. Please override'), [];
	}
	static optionalArguments() {
		return [];
	}
	static minAllowedArgumentsCount() {
		return this.requiredArguments().length;
	}
	static maxAllowedArgumentsCount() {
		return this.minAllowedArgumentsCount() + this.optionalArguments().length;
	}
	static allowedArgumentsCount(e) {
		return e >= this.minAllowedArgumentsCount() && e <= this.maxAllowedArgumentsCount();
	}
	processArguments(e) {
		throw 'Expression.Method._Base.process_arguments virtual method call. Please override';
	}
	async getReferencedNodeContainer(e) {
		var t, i;
		const s = this.getReferencedNode(e);
		if (s) {
			let r;
			if (
				(s.isDirty() || ((i = (t = s.flags) == null ? void 0 : t.bypass) != null && i.active())
					? (r = await s.compute())
					: (r = s.containerController.container()),
				r && r.coreContent() != null)
			)
				return r;
			throw `referenced node invalid: ${s.path()}`;
		} else throw `invalid input (${e})`;
	}
	getReferencedParam(e, t) {
		const i = this.node();
		return i ? Ct.findParam(i, e, t) : null;
	}
	findReferencedGraphNode(e, t) {
		if (je(e)) {
			const s = e,
				r = this.node();
			if (r) return r.io.inputs.inputGraphNode(s);
		} else {
			const s = e;
			return this.getReferencedNode(s, t);
		}
		return null;
	}
	getReferencedNode(e, t) {
		let i = null;
		const s = this.node();
		if (qe(e)) {
			if (s) {
				const r = e;
				i = Ct.findNode(s, r, t);
			}
		} else if (s) {
			const r = e;
			i = s.io.inputs.input(r);
		}
		return i || null;
	}
	findDependency(e) {
		return null;
	}
	createDependencyFromIndexOrPath(e) {
		if (this.param.disposed() == !0) return null;
		const {indexOrPath: t} = e,
			i = new Kh(),
			s = t != null ? this.findReferencedGraphNode(t, i) : e.node;
		return s
			? this.createDependency(s, e, i)
			: (le.warn(`node not found for path '${t}' from param '${this.param.path()}'`), null);
	}
	createDependency(e, t, i) {
		return kh.create(this.param, t, e, i);
	}
}
class EW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['number', 'object index (optional)'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	processArguments(e) {
		return new Promise(async (t, i) => {
			if (e.length == 1 || e.length == 2) {
				const s = e[0];
				let r = parseInt(e[1]);
				(isNaN(r) || r == null) && (r = 0);
				let o;
				try {
					o = await this.getReferencedNodeContainer(s);
				} catch (a) {
					i(a);
					return;
				}
				if (o) {
					const a = o.coreContent();
					if (a) {
						const c = a.threejsObjects()[r];
						if (c) {
							const l = c.animations;
							if (!l) return [];
							const u = new Array(l.length);
							let h = 0;
							for (const d of l) (u[h] = d.name), h++;
							t(u);
						}
					} else t([]);
				}
			} else t([]);
		});
	}
}
class CW extends pt {
	static requiredArguments() {
		return [
			['string', 'arguments list'],
			['number', 'index'],
		];
	}
	async processArguments(e) {
		if (e.length == 2) {
			const t = e[0],
				i = e[1];
			return t.split(' ')[i];
		}
		return 0;
	}
}
class yW extends pt {
	static requiredArguments() {
		return [['string', 'arguments list']];
	}
	async processArguments(e) {
		return e.length == 1 ? e[0].split(' ').length : 0;
	}
}
const $o = new Ht(),
	bW = ['min', 'max', 'size', 'center'],
	SW = ['x', 'y', 'z'];
class AW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['string', 'vector name, min, max, size or center'],
			['string', 'component_name, x,y or z'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length >= 1) {
			const t = e[0],
				i = e[1],
				s = e[2],
				r = await this.getReferencedNodeContainer(t);
			if (r) return this._get_value_from_container(r, i, s);
		}
		return 0;
	}
	_get_value_from_container(e, t, i) {
		const s = e.coreContent();
		if ((s ? s.boundingBox($o) : $o.makeEmpty(), !t)) return $o;
		if (bW.indexOf(t) >= 0) {
			let r = new w();
			switch (t) {
				case 'size':
					$o.getSize(r);
					break;
				case 'center':
					$o.getCenter(r);
					break;
				default:
					r = $o[t];
			}
			return i ? (SW.indexOf(i) >= 0 ? r[i] : -1) : r;
		} else return -1;
	}
}
async function xW(n) {
	const t = await (await fetch(n)).blob();
	return (window.URL || window.webkitURL).createObjectURL(t);
}
class MW extends pt {
	static requiredArguments() {
		return [['string', 'url']];
	}
	async processArguments(e) {
		if (e.length >= 1) {
			const t = e[0];
			return await xW(t);
		}
		return '';
	}
}
class TW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['number', 'object index'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 2) {
			const t = e[0];
			let i = parseInt(e[1]);
			isNaN(i) && (i = 0);
			const s = await this.getReferencedNodeContainer(t);
			if (s) {
				const r = s.coreContent();
				if (r) {
					const o = r.threejsObjects().filter((a) => le.camerasRegister.objectRegistered(a))[i];
					if (o) return o.name;
				}
			}
		}
		return '';
	}
}
class RW extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = await this.getReferencedNodeContainer(t);
			if (i) {
				const s = i.coreContent();
				if (s) {
					const r = s.threejsObjects().filter((c) => le.camerasRegister.objectRegistered(c)),
						o = new Array(r.length);
					let a = 0;
					for (const c of r) (o[a] = c.name), a++;
					return o;
				}
			}
		}
		return [];
	}
}
class wW extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = await this.getReferencedNodeContainer(t);
			if (i) {
				const s = i.coreContent();
				if (s) return s.threejsObjects().filter((o) => le.camerasRegister.objectRegistered(o)).length;
			}
		}
		return 0;
	}
}
const Ey = new Ht(),
	xp = new w();
class OW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['string', 'component_name, x,y or z'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length >= 1) {
			const t = e[0],
				i = e[1],
				s = await this.getReferencedNodeContainer(t);
			if (s) {
				const r = s.coreContent();
				if (r)
					if ((r.boundingBox(Ey), Ey.getCenter(xp), i)) {
						const o = xp[i];
						return o ?? 0;
					} else return xp;
			}
		}
		return 0;
	}
}
class PW extends pt {
	static requiredArguments() {
		return [['string', 'path to param']];
	}
	findDependency(e) {
		const {indexOrPath: t} = e;
		if (t == null || !qe(t)) return null;
		const i = new Kh(),
			s = this.getReferencedParam(t, i);
		return s ? ((this._referencedParam = s), this.createDependency(s, {indexOrPath: t}, i)) : null;
	}
	async processArguments(e) {
		return new Promise(async (t, i) => {
			let s = 0;
			if (e.length == 1) {
				const r = e[0],
					o = this._referencedParam || this.getReferencedParam(r);
				if (o) {
					o.isDirty() && (await o.compute());
					const a = o.value;
					a != null && ((s = a), t(s));
				} else i(0);
			}
		});
	}
}
class NW extends pt {
	static requiredArguments() {
		return [['string', 'path to param']];
	}
	findDependency(e) {
		const {indexOrPath: t} = e;
		if (t == null || !qe(t)) return null;
		const i = new Kh(),
			s = this.getReferencedParam(t, i);
		return s ? ((this._referencedParam = s), this.createDependency(s, {indexOrPath: t}, i)) : null;
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = this._referencedParam || this.getReferencedParam(t);
			if (i) {
				i.isDirty() && (await i.compute());
				const s = i.value;
				if (s instanceof Oh || s instanceof zi) {
					const r = s.graphNodePath();
					if (r != null) return r;
				}
			}
		}
		return '';
	}
}
var oi = ((n) => (
		(n.ACTOR = 'actor'),
		(n.ACTOR_INSTANCE = 'actorInstance'),
		(n.ACTOR_POINT = 'actorPoint'),
		(n.ADD = 'add'),
		(n.ADJACENCY = 'adjacency'),
		(n.ANIMATION_COPY = 'animationCopy'),
		(n.ATTRIB_ADD_MULT = 'attribAddMult'),
		(n.ATTRIB_COPY = 'attribCopy'),
		(n.ATTRIB_CREATE = 'attribCreate'),
		(n.ATTRIB_DELETE = 'attribDelete'),
		(n.ATTRIB_ID = 'attribId'),
		(n.ATTRIB_PROMOTE = 'attribPromote'),
		(n.ATTRIB_RENAME = 'attribRename'),
		(n.ATTRIB_SET_AT_INDEX = 'attribSetAtIndex'),
		(n.ATTRIB_TRANSFER = 'attribTransfer'),
		(n.AUDIO_NOTES = 'audioNotes'),
		(n.AXES_HELPER = 'axesHelper'),
		(n.BBOX_SCATTER = 'bboxScatter'),
		(n.BLEND = 'blend'),
		(n.BOX = 'box'),
		(n.BOX_LINES = 'boxLines'),
		(n.BVH = 'BVH'),
		(n.BVH_VISUALIZER = 'BVHVisualizer'),
		(n.CACHE = 'cache'),
		(n.CAD_BOOLEAN = 'CADBoolean'),
		(n.CAD_BOX = 'CADBox'),
		(n.CAD_CIRCLE = 'CADCircle'),
		(n.CAD_CIRCLE_2D = 'CADCircle2D'),
		(n.CAD_CIRCLE_3_POINTS = 'CADCircle3Points'),
		(n.CAD_CONE = 'CADCone'),
		(n.CAD_CONVERT_DIMENSION = 'CADConvertDimension'),
		(n.CAD_CURVE_2D_TO_SURFACE = 'CADCurve2DToSurface'),
		(n.CAD_CURVE_FROM_POINTS = 'CADCurveFromPoints'),
		(n.CAD_CURVE_FROM_POINTS_2D = 'CADCurveFromPoints2D'),
		(n.CAD_CURVE_TRIM = 'CADCurveTrim'),
		(n.CAD_ELLIPSE = 'CADEllipse'),
		(n.CAD_ELLIPSE_2D = 'CADEllipse2D'),
		(n.CAD_EXPORTER_STEP = 'CADExporterSTEP'),
		(n.CAD_EXTRUDE = 'CADExtrude'),
		(n.CAD_FILE_STEP = 'CADFileSTEP'),
		(n.CAD_FILLET = 'CADFillet'),
		(n.CAD_GROUP = 'CADGroup'),
		(n.CAD_LOFT = 'CADLoft'),
		(n.CAD_MIRROR = 'CADMirror'),
		(n.CAD_PIPE = 'CADPipe'),
		(n.CAD_POINT = 'CADPoint'),
		(n.CAD_POINT_2D = 'CADPoint2D'),
		(n.CAD_POINTS_FROM_CURVE = 'CADPointsFromCurve'),
		(n.CAD_RECTANGLE = 'CADRectangle'),
		(n.CAD_REVOLUTION = 'CADRevolution'),
		(n.CAD_SEGMENT = 'CADSegment'),
		(n.CAD_SPHERE = 'CADSphere'),
		(n.CAD_THICKNESS = 'CADThickness'),
		(n.CAD_TORUS = 'CADTorus'),
		(n.CAD_TRANSFORM = 'CADTransform'),
		(n.CAD_TRANSFORM_2D = 'CADTransform2D'),
		(n.CAD_TRIANGULATE = 'CADTriangulate'),
		(n.CAD_TUBE = 'CADTube'),
		(n.CAD_UNPACK = 'CADUnpack'),
		(n.CAD_WEDGE = 'CADWedge'),
		(n.CAMERA_PROJECT = 'cameraProject'),
		(n.CAPSULE = 'capsule'),
		(n.CIRCLE = 'circle'),
		(n.CIRCLE_3_POINTS = 'circle3Points'),
		(n.CLOTH_PREPARE = 'clothPrepare'),
		(n.CLOTH_SOLVER = 'clothSolver'),
		(n.COLOR = 'color'),
		(n.CONE = 'cone'),
		(n.CONTACT_SHADOWS = 'contactShadows'),
		(n.COPY = 'copy'),
		(n.CURVE_FROM_POINTS = 'curveFromPoints'),
		(n.CSG_ARC = 'CSGArc'),
		(n.CSG_BOOLEAN = 'CSGBoolean'),
		(n.CSG_CENTER = 'CSGCenter'),
		(n.CSG_CIRCLE = 'CSGCircle'),
		(n.CSG_BOX = 'CSGBox'),
		(n.CSG_DODECAHEDRON = 'CSGDodecahedron'),
		(n.CSG_ELLIPSE = 'CSGEllipse'),
		(n.CSG_ELLIPSOID = 'CSGEllipsoid'),
		(n.CSG_EXPAND = 'CSGExpand'),
		(n.CSG_EXTRUDE_LINEAR = 'CSGExtrudeLinear'),
		(n.CSG_EXTRUDE_RECTANGULAR = 'CSGExtrudeRectangular'),
		(n.CSG_EXTRUDE_ROTATE = 'CSGExtrudeRotate'),
		(n.CSG_HULL = 'CSGHull'),
		(n.CSG_LINE = 'CSGLine'),
		(n.CSG_MIRROR = 'CSGMirror'),
		(n.CSG_OFFSET = 'CSGOffset'),
		(n.CSG_POLYGON = 'CSGPolygon'),
		(n.CSG_POLYHEDRON = 'CSGPolyhedron'),
		(n.CSG_PROJECT = 'CSGProject'),
		(n.CSG_RECTANGLE = 'CSGRectangle'),
		(n.CSG_SPHERE = 'CSGSphere'),
		(n.CSG_STAR = 'CSGStar'),
		(n.CSG_TORUS = 'CSGTorus'),
		(n.CSG_TRANSFORM_2D = 'CSGTransform2D'),
		(n.CSG_TRANSFORM_RESET = 'CSGTransformReset'),
		(n.CSG_TRIANGLE = 'CSGTriangle'),
		(n.CSG_TRIANGULATE = 'CSGTriangulate'),
		(n.CSG_TUBE = 'CSGTube'),
		(n.CSG_TUBE_ELLIPTIC = 'CSGTubeElliptic'),
		(n.CSS2D_OBJECT = 'CSS2DObject'),
		(n.CSS3D_OBJECT = 'CSS3DObject'),
		(n.DATA = 'data'),
		(n.DATA_URL = 'dataUrl'),
		(n.DECAL = 'decal'),
		(n.DELETE = 'delete'),
		(n.DELETE_BY_NAME = 'deleteByName'),
		(n.ENTITY_BUILDER = 'entityBuilder'),
		(n.FACET = 'facet'),
		(n.FUSE = 'fuse'),
		(n.GROUND_PROJECTED_SKYBOX = 'groundProjectedSkybox'),
		(n.HIERARCHY = 'hierarchy'),
		(n.ICOSAHEDRON = 'icosahedron'),
		(n.IFC_FILTER_CATEGORIES = 'IFCFilterCategories'),
		(n.INSTANCE = 'instance'),
		(n.INSTANCE_BUILDER = 'instanceBuilder'),
		(n.INSTANCED_MESH_TO_MESH = 'instancedMeshToMesh'),
		(n.INSTANCE_UPDATE = 'instanceUpdate'),
		(n.JITTER = 'jitter'),
		(n.LATTICE = 'lattice'),
		(n.LAYER = 'layer'),
		(n.LOD = 'lod'),
		(n.LOOK_AT = 'lookAt'),
		(n.MAPBOX_TRANSFORM = 'mapboxTransform'),
		(n.MATERIAL = 'material'),
		(n.MATERIAL_PROPERTIES = 'materialProperties'),
		(n.MERGE = 'merge'),
		(n.METABALL = 'metaball'),
		(n.MIRROR = 'mirror'),
		(n.NOISE = 'noise'),
		(n.NORMALS = 'normals'),
		(n.NORMALS_HELPER = 'normalsHelper'),
		(n.OBJECT_BUILDER = 'objectBuilder'),
		(n.OBJECT_PROPERTIES = 'objectProperties'),
		(n.OBJECTS_LAYOUT = 'objectsLayout'),
		(n.PALETTE = 'palette'),
		(n.PARTICLES_SYSTEM_GPU = 'particlesSystemGpu'),
		(n.PARTICLES_SYSTEM_GPU_ATTRIBUTES = 'particlesSystemGpuAttributes'),
		(n.PARTICLES_SYSTEM_GPU_MATERIAL = 'particlesSystemGpuMaterial'),
		(n.PHYSICS_DEBUG = 'physicsDebug'),
		(n.PHYSICS_GROUND = 'physicsGround'),
		(n.PHYSICS_RBD_ATTRIBUTES = 'physicsRBDAttributes'),
		(n.PHYSICS_RBD_JOINTS = 'physicsRBDJoints'),
		(n.PHYSICS_WORLD = 'physicsWorld'),
		(n.PHYSICS_PLAYER = 'physicsPlayer'),
		(n.PLANE = 'plane'),
		(n.POINT = 'point'),
		(n.POINT_BUILDER = 'pointBuilder'),
		(n.POLAR_TRANSFORM = 'polarTransform'),
		(n.POLYWIRE = 'polywire'),
		(n.QUAD_CONNECTION = 'quadConnection'),
		(n.QUAD_CORNERS = 'quadCorners'),
		(n.QUAD_EXTRUDE = 'quadExtrude'),
		(n.QUAD_PLANE = 'quadPlane'),
		(n.QUAD_SMOOTH = 'quadSmooth'),
		(n.QUAD_TRIANGULATE = 'quadTriangulate'),
		(n.QUAD_UNIQUE_NEIGHBOUR_ID = 'quadUniqueNeighbourId'),
		(n.QUADRANGULATE = 'quadrangulate'),
		(n.RAY = 'ray'),
		(n.REFLECTOR = 'reflector'),
		(n.RING = 'ring'),
		(n.ROUNDED_BOX = 'roundedBox'),
		(n.SCATTER = 'scatter'),
		(n.SDF_BUILDER = 'SDFBuilder'),
		(n.SET_CHILDREN = 'setChildren'),
		(n.SET_GEOMETRY = 'setGeometry'),
		(n.SHEAR = 'shear'),
		(n.SHORTEST_PATH = 'shortestPath'),
		(n.SKELETON_HELPER = 'skeletonHelper'),
		(n.SKIN = 'skin'),
		(n.SORT = 'sort'),
		(n.SPHERE = 'sphere'),
		(n.SPLIT = 'split'),
		(n.SUBDIVIDE = 'subdivide'),
		(n.SWITCH = 'switch'),
		(n.TANGENT = 'tangent'),
		(n.TANGENTS_HELPER = 'tangentsHelper'),
		(n.TET_DELETE = 'tetDelete'),
		(n.TET_EMBED = 'tetEmbed'),
		(n.TET_SOFT_BODY_SOLVER = 'tetSoftBodySolver'),
		(n.TET_TRIANGULATE = 'tetTriangulate'),
		(n.TETRAHEDRALIZE = 'tetrahedralize'),
		(n.TETRAHEDRON = 'tetrahedron'),
		(n.TEXT = 'text'),
		(n.TEXTURE_COPY = 'textureCopy'),
		(n.TEXTURE_PROPERTIES = 'textureProperties'),
		(n.TORUS = 'torus'),
		(n.TORUS_KNOT = 'torusKnot'),
		(n.TRANSFORM = 'transform'),
		(n.TRANSFORM_COPY = 'transformCopy'),
		(n.TRANSFORM_MULTI = 'transformMulti'),
		(n.TRANSFORM_RESET = 'transformReset'),
		(n.TUBE = 'tube'),
		(n.UV_LAYOUT = 'uvLayout'),
		(n.UV_TRANSFORM = 'uvTransform'),
		(n.UV_UNWRAP = 'uvUnwrap'),
		(n.WEB_XR_AR_ESTIMATED_LIGHT = 'webXRAREstimatedLight'),
		(n.WFC_BUILDER = 'WFCBuilder'),
		(n.WFC_DEBUG = 'WFCDebug'),
		(n.WFC_SOLVER = 'WFCSolver'),
		(n.WFC_RULE_FROM_PROXIMITY = 'WFCRuleFromProximity'),
		(n.WFC_RULE_CONNECTION_FROM_SIDE_NAME = 'WFCRuleConnectionFromSideName'),
		(n.WFC_RULE_CONNECTION_TO_GRID_BORDER = 'WFCRuleConnectionToGridBorder'),
		(n.WFC_RULE_TILE_WEIGHT = 'WFCRuleTileWeight'),
		(n.WFC_TILE_EMPTY_OBJECT = 'WFCTileEmptyObject'),
		(n.WFC_TILE_ERROR_OBJECT = 'WFCTileErrorObject'),
		(n.WFC_TILE_UNRESOLVED_OBJECT = 'WFCTileUnresolvedObject'),
		(n.WFC_TILE_PROPERTIES = 'WFCTileProperties'),
		(n.WFC_TILE_SIDE_NAME = 'WFCTileSideName'),
		(n.WFC_TILE_TRANSFORM = 'WFCTileTransform'),
		n
	))(oi || {}),
	Hn = ((n) => (
		(n.FILE_3DS = 'file3DS'),
		(n.FILE_DRC = 'fileDRC'),
		(n.FILE_FBX = 'fileFBX'),
		(n.FILE_GEOJSON = 'fileGEOJSON'),
		(n.FILE_GLTF = 'fileGLTF'),
		(n.FILE_JSON = 'fileJSON'),
		(n.FILE_MPD = 'fileMPD'),
		(n.FILE_OBJ = 'fileOBJ'),
		(n.FILE_PDB = 'filePDB'),
		(n.FILE_PLY = 'filePLY'),
		(n.FILE_STL = 'fileSTL'),
		(n.FILE_SVG = 'fileSVG'),
		(n.FILE_USDZ = 'fileUSDZ'),
		(n.FILE_VOX = 'fileVOX'),
		n
	))(Hn || {}),
	zf = ((n) => (
		(n.FILE_DRC = 'fileMultiDRC'),
		(n.FILE_FBX = 'fileMultiFBX'),
		(n.FILE_GLTF = 'fileMultiGLTF'),
		(n.FILE_JSON = 'fileMultiJSON'),
		(n.FILE_MPD = 'fileMultiMPD'),
		(n.FILE_OBJ = 'fileMultiOBJ'),
		(n.FILE_PDB = 'fileMultiPDB'),
		(n.FILE_PLY = 'fileMultiPLY'),
		(n.FILE_STL = 'fileMultiSTL'),
		(n.FILE_SVG = 'fileMultiSVG'),
		n
	))(zf || {}),
	pc = ((n) => (
		(n.EXPORTER_GLTF = 'exporterGLTF'),
		(n.EXPORTER_OBJ = 'exporterOBJ'),
		(n.EXPORTER_PLY = 'exporterPLY'),
		(n.EXPORTER_STL = 'exporterSTL'),
		(n.EXPORTER_USDZ = 'exporterUSDZ'),
		n
	))(pc || {}),
	Gx = ((n) => ((n.COPY = 'copy'), (n.EASING = 'easing'), (n.PLAY = 'play'), (n.TARGET = 'target'), n))(Gx || {});
function Cy(n) {
	return n && n.type() == oi.COPY && n.type() == Gx.COPY;
}
class IW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to copy'],
			['integer', 'default value'],
		];
	}
	static optionalArguments() {
		return [['string', 'attribute name (optional)']];
	}
	findDependency(e) {
		if (e.indexOrPath == null) return null;
		const t = this.findReferencedGraphNode(e.indexOrPath);
		if (Cy(t)) {
			const i = t.stampNode();
			return this.createDependency(i, {indexOrPath: e.indexOrPath});
		}
		return null;
	}
	processArguments(e) {
		return new Promise((t, i) => {
			if (e.length >= 1) {
				const s = e[0],
					r = e[1] || 0,
					o = e[2],
					a = this.node(),
					c = a ? Ct.findNode(a, s) : null;
				let l;
				Cy(c) && (l = c.stampValue(o)), l == null && (l = r), t(l);
			} else t(0);
		});
	}
}
const DW = [0, '0', 'x'],
	LW = [1, '1', 'y'];
class UW extends pt {
	constructor() {
		super(...arguments), (this._resolution = new re());
	}
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['string', 'component_name: x or y'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 1 || e.length == 2) {
			const t = e[0],
				i = e[1],
				s = await this.getReferencedNodeContainer(t);
			if (s) {
				const r = s.resolution();
				if (i) {
					if (DW.includes(i)) return r[0];
					if (LW.includes(i)) return r[1];
				} else return this._resolution.set(r[0], r[1]), this._resolution;
			}
			return this._resolution.set(1, 1), e.length == 1 ? 1 : this._resolution;
		}
		return 1;
	}
}
class FW extends pt {
	static requiredArguments() {
		return [];
	}
	async processArguments(e) {
		return Cr.isMobile();
	}
}
class BW extends pt {
	static requiredArguments() {
		return [];
	}
	async processArguments(e) {
		return Cr.isTouchDevice();
	}
}
class kW extends pt {
	static requiredArguments() {
		return [['array_or_string', 'array or string to count elements of']];
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0];
			if (qe(t) || ft(t)) return t.length;
		}
		return 0;
	}
}
class VW extends pt {
	static requiredArguments() {
		return [
			['array', 'array to join the elements of'],
			['separator', 'separator used to join the elements'],
		];
	}
	async processArguments(e) {
		if (e.length == 1 || e.length == 2) {
			const t = e[0];
			let i = e[1];
			if ((i == null && (i = ' '), ft(t))) return t.join(i);
		}
		return '';
	}
}
class GW extends pt {
	static requiredArguments() {
		return [['string', 'javascript expression']];
	}
	async processArguments(e) {
		let t = 0;
		if (e.length == 1) {
			const i = e[0];
			if (((this._function = this._function || this._create_function(i)), this._function))
				try {
					t = this._function(this.param.scene(), this.param.node, this.param);
				} catch (s) {
					console.warn('expression error'), console.warn(s);
				}
		}
		return t;
	}
	_create_function(e) {
		return new Function('scene', 'node', 'param', `return ${e}`);
	}
}
class zW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['string', 'attribute name'],
			['index', 'object index'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	processArguments(e) {
		return new Promise(async (t, i) => {
			if (e.length == 2 || e.length == 3) {
				const s = e[0],
					r = e[1],
					o = e[2] || 0;
				let a = null;
				try {
					a = await this.getReferencedNodeContainer(s);
				} catch (c) {
					i(c);
				}
				if (a) {
					const c = this._get_value_from_container(a, r, o);
					t(c);
				}
			} else console.warn(`${e.length} given when 2 or 3 expected`), t(0);
		});
	}
	_get_value_from_container(e, t, i) {
		const s = e.coreContent();
		if (s) {
			const r = s.allCoreObjects()[i];
			return r ? r.attribValue(t) : 0;
		} else return null;
	}
}
class HW extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = await this.getReferencedNodeContainer(t);
			if (i) {
				const s = i.coreContent();
				if (s) return s.allObjects().length;
			}
		}
		return 0;
	}
}
class WW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['number', 'object index'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 2) {
			const t = e[0];
			let i = parseInt(e[1]);
			isNaN(i) && (i = 0);
			const s = await this.getReferencedNodeContainer(t);
			if (s) {
				const r = s.coreContent();
				if (r) {
					const o = r.allObjects()[i];
					if (o) return o.name;
				}
			}
		}
		return '';
	}
}
class jW extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = await this.getReferencedNodeContainer(t);
			if (i) {
				const s = i.coreContent();
				if (s) {
					const r = s.allObjects(),
						o = new Array(r.length);
					let a = 0;
					for (const c of r) (o[a] = c.name), a++;
					return o;
				}
			}
		}
		return [];
	}
}
class XW extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		const {indexOrPath: t} = e;
		if (t == null) return null;
		const i = this.findReferencedGraphNode(t);
		if (i) {
			const s = i;
			if (s.nameController) {
				const r = s.nameController.graphNode();
				return this.createDependency(r, {indexOrPath: t});
			}
		}
		return null;
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = this.getReferencedNode(t);
			if (i) {
				const s = i.name();
				return CA(s);
			}
		}
		return 0;
	}
}
class $W extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		const {indexOrPath: t} = e;
		if (t == null) return null;
		const i = this.findReferencedGraphNode(t);
		if (i) {
			const s = i;
			if (s.nameController) {
				const r = s.nameController.graphNode();
				return this.createDependency(r, {indexOrPath: t});
			}
		}
		return null;
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = this.getReferencedNode(t);
			if (i) return i.name();
		}
		return '';
	}
}
class qW extends pt {
	static requiredArguments() {
		return [['string', 'number']];
	}
	async processArguments(e) {
		const t = e[0] || 2;
		return `${e[1] || 0}`.padStart(t, '0');
	}
}
class YW extends pt {
	static requiredArguments() {
		return [];
	}
	async processArguments(e) {
		return le.playerMode();
	}
}
const yy = 3,
	by = [];
class KW extends pt {
	static requiredArguments() {
		return [
			['string', 'path to node'],
			['string', 'attribute name'],
			['index', 'point index'],
		];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	processArguments(e) {
		return new Promise(async (t, i) => {
			if (e.length == yy) {
				const s = e[0],
					r = e[1],
					o = e[2];
				let a = null;
				try {
					a = await this.getReferencedNodeContainer(s);
				} catch (c) {
					i(c);
				}
				if (a) {
					const c = this._get_value_from_container(a, r, o);
					t(c);
				}
			} else console.warn(`${e.length} given when expected ${yy}`), t(0);
		});
	}
	_get_value_from_container(e, t, i) {
		const s = e.coreContent();
		if (s) {
			s.points(by);
			const r = by[i];
			return r ? r.attribValue(t) : 0;
		} else return null;
	}
}
class ZW extends pt {
	static requiredArguments() {
		return [['string', 'path to node']];
	}
	findDependency(e) {
		return this.createDependencyFromIndexOrPath(e);
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0],
				i = await this.getReferencedNodeContainer(t);
			if (i) {
				const s = i.coreContent();
				if (s) return s.pointsCount();
			}
		}
		return 0;
	}
}
class QW extends pt {
	static requiredArguments() {
		return [, ['x', 'value'], ['min', 'range min'], ['max', 'range max']];
	}
	async processArguments(e) {
		if (e.length == 3) {
			const t = e[0],
				i = e[1],
				s = e[2];
			return bn.smoothstep(t, i, s);
		}
		return 0;
	}
}
class JW extends pt {
	static requiredArguments() {
		return [, ['x', 'value'], ['min', 'range min'], ['max', 'range max']];
	}
	async processArguments(e) {
		if (e.length == 3) {
			const t = e[0],
				i = e[1],
				s = e[2];
			return bn.smootherstep(t, i, s);
		}
		return 0;
	}
}
function Sy(n) {
	return n && n.type() == Da.SOLVER;
}
class e4 extends pt {
	static requiredArguments() {
		return [];
	}
	static optionalArguments() {
		return [['string', 'path to solver node']];
	}
	_solverNode() {
		return this.param.node.parentController.findParent((t) => t.type() == Da.SOLVER);
	}
	findDependency(e) {
		const {indexOrPath: t} = e,
			i = t ? this.findReferencedGraphNode(t) : this._solverNode();
		if (Sy(i)) {
			const s = i.iterationStamp();
			return this.createDependency(s, {indexOrPath: t, node: i});
		}
		return null;
	}
	async processArguments(e) {
		const t = e[0] || '..',
			i = await this.getReferencedNode(t);
		return i && Sy(i) ? i.iterationStamp().iteration() : 0;
	}
}
class t4 extends pt {
	static requiredArguments() {
		return [['string', 'string to count characters of']];
	}
	async processArguments(e) {
		if (e.length == 1) {
			const t = e[0];
			if (qe(t)) return t.length;
		}
		return 0;
	}
}
class n4 extends pt {
	static requiredArguments() {
		return [];
	}
	async processArguments(e) {
		let t = '';
		for (let i of e) i == null && (i = ''), (t += `${i}`);
		return t;
	}
}
class i4 extends pt {
	static requiredArguments() {
		return [
			['string', 'string to get index from'],
			['string', 'char to find index of'],
		];
	}
	async processArguments(e) {
		if (e.length == 2) {
			const t = e[0],
				i = e[1];
			return t.indexOf(i);
		}
		return -1;
	}
}
function s4(n) {
	return n == null ? '' : qe(n) ? n : `${n}`;
}
function Ay(n, e) {
	return n == null ? e : je(n) ? n : parseInt(n);
}
class r4 extends pt {
	static requiredArguments() {
		return [
			['string', 'string to get range from'],
			['integer', 'range start'],
			['integer', 'range size'],
		];
	}
	async processArguments(e) {
		const t = s4(e[0]),
			i = Ay(e[1], 0);
		let s = Ay(e[2], 1);
		return t ? t.substring(i, i + s) : '';
	}
}
class o4 extends pt {
	constructor() {
		super(...arguments), (this._size = new re());
	}
	static requiredArguments() {
		return [[]];
	}
	findDependency(e) {
		return this.param.addGraphInput(this.param.scene().viewersRegister.graphNode()), null;
	}
	async processArguments(e) {
		var t;
		return (t = this.param.scene().viewersRegister.lastRenderedViewer()) == null || t.size(this._size), this._size;
	}
}
class a4 extends pt {
	constructor() {
		super(...arguments), (this._windowSize = new re());
	}
	static requiredArguments() {
		return [[]];
	}
	findDependency(e) {
		return this.param.addGraphInput(this.param.scene().windowController.graphNode()), null;
	}
	async processArguments(e) {
		return this._windowSize.set(window.innerWidth, window.innerHeight), this._windowSize;
	}
}
var dt = ((n) => (
	(n.animationNames = 'animationNames'),
	(n.arg = 'arg'),
	(n.argc = 'argc'),
	(n.bbox = 'bbox'),
	(n.blob = 'blob'),
	(n.cameraName = 'cameraName'),
	(n.cameraNames = 'cameraNames'),
	(n.camerasCount = 'camerasCount'),
	(n.centroid = 'centroid'),
	(n.ch = 'ch'),
	(n.chsop = 'chsop'),
	(n.copy = 'copy'),
	(n.copRes = 'copRes'),
	(n.isDeviceMobile = 'isDeviceMobile'),
	(n.isDeviceTouch = 'isDeviceTouch'),
	(n.len = 'len'),
	(n.join = 'join'),
	(n.js = 'js'),
	(n.object = 'object'),
	(n.objectsCount = 'objectsCount'),
	(n.objectName = 'objectName'),
	(n.objectNames = 'objectNames'),
	(n.opdigits = 'opdigits'),
	(n.opname = 'opname'),
	(n.padzero = 'padzero'),
	(n.playerMode = 'playerMode'),
	(n.point = 'point'),
	(n.pointsCount = 'pointsCount'),
	(n.smoothstep = 'smoothstep'),
	(n.smootherstep = 'smootherstep'),
	(n.solverIteration = 'solverIteration'),
	(n.strCharsCount = 'strCharsCount'),
	(n.strConcat = 'strConcat'),
	(n.strIndex = 'strIndex'),
	(n.strSub = 'strSub'),
	(n.viewerSize = 'viewerSize'),
	(n.windowSize = 'windowSize'),
	n
))(dt || {});
class c4 {
	static run(e) {
		e.expressionsRegister.register(EW, dt.animationNames),
			e.expressionsRegister.register(CW, dt.arg),
			e.expressionsRegister.register(yW, dt.argc),
			e.expressionsRegister.register(AW, dt.bbox),
			e.expressionsRegister.register(MW, dt.blob),
			e.expressionsRegister.register(TW, dt.cameraName),
			e.expressionsRegister.register(RW, dt.cameraNames),
			e.expressionsRegister.register(wW, dt.camerasCount),
			e.expressionsRegister.register(OW, dt.centroid),
			e.expressionsRegister.register(PW, dt.ch),
			e.expressionsRegister.register(NW, dt.chsop),
			e.expressionsRegister.register(IW, dt.copy),
			e.expressionsRegister.register(UW, dt.copRes),
			e.expressionsRegister.register(FW, dt.isDeviceMobile),
			e.expressionsRegister.register(BW, dt.isDeviceTouch),
			e.expressionsRegister.register(kW, dt.len),
			e.expressionsRegister.register(VW, dt.join),
			e.expressionsRegister.register(GW, dt.js),
			e.expressionsRegister.register(zW, dt.object),
			e.expressionsRegister.register(HW, dt.objectsCount),
			e.expressionsRegister.register(WW, dt.objectName),
			e.expressionsRegister.register(jW, dt.objectNames),
			e.expressionsRegister.register(XW, dt.opdigits),
			e.expressionsRegister.register($W, dt.opname),
			e.expressionsRegister.register(qW, dt.padzero),
			e.expressionsRegister.register(YW, dt.playerMode),
			e.expressionsRegister.register(KW, dt.point),
			e.expressionsRegister.register(ZW, dt.pointsCount),
			e.expressionsRegister.register(QW, dt.smoothstep),
			e.expressionsRegister.register(JW, dt.smootherstep),
			e.expressionsRegister.register(e4, dt.solverIteration),
			e.expressionsRegister.register(t4, dt.strCharsCount),
			e.expressionsRegister.register(n4, dt.strConcat),
			e.expressionsRegister.register(i4, dt.strIndex),
			e.expressionsRegister.register(r4, dt.strSub),
			e.expressionsRegister.register(o4, dt.viewerSize),
			e.expressionsRegister.register(a4, dt.windowSize);
	}
}
var Dm = 32,
	zx = new Uint16Array(Dm);
for (var Mp = 0; Mp < Dm; Mp++) zx[Mp] = 28898;
const l4 = new Rh(zx, Dm, 1, l_, ki);
class Hx extends wi {
	constructor() {
		super(...arguments), (this.flags = new NG(this));
	}
	static context() {
		return fe.COP;
	}
	initializeBaseNode() {
		this.io.outputs.setHasOneOutput();
	}
	__textureSync__() {
		return this.___textureSync;
	}
	setTexture(e) {
		(this.___textureSync = e), (e.name = this.path()), this._setContainer(e);
	}
	_clearTexture() {
		this._setContainer(l4);
	}
}
var Wx = ((n) => (
	(n.Uint8Array = 'Uint8Array'),
	(n.Uint8ClampedArray = 'Uint8ClampedArray'),
	(n.Uint16Array = 'Uint16Array'),
	(n.Float32Array = 'Float32Array'),
	n
))(Wx || {});
class u4 {
	constructor(e) {
		this.bufferType = e || (Cr.isiOS() ? 'Uint16Array' : 'Float32Array');
	}
	fromRenderTarget(e, t) {
		return (
			(!this._dataTexture || !this._sameDimensions(t.texture)) &&
				(this._dataTexture = this._createDataTexture(t.texture)),
			this._copyToDataTexture(e, t),
			this._dataTexture
		);
	}
	reset() {
		this._dataTexture = void 0;
	}
	_copyToDataTexture(e, t) {
		const i = t.texture.image;
		(this._dataTexture = this._dataTexture || this._createDataTexture(t.texture)),
			e.readRenderTargetPixels(t, 0, 0, i.width, i.height, this._dataTexture.image.data),
			(this._dataTexture.needsUpdate = !0);
	}
	_createDataTexture(e) {
		const t = e.image,
			i = this._createPixelBuffer(t.width, t.height);
		return new Rh(
			i,
			t.width,
			t.height,
			e.format,
			e.type,
			e.mapping,
			e.wrapS,
			e.wrapT,
			e.magFilter,
			e.minFilter,
			e.anisotropy,
			e.colorSpace
		);
	}
	_createPixelBuffer(e, t) {
		const i = e * t * 4;
		switch (this.bufferType) {
			case 'Uint8Array':
				return new Uint8Array(i);
			case 'Uint8ClampedArray':
				return new Uint8ClampedArray(i);
			case 'Uint16Array':
				return new Uint16Array(i);
			case 'Float32Array':
				return new Float32Array(i);
		}
		zt.unreachable(this.bufferType);
	}
	_sameDimensions(e) {
		if (this._dataTexture) {
			const t = this._dataTexture.image.width == e.image.width,
				i = this._dataTexture.image.height == e.image.height;
			return t && i;
		} else return !0;
	}
}
class jx {
	constructor(e) {
		this.node = e;
	}
	async waitForRenderer() {
		return await this.node.scene().renderersRegister.waitForRenderer();
	}
}
var nr = ((n) => (
		(n.BUILDER = 'builder'),
		(n.BUILDER_2D_ARRAY = 'builder2DArray'),
		(n.CUBE_MAP = 'cubeMap'),
		(n.CUBE_CAMERA = 'cubeCamera'),
		(n.CUBE_MAP_FROM_SCENE = 'cubeMapFromScene'),
		(n.ENV_MAP = 'envMap'),
		(n.GIF = 'gif'),
		(n.LIGHT_MAP = 'lightMap'),
		(n.LUT = 'lut'),
		(n.RENDER = 'render'),
		(n.SDF_BLUR = 'SDFBlur'),
		(n.SDF_FROM_OBJECT = 'SDFFromObject'),
		(n.SDF_FROM_URL = 'SDFFromUrl'),
		(n.SNAPSHOT = 'snapshot'),
		(n.TEXT = 'text'),
		(n.VIDEO = 'video'),
		(n.WEB_CAM = 'webCam'),
		n
	))(nr || {}),
	Os = ((n) => (
		(n.IMAGE = 'image'), (n.IMAGE_EXR = 'imageEXR'), (n.IMAGE_HDR = 'imageHDR'), (n.IMAGE_KTX2 = 'imageKTX2'), n
	))(Os || {});
class h4 extends nn {
	constructor() {
		super(...arguments), (this.useCameraRenderer = M.BOOLEAN(1));
	}
}
const d4 = new h4();
class p4 extends Hx {
	constructor() {
		super(...arguments), (this.paramsConfig = d4);
	}
	static type() {
		return nr.ENV_MAP;
	}
	initializeNode() {
		this.io.inputs.setCount(1), this.io.inputs.initInputsClonedState(Ft.NEVER);
	}
	async cook(e) {
		const t = e[0];
		await this._convertTextureToEnvMap(t);
	}
	async _convertTextureToEnvMap(e) {
		this._rendererController = this._rendererController || new jx(this);
		const t = await this._rendererController.waitForRenderer();
		if (!t)
			return (
				this.states.error.set('no renderer found to convert the texture to an env map'),
				this.cookController.endCook()
			);
		if (!(t instanceof ss))
			return (
				this.states.error.set('renderer found is not WebGLRenderer'),
				console.log({renderer: t}),
				this.cookController.endCook()
			);
		const s = new Qp(t).fromEquirectangular(e);
		if (this.pv.useCameraRenderer) this._setMapping(s.texture), this.setTexture(s.texture);
		else {
			this._dataTextureController = this._dataTextureController || new u4(Wx.Uint16Array);
			const r = this._dataTextureController.fromRenderTarget(t, s);
			this._setMapping(r), this.setTexture(r);
		}
	}
	_setMapping(e) {
		e.mapping = xa;
	}
}
const Lm = [{LinearFilter: Yt}, {NearestFilter: qt}],
	Um = [
		{NearestFilter: qt},
		{NearestMipMapNearestFilter: LM},
		{NearestMipMapLinearFilter: UM},
		{LinearFilter: Yt},
		{LinearMipMapNearestFilter: BM},
		{LinearMipMapLinearFilter: kM},
	],
	f4 = Object.values(Lm[0])[0],
	_4 = Object.values(Um[5])[0],
	m4 = Lm.map((n) => ({name: Object.keys(n)[0], value: Object.values(n)[0]})),
	g4 = Um.map((n) => ({name: Object.keys(n)[0], value: Object.values(n)[0]})),
	Xx = [tn, en, $n, io, yr],
	oc = [{Linear: tn}, {sRGB: en}, {LinearSRGB: $n}, {DisplayP3: io}, {LinearDisplayP3: yr}],
	$x = {
		[tn]: Object.keys(oc[0])[0],
		[en]: Object.keys(oc[1])[0],
		[$n]: Object.keys(oc[2])[0],
		[io]: Object.keys(oc[3])[0],
		[yr]: Object.keys(oc[4])[0],
	},
	Hf = [{ClampToEdgeWrapping: Qn}, {RepeatWrapping: Pc}, {MirroredRepeatWrapping: Wu}],
	qx = [
		{UVMapping: bh},
		{CubeReflectionMapping: Yr},
		{CubeRefractionMapping: Kr},
		{EquirectangularReflectionMapping: zu},
		{EquirectangularRefractionMapping: Hu},
		{CubeUVReflectionMapping: xa},
	],
	v4 = [
		{UnsignedByteType: is},
		{ByteType: bb},
		{ShortType: Sb},
		{UnsignedShortType: Sh},
		{IntType: o_},
		{UnsignedIntType: Ms},
		{FloatType: jn},
		{HalfFloatType: ki},
		{UnsignedShort4444Type: a_},
		{UnsignedShort5551Type: c_},
		{UnsignedInt248Type: Ns},
	],
	E4 = [
		{AlphaFormat: Ab},
		{RedFormat: u_},
		{RedIntegerFormat: h_},
		{RGFormat: Mb},
		{RGIntegerFormat: d_},
		{RGBAFormat: wn},
		{RGBAIntegerFormat: p_},
		{LuminanceFormat: l_},
		{LuminanceAlphaFormat: xb},
		{DepthFormat: dr},
		{DepthStencilFormat: Zr},
	];
function Oi(n) {
	return {
		cook: !1,
		callback: (e) => {
			Wf[n](e);
		},
	};
}
const pi = {COLOR_SPACE: tn, FORMAT: wn, MAPPING: bh, MIN_FILTER: Yt, MAG_FILTER: Yt, TYPE: is, WRAPPING: Pc},
	xy = Oi('PARAM_CALLBACK_update_encoding'),
	My = Oi('PARAM_CALLBACK_update_mapping'),
	Tp = Oi('PARAM_CALLBACK_update_wrap'),
	du = Oi('PARAM_CALLBACK_update_filter'),
	Rp = Oi('PARAM_CALLBACK_update_anisotropy'),
	Ty = Oi('PARAM_CALLBACK_update_flipY'),
	C4 = Oi('PARAM_CALLBACK_update_transform'),
	y4 = Oi('PARAM_CALLBACK_update_repeat'),
	b4 = Oi('PARAM_CALLBACK_update_offset'),
	S4 = Oi('PARAM_CALLBACK_update_rotation'),
	A4 = Oi('PARAM_CALLBACK_update_center'),
	ac = Oi('PARAM_CALLBACK_update_advanced');
function Fm(n, e) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.tcolorSpace = M.BOOLEAN((e == null ? void 0 : e.tcolorSpace) || 0, {...xy})),
				(this.colorSpace = M.STRING((e == null ? void 0 : e.colorSpace) || pi.COLOR_SPACE, {
					visibleIf: {tcolorSpace: 1},
					menuString: {entries: Xx.map((i) => ({name: $x[i], value: i}))},
					...xy,
				})),
				(this.tmapping = M.BOOLEAN(0, {...My})),
				(this.mapping = M.INTEGER(pi.MAPPING, {
					visibleIf: {tmapping: 1},
					menu: {entries: qx.map((i) => ({name: Object.keys(i)[0], value: Object.values(i)[0]}))},
					...My,
				})),
				(this.twrap = M.BOOLEAN(0, {...Tp})),
				(this.wrapS = M.INTEGER(pi.WRAPPING, {
					visibleIf: {twrap: 1},
					menu: {entries: Hf.map((i) => ({name: Object.keys(i)[0], value: Object.values(i)[0]}))},
					...Tp,
				})),
				(this.wrapT = M.INTEGER(pi.WRAPPING, {
					visibleIf: {twrap: 1},
					menu: {entries: Hf.map((i) => ({name: Object.keys(i)[0], value: Object.values(i)[0]}))},
					separatorAfter: !0,
					...Tp,
				})),
				(this.tminFilter = M.BOOLEAN(0, {...du})),
				(this.minFilter = M.INTEGER(_4, {visibleIf: {tminFilter: 1}, menu: {entries: g4}, ...du})),
				(this.tmagFilter = M.BOOLEAN(0, {...du})),
				(this.magFilter = M.INTEGER(f4, {visibleIf: {tmagFilter: 1}, menu: {entries: m4}, ...du})),
				(this.tanisotropy = M.BOOLEAN(0, {...Rp})),
				(this.useRendererMaxAnisotropy = M.BOOLEAN(0, {visibleIf: {tanisotropy: 1}, ...Rp})),
				(this.anisotropy = M.INTEGER(2, {
					visibleIf: {tanisotropy: 1, useRendererMaxAnisotropy: 0},
					range: [0, 32],
					rangeLocked: [!0, !1],
					...Rp,
				})),
				(this.tflipY = M.BOOLEAN(0, {...Ty})),
				(this.flipY = M.BOOLEAN(0, {visibleIf: {tflipY: 1}, ...Ty})),
				(this.ttransform = M.BOOLEAN(0, {...C4})),
				(this.offset = M.VECTOR2([0, 0], {visibleIf: {ttransform: 1}, ...b4})),
				(this.repeat = M.VECTOR2([1, 1], {visibleIf: {ttransform: 1}, ...y4})),
				(this.rotation = M.FLOAT(0, {range: [-1, 1], visibleIf: {ttransform: 1}, ...S4})),
				(this.center = M.VECTOR2([0, 0], {visibleIf: {ttransform: 1}, ...A4})),
				(this.tadvanced = M.BOOLEAN(0, {...ac, separatorBefore: !0})),
				(this.tformat = M.BOOLEAN(0, {visibleIf: {tadvanced: 1}, ...ac})),
				(this.format = M.INTEGER(pi.FORMAT, {
					visibleIf: {tadvanced: 1, tformat: 1},
					menu: {entries: E4.map((i) => ({name: Object.keys(i)[0], value: Object.values(i)[0]}))},
					...ac,
				})),
				(this.ttype = M.BOOLEAN(0, {visibleIf: {tadvanced: 1}, ...ac})),
				(this.type = M.INTEGER(pi.TYPE, {
					visibleIf: {tadvanced: 1, ttype: 1},
					menu: {entries: v4.map((i) => ({name: Object.keys(i)[0], value: Object.values(i)[0]}))},
					...ac,
				}));
		}
	};
}
class x4 extends Fm(nn) {}
new x4();
class Wf {
	constructor(e) {
		this.node = e;
	}
	async update(e) {
		const t = this.node.pv;
		this._updateColorSpace(e, t),
			this._updateAdvanced(e, t),
			this._updateMapping(e, t),
			this._updateWrap(e, t),
			this._updateFilter(e, t),
			this._updateFlip(e, t),
			await this._updateAnisotropy(e, t),
			this._updateTransform(e);
	}
	_updateColorSpace(e, t) {
		t.tcolorSpace ? (e.colorSpace = t.colorSpace) : (e.colorSpace = pi.COLOR_SPACE), (e.needsUpdate = !0);
	}
	_updateAdvanced(e, t) {
		t.tadvanced &&
			(t.tformat ? (e.format = t.format) : (e.format = pi.FORMAT),
			t.ttype ? (e.type = t.type) : (e.type = pi.TYPE)),
			(e.needsUpdate = !0);
	}
	_updateMapping(e, t) {
		t.tmapping ? (e.mapping = t.mapping) : (e.mapping = pi.MAPPING), (e.needsUpdate = !0);
	}
	_updateWrap(e, t) {
		t.twrap ? ((e.wrapS = t.wrapS), (e.wrapT = t.wrapT)) : ((e.wrapS = pi.WRAPPING), (e.wrapT = pi.WRAPPING)),
			(e.needsUpdate = !0);
	}
	_updateFilter(e, t) {
		t.tminFilter ? (e.minFilter = t.minFilter) : (e.minFilter = Yt),
			t.tmagFilter ? (e.magFilter = t.magFilter) : (e.magFilter = Yt),
			(e.needsUpdate = !0);
	}
	_updateFlip(e, t) {
		(e.flipY = t.tflipY && t.flipY), (e.needsUpdate = !0);
	}
	async _updateAnisotropy(e, t) {
		if (!t.tanisotropy) {
			e.anisotropy = 1;
			return;
		}
		if (t.useRendererMaxAnisotropy) e.anisotropy = await this._maxRendererAnisotropy();
		else {
			const i = t.anisotropy;
			i <= 2 ? (e.anisotropy = i) : (e.anisotropy = Math.min(i, await this._maxRendererAnisotropy()));
		}
		e.needsUpdate = !0;
	}
	async _maxRendererAnisotropy() {
		this._rendererController = this._rendererController || new jx(this.node);
		const e = await this._rendererController.waitForRenderer();
		return e ? e.capabilities.getMaxAnisotropy() : 1;
	}
	_updateTransform(e) {
		if (!this.node.pv.ttransform) {
			e.offset.set(0, 0), (e.rotation = 0), e.repeat.set(1, 1), e.center.set(0, 0);
			return;
		}
		this._updateTransformOffset(e, !1),
			this._updateTransformRepeat(e, !1),
			this._updateTransformRotation(e, !1),
			this._updateTransformCenter(e, !1),
			e.updateMatrix();
	}
	async _updateTransformOffset(e, t) {
		e.offset.copy(this.node.pv.offset), t && e.updateMatrix();
	}
	async _updateTransformRepeat(e, t) {
		e.repeat.copy(this.node.pv.repeat), t && e.updateMatrix();
	}
	async _updateTransformRotation(e, t) {
		(e.rotation = this.node.pv.rotation), t && e.updateMatrix();
	}
	async _updateTransformCenter(e, t) {
		e.center.copy(this.node.pv.center), t && e.updateMatrix();
	}
	static PARAM_CALLBACK_update_encoding(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateColorSpace(t, e.pv);
	}
	static PARAM_CALLBACK_update_mapping(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateMapping(t, e.pv);
	}
	static PARAM_CALLBACK_update_wrap(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateWrap(t, e.pv);
	}
	static PARAM_CALLBACK_update_filter(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateFilter(t, e.pv);
	}
	static PARAM_CALLBACK_update_anisotropy(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateAnisotropy(t, e.pv);
	}
	static PARAM_CALLBACK_update_flipY(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateFlip(t, e.pv);
	}
	static PARAM_CALLBACK_update_transform(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateTransform(t);
	}
	static PARAM_CALLBACK_update_offset(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateTransformOffset(t, !0);
	}
	static PARAM_CALLBACK_update_repeat(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateTransformRepeat(t, !0);
	}
	static PARAM_CALLBACK_update_rotation(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateTransformRotation(t, !0);
	}
	static PARAM_CALLBACK_update_center(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateTransformCenter(t, !0);
	}
	static PARAM_CALLBACK_update_advanced(e) {
		const t = e.containerController.container().texture();
		t && e.textureParamsController._updateAdvanced(t, e.pv);
	}
	static copyTextureAttributes(e, t) {
		(e.colorSpace = t.colorSpace),
			(e.mapping = t.mapping),
			(e.wrapS = t.wrapS),
			(e.wrapT = t.wrapT),
			(e.minFilter = t.minFilter),
			(e.magFilter = t.magFilter),
			(e.magFilter = t.magFilter),
			(e.anisotropy = t.anisotropy),
			(e.flipY = t.flipY),
			e.repeat.copy(t.repeat),
			e.offset.copy(t.offset),
			e.center.copy(t.center),
			(e.rotation = t.rotation),
			(e.type = t.type),
			(e.format = t.format),
			(e.needsUpdate = !0);
	}
	paramLabelsParams() {
		const e = this.node.p;
		return [
			e.tcolorSpace,
			e.colorSpace,
			e.tmapping,
			e.mapping,
			e.twrap,
			e.wrapS,
			e.wrapT,
			e.tminFilter,
			e.minFilter,
			e.tmagFilter,
			e.magFilter,
			e.tflipY,
			e.flipY,
		];
	}
	paramLabels() {
		const e = [],
			t = this.node.pv;
		if (t.tcolorSpace) for (const i of Xx) i == t.colorSpace && e.push(`colorSpace: ${i}`);
		if (t.tmapping)
			for (const i of qx) {
				const s = Object.keys(i)[0];
				i[s] == t.mapping && e.push(`mapping: ${s}`);
			}
		if (t.twrap) {
			let i = function (s) {
				for (const r of Hf) {
					const o = Object.keys(r)[0];
					r[o] == t[s] && e.push(`${s}: ${o}`);
				}
			};
			i('wrapS'), i('wrapT');
		}
		if (t.tminFilter)
			for (const i of Um) {
				const s = Object.keys(i)[0];
				i[s] == t.minFilter && e.push(`minFilter: ${s}`);
			}
		if (t.tmagFilter)
			for (const i of Lm) {
				const s = Object.keys(i)[0];
				i[s] == t.magFilter && e.push(`magFilter: ${s}`);
			}
		return t.tflipY && e.push(`flipY: ${t.flipY}`), e;
	}
}
const Ry = ['mp4', 'ogv', 'ogg', 'webm'];
var Cn = ((n) => (
	(n.GIF = 'gif'),
	(n.JPG = 'jpg'),
	(n.JPEG = 'jpeg'),
	(n.PNG = 'png'),
	(n.EXR = 'exr'),
	(n.KTX2 = 'ktx2'),
	(n.HDR = 'hdr'),
	(n.WEBP = 'webp'),
	n
))(Cn || {});
const M4 = ['gif', 'jpeg', 'jpg', 'png', 'exr', 'ktx2', 'hdr', 'webp'];
var wt = ((n) => (
	(n.TDS = '3DS'),
	(n.DRC = 'drc'),
	(n.FBX = 'fbx'),
	(n.GEOJSON = 'geojson'),
	(n.GLTF = 'gltf'),
	(n.GLB = 'glb'),
	(n.IFC = 'ifc'),
	(n.JSON = 'json'),
	(n.MPD = 'mpd'),
	(n.OBJ = 'obj'),
	(n.PDB = 'pdb'),
	(n.PLY = 'ply'),
	(n.STEP = 'step'),
	(n.STL = 'stl'),
	(n.SVG = 'svg'),
	(n.USDZ = 'usdz'),
	(n.VOX = 'vox'),
	n
))(wt || {});
const T4 = ['bin'],
	R4 = ['mp3', 'wav', 'ogg'];
var ku = ((n) => ((n.TTF = 'ttf'), (n.JSON = 'json'), n))(ku || {});
function w4(n) {
	const t = n.split('?')[0].split('.');
	return t.length == 1 ? void 0 : t[t.length - 1];
}
function O4(n) {
	return M4.includes(n);
}
function P4(n) {
	const e = w4(n);
	return e != null ? O4(e.toLowerCase()) : !1;
}
function Yx(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.checkFileType = M.BOOLEAN(!0));
		}
	};
}
function N4(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.url = M.STRING('')), (this.reload = M.BUTTON(null));
		}
	};
}
class I4 extends Yx(Fm(N4(nn))) {}
new I4();
function Kx(n) {
	function e(r) {
		return class extends r {
			constructor() {
				super(...arguments),
					(this.url = M.STRING(n.defaultUrl, {fileBrowse: {extensions: n.extensions}})),
					(this.reload = M.BUTTON(null, {
						callback: (a) => {
							s.PARAM_CALLBACK_reload(a);
						},
					}));
			}
		};
	}
	class t extends Yx(Fm(e(nn))) {}
	const i = new t();
	class s extends Hx {
		constructor() {
			super(...arguments), (this.paramsConfig = i), (this.textureParamsController = new Wf(this));
		}
		static type() {
			return n.type;
		}
		dispose() {
			super.dispose(), le.blobs.clearBlobsForNode(this);
		}
		initializeNode() {
			this.io.inputs.setCount(0, 1), this.io.inputs.initInputsClonedState(Ft.NEVER);
		}
		async cook(o) {
			if (this.pv.checkFileType && !P4(this.pv.url)) this.states.error.set('url is not an image');
			else {
				const a = await this._loadTexture();
				if (a) {
					const c = o[0];
					c && Wf.copyTextureAttributes(a, c),
						await this.textureParamsController.update(a),
						this.setTexture(a);
				} else this._clearTexture();
			}
		}
		static PARAM_CALLBACK_reload(o) {
			o.paramCallbackReload();
		}
		paramCallbackReload() {
			this.p.url.setDirty(), this.p.url.emit(_n.ASSET_RELOAD_REQUEST);
		}
		_loader() {
			return n.getLoader(this.pv.url, this);
		}
		async _loadTexture() {
			let o = null;
			try {
				(o = await this._loader().loadImage({
					tdataType: this.pv.ttype && this.pv.tadvanced,
					dataType: this.pv.type,
				})),
					o && (o.matrixAutoUpdate = !1);
			} catch {}
			return (
				o || this.states.error.active() || this.states.error.set(`could not load texture '${this.pv.url}'`), o
			);
		}
	}
	return s;
}
const Zx = 'https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/';
function D4(n) {
	const e = le.assetUrls.remapedUrl(n);
	return e || n;
}
function L4() {
	const n = new sS();
	return n.setURLModifier(D4), n;
}
const Qx = L4(),
	jf = class {
		constructor(n, e, t = {}) {
			(this._url = n),
				(this._node = e),
				(this.blobOptions = t),
				(this.loadingManager = Qx),
				ft(this._url) ? (this._url = this._url.map(id)) : (this._url = id(this._url));
		}
		static extension(n) {
			let e = null;
			try {
				e = new URL(n).searchParams.get('ext');
			} catch {}
			if (!e) {
				const i = n.split('?')[0].split('.');
				e = i[i.length - 1].toLowerCase();
			}
			return e;
		}
		extension() {
			return ft(this._url) ? jf.extension(this._url[0]) : jf.extension(this._url);
		}
		_urlToLoad() {
			const n = (e) => {
				if (this._node) {
					const t = this._node.scene().assets.root();
					e.startsWith('http') || (e = t ? id(`${t}/${e}`) : e);
				}
				return e;
			};
			return ft(this._url) ? this._url.map(n) : n(this._url);
		}
		static async _loadMultipleUrlsGlobal(n) {
			const e = [];
			for (const i of n.files) {
				const s = i.fullUrl,
					r = async () => ((await fetch(s)).ok ? {} : {error: `failed to fetch '${s}'`});
				e.push(r());
			}
			const t = await Promise.all(e);
			if (n.node) for (const i of t) i.error && n.node.states.error.set(n.error);
		}
		static onAssetLoaded(n) {
			(this._onAssetLoadedCallbacks = this._onAssetLoadedCallbacks || []), this._onAssetLoadedCallbacks.push(n);
		}
		static _runOnAssetLoadedCallbacks(n, e) {
			if (this._onAssetLoadedCallbacks) for (const t of this._onAssetLoadedCallbacks) t(n, e);
		}
	};
let Bm = jf;
Bm.loadingManager = Qx;
const km = class extends Bm {
	constructor(n, e) {
		super(n, e), (this._node = e);
	}
	static replaceExtension(n, e) {
		const t = n.split('?'),
			s = t[0].split('.');
		return s.pop(), s.push(e), [s.join('.'), t[1]].join('?');
	}
	static setMaxConcurrentLoadsCount(n) {
		this._maxConcurrentLoadsCountMethod = n;
	}
	static _init_max_concurrent_loads_count() {
		return this._maxConcurrentLoadsCountMethod ? this._maxConcurrentLoadsCountMethod() : Cr.isChrome() ? 10 : 4;
	}
	static _init_concurrent_loads_delay() {
		return Cr.isChrome() ? 0 : 10;
	}
	static incrementInProgressLoadsCount() {
		this.in_progress_loads_count++;
	}
	static decrementInProgressLoadsCount(n, e) {
		this.in_progress_loads_count--;
		const t = this._queue.pop();
		if (t) {
			const i = this.CONCURRENT_LOADS_DELAY;
			setTimeout(() => {
				t();
			}, i);
		}
		this._runOnAssetLoadedCallbacks(n, e);
	}
	static async waitForMaxConcurrentLoadsQueueFreed() {
		if (!(this.in_progress_loads_count <= this.MAX_CONCURRENT_LOADS_COUNT))
			return new Promise((n) => {
				this._queue.push(n);
			});
	}
};
let lr = km;
lr.MAX_CONCURRENT_LOADS_COUNT = km._init_max_concurrent_loads_count();
lr.CONCURRENT_LOADS_DELAY = km._init_concurrent_loads_delay();
lr.in_progress_loads_count = 0;
lr._queue = [];
class U4 extends Bm {
	constructor(e, t) {
		super(e, t), (this._node = t);
	}
}
class Jx extends U4 {
	constructor(e, t) {
		super(e, t), (this._node = t);
	}
	async loadImage(e) {
		const t = this._urlToLoad();
		return new Promise(async (i, s) => {
			const r = await this._getLoader(e);
			lr.incrementInProgressLoadsCount(),
				await lr.waitForMaxConcurrentLoadsQueueFreed(),
				r.load(
					t,
					(o) => {
						(o.matrixAutoUpdate = !1), lr.decrementInProgressLoadsCount(t, o), i(o);
					},
					void 0,
					(o) => {
						lr.decrementInProgressLoadsCount(t), le.warn('error', o), s();
					}
				);
		});
	}
}
class Xf extends Jx {
	constructor(e, t) {
		super(e, t);
	}
	async _getLoader(e) {
		return new MN(this.loadingManager);
	}
}
Xf.PARAM_DEFAULT = `${Zx}/textures/uv.jpg`;
var e0 = ((n) => (
	(n.AM_SYNTH = 'AMSynth'),
	(n.FM_SYNTH = 'FMSynth'),
	(n.FILE = 'file'),
	(n.MONO_SYNTH = 'monoSynth'),
	(n.POLY_SYNTH = 'polySynth'),
	(n.SAMPLER = 'sampler'),
	(n.SWITCH = 'switch'),
	(n.SYNTH = 'synth'),
	n
))(e0 || {});
const t0 = {
	[fe.ANIM]: {},
	[fe.AUDIO]: {[e0.FILE]: [...R4]},
	[fe.COP]: {
		[nr.CUBE_MAP]: [Cn.PNG, Cn.JPEG, Cn.JPG, Cn.WEBP],
		[nr.GIF]: [Cn.GIF],
		[Os.IMAGE]: [Cn.PNG, Cn.JPEG, Cn.JPG, Cn.WEBP],
		[Os.IMAGE_EXR]: [Cn.EXR],
		[Os.IMAGE_HDR]: [Cn.HDR],
		[Os.IMAGE_KTX2]: [Cn.KTX2],
		[nr.LUT]: [Cn.PNG],
		[nr.SDF_FROM_URL]: [...T4],
		[nr.TEXT]: [ku.TTF],
		[nr.VIDEO]: [...Ry],
	},
	[fe.EVENT]: {},
	[fe.GL]: {},
	[fe.JS]: {},
	[fe.MANAGER]: {},
	[fe.MAT]: {},
	[fe.OBJ]: {},
	[fe.POST]: {},
	[fe.ROP]: {},
	[fe.SOP]: {
		[co.WEBXR_AR_MARKER_TRACKING]: [Cn.PNG, Cn.JPEG, Cn.JPG, Cn.WEBP, ...Ry],
		[oi.CAD_EXPORTER_STEP]: [wt.STEP],
		[oi.CAD_FILE_STEP]: [wt.STEP],
		[oi.DATA_URL]: [wt.JSON],
		[pc.EXPORTER_GLTF]: [wt.GLB],
		[pc.EXPORTER_OBJ]: [wt.OBJ],
		[pc.EXPORTER_PLY]: [wt.PLY],
		[pc.EXPORTER_STL]: [wt.STL],
		[Hn.FILE_3DS]: [wt.TDS],
		[Hn.FILE_GLTF]: [wt.GLB, wt.GLTF],
		[Hn.FILE_DRC]: [wt.DRC],
		[Hn.FILE_FBX]: [wt.FBX],
		[Hn.FILE_GEOJSON]: [wt.GEOJSON],
		[Hn.FILE_JSON]: [wt.JSON],
		[Hn.FILE_MPD]: [wt.MPD],
		[zf.FILE_GLTF]: [wt.GLTF, wt.GLB],
		[zf.FILE_OBJ]: [wt.OBJ],
		[Hn.FILE_OBJ]: [wt.OBJ],
		[Hn.FILE_PDB]: [wt.PDB],
		[Hn.FILE_PLY]: [wt.PLY],
		[Hn.FILE_STL]: [wt.STL],
		[Hn.FILE_SVG]: [wt.SVG],
		[Hn.FILE_USDZ]: [wt.USDZ],
		[Hn.FILE_VOX]: [wt.VOX],
		[oi.TEXT]: [ku.TTF, ku.JSON],
	},
};
class F4 extends Kx({
	type: Os.IMAGE,
	defaultUrl: Xf.PARAM_DEFAULT,
	extensions: t0[fe.COP][Os.IMAGE],
	getLoader: (e, t) => new Xf(e, t),
}) {}
/*!
fflate - fast JavaScript compression/decompression
<https://101arrowz.github.io/fflate>
Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
version 0.6.9
*/ var wy = function (n) {
	return URL.createObjectURL(new Blob([n], {type: 'text/javascript'}));
};
try {
	URL.revokeObjectURL(wy(''));
} catch {
	wy = function (e) {
		return 'data:application/javascript;charset=UTF-8,' + encodeURI(e);
	};
}
var fi = Uint8Array,
	ur = Uint16Array,
	$f = Uint32Array,
	n0 = new fi([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]),
	i0 = new fi([
		0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0,
	]),
	B4 = new fi([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
	s0 = function (n, e) {
		for (var t = new ur(31), i = 0; i < 31; ++i) t[i] = e += 1 << n[i - 1];
		for (var s = new $f(t[30]), i = 1; i < 30; ++i)
			for (var r = t[i]; r < t[i + 1]; ++r) s[r] = ((r - t[i]) << 5) | i;
		return [t, s];
	},
	r0 = s0(n0, 2),
	o0 = r0[0],
	k4 = r0[1];
(o0[28] = 258), (k4[258] = 28);
var V4 = s0(i0, 0),
	G4 = V4[0],
	qf = new ur(32768);
for (var Bt = 0; Bt < 32768; ++Bt) {
	var Zs = ((Bt & 43690) >>> 1) | ((Bt & 21845) << 1);
	(Zs = ((Zs & 52428) >>> 2) | ((Zs & 13107) << 2)),
		(Zs = ((Zs & 61680) >>> 4) | ((Zs & 3855) << 4)),
		(qf[Bt] = (((Zs & 65280) >>> 8) | ((Zs & 255) << 8)) >>> 1);
}
var Tc = function (n, e, t) {
		for (var i = n.length, s = 0, r = new ur(e); s < i; ++s) ++r[n[s] - 1];
		var o = new ur(e);
		for (s = 0; s < e; ++s) o[s] = (o[s - 1] + r[s - 1]) << 1;
		var a;
		if (t) {
			a = new ur(1 << e);
			var c = 15 - e;
			for (s = 0; s < i; ++s)
				if (n[s])
					for (
						var l = (s << 4) | n[s], u = e - n[s], h = o[n[s] - 1]++ << u, d = h | ((1 << u) - 1);
						h <= d;
						++h
					)
						a[qf[h] >>> c] = l;
		} else for (a = new ur(i), s = 0; s < i; ++s) n[s] && (a[s] = qf[o[n[s] - 1]++] >>> (15 - n[s]));
		return a;
	},
	sl = new fi(288);
for (var Bt = 0; Bt < 144; ++Bt) sl[Bt] = 8;
for (var Bt = 144; Bt < 256; ++Bt) sl[Bt] = 9;
for (var Bt = 256; Bt < 280; ++Bt) sl[Bt] = 7;
for (var Bt = 280; Bt < 288; ++Bt) sl[Bt] = 8;
var a0 = new fi(32);
for (var Bt = 0; Bt < 32; ++Bt) a0[Bt] = 5;
var z4 = Tc(sl, 9, 1),
	H4 = Tc(a0, 5, 1),
	wp = function (n) {
		for (var e = n[0], t = 1; t < n.length; ++t) n[t] > e && (e = n[t]);
		return e;
	},
	Di = function (n, e, t) {
		var i = (e / 8) | 0;
		return ((n[i] | (n[i + 1] << 8)) >> (e & 7)) & t;
	},
	Op = function (n, e) {
		var t = (e / 8) | 0;
		return (n[t] | (n[t + 1] << 8) | (n[t + 2] << 16)) >> (e & 7);
	},
	W4 = function (n) {
		return ((n / 8) | 0) + (n & 7 && 1);
	},
	j4 = function (n, e, t) {
		(e == null || e < 0) && (e = 0), (t == null || t > n.length) && (t = n.length);
		var i = new (n instanceof ur ? ur : n instanceof $f ? $f : fi)(t - e);
		return i.set(n.subarray(e, t)), i;
	},
	X4 = function (n, e, t) {
		var i = n.length;
		if (!i || (t && !t.l && i < 5)) return e || new fi(0);
		var s = !e || t,
			r = !t || t.i;
		t || (t = {}), e || (e = new fi(i * 3));
		var o = function (be) {
				var Ue = e.length;
				if (be > Ue) {
					var He = new fi(Math.max(Ue * 2, be));
					He.set(e), (e = He);
				}
			},
			a = t.f || 0,
			c = t.p || 0,
			l = t.b || 0,
			u = t.l,
			h = t.d,
			d = t.m,
			p = t.n,
			m = i * 8;
		do {
			if (!u) {
				t.f = a = Di(n, c, 1);
				var g = Di(n, c + 1, 3);
				if (((c += 3), g))
					if (g == 1) (u = z4), (h = H4), (d = 9), (p = 5);
					else if (g == 2) {
						var v = Di(n, c, 31) + 257,
							A = Di(n, c + 10, 15) + 4,
							S = v + Di(n, c + 5, 31) + 1;
						c += 14;
						for (var T = new fi(S), R = new fi(19), D = 0; D < A; ++D) R[B4[D]] = Di(n, c + D * 3, 7);
						c += A * 3;
						for (var E = wp(R), x = (1 << E) - 1, z = Tc(R, E, 1), D = 0; D < S; ) {
							var B = z[Di(n, c, x)];
							c += B & 15;
							var _ = B >>> 4;
							if (_ < 16) T[D++] = _;
							else {
								var W = 0,
									F = 0;
								for (
									_ == 16
										? ((F = 3 + Di(n, c, 3)), (c += 2), (W = T[D - 1]))
										: _ == 17
										? ((F = 3 + Di(n, c, 7)), (c += 3))
										: _ == 18 && ((F = 11 + Di(n, c, 127)), (c += 7));
									F--;

								)
									T[D++] = W;
							}
						}
						var X = T.subarray(0, v),
							Z = T.subarray(v);
						(d = wp(X)), (p = wp(Z)), (u = Tc(X, d, 1)), (h = Tc(Z, p, 1));
					} else throw 'invalid block type';
				else {
					var _ = W4(c) + 4,
						f = n[_ - 4] | (n[_ - 3] << 8),
						y = _ + f;
					if (y > i) {
						if (r) throw 'unexpected EOF';
						break;
					}
					s && o(l + f), e.set(n.subarray(_, y), l), (t.b = l += f), (t.p = c = y * 8);
					continue;
				}
				if (c > m) {
					if (r) throw 'unexpected EOF';
					break;
				}
			}
			s && o(l + 131072);
			for (var Q = (1 << d) - 1, he = (1 << p) - 1, ie = c; ; ie = c) {
				var W = u[Op(n, c) & Q],
					oe = W >>> 4;
				if (((c += W & 15), c > m)) {
					if (r) throw 'unexpected EOF';
					break;
				}
				if (!W) throw 'invalid length/literal';
				if (oe < 256) e[l++] = oe;
				else if (oe == 256) {
					(ie = c), (u = null);
					break;
				} else {
					var de = oe - 254;
					if (oe > 264) {
						var D = oe - 257,
							Te = n0[D];
						(de = Di(n, c, (1 << Te) - 1) + o0[D]), (c += Te);
					}
					var ee = h[Op(n, c) & he],
						ae = ee >>> 4;
					if (!ee) throw 'invalid distance';
					c += ee & 15;
					var Z = G4[ae];
					if (ae > 3) {
						var Te = i0[ae];
						(Z += Op(n, c) & ((1 << Te) - 1)), (c += Te);
					}
					if (c > m) {
						if (r) throw 'unexpected EOF';
						break;
					}
					s && o(l + 131072);
					for (var Oe = l + de; l < Oe; l += 4)
						(e[l] = e[l - Z]),
							(e[l + 1] = e[l + 1 - Z]),
							(e[l + 2] = e[l + 2 - Z]),
							(e[l + 3] = e[l + 3 - Z]);
					l = Oe;
				}
			}
			(t.l = u), (t.p = ie), (t.b = l), u && ((a = 1), (t.m = d), (t.d = h), (t.n = p));
		} while (!a);
		return l == e.length ? e : j4(e, 0, l);
	},
	$4 = new fi(0),
	q4 = function (n) {
		if ((n[0] & 15) != 8 || n[0] >>> 4 > 7 || ((n[0] << 8) | n[1]) % 31) throw 'invalid zlib data';
		if (n[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
	};
function pu(n, e) {
	return X4((q4(n), n.subarray(2, -4)), e);
}
var Y4 = typeof TextDecoder < 'u' && new TextDecoder(),
	K4 = 0;
try {
	Y4.decode($4, {stream: !0}), (K4 = 1);
} catch {}
class Z4 extends xN {
	constructor(e) {
		super(e), (this.type = ki);
	}
	parse(e) {
		const E = Math.pow(2.7182818, 2.2);
		function x(b, P) {
			let V = 0;
			for (let N = 0; N < 65536; ++N) (N == 0 || b[N >> 3] & (1 << (N & 7))) && (P[V++] = N);
			const C = V - 1;
			for (; V < 65536; ) P[V++] = 0;
			return C;
		}
		function z(b) {
			for (let P = 0; P < 16384; P++) (b[P] = {}), (b[P].len = 0), (b[P].lit = 0), (b[P].p = null);
		}
		const B = {l: 0, c: 0, lc: 0};
		function W(b, P, V, C, N) {
			for (; V < b; ) (P = (P << 8) | ye(C, N)), (V += 8);
			(V -= b), (B.l = (P >> V) & ((1 << b) - 1)), (B.c = P), (B.lc = V);
		}
		const F = new Array(59);
		function X(b) {
			for (let V = 0; V <= 58; ++V) F[V] = 0;
			for (let V = 0; V < 65537; ++V) F[b[V]] += 1;
			let P = 0;
			for (let V = 58; V > 0; --V) {
				const C = (P + F[V]) >> 1;
				(F[V] = P), (P = C);
			}
			for (let V = 0; V < 65537; ++V) {
				const C = b[V];
				C > 0 && (b[V] = C | (F[C]++ << 6));
			}
		}
		function Z(b, P, V, C, N, I) {
			const k = P;
			let G = 0,
				K = 0;
			for (; C <= N; C++) {
				if (k.value - P.value > V) return !1;
				W(6, G, K, b, k);
				const $ = B.l;
				if (((G = B.c), (K = B.lc), (I[C] = $), $ == 63)) {
					if (k.value - P.value > V) throw new Error('Something wrong with hufUnpackEncTable');
					W(8, G, K, b, k);
					let J = B.l + 6;
					if (((G = B.c), (K = B.lc), C + J > N + 1))
						throw new Error('Something wrong with hufUnpackEncTable');
					for (; J--; ) I[C++] = 0;
					C--;
				} else if ($ >= 59) {
					let J = $ - 59 + 2;
					if (C + J > N + 1) throw new Error('Something wrong with hufUnpackEncTable');
					for (; J--; ) I[C++] = 0;
					C--;
				}
			}
			X(I);
		}
		function Q(b) {
			return b & 63;
		}
		function he(b) {
			return b >> 6;
		}
		function ie(b, P, V, C) {
			for (; P <= V; P++) {
				const N = he(b[P]),
					I = Q(b[P]);
				if (N >> I) throw new Error('Invalid table entry');
				if (I > 14) {
					const k = C[N >> (I - 14)];
					if (k.len) throw new Error('Invalid table entry');
					if ((k.lit++, k.p)) {
						const G = k.p;
						k.p = new Array(k.lit);
						for (let K = 0; K < k.lit - 1; ++K) k.p[K] = G[K];
					} else k.p = new Array(1);
					k.p[k.lit - 1] = P;
				} else if (I) {
					let k = 0;
					for (let G = 1 << (14 - I); G > 0; G--) {
						const K = C[(N << (14 - I)) + k];
						if (K.len || K.p) throw new Error('Invalid table entry');
						(K.len = I), (K.lit = P), k++;
					}
				}
			}
			return !0;
		}
		const oe = {c: 0, lc: 0};
		function de(b, P, V, C) {
			(b = (b << 8) | ye(V, C)), (P += 8), (oe.c = b), (oe.lc = P);
		}
		const Te = {c: 0, lc: 0};
		function ee(b, P, V, C, N, I, k, G, K) {
			if (b == P) {
				C < 8 && (de(V, C, N, I), (V = oe.c), (C = oe.lc)), (C -= 8);
				let $ = V >> C;
				if ((($ = new Uint8Array([$])[0]), G.value + $ > K)) return !1;
				const J = k[G.value - 1];
				for (; $-- > 0; ) k[G.value++] = J;
			} else if (G.value < K) k[G.value++] = b;
			else return !1;
			(Te.c = V), (Te.lc = C);
		}
		function ae(b) {
			return b & 65535;
		}
		function Oe(b) {
			const P = ae(b);
			return P > 32767 ? P - 65536 : P;
		}
		const be = {a: 0, b: 0};
		function Ue(b, P) {
			const V = Oe(b),
				N = Oe(P),
				I = V + (N & 1) + (N >> 1),
				k = I,
				G = I - N;
			(be.a = k), (be.b = G);
		}
		function He(b, P) {
			const V = ae(b),
				C = ae(P),
				N = (V - (C >> 1)) & 65535,
				I = (C + N - 32768) & 65535;
			(be.a = I), (be.b = N);
		}
		function Je(b, P, V, C, N, I, k) {
			const G = k < 16384,
				K = V > N ? N : V;
			let $ = 1,
				J,
				ce;
			for (; $ <= K; ) $ <<= 1;
			for ($ >>= 1, J = $, $ >>= 1; $ >= 1; ) {
				ce = 0;
				const ue = ce + I * (N - J),
					ge = I * $,
					xe = I * J,
					Me = C * $,
					Le = C * J;
				let Ve, Et, it, We;
				for (; ce <= ue; ce += xe) {
					let yt = ce;
					const Ge = ce + C * (V - J);
					for (; yt <= Ge; yt += Le) {
						const Rt = yt + Me,
							Gn = yt + ge,
							Gt = Gn + Me;
						G
							? (Ue(b[yt + P], b[Gn + P]),
							  (Ve = be.a),
							  (it = be.b),
							  Ue(b[Rt + P], b[Gt + P]),
							  (Et = be.a),
							  (We = be.b),
							  Ue(Ve, Et),
							  (b[yt + P] = be.a),
							  (b[Rt + P] = be.b),
							  Ue(it, We),
							  (b[Gn + P] = be.a),
							  (b[Gt + P] = be.b))
							: (He(b[yt + P], b[Gn + P]),
							  (Ve = be.a),
							  (it = be.b),
							  He(b[Rt + P], b[Gt + P]),
							  (Et = be.a),
							  (We = be.b),
							  He(Ve, Et),
							  (b[yt + P] = be.a),
							  (b[Rt + P] = be.b),
							  He(it, We),
							  (b[Gn + P] = be.a),
							  (b[Gt + P] = be.b));
					}
					if (V & $) {
						const Rt = yt + ge;
						G ? Ue(b[yt + P], b[Rt + P]) : He(b[yt + P], b[Rt + P]),
							(Ve = be.a),
							(b[Rt + P] = be.b),
							(b[yt + P] = Ve);
					}
				}
				if (N & $) {
					let yt = ce;
					const Ge = ce + C * (V - J);
					for (; yt <= Ge; yt += Le) {
						const Rt = yt + Me;
						G ? Ue(b[yt + P], b[Rt + P]) : He(b[yt + P], b[Rt + P]),
							(Ve = be.a),
							(b[Rt + P] = be.b),
							(b[yt + P] = Ve);
					}
				}
				(J = $), ($ >>= 1);
			}
			return ce;
		}
		function Ye(b, P, V, C, N, I, k, G, K) {
			let $ = 0,
				J = 0;
			const ce = k,
				ue = Math.trunc(C.value + (N + 7) / 8);
			for (; C.value < ue; )
				for (de($, J, V, C), $ = oe.c, J = oe.lc; J >= 14; ) {
					const xe = ($ >> (J - 14)) & 16383,
						Me = P[xe];
					if (Me.len) (J -= Me.len), ee(Me.lit, I, $, J, V, C, G, K, ce), ($ = Te.c), (J = Te.lc);
					else {
						if (!Me.p) throw new Error('hufDecode issues');
						let Le;
						for (Le = 0; Le < Me.lit; Le++) {
							const Ve = Q(b[Me.p[Le]]);
							for (; J < Ve && C.value < ue; ) de($, J, V, C), ($ = oe.c), (J = oe.lc);
							if (J >= Ve && he(b[Me.p[Le]]) == (($ >> (J - Ve)) & ((1 << Ve) - 1))) {
								(J -= Ve), ee(Me.p[Le], I, $, J, V, C, G, K, ce), ($ = Te.c), (J = Te.lc);
								break;
							}
						}
						if (Le == Me.lit) throw new Error('hufDecode issues');
					}
				}
			const ge = (8 - N) & 7;
			for ($ >>= ge, J -= ge; J > 0; ) {
				const xe = P[($ << (14 - J)) & 16383];
				if (xe.len) (J -= xe.len), ee(xe.lit, I, $, J, V, C, G, K, ce), ($ = Te.c), (J = Te.lc);
				else throw new Error('hufDecode issues');
			}
			return !0;
		}
		function tt(b, P, V, C, N, I) {
			const k = {value: 0},
				G = V.value,
				K = L(P, V),
				$ = L(P, V);
			V.value += 4;
			const J = L(P, V);
			if (((V.value += 4), K < 0 || K >= 65537 || $ < 0 || $ >= 65537))
				throw new Error('Something wrong with HUF_ENCSIZE');
			const ce = new Array(65537),
				ue = new Array(16384);
			z(ue);
			const ge = C - (V.value - G);
			if ((Z(b, V, ge, K, $, ce), J > 8 * (C - (V.value - G))))
				throw new Error('Something wrong with hufUncompress');
			ie(ce, K, $, ue), Ye(ce, ue, b, V, J, $, I, N, k);
		}
		function q(b, P, V) {
			for (let C = 0; C < V; ++C) P[C] = b[P[C]];
		}
		function on(b) {
			for (let P = 1; P < b.length; P++) {
				const V = b[P - 1] + b[P] - 128;
				b[P] = V;
			}
		}
		function ke(b, P) {
			let V = 0,
				C = Math.floor((b.length + 1) / 2),
				N = 0;
			const I = b.length - 1;
			for (; !(N > I || ((P[N++] = b[V++]), N > I)); ) P[N++] = b[C++];
		}
		function st(b) {
			let P = b.byteLength;
			const V = new Array();
			let C = 0;
			const N = new DataView(b);
			for (; P > 0; ) {
				const I = N.getInt8(C++);
				if (I < 0) {
					const k = -I;
					P -= k + 1;
					for (let G = 0; G < k; G++) V.push(N.getUint8(C++));
				} else {
					const k = I;
					P -= 2;
					const G = N.getUint8(C++);
					for (let K = 0; K < k + 1; K++) V.push(G);
				}
			}
			return V;
		}
		function Xe(b, P, V, C, N, I) {
			let k = new DataView(I.buffer);
			const G = V[b.idx[0]].width,
				K = V[b.idx[0]].height,
				$ = 3,
				J = Math.floor(G / 8),
				ce = Math.ceil(G / 8),
				ue = Math.ceil(K / 8),
				ge = G - (ce - 1) * 8,
				xe = K - (ue - 1) * 8,
				Me = {value: 0},
				Le = new Array($),
				Ve = new Array($),
				Et = new Array($),
				it = new Array($),
				We = new Array($);
			for (let Ge = 0; Ge < $; ++Ge)
				(We[Ge] = P[b.idx[Ge]]),
					(Le[Ge] = Ge < 1 ? 0 : Le[Ge - 1] + ce * ue),
					(Ve[Ge] = new Float32Array(64)),
					(Et[Ge] = new Uint16Array(64)),
					(it[Ge] = new Uint16Array(ce * 64));
			for (let Ge = 0; Ge < ue; ++Ge) {
				let Rt = 8;
				Ge == ue - 1 && (Rt = xe);
				let Gn = 8;
				for (let vt = 0; vt < ce; ++vt) {
					vt == ce - 1 && (Gn = ge);
					for (let rt = 0; rt < $; ++rt)
						Et[rt].fill(0), (Et[rt][0] = N[Le[rt]++]), At(Me, C, Et[rt]), ot(Et[rt], Ve[rt]), nt(Ve[rt]);
					mt(Ve);
					for (let rt = 0; rt < $; ++rt) Wt(Ve[rt], it[rt], vt * 64);
				}
				let Gt = 0;
				for (let vt = 0; vt < $; ++vt) {
					const rt = V[b.idx[vt]].type;
					for (let xn = 8 * Ge; xn < 8 * Ge + Rt; ++xn) {
						Gt = We[vt][xn];
						for (let ds = 0; ds < J; ++ds) {
							const jt = ds * 64 + (xn & 7) * 8;
							k.setUint16(Gt + 0 * 2 * rt, it[vt][jt + 0], !0),
								k.setUint16(Gt + 1 * 2 * rt, it[vt][jt + 1], !0),
								k.setUint16(Gt + 2 * 2 * rt, it[vt][jt + 2], !0),
								k.setUint16(Gt + 3 * 2 * rt, it[vt][jt + 3], !0),
								k.setUint16(Gt + 4 * 2 * rt, it[vt][jt + 4], !0),
								k.setUint16(Gt + 5 * 2 * rt, it[vt][jt + 5], !0),
								k.setUint16(Gt + 6 * 2 * rt, it[vt][jt + 6], !0),
								k.setUint16(Gt + 7 * 2 * rt, it[vt][jt + 7], !0),
								(Gt += 8 * 2 * rt);
						}
					}
					if (J != ce)
						for (let xn = 8 * Ge; xn < 8 * Ge + Rt; ++xn) {
							const ds = We[vt][xn] + 8 * J * 2 * rt,
								jt = J * 64 + (xn & 7) * 8;
							for (let Hs = 0; Hs < Gn; ++Hs) k.setUint16(ds + Hs * 2 * rt, it[vt][jt + Hs], !0);
						}
				}
			}
			const yt = new Uint16Array(G);
			k = new DataView(I.buffer);
			for (let Ge = 0; Ge < $; ++Ge) {
				V[b.idx[Ge]].decoded = !0;
				const Rt = V[b.idx[Ge]].type;
				if (V[Ge].type == 2)
					for (let Gn = 0; Gn < K; ++Gn) {
						const Gt = We[Ge][Gn];
						for (let vt = 0; vt < G; ++vt) yt[vt] = k.getUint16(Gt + vt * 2 * Rt, !0);
						for (let vt = 0; vt < G; ++vt) k.setFloat32(Gt + vt * 2 * Rt, se(yt[vt]), !0);
					}
			}
		}
		function At(b, P, V) {
			let C,
				N = 1;
			for (; N < 64; )
				(C = P[b.value]), C == 65280 ? (N = 64) : C >> 8 == 255 ? (N += C & 255) : ((V[N] = C), N++), b.value++;
		}
		function ot(b, P) {
			(P[0] = se(b[0])),
				(P[1] = se(b[1])),
				(P[2] = se(b[5])),
				(P[3] = se(b[6])),
				(P[4] = se(b[14])),
				(P[5] = se(b[15])),
				(P[6] = se(b[27])),
				(P[7] = se(b[28])),
				(P[8] = se(b[2])),
				(P[9] = se(b[4])),
				(P[10] = se(b[7])),
				(P[11] = se(b[13])),
				(P[12] = se(b[16])),
				(P[13] = se(b[26])),
				(P[14] = se(b[29])),
				(P[15] = se(b[42])),
				(P[16] = se(b[3])),
				(P[17] = se(b[8])),
				(P[18] = se(b[12])),
				(P[19] = se(b[17])),
				(P[20] = se(b[25])),
				(P[21] = se(b[30])),
				(P[22] = se(b[41])),
				(P[23] = se(b[43])),
				(P[24] = se(b[9])),
				(P[25] = se(b[11])),
				(P[26] = se(b[18])),
				(P[27] = se(b[24])),
				(P[28] = se(b[31])),
				(P[29] = se(b[40])),
				(P[30] = se(b[44])),
				(P[31] = se(b[53])),
				(P[32] = se(b[10])),
				(P[33] = se(b[19])),
				(P[34] = se(b[23])),
				(P[35] = se(b[32])),
				(P[36] = se(b[39])),
				(P[37] = se(b[45])),
				(P[38] = se(b[52])),
				(P[39] = se(b[54])),
				(P[40] = se(b[20])),
				(P[41] = se(b[22])),
				(P[42] = se(b[33])),
				(P[43] = se(b[38])),
				(P[44] = se(b[46])),
				(P[45] = se(b[51])),
				(P[46] = se(b[55])),
				(P[47] = se(b[60])),
				(P[48] = se(b[21])),
				(P[49] = se(b[34])),
				(P[50] = se(b[37])),
				(P[51] = se(b[47])),
				(P[52] = se(b[50])),
				(P[53] = se(b[56])),
				(P[54] = se(b[59])),
				(P[55] = se(b[61])),
				(P[56] = se(b[35])),
				(P[57] = se(b[36])),
				(P[58] = se(b[48])),
				(P[59] = se(b[49])),
				(P[60] = se(b[57])),
				(P[61] = se(b[58])),
				(P[62] = se(b[62])),
				(P[63] = se(b[63]));
		}
		function nt(b) {
			const P = 0.5 * Math.cos(0.7853975),
				V = 0.5 * Math.cos(3.14159 / 16),
				C = 0.5 * Math.cos(3.14159 / 8),
				N = 0.5 * Math.cos((3 * 3.14159) / 16),
				I = 0.5 * Math.cos((5 * 3.14159) / 16),
				k = 0.5 * Math.cos((3 * 3.14159) / 8),
				G = 0.5 * Math.cos((7 * 3.14159) / 16),
				K = new Array(4),
				$ = new Array(4),
				J = new Array(4),
				ce = new Array(4);
			for (let ue = 0; ue < 8; ++ue) {
				const ge = ue * 8;
				(K[0] = C * b[ge + 2]),
					(K[1] = k * b[ge + 2]),
					(K[2] = C * b[ge + 6]),
					(K[3] = k * b[ge + 6]),
					($[0] = V * b[ge + 1] + N * b[ge + 3] + I * b[ge + 5] + G * b[ge + 7]),
					($[1] = N * b[ge + 1] - G * b[ge + 3] - V * b[ge + 5] - I * b[ge + 7]),
					($[2] = I * b[ge + 1] - V * b[ge + 3] + G * b[ge + 5] + N * b[ge + 7]),
					($[3] = G * b[ge + 1] - I * b[ge + 3] + N * b[ge + 5] - V * b[ge + 7]),
					(J[0] = P * (b[ge + 0] + b[ge + 4])),
					(J[3] = P * (b[ge + 0] - b[ge + 4])),
					(J[1] = K[0] + K[3]),
					(J[2] = K[1] - K[2]),
					(ce[0] = J[0] + J[1]),
					(ce[1] = J[3] + J[2]),
					(ce[2] = J[3] - J[2]),
					(ce[3] = J[0] - J[1]),
					(b[ge + 0] = ce[0] + $[0]),
					(b[ge + 1] = ce[1] + $[1]),
					(b[ge + 2] = ce[2] + $[2]),
					(b[ge + 3] = ce[3] + $[3]),
					(b[ge + 4] = ce[3] - $[3]),
					(b[ge + 5] = ce[2] - $[2]),
					(b[ge + 6] = ce[1] - $[1]),
					(b[ge + 7] = ce[0] - $[0]);
			}
			for (let ue = 0; ue < 8; ++ue)
				(K[0] = C * b[16 + ue]),
					(K[1] = k * b[16 + ue]),
					(K[2] = C * b[48 + ue]),
					(K[3] = k * b[48 + ue]),
					($[0] = V * b[8 + ue] + N * b[24 + ue] + I * b[40 + ue] + G * b[56 + ue]),
					($[1] = N * b[8 + ue] - G * b[24 + ue] - V * b[40 + ue] - I * b[56 + ue]),
					($[2] = I * b[8 + ue] - V * b[24 + ue] + G * b[40 + ue] + N * b[56 + ue]),
					($[3] = G * b[8 + ue] - I * b[24 + ue] + N * b[40 + ue] - V * b[56 + ue]),
					(J[0] = P * (b[ue] + b[32 + ue])),
					(J[3] = P * (b[ue] - b[32 + ue])),
					(J[1] = K[0] + K[3]),
					(J[2] = K[1] - K[2]),
					(ce[0] = J[0] + J[1]),
					(ce[1] = J[3] + J[2]),
					(ce[2] = J[3] - J[2]),
					(ce[3] = J[0] - J[1]),
					(b[0 + ue] = ce[0] + $[0]),
					(b[8 + ue] = ce[1] + $[1]),
					(b[16 + ue] = ce[2] + $[2]),
					(b[24 + ue] = ce[3] + $[3]),
					(b[32 + ue] = ce[3] - $[3]),
					(b[40 + ue] = ce[2] - $[2]),
					(b[48 + ue] = ce[1] - $[1]),
					(b[56 + ue] = ce[0] - $[0]);
		}
		function mt(b) {
			for (let P = 0; P < 64; ++P) {
				const V = b[0][P],
					C = b[1][P],
					N = b[2][P];
				(b[0][P] = V + 1.5747 * N), (b[1][P] = V - 0.1873 * C - 0.4682 * N), (b[2][P] = V + 1.8556 * C);
			}
		}
		function Wt(b, P, V) {
			for (let C = 0; C < 64; ++C) P[V + C] = Zg.toHalfFloat(Pt(b[C]));
		}
		function Pt(b) {
			return b <= 1 ? Math.sign(b) * Math.pow(Math.abs(b), 2.2) : Math.sign(b) * Math.pow(E, Math.abs(b) - 1);
		}
		function U(b) {
			return new DataView(b.array.buffer, b.offset.value, b.size);
		}
		function O(b) {
			const P = b.viewer.buffer.slice(b.offset.value, b.offset.value + b.size),
				V = new Uint8Array(st(P)),
				C = new Uint8Array(V.length);
			return on(V), ke(V, C), new DataView(C.buffer);
		}
		function Y(b) {
			const P = b.array.slice(b.offset.value, b.offset.value + b.size),
				V = pu(P),
				C = new Uint8Array(V.length);
			return on(V), ke(V, C), new DataView(C.buffer);
		}
		function ve(b) {
			const P = b.viewer,
				V = {value: b.offset.value},
				C = new Uint16Array(b.width * b.scanlineBlockSize * (b.channels * b.type)),
				N = new Uint8Array(8192);
			let I = 0;
			const k = new Array(b.channels);
			for (let xe = 0; xe < b.channels; xe++)
				(k[xe] = {}),
					(k[xe].start = I),
					(k[xe].end = k[xe].start),
					(k[xe].nx = b.width),
					(k[xe].ny = b.lines),
					(k[xe].size = b.type),
					(I += k[xe].nx * k[xe].ny * k[xe].size);
			const G = H(P, V),
				K = H(P, V);
			if (K >= 8192) throw new Error('Something is wrong with PIZ_COMPRESSION BITMAP_SIZE');
			if (G <= K) for (let xe = 0; xe < K - G + 1; xe++) N[xe + G] = De(P, V);
			const $ = new Uint16Array(65536),
				J = x(N, $),
				ce = L(P, V);
			tt(b.array, P, V, ce, C, I);
			for (let xe = 0; xe < b.channels; ++xe) {
				const Me = k[xe];
				for (let Le = 0; Le < k[xe].size; ++Le) Je(C, Me.start + Le, Me.nx, Me.size, Me.ny, Me.nx * Me.size, J);
			}
			q($, C, I);
			let ue = 0;
			const ge = new Uint8Array(C.buffer.byteLength);
			for (let xe = 0; xe < b.lines; xe++)
				for (let Me = 0; Me < b.channels; Me++) {
					const Le = k[Me],
						Ve = Le.nx * Le.size,
						Et = new Uint8Array(C.buffer, Le.end * 2, Ve * 2);
					ge.set(Et, ue), (ue += Ve * 2), (Le.end += Ve);
				}
			return new DataView(ge.buffer);
		}
		function pe(b) {
			const P = b.array.slice(b.offset.value, b.offset.value + b.size),
				V = pu(P),
				C = b.lines * b.channels * b.width,
				N = b.type == 1 ? new Uint16Array(C) : new Uint32Array(C);
			let I = 0,
				k = 0;
			const G = new Array(4);
			for (let K = 0; K < b.lines; K++)
				for (let $ = 0; $ < b.channels; $++) {
					let J = 0;
					switch (b.type) {
						case 1:
							(G[0] = I), (G[1] = G[0] + b.width), (I = G[1] + b.width);
							for (let ce = 0; ce < b.width; ++ce) {
								const ue = (V[G[0]++] << 8) | V[G[1]++];
								(J += ue), (N[k] = J), k++;
							}
							break;
						case 2:
							(G[0] = I), (G[1] = G[0] + b.width), (G[2] = G[1] + b.width), (I = G[2] + b.width);
							for (let ce = 0; ce < b.width; ++ce) {
								const ue = (V[G[0]++] << 24) | (V[G[1]++] << 16) | (V[G[2]++] << 8);
								(J += ue), (N[k] = J), k++;
							}
							break;
					}
				}
			return new DataView(N.buffer);
		}
		function Ce(b) {
			const P = b.viewer,
				V = {value: b.offset.value},
				C = new Uint8Array(b.width * b.lines * (b.channels * b.type * 2)),
				N = {
					version: Re(P, V),
					unknownUncompressedSize: Re(P, V),
					unknownCompressedSize: Re(P, V),
					acCompressedSize: Re(P, V),
					dcCompressedSize: Re(P, V),
					rleCompressedSize: Re(P, V),
					rleUncompressedSize: Re(P, V),
					rleRawSize: Re(P, V),
					totalAcUncompressedCount: Re(P, V),
					totalDcUncompressedCount: Re(P, V),
					acCompression: Re(P, V),
				};
			if (N.version < 2)
				throw new Error('EXRLoader.parse: ' + zs.compression + ' version ' + N.version + ' is unsupported');
			const I = new Array();
			let k = H(P, V) - 2;
			for (; k > 0; ) {
				const Me = Fe(P.buffer, V),
					Le = De(P, V),
					Ve = (Le >> 2) & 3,
					Et = (Le >> 4) - 1,
					it = new Int8Array([Et])[0],
					We = De(P, V);
				I.push({name: Me, index: it, type: We, compression: Ve}), (k -= Me.length + 3);
			}
			const G = zs.channels,
				K = new Array(b.channels);
			for (let Me = 0; Me < b.channels; ++Me) {
				const Le = (K[Me] = {}),
					Ve = G[Me];
				(Le.name = Ve.name),
					(Le.compression = 0),
					(Le.decoded = !1),
					(Le.type = Ve.pixelType),
					(Le.pLinear = Ve.pLinear),
					(Le.width = b.width),
					(Le.height = b.lines);
			}
			const $ = {idx: new Array(3)};
			for (let Me = 0; Me < b.channels; ++Me) {
				const Le = K[Me];
				for (let Ve = 0; Ve < I.length; ++Ve) {
					const Et = I[Ve];
					Le.name == Et.name &&
						((Le.compression = Et.compression), Et.index >= 0 && ($.idx[Et.index] = Me), (Le.offset = Me));
				}
			}
			let J, ce, ue;
			if (N.acCompressedSize > 0)
				switch (N.acCompression) {
					case 0:
						(J = new Uint16Array(N.totalAcUncompressedCount)),
							tt(b.array, P, V, N.acCompressedSize, J, N.totalAcUncompressedCount);
						break;
					case 1:
						const Me = b.array.slice(V.value, V.value + N.totalAcUncompressedCount),
							Le = pu(Me);
						(J = new Uint16Array(Le.buffer)), (V.value += N.totalAcUncompressedCount);
						break;
				}
			if (N.dcCompressedSize > 0) {
				const Me = {array: b.array, offset: V, size: N.dcCompressedSize};
				(ce = new Uint16Array(Y(Me).buffer)), (V.value += N.dcCompressedSize);
			}
			if (N.rleRawSize > 0) {
				const Me = b.array.slice(V.value, V.value + N.rleCompressedSize),
					Le = pu(Me);
				(ue = st(Le.buffer)), (V.value += N.rleCompressedSize);
			}
			let ge = 0;
			const xe = new Array(K.length);
			for (let Me = 0; Me < xe.length; ++Me) xe[Me] = new Array();
			for (let Me = 0; Me < b.lines; ++Me)
				for (let Le = 0; Le < K.length; ++Le) xe[Le].push(ge), (ge += K[Le].width * b.type * 2);
			Xe($, xe, K, J, ce, C);
			for (let Me = 0; Me < K.length; ++Me) {
				const Le = K[Me];
				if (!Le.decoded)
					switch (Le.compression) {
						case 2:
							let Ve = 0,
								Et = 0;
							for (let it = 0; it < b.lines; ++it) {
								let We = xe[Me][Ve];
								for (let yt = 0; yt < Le.width; ++yt) {
									for (let Ge = 0; Ge < 2 * Le.type; ++Ge)
										C[We++] = ue[Et + Ge * Le.width * Le.height];
									Et++;
								}
								Ve++;
							}
							break;
						case 1:
						default:
							throw new Error('EXRLoader.parse: unsupported channel compression');
					}
			}
			return new DataView(C.buffer);
		}
		function Fe(b, P) {
			const V = new Uint8Array(b);
			let C = 0;
			for (; V[P.value + C] != 0; ) C += 1;
			const N = new TextDecoder().decode(V.slice(P.value, P.value + C));
			return (P.value = P.value + C + 1), N;
		}
		function Se(b, P, V) {
			const C = new TextDecoder().decode(new Uint8Array(b).slice(P.value, P.value + V));
			return (P.value = P.value + V), C;
		}
		function Ne(b, P) {
			const V = at(b, P),
				C = L(b, P);
			return [V, C];
		}
		function $e(b, P) {
			const V = L(b, P),
				C = L(b, P);
			return [V, C];
		}
		function at(b, P) {
			const V = b.getInt32(P.value, !0);
			return (P.value = P.value + 4), V;
		}
		function L(b, P) {
			const V = b.getUint32(P.value, !0);
			return (P.value = P.value + 4), V;
		}
		function ye(b, P) {
			const V = b[P.value];
			return (P.value = P.value + 1), V;
		}
		function De(b, P) {
			const V = b.getUint8(P.value);
			return (P.value = P.value + 1), V;
		}
		const Re = function (b, P) {
			let V;
			return (
				'getBigInt64' in DataView.prototype
					? (V = Number(b.getBigInt64(P.value, !0)))
					: (V = b.getUint32(P.value + 4, !0) + Number(b.getUint32(P.value, !0) << 32)),
				(P.value += 8),
				V
			);
		};
		function Ae(b, P) {
			const V = b.getFloat32(P.value, !0);
			return (P.value += 4), V;
		}
		function Pe(b, P) {
			return Zg.toHalfFloat(Ae(b, P));
		}
		function se(b) {
			const P = (b & 31744) >> 10,
				V = b & 1023;
			return (
				(b >> 15 ? -1 : 1) *
				(P
					? P === 31
						? V
							? NaN
							: 1 / 0
						: Math.pow(2, P - 15) * (1 + V / 1024)
					: 6103515625e-14 * (V / 1024))
			);
		}
		function H(b, P) {
			const V = b.getUint16(P.value, !0);
			return (P.value += 2), V;
		}
		function Ie(b, P) {
			return se(H(b, P));
		}
		function _e(b, P, V, C) {
			const N = V.value,
				I = [];
			for (; V.value < N + C - 1; ) {
				const k = Fe(P, V),
					G = at(b, V),
					K = De(b, V);
				V.value += 3;
				const $ = at(b, V),
					J = at(b, V);
				I.push({name: k, pixelType: G, pLinear: K, xSampling: $, ySampling: J});
			}
			return (V.value += 1), I;
		}
		function te(b, P) {
			const V = Ae(b, P),
				C = Ae(b, P),
				N = Ae(b, P),
				I = Ae(b, P),
				k = Ae(b, P),
				G = Ae(b, P),
				K = Ae(b, P),
				$ = Ae(b, P);
			return {redX: V, redY: C, greenX: N, greenY: I, blueX: k, blueY: G, whiteX: K, whiteY: $};
		}
		function me(b, P) {
			const V = [
					'NO_COMPRESSION',
					'RLE_COMPRESSION',
					'ZIPS_COMPRESSION',
					'ZIP_COMPRESSION',
					'PIZ_COMPRESSION',
					'PXR24_COMPRESSION',
					'B44_COMPRESSION',
					'B44A_COMPRESSION',
					'DWAA_COMPRESSION',
					'DWAB_COMPRESSION',
				],
				C = De(b, P);
			return V[C];
		}
		function ze(b, P) {
			const V = L(b, P),
				C = L(b, P),
				N = L(b, P),
				I = L(b, P);
			return {xMin: V, yMin: C, xMax: N, yMax: I};
		}
		function ht(b, P) {
			const V = ['INCREASING_Y'],
				C = De(b, P);
			return V[C];
		}
		function Nt(b, P) {
			const V = Ae(b, P),
				C = Ae(b, P);
			return [V, C];
		}
		function It(b, P) {
			const V = Ae(b, P),
				C = Ae(b, P),
				N = Ae(b, P);
			return [V, C, N];
		}
		function gt(b, P, V, C, N) {
			if (C === 'string' || C === 'stringvector' || C === 'iccProfile') return Se(P, V, N);
			if (C === 'chlist') return _e(b, P, V, N);
			if (C === 'chromaticities') return te(b, V);
			if (C === 'compression') return me(b, V);
			if (C === 'box2i') return ze(b, V);
			if (C === 'lineOrder') return ht(b, V);
			if (C === 'float') return Ae(b, V);
			if (C === 'v2f') return Nt(b, V);
			if (C === 'v3f') return It(b, V);
			if (C === 'int') return at(b, V);
			if (C === 'rational') return Ne(b, V);
			if (C === 'timecode') return $e(b, V);
			if (C === 'preview') return (V.value += N), 'skipped';
			V.value += N;
		}
		function dn(b, P, V) {
			const C = {};
			if (b.getUint32(0, !0) != 20000630)
				throw new Error("THREE.EXRLoader: Provided file doesn't appear to be in OpenEXR format.");
			C.version = b.getUint8(4);
			const N = b.getUint8(5);
			(C.spec = {singleTile: !!(N & 2), longName: !!(N & 4), deepFormat: !!(N & 8), multiPart: !!(N & 16)}),
				(V.value = 8);
			let I = !0;
			for (; I; ) {
				const k = Fe(P, V);
				if (k == 0) I = !1;
				else {
					const G = Fe(P, V),
						K = L(b, V),
						$ = gt(b, P, V, G, K);
					$ === void 0
						? console.warn(`THREE.EXRLoader: Skipped unknown header attribute type '${G}'.`)
						: (C[k] = $);
				}
			}
			if (N & -5)
				throw (
					(console.error('THREE.EXRHeader:', C),
					new Error('THREE.EXRLoader: Provided file is currently unsupported.'))
				);
			return C;
		}
		function ui(b, P, V, C, N) {
			const I = {
				size: 0,
				viewer: P,
				array: V,
				offset: C,
				width: b.dataWindow.xMax - b.dataWindow.xMin + 1,
				height: b.dataWindow.yMax - b.dataWindow.yMin + 1,
				channels: b.channels.length,
				bytesPerLine: null,
				lines: null,
				inputSize: null,
				type: b.channels[0].pixelType,
				uncompress: null,
				getter: null,
				format: null,
				colorSpace: $n,
			};
			switch (b.compression) {
				case 'NO_COMPRESSION':
					(I.lines = 1), (I.uncompress = U);
					break;
				case 'RLE_COMPRESSION':
					(I.lines = 1), (I.uncompress = O);
					break;
				case 'ZIPS_COMPRESSION':
					(I.lines = 1), (I.uncompress = Y);
					break;
				case 'ZIP_COMPRESSION':
					(I.lines = 16), (I.uncompress = Y);
					break;
				case 'PIZ_COMPRESSION':
					(I.lines = 32), (I.uncompress = ve);
					break;
				case 'PXR24_COMPRESSION':
					(I.lines = 16), (I.uncompress = pe);
					break;
				case 'DWAA_COMPRESSION':
					(I.lines = 32), (I.uncompress = Ce);
					break;
				case 'DWAB_COMPRESSION':
					(I.lines = 256), (I.uncompress = Ce);
					break;
				default:
					throw new Error('EXRLoader.parse: ' + b.compression + ' is unsupported');
			}
			if (((I.scanlineBlockSize = I.lines), I.type == 1))
				switch (N) {
					case jn:
						(I.getter = Ie), (I.inputSize = 2);
						break;
					case ki:
						(I.getter = H), (I.inputSize = 2);
						break;
				}
			else if (I.type == 2)
				switch (N) {
					case jn:
						(I.getter = Ae), (I.inputSize = 4);
						break;
					case ki:
						(I.getter = Pe), (I.inputSize = 4);
				}
			else throw new Error('EXRLoader.parse: unsupported pixelType ' + I.type + ' for ' + b.compression + '.');
			I.blockCount = (b.dataWindow.yMax + 1) / I.scanlineBlockSize;
			for (let G = 0; G < I.blockCount; G++) Re(P, C);
			I.outputChannels = I.channels == 3 ? 4 : I.channels;
			const k = I.width * I.height * I.outputChannels;
			switch (N) {
				case jn:
					(I.byteArray = new Float32Array(k)), I.channels < I.outputChannels && I.byteArray.fill(1, 0, k);
					break;
				case ki:
					(I.byteArray = new Uint16Array(k)), I.channels < I.outputChannels && I.byteArray.fill(15360, 0, k);
					break;
				default:
					console.error('THREE.EXRLoader: unsupported type: ', N);
					break;
			}
			return (
				(I.bytesPerLine = I.width * I.inputSize * I.channels),
				I.outputChannels == 4 ? ((I.format = wn), (I.colorSpace = $n)) : ((I.format = u_), (I.colorSpace = tn)),
				I
			);
		}
		const xr = new DataView(e),
			nd = new Uint8Array(e),
			Xi = {value: 0},
			zs = dn(xr, e, Xi),
			ct = ui(zs, xr, nd, Xi, this.type),
			Va = {value: 0},
			ol = {R: 0, G: 1, B: 2, A: 3, Y: 0};
		for (let b = 0; b < ct.height / ct.scanlineBlockSize; b++) {
			const P = L(xr, Xi);
			(ct.size = L(xr, Xi)),
				(ct.lines = P + ct.scanlineBlockSize > ct.height ? ct.height - P : ct.scanlineBlockSize);
			const C = ct.size < ct.lines * ct.bytesPerLine ? ct.uncompress(ct) : U(ct);
			Xi.value += ct.size;
			for (let N = 0; N < ct.scanlineBlockSize; N++) {
				const I = N + b * ct.scanlineBlockSize;
				if (I >= ct.height) break;
				for (let k = 0; k < ct.channels; k++) {
					const G = ol[zs.channels[k].name];
					for (let K = 0; K < ct.width; K++) {
						Va.value = (N * (ct.channels * ct.width) + k * ct.width + K) * ct.inputSize;
						const $ = (ct.height - 1 - I) * (ct.width * ct.outputChannels) + K * ct.outputChannels + G;
						ct.byteArray[$] = ct.getter(C, Va);
					}
				}
			}
		}
		return {
			header: zs,
			width: ct.width,
			height: ct.height,
			data: ct.byteArray,
			format: ct.format,
			colorSpace: ct.colorSpace,
			type: this.type,
		};
	}
	setDataType(e) {
		return (this.type = e), this;
	}
	load(e, t, i, s) {
		function r(o, a) {
			(o.colorSpace = a.colorSpace),
				(o.minFilter = Yt),
				(o.magFilter = Yt),
				(o.generateMipmaps = !1),
				(o.flipY = !1),
				t && t(o, a);
		}
		return super.load(e, r, i, s);
	}
}
class Yf extends Jx {
	constructor(e, t) {
		super(e, t);
	}
	async _getLoader(e) {
		const t = new Z4(this.loadingManager);
		return e.tdataType && t.setDataType(e.dataType), t;
	}
}
Yf.PARAM_ENV_DEFAULT = `${Zx}/textures/piz_compressed.exr`;
class Q4 extends Kx({
	type: Os.IMAGE_EXR,
	defaultUrl: Yf.PARAM_ENV_DEFAULT,
	extensions: t0[fe.COP][Os.IMAGE_EXR],
	getLoader: (e, t) => new Yf(e, t),
}) {}
class J4 extends wi {
	constructor() {
		super(...arguments), (this._cookWithoutInputsBound = this._cookWithoutInputs.bind(this));
	}
	static context() {
		return fe.EVENT;
	}
	initializeBaseNode() {
		this.uiData.setLayoutHorizontal(),
			this.addPostDirtyHook('cookWithoutInputsOnDirty', this._cookWithoutInputsBound),
			this.io.inputs.setDependsOnInputs(!1),
			this.io.connections.initInputs(),
			this.io.connection_points.spare_params.initializeNode();
	}
	_cookWithoutInputs() {
		this.cookController.cookMainWithoutInputs();
	}
	cook() {
		this.cookController.endCook();
	}
	processEventViaConnectionPoint(e, t) {
		t.event_listener ? t.event_listener(e) : this.processEvent(e);
	}
	processEvent(e) {}
	async dispatchEventToOutput(e, t) {
		this.run_on_dispatch_hook(e, t);
		const i = this.io.outputs.getOutputIndex(e);
		if (i >= 0) {
			const s = this.io.connections.outputConnectionsByOutputIndex(i);
			if (s) {
				let r;
				if (!le.playerMode()) {
					const o = this.scene().eventsDispatcher.connectionTriggerDispatcher;
					s.forEach((a) => {
						o.dispatchTrigger(a);
					});
				}
				s.forEach((o) => {
					r = o.nodeDest();
					const a = r.io.inputs.namedInputConnectionPoints();
					if (a) {
						const c = a[o.inputIndex()];
						r.processEventViaConnectionPoint(t, c);
					}
				});
			}
		} else console.warn(`requested output '${e}' does not exist on node '${this.path()}'`);
	}
	onDispatch(e, t) {
		(this._on_dispatch_hooks_by_output_name = this._on_dispatch_hooks_by_output_name || new Map()),
			yi(this._on_dispatch_hooks_by_output_name, e, t);
	}
	run_on_dispatch_hook(e, t) {
		if (this._on_dispatch_hooks_by_output_name) {
			const i = this._on_dispatch_hooks_by_output_name.get(e);
			if (i) for (const s of i) s(t);
		}
	}
}
class ej extends J4 {
	constructor() {
		super(...arguments), (this._controls_by_viewer = new Map());
	}
	async applyControls(e, t) {
		const i = t.canvas();
		if (!i) return;
		await (async () => {
			let l;
			for (const u of this.params.all) u.isDirty() && !u.parentParam() && ((l = l || []), l.push(u.compute()));
			l && (await Promise.all(l));
		})();
		const r = await this.createControlsInstance(e, i),
			o = this._controls_by_viewer.get(t);
		o && o.dispose(), this._controls_by_viewer.set(t, r);
		const c = le.performance.performanceManager().now();
		return (
			(r.name = `${this.path()}:${e.name}:${c}:${this.controls_id()}`),
			await this.params.evalAll(),
			this.setupControls(r),
			r
		);
	}
	controls_id() {
		return JSON.stringify(this.params.all.map((e) => e.valueSerialized()));
	}
	cook() {
		this._controls_by_viewer.forEach((e) => {
			this.setupControls(e);
		}),
			this.cookController.endCook();
	}
}
const Oy = {type: 'change'},
	Pp = {type: 'start'},
	Py = {type: 'end'},
	fu = new Ta(),
	Ny = new es(),
	tj = Math.cos(70 * bn.DEG2RAD);
class nj extends cs {
	constructor(e, t) {
		super(),
			(this.object = e),
			(this.domElement = t),
			(this.domElement.style.touchAction = 'none'),
			(this.enabled = !0),
			(this.target = new w()),
			(this.minDistance = 0),
			(this.maxDistance = 1 / 0),
			(this.minZoom = 0),
			(this.maxZoom = 1 / 0),
			(this.minPolarAngle = 0),
			(this.maxPolarAngle = Math.PI),
			(this.minAzimuthAngle = -1 / 0),
			(this.maxAzimuthAngle = 1 / 0),
			(this.enableDamping = !1),
			(this.dampingFactor = 0.05),
			(this.enableZoom = !0),
			(this.zoomSpeed = 1),
			(this.enableRotate = !0),
			(this.rotateSpeed = 1),
			(this.enablePan = !0),
			(this.panSpeed = 1),
			(this.screenSpacePanning = !0),
			(this.keyPanSpeed = 7),
			(this.zoomToCursor = !1),
			(this.clampPosition = !1),
			(this.positionBounds = new Ht(new w(-1 / 0, -1 / 0, -1 / 0), new w(1 / 0, 1 / 0, 1 / 0))),
			(this.autoRotate = !1),
			(this.autoRotateSpeed = 2),
			(this.keys = {LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown'}),
			(this.mouseButtons = {LEFT: bs.ROTATE, MIDDLE: bs.DOLLY, RIGHT: bs.PAN}),
			(this.touches = {ONE: Ji.ROTATE, TWO: Ji.DOLLY_PAN}),
			(this.target0 = this.target.clone()),
			(this.position0 = this.object.position.clone()),
			(this.zoom0 = this.object.zoom),
			(this._domElementKeyEvents = null);
		const i = new w(0, 0, 0),
			s = new w(0, 0, 0);
		(this.getPolarAngle = function () {
			return l.phi;
		}),
			(this.getAzimuthalAngle = function () {
				return l.theta;
			}),
			(this.getDistance = function () {
				return this.object.position.distanceTo(this.target);
			}),
			(this.listenToKeyEvents = function (L) {
				L.addEventListener('keydown', ve), (this._domElementKeyEvents = L);
			}),
			(this.stopListenToKeyEvents = function () {
				this._domElementKeyEvents.removeEventListener('keydown', ve), (this._domElementKeyEvents = null);
			}),
			(this.saveState = function () {
				r.target0.copy(r.target), r.position0.copy(r.object.position), (r.zoom0 = r.object.zoom);
			}),
			(this.reset = function () {
				r.target.copy(r.target0),
					r.object.position.copy(r.position0),
					(r.object.zoom = r.zoom0),
					r.object.updateProjectionMatrix(),
					r.dispatchEvent(Oy),
					r.update(),
					(a = o.NONE);
			}),
			(this.update = (function () {
				const L = new w(),
					ye = new Sn().setFromUnitVectors(e.up, new w(0, 1, 0)),
					De = ye.clone().invert(),
					Re = new w(),
					Ae = new Sn(),
					Pe = new w(),
					se = 2 * Math.PI;
				return function (Ie = null) {
					const _e = r.object.position;
					if (
						(L.copy(_e).sub(r.target),
						L.applyQuaternion(ye),
						l.setFromVector3(L),
						r.autoRotate && a === o.NONE && W(z(Ie)),
						r.enableDamping)
					) {
						const It = u.theta * r.dampingFactor,
							gt = u.phi * r.dampingFactor;
						(l.theta += It), (l.phi += gt);
					} else (l.theta += u.theta), (l.phi += u.phi);
					let te = r.minAzimuthAngle,
						me = r.maxAzimuthAngle;
					isFinite(te) &&
						isFinite(me) &&
						(te < -Math.PI ? (te += se) : te > Math.PI && (te -= se),
						me < -Math.PI ? (me += se) : me > Math.PI && (me -= se),
						te <= me
							? (l.theta = Math.max(te, Math.min(me, l.theta)))
							: (l.theta = l.theta > (te + me) / 2 ? Math.max(te, l.theta) : Math.min(me, l.theta))),
						(l.phi = Math.max(r.minPolarAngle, Math.min(r.maxPolarAngle, l.phi))),
						l.makeSafe(),
						r.enableDamping === !0 ? r.target.addScaledVector(d, r.dampingFactor) : r.target.add(d);
					function ze() {
						r.clampPosition && r.target.clamp(r.positionBounds.min, r.positionBounds.max);
					}
					function ht() {
						r.clampPosition && _e.clamp(r.positionBounds.min, r.positionBounds.max);
					}
					ze(),
						(r.zoomToCursor && D) || r.object.isOrthographicCamera
							? (l.radius = de(l.radius))
							: (l.radius = de(l.radius * h)),
						L.setFromSpherical(l),
						L.applyQuaternion(De),
						_e.copy(r.target).add(L),
						ht(),
						r.object.lookAt(r.target),
						r.enableDamping === !0
							? ((u.theta *= 1 - r.dampingFactor),
							  (u.phi *= 1 - r.dampingFactor),
							  d.multiplyScalar(1 - r.dampingFactor))
							: (u.set(0, 0, 0), d.set(0, 0, 0));
					let Nt = !1;
					if (r.zoomToCursor && D) {
						let It = null;
						if (r.object.isPerspectiveCamera) {
							const gt = L.length();
							It = de(gt * h);
							const dn = gt - It;
							r.object.position.addScaledVector(T, dn), ht(), r.object.updateMatrixWorld();
						} else
							r.object.isOrthographicCamera
								? ((i.x = R.x),
								  (i.y = R.y),
								  (i.z = 0),
								  i.unproject(r.object),
								  (r.object.zoom = Math.max(r.minZoom, Math.min(r.maxZoom, r.object.zoom / h))),
								  r.object.updateProjectionMatrix(),
								  (Nt = !0),
								  (s.x = R.x),
								  (s.y = R.y),
								  (s.z = 0),
								  s.unproject(r.object),
								  r.object.position.sub(s).add(i),
								  ht(),
								  r.object.updateMatrixWorld(),
								  (It = L.length()))
								: (console.warn(
										'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.'
								  ),
								  (r.zoomToCursor = !1));
						It !== null &&
							(this.screenSpacePanning
								? (r.target
										.set(0, 0, -1)
										.transformDirection(r.object.matrix)
										.multiplyScalar(It)
										.add(r.object.position),
								  ze())
								: (fu.origin.copy(r.object.position),
								  fu.direction.set(0, 0, -1).transformDirection(r.object.matrix),
								  Math.abs(r.object.up.dot(fu.direction)) < tj
										? e.lookAt(r.target)
										: (Ny.setFromNormalAndCoplanarPoint(r.object.up, r.target),
										  fu.intersectPlane(Ny, r.target),
										  ze())));
					} else
						r.object.isOrthographicCamera &&
							((r.object.zoom = Math.max(r.minZoom, Math.min(r.maxZoom, r.object.zoom / h))),
							r.object.updateProjectionMatrix(),
							(Nt = !0));
					return (
						(h = 1),
						(D = !1),
						Nt ||
						Re.distanceToSquared(r.object.position) > c ||
						8 * (1 - Ae.dot(r.object.quaternion)) > c ||
						Pe.distanceToSquared(r.target) > 0
							? (r.dispatchEvent(Oy),
							  Re.copy(r.object.position),
							  Ae.copy(r.object.quaternion),
							  Pe.copy(r.target),
							  (Nt = !1),
							  !0)
							: !1
					);
				};
			})()),
			(this.dispose = function () {
				r.domElement.removeEventListener('contextmenu', Fe),
					r.domElement.removeEventListener('pointerdown', mt),
					r.domElement.removeEventListener('pointercancel', Pt),
					r.domElement.removeEventListener('wheel', Y),
					r.domElement.ownerDocument.removeEventListener('pointermove', Wt),
					r.domElement.ownerDocument.removeEventListener('pointerup', Pt),
					r._domElementKeyEvents !== null &&
						(r._domElementKeyEvents.removeEventListener('keydown', ve), (r._domElementKeyEvents = null));
			});
		const r = this,
			o = {
				NONE: -1,
				ROTATE: 0,
				DOLLY: 1,
				PAN: 2,
				TOUCH_ROTATE: 3,
				TOUCH_PAN: 4,
				TOUCH_DOLLY_PAN: 5,
				TOUCH_DOLLY_ROTATE: 6,
			};
		let a = o.NONE;
		const c = 1e-6,
			l = new Vv(),
			u = new Vv();
		let h = 1;
		const d = new w(),
			p = new re(),
			m = new re(),
			g = new re(),
			_ = new re(),
			f = new re(),
			y = new re(),
			v = new re(),
			A = new re(),
			S = new re(),
			T = new w(),
			R = new re();
		let D = !1;
		const E = [],
			x = {};
		function z(L) {
			return L !== null
				? ((2 * Math.PI) / 60) * r.autoRotateSpeed * L
				: ((2 * Math.PI) / 60 / 60) * r.autoRotateSpeed;
		}
		function B() {
			return Math.pow(0.95, r.zoomSpeed);
		}
		function W(L) {
			u.theta -= L;
		}
		function F(L) {
			u.phi -= L;
		}
		const X = (function () {
				const L = new w();
				return function (De, Re) {
					L.setFromMatrixColumn(Re, 0), L.multiplyScalar(-De), d.add(L);
				};
			})(),
			Z = (function () {
				const L = new w();
				return function (De, Re) {
					r.screenSpacePanning === !0
						? L.setFromMatrixColumn(Re, 1)
						: (L.setFromMatrixColumn(Re, 0), L.crossVectors(r.object.up, L)),
						L.multiplyScalar(De),
						d.add(L);
				};
			})(),
			Q = (function () {
				const L = new w();
				return function (De, Re) {
					const Ae = r.domElement;
					if (r.object.isPerspectiveCamera) {
						const Pe = r.object.position;
						L.copy(Pe).sub(r.target);
						let se = L.length();
						(se *= Math.tan(((r.object.fov / 2) * Math.PI) / 180)),
							X((2 * De * se) / Ae.clientHeight, r.object.matrix),
							Z((2 * Re * se) / Ae.clientHeight, r.object.matrix);
					} else
						r.object.isOrthographicCamera
							? (X(
									(De * (r.object.right - r.object.left)) / r.object.zoom / Ae.clientWidth,
									r.object.matrix
							  ),
							  Z(
									(Re * (r.object.top - r.object.bottom)) / r.object.zoom / Ae.clientHeight,
									r.object.matrix
							  ))
							: (console.warn(
									'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.'
							  ),
							  (r.enablePan = !1));
				};
			})();
		function he(L) {
			r.object.isPerspectiveCamera || r.object.isOrthographicCamera
				? (h /= L)
				: (console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.'),
				  (r.enableZoom = !1));
		}
		function ie(L) {
			r.object.isPerspectiveCamera || r.object.isOrthographicCamera
				? (h *= L)
				: (console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.'),
				  (r.enableZoom = !1));
		}
		function oe(L) {
			if (!r.zoomToCursor) return;
			D = !0;
			const ye = r.domElement.getBoundingClientRect(),
				De = L.clientX - ye.left,
				Re = L.clientY - ye.top,
				Ae = ye.width,
				Pe = ye.height;
			(R.x = (De / Ae) * 2 - 1),
				(R.y = -(Re / Pe) * 2 + 1),
				T.set(R.x, R.y, 1).unproject(r.object).sub(r.object.position).normalize();
		}
		function de(L) {
			return Math.max(r.minDistance, Math.min(r.maxDistance, L));
		}
		function Te(L) {
			p.set(L.clientX, L.clientY);
		}
		function ee(L) {
			oe(L), v.set(L.clientX, L.clientY);
		}
		function ae(L) {
			_.set(L.clientX, L.clientY);
		}
		function Oe(L) {
			m.set(L.clientX, L.clientY), g.subVectors(m, p).multiplyScalar(r.rotateSpeed);
			const ye = r.domElement;
			W((2 * Math.PI * g.x) / ye.clientHeight), F((2 * Math.PI * g.y) / ye.clientHeight), p.copy(m), r.update();
		}
		function be(L) {
			A.set(L.clientX, L.clientY),
				S.subVectors(A, v),
				S.y > 0 ? he(B()) : S.y < 0 && ie(B()),
				v.copy(A),
				r.update();
		}
		function Ue(L) {
			f.set(L.clientX, L.clientY),
				y.subVectors(f, _).multiplyScalar(r.panSpeed),
				Q(y.x, y.y),
				_.copy(f),
				r.update();
		}
		function He(L) {
			oe(L), L.deltaY < 0 ? ie(B()) : L.deltaY > 0 && he(B()), r.update();
		}
		function Je(L) {
			let ye = !1;
			switch (L.code) {
				case r.keys.UP:
					L.ctrlKey || L.metaKey || L.shiftKey
						? F((2 * Math.PI * r.rotateSpeed) / r.domElement.clientHeight)
						: Q(0, r.keyPanSpeed),
						(ye = !0);
					break;
				case r.keys.BOTTOM:
					L.ctrlKey || L.metaKey || L.shiftKey
						? F((-2 * Math.PI * r.rotateSpeed) / r.domElement.clientHeight)
						: Q(0, -r.keyPanSpeed),
						(ye = !0);
					break;
				case r.keys.LEFT:
					L.ctrlKey || L.metaKey || L.shiftKey
						? W((2 * Math.PI * r.rotateSpeed) / r.domElement.clientHeight)
						: Q(r.keyPanSpeed, 0),
						(ye = !0);
					break;
				case r.keys.RIGHT:
					L.ctrlKey || L.metaKey || L.shiftKey
						? W((-2 * Math.PI * r.rotateSpeed) / r.domElement.clientHeight)
						: Q(-r.keyPanSpeed, 0),
						(ye = !0);
					break;
			}
			ye && (L.preventDefault(), r.update());
		}
		function Ye() {
			if (E.length === 1) p.set(E[0].pageX, E[0].pageY);
			else {
				const L = 0.5 * (E[0].pageX + E[1].pageX),
					ye = 0.5 * (E[0].pageY + E[1].pageY);
				p.set(L, ye);
			}
		}
		function tt() {
			if (E.length === 1) _.set(E[0].pageX, E[0].pageY);
			else {
				const L = 0.5 * (E[0].pageX + E[1].pageX),
					ye = 0.5 * (E[0].pageY + E[1].pageY);
				_.set(L, ye);
			}
		}
		function q() {
			const L = E[0].pageX - E[1].pageX,
				ye = E[0].pageY - E[1].pageY,
				De = Math.sqrt(L * L + ye * ye);
			v.set(0, De);
		}
		function on() {
			r.enableZoom && q(), r.enablePan && tt();
		}
		function ke() {
			r.enableZoom && q(), r.enableRotate && Ye();
		}
		function st(L) {
			if (E.length == 1) m.set(L.pageX, L.pageY);
			else {
				const De = at(L),
					Re = 0.5 * (L.pageX + De.x),
					Ae = 0.5 * (L.pageY + De.y);
				m.set(Re, Ae);
			}
			g.subVectors(m, p).multiplyScalar(r.rotateSpeed);
			const ye = r.domElement;
			W((2 * Math.PI * g.x) / ye.clientHeight), F((2 * Math.PI * g.y) / ye.clientHeight), p.copy(m);
		}
		function Xe(L) {
			if (E.length === 1) f.set(L.pageX, L.pageY);
			else {
				const ye = at(L),
					De = 0.5 * (L.pageX + ye.x),
					Re = 0.5 * (L.pageY + ye.y);
				f.set(De, Re);
			}
			y.subVectors(f, _).multiplyScalar(r.panSpeed), Q(y.x, y.y), _.copy(f);
		}
		function At(L) {
			const ye = at(L),
				De = L.pageX - ye.x,
				Re = L.pageY - ye.y,
				Ae = Math.sqrt(De * De + Re * Re);
			A.set(0, Ae), S.set(0, Math.pow(A.y / v.y, r.zoomSpeed)), he(S.y), v.copy(A);
		}
		function ot(L) {
			r.enableZoom && At(L), r.enablePan && Xe(L);
		}
		function nt(L) {
			r.enableZoom && At(L), r.enableRotate && st(L);
		}
		function mt(L) {
			r.enabled !== !1 &&
				(E.length === 0 &&
					(r.domElement.setPointerCapture(L.pointerId),
					r.domElement.ownerDocument.addEventListener('pointermove', Wt),
					r.domElement.ownerDocument.addEventListener('pointerup', Pt)),
				Se(L),
				L.pointerType === 'touch' ? pe(L) : U(L));
		}
		function Wt(L) {
			r.enabled !== !1 && (L.pointerType === 'touch' ? Ce(L) : O(L));
		}
		function Pt(L) {
			Ne(L),
				E.length === 0 &&
					(r.domElement.releasePointerCapture(L.pointerId),
					r.domElement.ownerDocument.removeEventListener('pointermove', Wt),
					r.domElement.ownerDocument.removeEventListener('pointerup', Pt)),
				r.dispatchEvent(Py),
				(a = o.NONE);
		}
		function U(L) {
			let ye;
			switch (L.button) {
				case 0:
					ye = r.mouseButtons.LEFT;
					break;
				case 1:
					ye = r.mouseButtons.MIDDLE;
					break;
				case 2:
					ye = r.mouseButtons.RIGHT;
					break;
				default:
					ye = -1;
			}
			switch (ye) {
				case bs.DOLLY:
					if (r.enableZoom === !1) return;
					ee(L), (a = o.DOLLY);
					break;
				case bs.ROTATE:
					if (r.enablePan === !0 && (L.ctrlKey || L.metaKey || L.shiftKey)) ae(L), (a = o.PAN);
					else {
						if (r.enableRotate === !1) return;
						Te(L), (a = o.ROTATE);
					}
					break;
				case bs.PAN:
					if (L.ctrlKey || L.metaKey || L.shiftKey) {
						if (r.enableRotate === !1) return;
						Te(L), (a = o.ROTATE);
					} else {
						if (r.enablePan === !1) return;
						ae(L), (a = o.PAN);
					}
					break;
				default:
					a = o.NONE;
			}
			a !== o.NONE && r.dispatchEvent(Pp);
		}
		function O(L) {
			switch (a) {
				case o.ROTATE:
					if (r.enableRotate === !1) return;
					Oe(L);
					break;
				case o.DOLLY:
					if (r.enableZoom === !1) return;
					be(L);
					break;
				case o.PAN:
					if (r.enablePan === !1) return;
					Ue(L);
					break;
			}
		}
		function Y(L) {
			r.enabled === !1 ||
				r.enableZoom === !1 ||
				a !== o.NONE ||
				(L.preventDefault(), r.dispatchEvent(Pp), He(L), r.dispatchEvent(Py));
		}
		function ve(L) {
			r.enabled === !1 || r.enablePan === !1 || Je(L);
		}
		function pe(L) {
			switch (($e(L), E.length)) {
				case 1:
					switch (r.touches.ONE) {
						case Ji.ROTATE:
							if (r.enableRotate === !1) return;
							Ye(), (a = o.TOUCH_ROTATE);
							break;
						case Ji.PAN:
							if (r.enablePan === !1) return;
							tt(), (a = o.TOUCH_PAN);
							break;
						default:
							a = o.NONE;
					}
					break;
				case 2:
					switch (r.touches.TWO) {
						case Ji.DOLLY_PAN:
							if (r.enableZoom === !1 && r.enablePan === !1) return;
							on(), (a = o.TOUCH_DOLLY_PAN);
							break;
						case Ji.DOLLY_ROTATE:
							if (r.enableZoom === !1 && r.enableRotate === !1) return;
							ke(), (a = o.TOUCH_DOLLY_ROTATE);
							break;
						default:
							a = o.NONE;
					}
					break;
				default:
					a = o.NONE;
			}
			a !== o.NONE && r.dispatchEvent(Pp);
		}
		function Ce(L) {
			switch (($e(L), a)) {
				case o.TOUCH_ROTATE:
					if (r.enableRotate === !1) return;
					st(L), r.update();
					break;
				case o.TOUCH_PAN:
					if (r.enablePan === !1) return;
					Xe(L), r.update();
					break;
				case o.TOUCH_DOLLY_PAN:
					if (r.enableZoom === !1 && r.enablePan === !1) return;
					ot(L), r.update();
					break;
				case o.TOUCH_DOLLY_ROTATE:
					if (r.enableZoom === !1 && r.enableRotate === !1) return;
					nt(L), r.update();
					break;
				default:
					a = o.NONE;
			}
		}
		function Fe(L) {
			r.enabled !== !1 && L.preventDefault();
		}
		function Se(L) {
			E.push(L);
		}
		function Ne(L) {
			delete x[L.pointerId];
			for (let ye = 0; ye < E.length; ye++)
				if (E[ye].pointerId == L.pointerId) {
					E.splice(ye, 1);
					return;
				}
		}
		function $e(L) {
			let ye = x[L.pointerId];
			ye === void 0 && ((ye = new re()), (x[L.pointerId] = ye)), ye.set(L.pageX, L.pageY);
		}
		function at(L) {
			const ye = L.pointerId === E[0].pointerId ? E[1] : E[0];
			return x[ye.pointerId];
		}
		r.domElement.addEventListener('contextmenu', Fe),
			r.domElement.addEventListener('pointerdown', mt),
			r.domElement.addEventListener('pointercancel', Pt),
			r.domElement.addEventListener('wheel', Y, {passive: !1}),
			this.update();
	}
}
const Iy = 'start',
	Dy = 'change',
	Ly = 'end',
	Uy = [0, 0, 0],
	As = ['rotate', 'dolly', 'pan'],
	aa = ['rotate', 'pan', 'dolly + pan', 'dolly + rotate'],
	Np = {rotate: bs.ROTATE, dolly: bs.DOLLY, pan: bs.PAN},
	Fy = {rotate: Ji.ROTATE, pan: Ji.PAN, 'dolly + pan': Ji.DOLLY_PAN, 'dolly + rotate': Ji.DOLLY_ROTATE};
class ij extends nn {
	constructor() {
		super(...arguments),
			(this.main = M.FOLDER()),
			(this.enabled = M.BOOLEAN(1)),
			(this.allowPan = M.BOOLEAN(1)),
			(this.allowRotate = M.BOOLEAN(1)),
			(this.allowZoom = M.BOOLEAN(1)),
			(this.zoomSpeed = M.FLOAT(1, {range: [0, 2], rangeLocked: [!0, !1], visibleIf: {allowZoom: 1}})),
			(this.zoomToCursor = M.BOOLEAN(1, {visibleIf: {allowZoom: 1}})),
			(this.tdamping = M.BOOLEAN(1)),
			(this.damping = M.FLOAT(0.1, {visibleIf: {tdamping: !0}})),
			(this.screenSpacePanning = M.BOOLEAN(1)),
			(this.rotateSpeed = M.FLOAT(0.5)),
			(this.limits = M.FOLDER()),
			(this.minDistance = M.FLOAT(0.1, {range: [0.1, 100], rangeLocked: [!0, !1]})),
			(this.maxDistance = M.FLOAT(50, {range: [0, 100], rangeLocked: [!0, !1]})),
			(this.minZoom = M.FLOAT(0.01, {range: [0.01, 100], rangeLocked: [!0, !1]})),
			(this.maxZoom = M.FLOAT(50, {range: [0, 100], rangeLocked: [!0, !1]})),
			(this.limitAzimuthAngle = M.BOOLEAN(0)),
			(this.azimuthAngleRange = M.VECTOR2(['-2*$PI', '2*$PI'], {visibleIf: {limitAzimuthAngle: 1}})),
			(this.polarAngleRange = M.VECTOR2([0, '$PI'])),
			(this.clampPosition = M.BOOLEAN(!1)),
			(this.positionMin = M.VECTOR3([-10, -10, -10], {visibleIf: {clampPosition: 1}})),
			(this.positionMax = M.VECTOR3([10, 10, 10], {visibleIf: {clampPosition: 1}})),
			(this.controls = M.FOLDER()),
			(this.leftMouseButton = M.INTEGER(As.indexOf('rotate'), {
				menu: {entries: As.map((e, t) => ({name: e, value: t}))},
			})),
			(this.middleMouseButton = M.INTEGER(As.indexOf('dolly'), {
				menu: {entries: As.map((e, t) => ({name: e, value: t}))},
			})),
			(this.rightMouseButton = M.INTEGER(As.indexOf('pan'), {
				menu: {entries: As.map((e, t) => ({name: e, value: t}))},
			})),
			(this.oneFingerTouch = M.INTEGER(aa.indexOf('rotate'), {
				menu: {entries: aa.map((e, t) => ({name: e, value: t}))},
				separatorBefore: !0,
			})),
			(this.twoFingersTouch = M.INTEGER(aa.indexOf('dolly + pan'), {
				menu: {entries: aa.map((e, t) => ({name: e, value: t}))},
			})),
			(this.misc = M.FOLDER()),
			(this.updateTargetEndMoveEnd = M.BOOLEAN(1)),
			(this.target = M.VECTOR3([0, 0, 0], {
				cook: !1,
				computeOnDirty: !0,
				callback: (e) => {
					c0.PARAM_CALLBACK_updateTarget(e);
				},
			}));
	}
}
const sj = new ij();
class c0 extends ej {
	constructor() {
		super(...arguments), (this.paramsConfig = sj), (this._controlsByElementId = new Map());
	}
	static type() {
		return LA.ORBIT;
	}
	endEventName() {
		return 'end';
	}
	initializeNode() {
		this.io.outputs.setNamedOutputConnectionPoints([new Du(Iy, xc.BASE), new Du(Dy, xc.BASE), new Du(Ly, xc.BASE)]);
	}
	_createControls(e, t) {
		return new nj(e, t);
	}
	async createControlsInstance(e, t) {
		const i = this._createControls(e, t);
		return (
			i.addEventListener('end', () => {
				this._on_controls_end(i);
			}),
			this._controlsByElementId.set(t.id, i),
			this._updateCache(),
			this._bind_listeners_to_controls_instance(i),
			i
		);
	}
	_bind_listeners_to_controls_instance(e) {
		e.addEventListener('start', () => {
			this.dispatchEventToOutput(Iy, {});
		}),
			e.addEventListener('change', () => {
				this.dispatchEventToOutput(Dy, {});
			}),
			e.addEventListener('end', () => {
				this.dispatchEventToOutput(Ly, {});
			});
	}
	setupControls(e) {
		(e.enabled = this.pv.enabled),
			(e.enablePan = this.pv.allowPan),
			(e.enableRotate = this.pv.allowRotate),
			(e.enableZoom = this.pv.allowZoom),
			(e.zoomSpeed = this.pv.zoomSpeed),
			(e.zoomToCursor = this.pv.zoomToCursor),
			(e.enableDamping = this.pv.tdamping),
			(e.dampingFactor = this.pv.damping),
			(e.rotateSpeed = this.pv.rotateSpeed),
			(e.screenSpacePanning = this.pv.screenSpacePanning),
			(e.minDistance = this.pv.minDistance),
			(e.maxDistance = this.pv.maxDistance),
			(e.minZoom = this.pv.minZoom),
			(e.maxZoom = this.pv.maxZoom),
			(e.clampPosition = this.pv.clampPosition),
			e.positionBounds.min.copy(this.pv.positionMin),
			e.positionBounds.max.copy(this.pv.positionMax),
			this._set_azimuth_angle(e),
			(e.minPolarAngle = this.pv.polarAngleRange.x),
			(e.maxPolarAngle = this.pv.polarAngleRange.y),
			e.target.copy(this.pv.target),
			e.enabled && e.update(),
			(e.mouseButtons.LEFT = Np[As[this.pv.leftMouseButton]]),
			(e.mouseButtons.MIDDLE = Np[As[this.pv.middleMouseButton]]),
			(e.mouseButtons.RIGHT = Np[As[this.pv.rightMouseButton]]),
			(e.touches.ONE = Fy[aa[this.pv.oneFingerTouch]]),
			(e.touches.TWO = Fy[aa[this.pv.twoFingersTouch]]);
	}
	_set_azimuth_angle(e) {
		this.pv.limitAzimuthAngle
			? ((e.minAzimuthAngle = this.pv.azimuthAngleRange.x), (e.maxAzimuthAngle = this.pv.azimuthAngleRange.y))
			: ((e.minAzimuthAngle = 1 / 0), (e.maxAzimuthAngle = 1 / 0));
	}
	updateRequired() {
		return this.pv.tdamping;
	}
	_on_controls_end(e) {
		this.pv.updateTargetEndMoveEnd && this.pv.allowPan && (e.target.toArray(Uy), this.p.target.set(Uy));
	}
	static PARAM_CALLBACK_updateTarget(e) {
		e._updateTarget();
	}
	_updateTarget() {
		this.setTarget(this.pv.target);
	}
	target(e) {
		this._firstControls && e.copy(this._firstControls.target);
	}
	setTarget(e) {
		this._controlsByElementId.forEach((t, i) => {
			const s = t.target;
			s.equals(e) || (s.copy(e), t.update());
		});
	}
	disposeControlsForHtmlElementId(e) {
		this._controlsByElementId.get(e) && this._controlsByElementId.delete(e), this._updateCache();
	}
	_updateCache() {
		(this._firstControls = void 0),
			this._controlsByElementId.forEach((e) => {
				this._firstControls = this._firstControls || e;
			});
	}
}
class rj extends wi {
	constructor() {
		super(...arguments), (this._cookWhenDirtyBound = this._cookMainWithoutInputsWhenDirty.bind(this));
	}
	static context() {
		return fe.MAT;
	}
	initializeBaseNode() {
		super.initializeBaseNode(),
			this.io.outputs.setHasOneOutput(),
			this.addPostDirtyHook('_cookWhenDirty', () => {
				setTimeout(this._cookWhenDirtyBound, 0);
			});
	}
	async _cookMainWithoutInputsWhenDirty() {
		await this.cookController.cookMainWithoutInputs();
	}
	setMaterial(e) {
		le.onSceneUpdatedHooks.runHooks(), this._setContainer(e);
	}
}
class l0 extends rj {
	constructor() {
		super(...arguments), (this.controllersList = []);
	}
	__materialSync__() {
		return (this._material = this._material || this.createMaterial());
	}
	async material() {
		return (await this.compute()).material();
	}
	initializeBaseNode() {
		super.initializeBaseNode(), this.nameController.add_post_set_fullPath_hook(this.set_material_name.bind(this));
	}
	set_material_name() {
		this._material && (this._material.name = this.path());
	}
	setMaterial(e) {
		(this._material = e), super.setMaterial(e);
	}
	getTextures(e, t) {
		for (const i of this.controllersList) i.getTextures(e, t);
	}
	setParamsFromMaterial(e, t) {
		for (const i of this.controllersList) i.setParamsFromMaterial(e, t);
	}
	controllersPromises(e) {
		const t = this.controllersList.map((s) => s.updateMaterial(e)),
			i = [];
		return Jr(t, i), i;
	}
	initializeNode() {
		this.params.onParamsCreated('init controllers', () => {
			for (const e of this.controllersList) e.initializeNode();
		});
	}
}
class us {
	constructor(e) {
		this.node = e;
	}
	initializeNode() {}
	setParamsFromMaterial(e, t) {}
	getTextures(e, t) {}
}
function oj(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.color = M.COLOR([1, 1, 1], {})),
				(this.useVertexColors = M.BOOLEAN(0, {separatorAfter: !0})),
				(this.transparent = M.BOOLEAN(0)),
				(this.opacity = M.FLOAT(1)),
				(this.alphaTest = M.FLOAT(0));
		}
	};
}
function aj(n) {
	return n ? n.color != null : !1;
}
const cj = new Ee(),
	By = [0, 0, 0];
class lj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const i = (await e.compute()).material();
		aj(i) && e.controllers.colors.updateMaterial(i);
	}
	updateMaterial(e) {
		const t = this.node.pv;
		e.color.copy(t.color);
		const i = t.useVertexColors;
		i != e.vertexColors && ((e.vertexColors = i), (e.needsUpdate = !0)),
			(e.opacity = t.opacity),
			(e.transparent = t.transparent),
			(e.alphaTest = t.alphaTest);
	}
	setParamsFromMaterial(e, t) {
		const i = this.node.p;
		cj.copy(e.color).toArray(By),
			i.color.set(By),
			i.color.setConversion($r.NONE),
			i.useVertexColors.set(e.vertexColors),
			i.opacity.set(e.opacity),
			i.transparent.set(e.transparent),
			i.alphaTest.set(e.alphaTest);
	}
}
function uj(n, e) {
	const t = e.front ? Ln : fn,
		i = e.doubleSided ? Zn : t;
	i != n.side && ((n.side = i), (n.forceSinglePass = !e.doubleSided), (n.needsUpdate = !0));
}
function hj(n, e) {
	switch (n.side) {
		case Ln: {
			e.doubleSided.set(!1), e.front.set(!0);
			return;
		}
		case fn: {
			e.doubleSided.set(!1), e.front.set(!1);
			return;
		}
		case Zn: {
			e.doubleSided.set(!0), e.front.set(!0);
			return;
		}
	}
}
function u0(n, e) {
	if ((uj(n, e), e.overrideShadowSide)) {
		const i = e.shadowFront ? Ln : fn,
			s = e.shadowDoubleSided ? Zn : i;
		s != n.shadowSide && ((n.shadowSide = s), (n.needsUpdate = !0));
	} else n.shadowSide = null;
	const t = n.customMaterials;
	if (t) {
		const i = Object.keys(t);
		for (const s of i) {
			const r = t[s];
			r && u0(r, e);
		}
	}
}
function h0(n, e) {
	if ((hj(n, e), n.shadowSide != null))
		switch ((e.overrideShadowSide.set(!0), n.shadowSide)) {
			case Ln: {
				e.shadowDoubleSided.set(!1), e.shadowFront.set(!0);
				return;
			}
			case fn: {
				e.shadowDoubleSided.set(!1), e.shadowFront.set(!1);
				return;
			}
			case Zn: {
				e.shadowDoubleSided.set(!0), e.shadowFront.set(!0);
				return;
			}
		}
	const t = n.customMaterials;
	if (t) {
		const i = Object.keys(t);
		for (const s of i) {
			const r = t[s];
			r && h0(r, e);
		}
	}
}
const d0 = {NoBlending: Ps, NormalBlending: hr, AdditiveBlending: jp, SubtractiveBlending: Xp, MultiplyBlending: $p},
	dj = Object.keys(d0);
function p0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.doubleSided = M.BOOLEAN(0)),
				(this.front = M.BOOLEAN(1, {visibleIf: {doubleSided: !1}})),
				(this.overrideShadowSide = M.BOOLEAN(0)),
				(this.shadowDoubleSided = M.BOOLEAN(0, {visibleIf: {overrideShadowSide: !0}})),
				(this.shadowFront = M.BOOLEAN(1, {visibleIf: {overrideShadowSide: !0, shadowDoubleSided: !1}})),
				(this.colorWrite = M.BOOLEAN(1, {
					separatorBefore: !0,
					cook: !1,
					callback: (t, i) => {
						Rc.update(t);
					},
				})),
				(this.depthWrite = M.BOOLEAN(1, {
					cook: !1,
					callback: (t, i) => {
						Rc.update(t);
					},
				})),
				(this.depthTest = M.BOOLEAN(1, {
					cook: !1,
					callback: (t, i) => {
						Rc.update(t);
					},
				})),
				(this.premultipliedAlpha = M.BOOLEAN(!1, {separatorAfter: !0})),
				(this.blending = M.INTEGER(hr, {menu: {entries: dj.map((t) => ({name: t, value: d0[t]}))}})),
				(this.dithering = M.BOOLEAN(0)),
				(this.polygonOffset = M.BOOLEAN(!1, {separatorBefore: !0})),
				(this.polygonOffsetFactor = M.INTEGER(0, {range: [0, 1e3], visibleIf: {polygonOffset: 1}})),
				(this.polygonOffsetUnits = M.INTEGER(0, {range: [0, 1e3], visibleIf: {polygonOffset: 1}}));
		}
	};
}
class Rc extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const t = await e.material();
		t && e.controllers.advancedCommon.updateMaterial(t);
	}
	updateMaterial(e) {
		const t = this.node.pv;
		u0(e, t),
			(e.colorWrite = t.colorWrite),
			(e.depthWrite = t.depthWrite),
			(e.depthTest = t.depthTest),
			(e.blending = t.blending),
			(e.premultipliedAlpha = t.premultipliedAlpha),
			(e.dithering = t.dithering),
			(e.polygonOffset = t.polygonOffset),
			e.polygonOffset &&
				((e.polygonOffsetFactor = t.polygonOffsetFactor),
				(e.polygonOffsetUnits = t.polygonOffsetUnits),
				(e.needsUpdate = !0));
	}
	setParamsFromMaterial(e, t) {
		const i = this.node.p;
		h0(e, i),
			i.colorWrite.set(e.colorWrite),
			i.depthWrite.set(e.depthWrite),
			i.depthTest.set(e.depthTest),
			i.blending.set(e.blending),
			i.premultipliedAlpha.set(e.premultipliedAlpha),
			i.dithering.set(e.dithering),
			i.polygonOffset.set(e.polygonOffset),
			e.polygonOffset &&
				(i.polygonOffsetFactor.set(e.polygonOffsetFactor), i.polygonOffsetUnits.set(e.polygonOffsetUnits));
	}
}
function ji(n) {
	return {
		cook: !1,
		callback: (e, t) => {
			n.update(e);
		},
	};
}
function Xn(n, e, t) {
	return {
		visibleIf: {[e]: 1},
		nodeSelection: {context: fe.COP, types: t == null ? void 0 : t.types},
		cook: !1,
		callback: (i, s) => {
			n.update(i);
		},
	};
}
const ky = 'TextureController';
class hs extends us {
	constructor(e) {
		super(e), (this.node = e), (this.updateBound = this.update.bind(this));
	}
	add_hooks(e, t) {
		e.addPostDirtyHook(ky, this.updateBound), t.addPostDirtyHook(ky, this.updateBound);
	}
	static async update(e) {}
	async update() {}
	async _update(e, t, i, s) {
		const r = e,
			o = t;
		await this._update_texture_on_material(r, o, i, s);
	}
	async _update_texture_on_material(e, t, i, s) {
		await this._update_required_attribute(
			e,
			e,
			t,
			i,
			s,
			this._apply_texture_on_material.bind(this),
			this._remove_texture_from_material.bind(this)
		);
	}
	_apply_texture_on_material(e, t, i, s) {
		const r = t[i];
		let o = !1;
		r && r.uuid != s.uuid && (o = !0),
			(r == null || o) && ((t[i] = s), (e.needsUpdate = !0)),
			le.onSceneUpdatedHooks.runHooks();
	}
	_remove_texture_from_material(e, t, i) {
		t[i] && ((t[i] = null), (e.needsUpdate = !0)), le.onSceneUpdatedHooks.runHooks();
	}
	async _update_required_attribute(e, t, i, s, r, o, a) {
		if ((s.isDirty() && (await s.compute()), s.value)) {
			r.isDirty() && (await r.compute());
			const l = r.value.nodeWithContext(fe.COP);
			if (l) {
				const h = (await l.compute()).texture();
				if (h) {
					await o(e, t, i, h);
					return;
				}
			}
		}
		a(e, t, i);
	}
}
function f0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useMap = M.BOOLEAN(0, {...ji(lh), separatorBefore: !0})),
				(this.map = M.NODE_PATH('', Xn(lh, 'useMap')));
		}
	};
}
function pj(n) {
	return !!n;
}
class lh extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useMap, this.node.p.map);
	}
	static async update(e) {
		e.controllers.map.update();
	}
	async update() {
		const e = await this.node.material();
		if (!pj(e)) {
			console.warn('invalid mat for TextureMapController', e);
			return;
		}
		await this.updateMaterial(e);
	}
	async updateMaterial(e) {
		await this._update(e, 'map', this.node.p.useMap, this.node.p.map);
	}
	getTextures(e, t) {
		t.set('map', e.map);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('map');
		this.node.p.useMap.set(i != null), i && this.node.p.map.setNode(i, {relative: !0});
	}
}
function _0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useAlphaMap = M.BOOLEAN(0, {separatorBefore: !0, ...ji(uh)})),
				(this.alphaMap = M.NODE_PATH('', Xn(uh, 'useAlphaMap')));
		}
	};
}
function fj(n) {
	return !!n;
}
class uh extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useAlphaMap, this.node.p.alphaMap);
	}
	static async update(e) {
		e.controllers.alphaMap.update();
	}
	async update() {
		const e = await this.node.material();
		fj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		await this._update(e, 'alphaMap', this.node.p.useAlphaMap, this.node.p.alphaMap);
	}
	getTextures(e, t) {
		t.set('alphaMap', e.alphaMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('aoMap');
		this.node.p.useAlphaMap.set(i != null), i && this.node.p.alphaMap.setNode(i, {relative: !0});
	}
}
const _j = {useEnvMap: !1, envMap: new zi(''), envMapIntensity: 1},
	Vy = _j;
function m0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useEnvMap = M.BOOLEAN(Vy.useEnvMap, {separatorBefore: !0, ...ji(hh)})),
				(this.envMap = M.NODE_PATH('', Xn(hh, 'useEnvMap'))),
				(this.envMapIntensity = M.FLOAT(Vy.envMapIntensity, {visibleIf: {useEnvMap: 1}}));
		}
	};
}
function mj(n) {
	return n ? n.isMeshStandardMaterial || n.isMeshPhysicalMaterial : !1;
}
class hh extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);
	}
	static async update(e) {
		e.controllers.envMap.update();
	}
	async update() {
		const e = await this.node.material();
		mj(e) && this.updateMaterial(e);
	}
	async updateMaterial(e) {
		await this._update(e, 'envMap', this.node.p.useEnvMap, this.node.p.envMap),
			(e.envMapIntensity = this.node.pv.envMapIntensity);
	}
	getTextures(e, t) {
		t.set('envMap', e.envMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('envMap');
		this.node.p.useEnvMap.set(i != null),
			i && this.node.p.envMap.setNode(i, {relative: !0}),
			this.node.p.envMapIntensity.set(e.envMapIntensity);
	}
}
function g0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useBumpMap = M.BOOLEAN(0, {separatorBefore: !0, ...ji(ca)})),
				(this.bumpMap = M.NODE_PATH('', Xn(ca, 'useBumpMap'))),
				(this.bumpScale = M.FLOAT(1, {range: [0, 1], rangeLocked: [!1, !1], ...Xn(ca, 'useBumpMap')})),
				(this.bumpBias = M.FLOAT(0, {range: [0, 1], rangeLocked: [!1, !1], ...Xn(ca, 'useBumpMap')}));
		}
	};
}
function gj(n) {
	return n ? n.bumpScale != null : !1;
}
class ca extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useBumpMap, this.node.p.bumpMap);
	}
	static async update(e) {
		e.controllers.bumpMap.update();
	}
	async update() {
		const e = await this.node.material();
		gj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		await this._update(e, 'bumpMap', this.node.p.useBumpMap, this.node.p.bumpMap),
			(e.bumpScale = this.node.pv.bumpScale);
	}
	getTextures(e, t) {
		t.set('bumpMap', e.bumpMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('emissiveMap');
		this.node.p.useBumpMap.set(i != null),
			i && this.node.p.bumpMap.setNode(i, {relative: !0}),
			this.node.p.bumpScale.set(e.bumpScale);
	}
}
const Kf = ['tangent', 'object'],
	vj = {tangent: Us, object: f_},
	Ej = {[Us]: 'tangent', [f_]: 'object'};
function v0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useNormalMap = M.BOOLEAN(0, {separatorBefore: !0, ...ji(dh)})),
				(this.normalMap = M.NODE_PATH('', Xn(dh, 'useNormalMap'))),
				(this.normalMapType = M.INTEGER(0, {
					visibleIf: {useNormalMap: 1},
					menu: {entries: Kf.map((t, i) => ({name: t, value: i}))},
				})),
				(this.normalScale = M.VECTOR2([1, 1], {visibleIf: {useNormalMap: 1}})),
				(this.normalScaleMult = M.FLOAT(1, {
					range: [0, 1],
					rangeLocked: [!1, !1],
					visibleIf: {useNormalMap: 1},
				}));
		}
	};
}
function Cj(n) {
	return n ? n.normalScale != null : !1;
}
const Gy = [0, 0];
class dh extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useNormalMap, this.node.p.normalMap);
	}
	static async update(e) {
		e.controllers.normalMap.update();
	}
	async update() {
		const e = await this.node.material();
		Cj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		const {p: t, pv: i} = this.node;
		await this._update(e, 'normalMap', t.useNormalMap, t.normalMap);
		const s = vj[Kf[i.normalMapType]],
			r = e;
		(r.normalMapType = s), r.normalScale.copy(i.normalScale).multiplyScalar(i.normalScaleMult);
	}
	getTextures(e, t) {
		t.set('normalMap', e.normalMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('normalMap'),
			s = this.node.p;
		s.useNormalMap.set(i != null),
			i && s.normalMap.setNode(i, {relative: !0}),
			e.normalScale.toArray(Gy),
			s.normalScale.set(Gy),
			s.normalMapType.set(Kf.indexOf(Ej[e.normalMapType]));
	}
}
function E0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.emissive = M.COLOR([0, 0, 0], {separatorBefore: !0})),
				(this.useEmissiveMap = M.BOOLEAN(0, ji(ph))),
				(this.emissiveMap = M.NODE_PATH('', Xn(ph, 'useEmissiveMap'))),
				(this.emissiveIntensity = M.FLOAT(1));
		}
	};
}
function yj(n) {
	return n ? n.emissive != null : !1;
}
const zy = [0, 0, 0];
class ph extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useEmissiveMap, this.node.p.emissiveMap);
	}
	static async update(e) {
		e.controllers.emissiveMap.update();
	}
	async update() {
		const e = await this.node.material();
		yj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		await this._update(e, 'emissiveMap', this.node.p.useEmissiveMap, this.node.p.emissiveMap),
			e.emissive.copy(this.node.pv.emissive),
			(e.emissiveIntensity = this.node.pv.emissiveIntensity);
	}
	getTextures(e, t) {
		t.set('emissiveMap', e.emissiveMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('emissiveMap');
		this.node.p.useEmissiveMap.set(i != null),
			i && this.node.p.emissiveMap.setNode(i, {relative: !0}),
			e.emissive.toArray(zy),
			this.node.p.emissive.set(zy),
			this.node.p.emissive.setConversion($r.NONE),
			this.node.p.emissiveIntensity.set(e.emissiveIntensity);
	}
}
const bj = {
		useMetalnessMap: !1,
		metalnessMap: new zi(''),
		metalness: 0,
		useRoughnessMap: !1,
		roughnessMap: new zi(''),
		roughness: 1,
	},
	_u = bj;
function C0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useMetalnessMap = M.BOOLEAN(_u.useMetalnessMap, {separatorBefore: !0, ...ji(la)})),
				(this.metalnessMap = M.NODE_PATH('', Xn(la, 'useMetalnessMap'))),
				(this.metalness = M.FLOAT(_u.metalness)),
				(this.useRoughnessMap = M.BOOLEAN(_u.useRoughnessMap, {separatorBefore: !0, ...ji(la)})),
				(this.roughnessMap = M.NODE_PATH('', Xn(la, 'useRoughnessMap'))),
				(this.roughness = M.FLOAT(_u.roughness));
		}
	};
}
function Sj(n) {
	return n ? n.metalness != null : !1;
}
class la extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useMetalnessMap, this.node.p.metalnessMap);
	}
	static async update(e) {
		e.controllers.metalnessRoughnessMap.update();
	}
	async update() {
		const e = await this.node.material();
		Sj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		(e.metalness = this.node.pv.metalness),
			(e.roughness = this.node.pv.roughness),
			await Promise.all([
				this._update(e, 'metalnessMap', this.node.p.useMetalnessMap, this.node.p.metalnessMap),
				this._update(e, 'roughnessMap', this.node.p.useRoughnessMap, this.node.p.roughnessMap),
			]);
	}
	getTextures(e, t) {
		t.set('metalnessMap', e.metalnessMap), t.set('roughnessMap', e.roughnessMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('metalnessMap'),
			s = t.get('roughnessMap');
		this.node.p.useMetalnessMap.set(i != null),
			this.node.p.useRoughnessMap.set(s != null),
			i && this.node.p.metalnessMap.setNode(i, {relative: !0}),
			s && this.node.p.roughnessMap.setNode(s, {relative: !0}),
			this.node.p.metalness.set(e.metalness),
			this.node.p.roughness.set(e.roughness);
	}
}
function y0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useLightMap = M.BOOLEAN(0, {separatorBefore: !0, ...ji(fh)})),
				(this.lightMap = M.NODE_PATH('', Xn(fh, 'useLightMap'))),
				(this.lightMapIntensity = M.FLOAT(1, {visibleIf: {useLightMap: 1}}));
		}
	};
}
function Aj(n) {
	return n ? n.lightMapIntensity != null : !1;
}
class fh extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useLightMap, this.node.p.lightMap);
	}
	static async update(e) {
		e.controllers.lightMap.update();
	}
	async update() {
		const e = await this.node.material();
		Aj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		await this._update(e, 'lightMap', this.node.p.useLightMap, this.node.p.lightMap),
			(e.lightMapIntensity = this.node.pv.lightMapIntensity);
	}
	getTextures(e, t) {
		t.set('lightMap', e.lightMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('lightMap');
		this.node.p.useLightMap.set(i != null),
			i && this.node.p.lightMap.setNode(i, {relative: !0}),
			this.node.p.lightMapIntensity.set(e.lightMapIntensity);
	}
}
function b0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useDisplacementMap = M.BOOLEAN(0, {separatorBefore: !0, ...ji(ua)})),
				(this.displacementMap = M.NODE_PATH('', Xn(ua, 'useDisplacementMap'))),
				(this.displacementScale = M.FLOAT(1, {
					range: [0, 1],
					rangeLocked: [!1, !1],
					...Xn(ua, 'useDisplacementMap'),
				})),
				(this.displacementBias = M.FLOAT(0, {
					range: [0, 1],
					rangeLocked: [!1, !1],
					...Xn(ua, 'useDisplacementMap'),
				}));
		}
	};
}
function xj(n) {
	return n ? n.displacementScale != null : !1;
}
class ua extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useDisplacementMap, this.node.p.displacementMap);
	}
	static async update(e) {
		e.controllers.displacementMap.update();
	}
	async update() {
		const e = await this.node.material();
		xj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		await this._update(e, 'displacementMap', this.node.p.useDisplacementMap, this.node.p.displacementMap),
			(e.displacementScale = this.node.pv.displacementScale),
			(e.displacementBias = this.node.pv.displacementBias);
	}
	getTextures(e, t) {
		t.set('displacementMap', e.displacementMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('emissiveMap');
		this.node.p.useDisplacementMap.set(i != null),
			i && this.node.p.displacementMap.setNode(i, {relative: !0}),
			this.node.p.displacementScale.set(e.displacementScale),
			this.node.p.displacementBias.set(e.displacementBias);
	}
}
function Mj(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.flatShading = M.BOOLEAN(0, {separatorAfter: !0}));
		}
	};
}
function Tj(n) {
	return n ? n.flatShading != null : !1;
}
class Rj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const t = await e.material();
		Tj(t) && e.controllers.flatShading.updateMaterial(t);
	}
	updateMaterial(e) {
		e.flatShading = this.node.pv.flatShading;
	}
	setParamsFromMaterial(e, t) {
		this.node.p.flatShading.set(e.flatShading);
	}
}
function S0(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.useAOMap = M.BOOLEAN(0, {separatorBefore: !0, ...ji(_h)})),
				(this.aoMap = M.NODE_PATH('', Xn(_h, 'useAOMap'))),
				(this.aoMapIntensity = M.FLOAT(1, {range: [0, 1], rangeLocked: [!1, !1], visibleIf: {useAOMap: 1}}));
		}
	};
}
function wj(n) {
	return n ? n.aoMapIntensity != null : !1;
}
class _h extends hs {
	constructor(e) {
		super(e), (this.node = e);
	}
	initializeNode() {
		this.add_hooks(this.node.p.useAOMap, this.node.p.aoMap);
	}
	static async update(e) {
		e.controllers.aoMap.update();
	}
	async update() {
		const e = await this.node.material();
		wj(e) && (await this.updateMaterial(e));
	}
	async updateMaterial(e) {
		await this._update(e, 'aoMap', this.node.p.useAOMap, this.node.p.aoMap),
			(e.aoMapIntensity = this.node.pv.aoMapIntensity);
	}
	getTextures(e, t) {
		t.set('aoMap', e.aoMap);
	}
	setParamsFromMaterial(e, t) {
		const i = t.get('aoMap');
		this.node.p.useAOMap.set(i != null),
			i && this.node.p.aoMap.setNode(i, {relative: !0}),
			this.node.p.aoMapIntensity.set(e.aoMapIntensity);
	}
}
const Zf = ['round', 'butt', 'square'],
	Qf = ['round', 'bevel', 'miter'];
function Oj(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.wireframe = M.BOOLEAN(0, {separatorBefore: !0})),
				(this.wireframeLinewidth = M.FLOAT(1, {
					range: [0, 5],
					rangeLocked: [!0, !1],
					visibleIf: {wireframe: 1},
				})),
				(this.wireframeLinecap = M.INTEGER(0, {
					menu: {entries: Zf.map((t, i) => ({name: t, value: i}))},
					visibleIf: {wireframe: 1},
				})),
				(this.wireframeLinejoin = M.INTEGER(0, {
					menu: {entries: Qf.map((t, i) => ({name: t, value: i}))},
					visibleIf: {wireframe: 1},
					separatorAfter: !0,
				}));
		}
	};
}
function Pj(n) {
	return n ? n.wireframe != null : !1;
}
class Nj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const t = await e.material();
		Pj(t) && e.controllers.wireframe.updateMaterial(t);
	}
	updateMaterial(e) {
		const t = this.node.pv;
		(e.wireframe = t.wireframe),
			(e.wireframeLinewidth = t.wireframeLinewidth),
			(e.wireframeLinecap = Zf[t.wireframeLinecap]),
			(e.wireframeLinejoin = Qf[t.wireframeLinejoin]),
			(e.needsUpdate = !0);
	}
	getTextures(e, t) {}
	setParamsFromMaterial(e, t) {
		this.node.p.wireframe.set(e.wireframe),
			this.node.p.wireframeLinewidth.set(e.wireframeLinewidth),
			this.node.p.wireframeLinecap.set(Zf.indexOf(e.wireframeLinecap)),
			this.node.p.wireframeLinejoin.set(Qf.indexOf(e.wireframeLinejoin));
	}
}
function Ij(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.useFog = M.BOOLEAN(0));
		}
	};
}
function Dj(n) {
	return n ? n.fog != null : !1;
}
class Lj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const i = (await e.compute()).material();
		Dj(i) && e.controllers.fog.updateMaterial(i);
	}
	updateMaterial(e) {
		const t = this.node.pv;
		e.fog = t.useFog;
	}
}
function A0(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.default = M.FOLDER(null));
		}
	};
}
function x0(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.textures = M.FOLDER(null));
		}
	};
}
function M0(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.advanced = M.FOLDER(null));
		}
	};
}
var Vm = ((n) => (
	(n.LINE_BASIC = 'lineBasic'),
	(n.LINE_BASIC_BUILDER = 'lineBasicBuilder'),
	(n.MESH_BASIC = 'meshBasic'),
	(n.MESH_BASIC_BUILDER = 'meshBasicBuilder'),
	(n.MESH_DEPTH_BUILDER = 'meshDepthBuilder'),
	(n.MESH_DISTANCE_BUILDER = 'meshDistanceBuilder'),
	(n.MESH_LAMBERT = 'meshLambert'),
	(n.MESH_LAMBERT_BUILDER = 'meshLambertBuilder'),
	(n.MESH_MATCAP = 'meshMatcap'),
	(n.MESH_NORMAL = 'meshNormal'),
	(n.MESH_PHONG = 'meshPhong'),
	(n.MESH_PHONG_BUILDER = 'meshPhongBuilder'),
	(n.MESH_PHYSICAL = 'meshPhysical'),
	(n.MESH_PHYSICAL_BUILDER = 'meshPhysicalBuilder'),
	(n.MESH_STANDARD = 'meshStandard'),
	(n.MESH_STANDARD_BUILDER = 'meshStandardBuilder'),
	(n.MESH_TOON = 'meshToon'),
	(n.MESH_TOON_BUILDER = 'meshToonBuilder'),
	(n.POINTS = 'points'),
	(n.POINTS_BUILDER = 'pointsBuilder'),
	(n.RAY_MARCHING_BUILDER = 'rayMarchingBuilder'),
	(n.SHADOW = 'shadow'),
	(n.SKY = 'sky'),
	(n.VOLUME = 'volume'),
	(n.VOLUME_BUILDER = 'volumeBuilder'),
	n
))(Vm || {});
class Uj extends Ij(Oj(p0(Mj(M0(C0(v0(y0(m0(E0(b0(g0(S0(_0(f0(x0(oj(A0(nn)))))))))))))))))) {}
const Fj = new Uj();
class Bj extends l0 {
	constructor() {
		super(...arguments),
			(this.paramsConfig = Fj),
			(this.controllers = {
				colors: new lj(this),
				advancedCommon: new Rc(this),
				alphaMap: new uh(this),
				aoMap: new _h(this),
				bumpMap: new ca(this),
				displacementMap: new ua(this),
				emissiveMap: new ph(this),
				envMap: new hh(this),
				fog: new Lj(this),
				flatShading: new Rj(this),
				lightMap: new fh(this),
				map: new lh(this),
				metalnessRoughnessMap: new la(this),
				normalMap: new dh(this),
				wireframe: new Nj(this),
			}),
			(this.controllersList = Object.values(this.controllers));
	}
	static type() {
		return Vm.MESH_STANDARD;
	}
	createMaterial() {
		return new ma({vertexColors: !1, side: Ln, color: 16777215, opacity: 1, metalness: 1, roughness: 0});
	}
	async cook() {
		(this._material = this._material || this.createMaterial()),
			await Promise.all(this.controllersPromises(this._material)),
			this.setMaterial(this._material);
	}
}
function kj(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.transparent = M.BOOLEAN(0)),
				(this.opacity = M.FLOAT(1)),
				(this.alphaTest = M.FLOAT(0));
		}
	};
}
class Vj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const t = await e.material();
		t && e.controllers.uniformTransparency.updateMaterial(t);
	}
	updateMaterial(e) {
		const t = this.node.pv;
		this._updateTransparency(e, t);
	}
	_updateTransparency(e, t) {
		(e.transparent = t.transparent), this._updateCommon(e, t);
	}
	_updateCommon(e, t) {
		const i = e;
		i.uniforms && i.uniforms.opacity && (i.uniforms.opacity.value = t.opacity),
			(e.opacity = t.opacity),
			i.uniforms && i.uniforms.alphaTest && (i.uniforms.alphaTest.value = t.alphaTest),
			(e.alphaTest = t.alphaTest);
		const s = e.customMaterials;
		if (s) {
			const r = Object.keys(s);
			for (const o of r) {
				const a = s[o];
				a && this._updateCommon(a, t);
			}
		}
	}
}
function Gj() {
	const n = {
		ShadowMaterial: Yb,
		SpriteMaterial: qb,
		RawShaderMaterial: Kb,
		ShaderMaterial: ti,
		PointsMaterial: wh,
		MeshPhysicalMaterial: Zb,
		MeshStandardMaterial: ma,
		MeshPhongMaterial: Qb,
		MeshToonMaterial: Jb,
		MeshNormalMaterial: eS,
		MeshLambertMaterial: tS,
		MeshDepthMaterial: C_,
		MeshDistanceMaterial: y_,
		MeshBasicMaterial: Ah,
		MeshMatcapMaterial: nS,
		LineDashedMaterial: iS,
		LineBasicMaterial: so,
		Material: An,
	};
	An.fromType = function (e) {
		return new n[e]();
	};
}
const zj = new Set(['shaders', 'functionBody']);
class Hj {
	constructor(e) {
		this.node = e;
	}
	load(e) {}
	async toDataWithoutShaders() {
		const e = await this.toData();
		if (!e) return;
		const t = {},
			i = Object.keys(e);
		for (const s of i) zj.has(s) || (t[s] = e[s]);
		return t;
	}
	_materialToJson(e, t) {
		let i;
		return (
			this._withPreparedMaterial(e, () => {
				try {
					if (((i = e.toJSON({})), i)) {
						const s = e.depthPacking;
						i.depthPacking = s;
					}
				} catch (s) {
					console.error('failed to save material data'), console.log(e), console.log(s);
				}
				i && e.lights != null && (i.lights = e.lights), i && (i.uuid = `${t.node.path()}-${t.suffix}`);
			}),
			i
		);
	}
	_withPreparedMaterial(e, t) {
		this._withUnassignedUniformTextures(e, () => {
			this._withUnassignedBasePropertyTextures(e, () => {
				this._withUnassignedOnBeforeCompileData(e, () => {
					t();
				});
			});
		});
	}
	_withUnassignedOnBeforeCompileData(e, t) {
		const i = ih.removeUniforms(e),
			s = ya.removeData(e);
		t(), i && ih.setUniforms(e, i), s && ya.setData(e, s);
	}
	_withUnassignedUniformTextures(e, t) {
		const i = new Map(),
			s = e.uniforms;
		if (s) {
			const r = Object.keys(s);
			for (const o of r) {
				const a = s[o].value;
				if (a && a.uuid) {
					const c = a;
					i.set(o, c), (s[o].value = null);
				}
			}
		}
		t(),
			s &&
				i.forEach((r, o) => {
					s[o].value = r;
				});
	}
	_withUnassignedBasePropertyTextures(e, t) {
		const i = new Map(),
			s = Object.keys(e);
		for (const r of s) {
			const o = e[r];
			o && o.uuid && o instanceof In && (i.set(r, o), (e[r] = null));
		}
		t(),
			i.forEach((r, o) => {
				e[o] = r;
			});
	}
	_loadMaterial(e) {
		e.color = void 0;
		const t = new O_();
		Gj();
		const i = t.parse(e);
		e.depthPacking && (i.depthPacking = e.depthPacking), e.lights != null && (i.lights = e.lights);
		const s = i.uniforms;
		if (s) {
			const r = s.uv2Transform;
			r && this.mat4ToMat3(r);
			const o = s.uvTransform;
			o && this.mat4ToMat3(o);
		}
		return i;
	}
	mat4ToMat3(e) {
		const t = e.value;
		if (t.elements[t.elements.length - 1] == null) {
			const s = new ut();
			for (let r = 0; r < s.elements.length; r++) s.elements[r] = t.elements[r];
			e.value = s;
		}
	}
}
function Hy(n) {
	return {
		paramConfigs: n.paramConfigs,
		timeDependent: n.timeDependent,
		resolutionDependent: n.resolutionDependent,
		raymarchingLightsWorldCoordsDependent: n.raymarchingLightsWorldCoordsDependent,
	};
}
function Wy(n, e) {
	return {
		paramConfigs: n.paramConfigs,
		timeDependent: n.timeDependent,
		resolutionDependent: n.resolutionDependent,
		raymarchingLightsWorldCoordsDependent: n.raymarchingLightsWorldCoordsDependent,
		fragmentShader: e.fragment,
		vertexShader: e.vertex,
	};
}
function Qs(n, e) {
	return e ? `${e}.${n}` : n;
}
class Wj extends Hj {
	constructor(e) {
		super(e), (this.node = e);
	}
	async toData() {
		const e = this.node.assemblerController();
		if (!e) return;
		const t = e.assembler,
			i = t.onBeforeCompileData();
		if (!i) return;
		const s = ra.toJSON(i),
			r = Hy(s),
			o = {[Qs('vertex')]: s.vertexShader, [Qs('fragment')]: s.fragmentShader},
			a = {},
			c = await this.node.material();
		if (!c) return;
		const l = c.customMaterials;
		l &&
			t.traverseCustomAssemblers((d, p) => {
				const m = d.onBeforeCompileData();
				if (m) {
					const g = l[p];
					if (g) {
						const _ = this._materialToJson(g, {node: this.node, suffix: p});
						if (_) {
							const f = ra.toJSON(m),
								y = Hy(f);
							(a[p] = {material: _, onBeforeCompileDataJSONWithoutShaders: y}),
								(o[Qs('vertex', p)] = f.vertexShader),
								(o[Qs('fragment', p)] = f.fragmentShader);
						}
					}
				}
			});
		const u = this._materialToJson(c, {node: this.node, suffix: 'main'});
		return (
			u || console.warn('failed to save material from node', this.node.path()),
			{material: u || {}, onBeforeCompileDataJSONWithoutShaders: r, customMaterials: a, shaders: o}
		);
	}
	load(e) {
		if (this.node.assemblerController() || ((this._material = this._loadMaterial(e.material)), !this._material))
			return;
		const i = e.shaders;
		if (!i) {
			console.warn(`${this.node.path()}: persisted config has no shaders`);
			return;
		}
		const s = Wy(e.onBeforeCompileDataJSONWithoutShaders, {vertex: i[Qs('vertex')], fragment: i[Qs('fragment')]}),
			r = ra.fromJSON(s),
			o = this._material;
		xf(this.node.scene(), o, r);
		for (let a of r.paramConfigs) a.applyToNode(this.node);
		if (((this._material.customMaterials = this._material.customMaterials || {}), e.customMaterials)) {
			const a = Object.keys(e.customMaterials);
			for (const c of a) {
				const l = e.customMaterials[c],
					u = this._loadMaterial(l.material);
				if (u) {
					const h = Wy(l.onBeforeCompileDataJSONWithoutShaders, {
							vertex: i[Qs('vertex', c)],
							fragment: i[Qs('fragment', c)],
						}),
						d = ra.fromJSON(h);
					(d.paramConfigs = r.paramConfigs),
						xf(this.node.scene(), u, d),
						(this._material.customMaterials[c] = u);
				}
			}
		}
	}
	material() {
		return this._material;
	}
}
function jj(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.setBuilderNode = M.BOOLEAN(0, {
					callback: (t) => {
						Jf.PARAM_CALLBACK_setCompileRequired(t);
					},
				})),
				(this.builderNode = M.NODE_PATH('', {
					visibleIf: {setBuilderNode: !0},
					callback: (t) => {
						Jf.PARAM_CALLBACK_setCompileRequired(t);
					},
				}));
		}
	};
}
class Jf extends l0 {
	constructor() {
		super(...arguments), (this._childrenControllerContext = fe.GL), (this.persisted_config = new Wj(this));
	}
	createMaterial() {
		var e;
		let t;
		return (
			this.persisted_config && (t = this.persisted_config.material()),
			t || (t = (e = this.assemblerController()) == null ? void 0 : e.assembler.createMaterial()),
			t
		);
	}
	assemblerController() {
		return (this._assemblerController = this._assemblerController || this._createAssemblerController());
	}
	customMaterialRequested(e) {
		return !0;
	}
	createNode(e, t) {
		return super.createNode(e, t);
	}
	children() {
		return super.children();
	}
	nodesByType(e) {
		return super.nodesByType(e);
	}
	childrenAllowed() {
		return this.assemblerController() ? super.childrenAllowed() : !1;
	}
	sceneReadonly() {
		return this.assemblerController() == null;
	}
	compileIfRequired(e) {
		var t;
		if ((t = this.assemblerController()) != null && t.compileRequired())
			try {
				this._compile(e);
			} catch (i) {
				const s = i.message || 'failed to compile';
				this.states.error.set(s);
			}
	}
	_compile(e) {
		const t = this.assemblerController();
		e &&
			t &&
			(t.assembler.setGlParentNode(this),
			this._setAssemblerGlParentNode(t),
			t.assembler.compileMaterial(e),
			t.post_compile());
	}
	_setAssemblerGlParentNode(e) {
		if (!this.pv.setBuilderNode) return;
		const t = this.pv.builderNode.nodeWithContext(fe.MAT);
		if (!t) return;
		const i = t;
		if (!i.assemblerController()) {
			this.states.error.set(`resolved node '${t.path()}' is not a builder node`);
			return;
		}
		if (i.type() != this.type()) {
			this.states.error.set(
				`resolved node '${t.path()}' does not have the same type '${t.type()}' as current node '${this.type()}'`
			);
			return;
		}
		e.assembler.setGlParentNode(i);
	}
	static PARAM_CALLBACK_setCompileRequired(e) {
		e.PARAM_CALLBACK_setCompileRequired();
	}
	PARAM_CALLBACK_setCompileRequired() {
		var e;
		(e = this.assemblerController()) == null || e.setCompilationRequired(!0);
	}
}
function Xj(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.useFog = M.BOOLEAN(0));
		}
	};
}
function $j(n) {
	return n ? n.fog != null : !1;
}
class qj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const t = await e.material();
		$j(t) && e.controllers.uniformFog.updateMaterial(t);
	}
	updateMaterial(e) {
		const t = this.node.pv;
		e.fog = t.useFog;
	}
	getTextures(e, t) {}
	setParamsFromMaterial(e, t) {
		this.node.p.useFog.set(e.fog);
	}
}
function Yj(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.wireframe = M.BOOLEAN(0)),
				(this.wireframeLinewidth = M.FLOAT(1, {
					range: [0, 5],
					rangeLocked: [!0, !1],
					visibleIf: {wireframe: 1},
				}));
		}
	};
}
class Kj extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static async update(e) {
		const t = await e.material();
		t && e.controllers.wireframeShader.updateMaterial(t);
	}
	updateMaterial(e) {
		const t = this.node.pv,
			i = e;
		i.wireframe != null &&
			((i.wireframe = t.wireframe), (i.wireframeLinewidth = t.wireframeLinewidth), (i.needsUpdate = !0));
	}
}
const Zj = `#define LIGHT_WORLD_SIZE 0.005
// #define LIGHT_FRUSTUM_WIDTH 1.0
// #define PCSS_FILTER_SIZE 1.0
#define LIGHT_SIZE_UV (PCSS_FILTER_SIZE * LIGHT_WORLD_SIZE)
#define NEAR_PLANE 9.5

#define NUM_SAMPLES 17
#define NUM_RINGS 11
#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES

vec2 poissonDisk[NUM_SAMPLES];

void initPoissonSamples( const in vec2 randomSeed ) {
	float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );
	float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );

	// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/
	float angle = rand( randomSeed ) * PI2;
	float radius = INV_NUM_SAMPLES;
	float radiusStep = radius;

	for( int i = 0; i < NUM_SAMPLES; i ++ ) {
		poissonDisk[i] = vec2( cos( angle ), sin( angle ) ) * pow( radius, 0.75 );
		radius += radiusStep;
		angle += ANGLE_STEP;
	}
}

float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation
	return (zReceiver - zBlocker) / zBlocker;
}

float findBlocker( sampler2D shadowMap, const in vec2 uv, const in float zReceiver ) {
	// This uses similar triangles to compute what
	// area of the shadow map we should search
	float searchRadius = LIGHT_SIZE_UV * ( zReceiver - NEAR_PLANE ) / zReceiver;
	float blockerDepthSum = 0.0;
	int numBlockers = 0;

	for( int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++ ) {
		float shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));
		if ( shadowMapDepth < zReceiver ) {
			blockerDepthSum += shadowMapDepth;
			numBlockers ++;
		}
	}

	if( numBlockers == 0 ) return -1.0;

	return blockerDepthSum / float( numBlockers );
}

float PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius ) {
	float sum = 0.0;
	float depth;
	#pragma unroll_loop_start
	for( int i = 0; i < 17; i ++ ) {
		depth = unpackRGBAToDepth( texture2D( shadowMap, uv + poissonDisk[ i ] * filterRadius ) );
		if( zReceiver <= depth ) sum += 1.0;
	}
	#pragma unroll_loop_end
	#pragma unroll_loop_start
	for( int i = 0; i < 17; i ++ ) {
		depth = unpackRGBAToDepth( texture2D( shadowMap, uv + -poissonDisk[ i ].yx * filterRadius ) );
		if( zReceiver <= depth ) sum += 1.0;
	}
	#pragma unroll_loop_end
	return sum / ( 2.0 * float( 17 ) );
}

float PCSS ( sampler2D shadowMap, vec4 coords ) {
	vec2 uv = coords.xy;
	float zReceiver = coords.z; // Assumed to be eye-space z in this code

	initPoissonSamples( uv );
	// STEP 1: blocker search
	float avgBlockerDepth = findBlocker( shadowMap, uv, zReceiver );

	//There are no occluders so early out (this saves filtering)
	if( avgBlockerDepth == -1.0 ) return 1.0;

	// STEP 2: penumbra size
	float penumbraRatio = penumbraSize( zReceiver, avgBlockerDepth );
	float filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;

	// STEP 3: filtering
	//return avgBlockerDepth;
	return PCF_Filter( shadowMap, uv, zReceiver, filterRadius );
}`,
	Qj = 'return PCSS( shadowMap, shadowCoord );',
	Jj = `
#if NUM_SPOT_LIGHT_COORDS > 0

	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];

#endif

#if NUM_SPOT_LIGHT_MAPS > 0

	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];

#endif

#ifdef USE_SHADOWMAP

	#if NUM_DIR_LIGHT_SHADOWS > 0

		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];

		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];

	#endif

	#if NUM_SPOT_LIGHT_SHADOWS > 0

		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];

		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};

		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];

	#endif

	#if NUM_POINT_LIGHT_SHADOWS > 0

		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];

		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};

		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];

	#endif

	/*
	#if NUM_RECT_AREA_LIGHTS > 0

		// TODO (abelnation): create uniforms for area light shadows

	#endif
	*/

	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {

		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );

	}

	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {

		return unpackRGBATo2Half( texture2D( shadow, uv ) );

	}

	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){

		float occlusion = 1.0;

		vec2 distribution = texture2DDistribution( shadow, uv );

		float hard_shadow = step( compare , distribution.x ); // Hard Shadow

		if (hard_shadow != 1.0 ) {

			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality
			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed
			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );

		}
		return occlusion;

	}

	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {

		float shadow = 1.0;

		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;

		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;

		if ( frustumTest ) {

		#if defined( SHADOWMAP_TYPE_PCF )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;

			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;

			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );

		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )

			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;

			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;

			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );

		#elif defined( SHADOWMAP_TYPE_VSM )

			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );

		#else // no percentage-closer filtering:

			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );

		#endif

		}

		return shadow;

	}

	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D
	// vector suitable for 2D texture mapping. This code uses the following layout for the
	// 2D texture:
	//
	// xzXZ
	//  y Y
	//
	// Y - Positive y direction
	// y - Negative y direction
	// X - Positive x direction
	// x - Negative x direction
	// Z - Positive z direction
	// z - Negative z direction
	//
	// Source and test bed:
	// https://gist.github.com/tschw/da10c43c467ce8afd0c4

	vec2 cubeToUV( vec3 v, float texelSizeY ) {

		// Number of texels to avoid at the edge of each square

		vec3 absV = abs( v );

		// Intersect unit cube

		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;

		// Apply scale to avoid seams

		// two texels less per square (one texel will do for NEAREST)
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );

		// Unwrap

		// space: -1 ... 1 range for each square
		//
		// #X##		dim    := ( 4 , 2 )
		//  # #		center := ( 1 , 1 )

		vec2 planar = v.xy;

		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;

		if ( absV.z >= almostOne ) {

			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;

		} else if ( absV.x >= almostOne ) {

			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;

		} else if ( absV.y >= almostOne ) {

			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;

		}

		// Transform to UV space

		// scale := 0.5 / dim
		// translate := ( center + 0.5 ) / dim
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );

	}

	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {

		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );

		// for point lights, the uniform @vShadowCoord is re-purposed to hold
		// the vector from the light to the world-space position of the fragment.
		vec3 lightToPosition = shadowCoord.xyz;

		// dp = normalized distance from light to fragment position
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?
		dp += shadowBias;

		// bd3D = base direction 3D
		vec3 bd3D = normalize( lightToPosition );

		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )

			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;

			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );

		#else // no percentage-closer filtering

			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );

		#endif

	}

#endif
`;
xt.BOOL + '',
	xt.INT + '',
	xt.FLOAT + '',
	xt.VEC2 + '',
	xt.VEC3 + '',
	xt.VEC4 + '',
	xt.MAT3 + '',
	xt.MAT4 + '',
	xt.SAMPLER_2D + '',
	xt.SAMPLER_2D_ARRAY + '',
	xt.SAMPLER_3D + '',
	xt.SAMPLER_CUBE + '',
	xt.SSS_MODEL + '',
	xt.SDF_CONTEXT + '',
	xt.SDF_MATERIAL + '';
class e_ {
	static glType(e, t) {
		switch (e) {
			case xt.BOOL:
				return this.bool(t);
			case xt.INT:
				return this.integer(t);
			case xt.FLOAT:
				return this.float(t);
			case xt.VEC2:
				return this.vector2(t);
			case xt.VEC3:
				return this.vector3(t);
			case xt.VEC4:
				return this.vector4(t);
		}
		return `no matching implementation for glType '${e}' in ThreeToGl.glType`;
	}
	static any(e) {
		return qe(e)
			? e
			: xi(e)
			? `${e}`
			: je(e)
			? `${ln(e)}`
			: ft(e)
			? this.numeric_array(e)
			: e instanceof re || e instanceof w || e instanceof Ke || e instanceof Ee
			? this.numeric_array(e.toArray())
			: `ThreeToGl error: unknown value type '${e}'`;
	}
	static numeric_array(e) {
		const t = new Array(e.length);
		for (let s = 0; s < e.length; s++) t[s] = `${ln(e[s])}`;
		return `${`vec${e.length}`}(${t.join(', ')})`;
	}
	static mat4(e) {
		return qe(e)
			? e
			: `mat4(${e
					.toArray()
					.map((i) => `${ln(i)}`)
					.join(', ')})`;
	}
	static mat3(e) {
		return qe(e)
			? e
			: `mat3(${e
					.toArray()
					.map((i) => `${ln(i)}`)
					.join(', ')})`;
	}
	static vector4(e) {
		return qe(e)
			? e
			: `vec4(${e
					.toArray()
					.map((i) => `${ln(i)}`)
					.join(', ')})`;
	}
	static vector3(e) {
		return qe(e)
			? e
			: `vec3(${e
					.toArray()
					.map((i) => `${ln(i)}`)
					.join(', ')})`;
	}
	static vector2(e) {
		return qe(e)
			? e
			: `vec2(${e
					.toArray()
					.map((i) => `${ln(i)}`)
					.join(', ')})`;
	}
	static vector3_float(e, t) {
		return je(t) && (t = ln(t)), `vec4(${this.vector3(e)}, ${t})`;
	}
	static float4(e, t, i, s) {
		return (
			je(e) && (e = ln(e)),
			je(t) && (t = ln(t)),
			je(i) && (i = ln(i)),
			je(s) && (s = ln(s)),
			`vec4(${e}, ${t}, ${i}, ${s})`
		);
	}
	static float3(e, t, i) {
		return je(e) && (e = ln(e)), je(t) && (t = ln(t)), je(i) && (i = ln(i)), `vec3(${e}, ${t}, ${i})`;
	}
	static float2(e, t) {
		return je(e) && (e = ln(e)), je(t) && (t = ln(t)), `vec2(${e}, ${t})`;
	}
	static float(e) {
		if (je(e)) return ln(e);
		{
			const t = parseFloat(e);
			return isNaN(t) ? e : ln(t);
		}
	}
	static integer(e) {
		if (je(e)) return bf(e);
		{
			const t = parseInt(e);
			return isNaN(t) ? e : bf(t);
		}
	}
	static bool(e) {
		return xi(e) ? `${e}` : e;
	}
}
function e5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.shadowPCSS = M.BOOLEAN(0, {
					callback: (t) => {
						Hc.PARAM_CALLBACK_setRecompileRequired(t);
					},
					separatorBefore: !0,
				})),
				(this.shadowPCSSFilterSize = M.FLOAT(1, {
					visibleIf: {shadowPCSS: 1},
					range: [0, 10],
					rangeLocked: [!0, !1],
				}));
		}
	};
}
function t5(n) {
	return !!n;
}
class Hc extends us {
	constructor(e) {
		super(e), (this.node = e);
	}
	static filterFragmentShader(e, t) {
		const i = `
#define PCSS_FILTER_SIZE ${e_.float(e.pv.shadowPCSSFilterSize)}
${Zj}
`;
		let s = Jj;
		return (
			(s = s.replace(
				'#ifdef USE_SHADOWMAP',
				`#ifdef USE_SHADOWMAP
${i}
				`
			)),
			(s = s.replace(
				'#if defined( SHADOWMAP_TYPE_PCF )',
				`
				${Qj}
				#if defined( SHADOWMAP_TYPE_PCF )`
			)),
			(t = t.replace('#include <shadowmap_pars_fragment>', s)),
			t
		);
	}
	static async update(e) {
		const t = await e.material();
		t5(t) && e.controllers.PCSS.updateMaterial(t);
	}
	async update() {
		Hc.update(this.node);
	}
	updateMaterial(e) {
		var t, i;
		const s = this.node;
		if (!s.assemblerController) return;
		const r = 'PCSS';
		this.node.pv.shadowPCSS
			? (t = s.assemblerController()) == null ||
			  t.addFilterFragmentShaderCallback(r, (o) => Hc.filterFragmentShader(this.node, o))
			: (i = s.assemblerController()) == null || i.removeFilterFragmentShaderCallback(r);
	}
	static PARAM_CALLBACK_setRecompileRequired(e) {
		e.controllers.PCSS.update();
	}
}
function n5(n) {
	var e;
	(e = n.assemblerController()) == null || e.setCompilationRequired();
}
const mu = {callback: (n) => n5(n)};
function i5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.overrideCustomMaterials = M.BOOLEAN(0, {...mu, separatorBefore: !0, separatorAfter: !0})),
				(this.createCustomMatDistance = M.BOOLEAN(1, {visibleIf: {overrideCustomMaterials: 1}, ...mu})),
				(this.createCustomMatDepth = M.BOOLEAN(1, {visibleIf: {overrideCustomMaterials: 1}, ...mu})),
				(this.createCustomMatDepthDOF = M.BOOLEAN(1, {
					visibleIf: {overrideCustomMaterials: 1},
					...mu,
					separatorAfter: !0,
				}));
		}
	};
}
function s5(n, e) {
	if (!n.p.overrideCustomMaterials)
		return console.warn(`param overrideCustomMaterials not found on ${n.path()}, creating all customMaterials`), !0;
	if (!n.pv.overrideCustomMaterials) return !0;
	switch (e) {
		case Nu.DISTANCE:
			return n.pv.createCustomMatDistance;
		case Nu.DEPTH:
			return n.pv.createCustomMatDepth;
		case Nu.DEPTH_DOF:
			return n.pv.createCustomMatDepthDOF;
	}
	zt.unreachable(e);
}
class r5 extends i5(e5(Xj(Yj(p0(jj(M0(C0(v0(y0(m0(E0(b0(g0(S0(_0(f0(x0(kj(A0(nn)))))))))))))))))))) {}
const o5 = new r5();
class a5 extends Jf {
	constructor() {
		super(...arguments),
			(this.paramsConfig = o5),
			(this.controllers = {
				advancedCommon: new Rc(this),
				alphaMap: new uh(this),
				aoMap: new _h(this),
				bumpMap: new ca(this),
				displacementMap: new ua(this),
				emissiveMap: new ph(this),
				envMap: new hh(this),
				lightMap: new fh(this),
				map: new lh(this),
				metalnessRoughnessMap: new la(this),
				normalMap: new dh(this),
				PCSS: new Hc(this),
				uniformFog: new qj(this),
				uniformTransparency: new Vj(this),
				wireframeShader: new Kj(this),
			}),
			(this.controllersList = Object.values(this.controllers));
	}
	static type() {
		return Vm.MESH_STANDARD_BUILDER;
	}
	usedAssembler() {
		return fA.GL_MESH_STANDARD;
	}
	_createAssemblerController() {
		return le.assemblersRegister.assembler(this, this.usedAssembler());
	}
	customMaterialRequested(e) {
		return s5(this, e);
	}
	async cook() {
		(this._material = this._material || this.createMaterial()),
			await Promise.all(this.controllersPromises(this._material)),
			this.compileIfRequired(this._material),
			this.setMaterial(this._material);
	}
}
class T0 extends wi {
	constructor() {
		super(...arguments),
			(this.renderOrder = 0),
			(this._children_group = this._create_children_group()),
			(this._attachableToHierarchy = !0),
			(this._usedInScene = !0);
	}
	static context() {
		return fe.OBJ;
	}
	_create_children_group() {
		const e = new Vi();
		return (e.matrixAutoUpdate = !1), e;
	}
	attachableToHierarchy() {
		return this._attachableToHierarchy;
	}
	usedInScene() {
		return this._usedInScene && this.disposed() == !1;
	}
	addObjectToParent(e) {
		this.attachableToHierarchy() &&
			(e.add(this.object), le.onObjectsAddRemoveHooks.runOnAddHookOnObject(this._scene, this.object));
	}
	removeObjectFromParent() {
		if (this.attachableToHierarchy()) {
			const e = this.object.parent;
			e && (le.onObjectsAddRemoveHooks.runOnRemoveHookOnObject(this._scene, this.object), e.remove(this.object));
		}
	}
	dispose() {
		var e;
		super.dispose(), (e = this.childrenDisplayController) == null || e.dispose();
	}
	initializeBaseNode() {
		(this._object = this._create_object_with_attributes()),
			this.nameController.add_post_set_fullPath_hook(this.set_object_name.bind(this)),
			this.set_object_name();
	}
	childrenGroup() {
		return this._children_group;
	}
	get object() {
		return this._object;
	}
	_create_object_with_attributes() {
		const e = this.createObject();
		return (e.node = this), e.add(this._children_group), e;
	}
	set_object_name() {
		this._object &&
			((this._object.name = this.path()), (this._children_group.name = `${this.path()}:parentedOutputs`));
	}
	createObject() {
		const e = new kt();
		return (e.matrixAutoUpdate = !1), e;
	}
	isDisplayNodeCooking() {
		var e, t, i;
		if ((t = (e = this.flags) == null ? void 0 : e.display) != null && t.active()) {
			const s = (i = this.displayNodeController) == null ? void 0 : i.displayNode();
			if (s) return s.cookController.isCooking();
		}
		return !1;
	}
	isDisplayed() {
		var e, t;
		return ((t = (e = this.flags) == null ? void 0 : e.display) == null ? void 0 : t.active()) || !1;
	}
}
class c5 extends T0 {
	constructor() {
		super(...arguments), (this._attachableToHierarchy = !1);
	}
	createObject() {
		const e = new Vi();
		return (e.matrixAutoUpdate = !1), e;
	}
	cook() {
		this.cookController.endCook();
	}
}
class l5 extends c5 {}
class u5 extends l5 {
	constructor() {
		super(...arguments), (this._childrenControllerContext = fe.COP);
	}
	static type() {
		return Da.COP;
	}
	createNode(e, t) {
		return super.createNode(e, t);
	}
	children() {
		return super.children();
	}
	nodesByType(e) {
		return super.nodesByType(e);
	}
}
const h5 = {dependsOnDisplayNode: !0};
function jy(n) {
	console.error('displayNodeController not initialized', n);
}
function d5(n) {
	console.error('displayNodeController already initialed', n);
}
class p5 {
	constructor(e, t, i = h5) {
		(this.node = e),
			(this.options = i),
			(this._initialized = !1),
			(this._displayNode = void 0),
			(this._displayNodeOverride = void 0),
			(this._graphNode = new ai(e.scene(), `DisplayNodeController-${e.name()}`)),
			(this._onDisplayNodeRemoveCallback = t.onDisplayNodeRemove),
			(this._onDisplayNodeSetCallback = t.onDisplayNodeSet),
			(this._onDisplayNodeUpdateCallback = t.onDisplayNodeUpdate);
	}
	dispose() {
		this._graphNode.dispose();
	}
	displayNode() {
		return this._displayNodeOverride || this._displayNode;
	}
	firstNonBypassedDisplayNode() {
		var e;
		return (e = this.displayNode()) == null ? void 0 : e.containerController.firstNonBypassedNode();
	}
	initializeNode() {
		if (this._initialized) {
			d5(this.node);
			return;
		}
		(this._initialized = !0),
			this.node.lifecycle.onChildAdd((e) => {
				var t, i;
				this._displayNode || (i = (t = e.flags) == null ? void 0 : t.display) == null || i.set(!0);
			}),
			this.node.lifecycle.onChildRemove((e) => {
				var t, i;
				if (e.graphNodeId() == ((t = this._displayNode) == null ? void 0 : t.graphNodeId())) {
					const s = this.node.children();
					for (let r = s.length - 1; r >= 0; r--) {
						const a = (i = s[r].flags) == null ? void 0 : i.display;
						if (a) {
							a.set(!0);
							return;
						}
					}
					this.setDisplayNode(void 0);
				}
			}),
			this._graphNode.dirtyController.addPostDirtyHook('_requestDisplayNodeContainer', () => {
				this._onDisplayNodeUpdateCallback && this._onDisplayNodeUpdateCallback();
			});
	}
	setDisplayNodeOverride(e) {
		this._initialized || jy(this.node);
		const t = this._displayNodeOverride;
		if (t != e) {
			const i = t;
			i &&
				(this.options.dependsOnDisplayNode && this._graphNode.removeGraphInput(i),
				this._onDisplayNodeRemoveCallback && this._onDisplayNodeRemoveCallback()),
				(this._displayNodeOverride = e),
				e
					? (this.options.dependsOnDisplayNode && this._graphNode.addGraphInput(e),
					  this._onDisplayNodeSetCallback && this._onDisplayNodeSetCallback())
					: this._displayNode && this._commitDisplayNode(this._displayNode);
		}
	}
	setDisplayNode(e) {
		this._initialized || jy(this.node);
		const t = this._displayNode;
		if (t != e) {
			const i = t;
			i &&
				(i.flags.display.set(!1),
				this.options.dependsOnDisplayNode && this._graphNode.removeGraphInput(i),
				this._onDisplayNodeRemoveCallback && this._onDisplayNodeRemoveCallback()),
				(this._displayNode = e),
				e && this._commitDisplayNode(e);
		}
	}
	_commitDisplayNode(e) {
		this.options.dependsOnDisplayNode && this._graphNode.addGraphInput(e),
			this._onDisplayNodeSetCallback && this._onDisplayNodeSetCallback();
	}
}
function R0(n, e) {
	const t = (e == null ? void 0 : e.matrixAutoUpdate) || !1;
	return class extends n {
		constructor() {
			super(...arguments),
				(this.transform = M.FOLDER()),
				(this.keepPosWhenParenting = M.BOOLEAN(0)),
				(this.rotationOrder = M.INTEGER(no.indexOf(hm.XYZ), {
					menu: {entries: no.map((s, r) => ({name: s, value: r}))},
				})),
				(this.t = M.VECTOR3([0, 0, 0])),
				(this.r = M.VECTOR3([0, 0, 0])),
				(this.s = M.VECTOR3([1, 1, 1])),
				(this.scale = M.FLOAT(1)),
				(this.matrixAutoUpdate = M.BOOLEAN(t ? 1 : 0)),
				(this.updateTransformFromObject = M.BUTTON(null, {
					callback: (s) => {
						Gm.PARAM_CALLBACK_update_transform_from_object(s);
					},
				}));
		}
	};
}
class y6 extends R0(nn) {}
const Xy = '_cook_main_without_inputs_when_dirty';
class Gm {
	constructor(e) {
		(this.node = e),
			(this._cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this)),
			(this._core_transform = new Pn()),
			(this._keep_pos_when_parenting_m_object = new Qe()),
			(this._keep_pos_when_parenting_m_new_parent_inv = new Qe());
	}
	initializeNode() {
		this.node.dirtyController.hasHook(Xy) ||
			this.node.dirtyController.addPostDirtyHook(Xy, this._cook_main_without_inputs_when_dirty_bound);
	}
	async _cook_main_without_inputs_when_dirty() {
		await this.node.cookController.cookMainWithoutInputs();
	}
	update() {
		this.update_transform_with_matrix();
		const e = this.node.object;
		(e.matrixAutoUpdate = this.node.pv.matrixAutoUpdate), le.onSceneUpdatedHooks.runHooks();
	}
	update_transform_with_matrix(e) {
		const t = this.node.object;
		e != null && !e.equals(t.matrix)
			? (t.matrix.copy(e), t.dispatchEvent({type: 'change'}))
			: this._update_matrix_from_params_with_core_transform();
	}
	_update_matrix_from_params_with_core_transform() {
		const e = this.node.object;
		let t = e.matrixAutoUpdate;
		t && (e.matrixAutoUpdate = !1);
		const i = this._core_transform.matrix(
			this.node.pv.t,
			this.node.pv.r,
			this.node.pv.s,
			this.node.pv.scale,
			no[this.node.pv.rotationOrder]
		);
		e.matrix.identity(),
			e.applyMatrix4(i),
			this._apply_look_at(),
			e.updateMatrix(),
			t && (e.matrixAutoUpdate = !0),
			e.dispatchEvent({type: 'change'});
	}
	_apply_look_at() {}
	set_params_from_matrix(e, t = {}) {
		Pn.setParamsFromMatrix(e, this.node, t);
	}
	static update_node_transform_params_if_required(e, t) {
		e.transformController.update_node_transform_params_if_required(t);
	}
	update_node_transform_params_if_required(e) {
		if (
			!this.node.pv.keepPosWhenParenting ||
			!this.node.scene().loadingController.loaded() ||
			e == this.node.object.parent
		)
			return;
		const t = this.node.object;
		t.updateMatrixWorld(!0),
			e.updateMatrixWorld(!0),
			this._keep_pos_when_parenting_m_object.copy(t.matrixWorld),
			this._keep_pos_when_parenting_m_new_parent_inv.copy(e.matrixWorld),
			this._keep_pos_when_parenting_m_new_parent_inv.invert(),
			this._keep_pos_when_parenting_m_object.premultiply(this._keep_pos_when_parenting_m_new_parent_inv),
			Pn.setParamsFromMatrix(this._keep_pos_when_parenting_m_object, this.node, {scale: !0});
	}
	update_node_transform_params_from_object(e = !1) {
		const t = this.node.object;
		e && t.updateMatrix(), Pn.setParamsFromMatrix(t.matrix, this.node, {scale: !0});
	}
	static PARAM_CALLBACK_update_transform_from_object(e) {
		e.transformController.update_node_transform_params_from_object();
	}
}
class zm {
	constructor(e) {
		this.node = e;
	}
	initializeNode() {
		this.node.io.inputs.setCount(0, 1),
			this.node.io.inputs.setDependsOnInputs(!1),
			this.node.io.outputs.setHasOneOutput(),
			this.node.io.inputs.add_on_set_input_hook('on_input_updated:update_parent', () => {
				this.on_input_updated();
			});
	}
	static on_input_updated(e) {
		const t = e.root().getParentForNode(e);
		e.transformController && t && Gm.update_node_transform_params_if_required(e, t),
			e.io.inputs.input(0) != null ? e.root().addToParentTransform(e) : e.root().removeFromParentTransform(e);
	}
	on_input_updated() {
		zm.on_input_updated(this.node);
	}
}
const $y = 'display';
class f5 {
	constructor(e) {
		(this.node = e),
			(this._childrenUuids = new Set()),
			(this._sopGroup = this._createSopGroup()),
			(this._newSpecializedObjects = []),
			(this._newObjectsAreDifferent = !1),
			(this._scene = this.node.scene());
	}
	_createSopGroup() {
		const e = new Vi();
		return (e.matrixAutoUpdate = !1), e;
	}
	sopGroup() {
		return this._sopGroup;
	}
	setSopGroupName() {
		this._sopGroup.name = `${this.node.name()}:sopGroup`;
	}
	dispose() {
		this._clearHooks();
	}
	displayNodeControllerCallbacks() {
		return {
			onDisplayNodeRemove: () => {
				this.removeChildren();
			},
			onDisplayNodeSet: () => {
				setTimeout(() => {
					this.requestDisplayNodeContainer();
				}, 0);
			},
			onDisplayNodeUpdate: () => {
				this.node.scene().loadingController.loaded() && this.requestDisplayNodeContainer();
			},
		};
	}
	initializeNode() {
		var e;
		this.node.object.add(this.sopGroup()),
			this.node.nameController.add_post_set_fullPath_hook(this.setSopGroupName.bind(this)),
			this._createSopGroup();
		const t = (e = this.node.flags) == null ? void 0 : e.display;
		t &&
			t.onUpdate(() => {
				this._updateSopGroupHierarchy(), t.active() && this.requestDisplayNodeContainer();
			});
	}
	_updateSopGroupHierarchy() {
		var e;
		if ((e = this.node.flags) == null ? void 0 : e.display) {
			const i = this.sopGroup();
			this.usedInScene()
				? ((i.visible = !0), this.node.object.add(i), i.updateMatrix())
				: ((i.visible = !1), this.node.object.remove(i)),
				le.onSceneUpdatedHooks.runHooks();
		}
	}
	usedInScene() {
		var e, t;
		const i = this.node;
		if (
			i.disposed() == !0 ||
			!i.usedInScene() ||
			!(((t = (e = i.flags) == null ? void 0 : e.display) == null ? void 0 : t.active()) || !1)
		)
			return !1;
		const a = i.params.has($y),
			c = i.params.boolean($y);
		return !a || c;
	}
	async requestDisplayNodeContainer() {
		this._scene.loadingController.loaded() && this.usedInScene() && (await this._setContentUnderSopGroup());
	}
	removeChildren() {
		if (this._sopGroup.children.length == 0) return;
		let e;
		for (
			le.onObjectsAddRemoveHooks.runOnRemoveHooks(this._scene, this._sopGroup);
			(e = this._sopGroup.children[0]);

		)
			this._sopGroup.remove(e);
		this._childrenUuids.clear(), this._notifyCamerasController();
	}
	async _setContentUnderSopGroup() {
		var e;
		const t = this.node.displayNodeController.displayNode();
		if (t && ((e = t.parent()) == null ? void 0 : e.graphNodeId()) == this.node.graphNodeId()) {
			const s = (await t.compute()).coreContent();
			if (s) {
				const r = s.threejsObjects(),
					o = () => {
						if (r.length != this._childrenUuids.size) return !0;
						for (const c of r) if (!this._childrenUuids.has(c.uuid)) return !0;
						return !1;
					};
				if (
					((this._newObjectsAreDifferent = o()),
					(this._newSpecializedObjects.length = 0),
					this._addSpecializedObjects(t, s, this._newSpecializedObjects),
					this._newObjectsAreDifferent)
				) {
					this.removeChildren();
					const a = (c) => {
						this._sopGroup.add(c), c.updateMatrix(), this._childrenUuids.add(c.uuid);
					};
					for (const c of r) a(c);
					for (const c of this._newSpecializedObjects) a(c);
				}
				this._notifyCamerasController(),
					this._runOnSopGroupUpdatedHooks(),
					this._scene.loadingController.loaded() &&
						(le.onObjectsAddRemoveHooks.runOnAddHooks(this._scene, this._sopGroup),
						le.onSceneUpdatedHooks.runHooks());
				return;
			}
		}
		this.removeChildren(),
			this._runOnSopGroupUpdatedHooks(),
			this._scene.loadingController.loaded() && le.onSceneUpdatedHooks.runHooks();
	}
	_notifyCamerasController() {
		this._scene.camerasController.updateFromChangeInObject(this._sopGroup);
	}
	_addSpecializedObjects(e, t, i) {}
	registerOnSopGroupUpdated(e, t) {
		(this._onSopGroupUpdatedHookNames = this._onSopGroupUpdatedHookNames || []),
			(this._onSopGroupUpdatedHooks = this._onSopGroupUpdatedHooks || []),
			this._onSopGroupUpdatedHookNames.push(e),
			this._onSopGroupUpdatedHooks.push(t);
	}
	_clearHooks() {
		if (!(!this._onSopGroupUpdatedHookNames || !this._onSopGroupUpdatedHooks))
			for (const e of this._onSopGroupUpdatedHookNames) this.deregisterOnSopGroupUpdated(e);
	}
	deregisterOnSopGroupUpdated(e) {
		var t;
		if (!this._onSopGroupUpdatedHookNames || !this._onSopGroupUpdatedHooks) return;
		const i = (t = this._onSopGroupUpdatedHookNames) == null ? void 0 : t.indexOf(e);
		this._onSopGroupUpdatedHookNames.splice(i, 1),
			this._onSopGroupUpdatedHooks.splice(i, 1),
			this._onSopGroupUpdatedHookNames.length == 0 && (this._onSopGroupUpdatedHookNames = void 0),
			this._onSopGroupUpdatedHooks.length == 0 && (this._onSopGroupUpdatedHooks = void 0);
	}
	_runOnSopGroupUpdatedHooks() {
		if (this._onSopGroupUpdatedHooks) {
			const e = [...this._onSopGroupUpdatedHooks];
			for (const t of e) t();
		}
	}
	onSopGroupUpdatedCallbackNames() {
		return this._onSopGroupUpdatedHookNames;
	}
}
class _5 extends f5 {
	constructor(e) {
		super(e), (this.node = e);
	}
	_addSpecializedObjects(e, t, i) {
		const s = le.specializedChildren.runHooks(e, t, i, this.node.pv);
		s && (this._newObjectsAreDifferent = s);
	}
}
var Hm = ((n) => (
	(n.GEO = 'geo'),
	(n.CUBE_CAMERA = 'cubeCamera'),
	(n.AUDIO_LISTENER = 'audioListener'),
	(n.POSITIONAL_AUDIO = 'positionalAudio'),
	(n.SCENE = 'scene'),
	n
))(Hm || {});
const m5 = {edgesColor: [0.1, 0.7, 0.2]};
function g5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.CADLinearTolerance = M.FLOAT(0.1, {range: [0.001, 1], rangeLocked: [!0, !1]})),
				(this.CADAngularTolerance = M.FLOAT(0.1, {range: [0.001, 1], rangeLocked: [!0, !1]})),
				(this.CADCurveAbscissa = M.FLOAT(0.1, {range: [0.001, 1], rangeLocked: [!0, !1]})),
				(this.CADCurveTolerance = M.FLOAT(0.1, {range: [0.001, 1], rangeLocked: [!0, !1]})),
				(this.CADDisplayEdges = M.BOOLEAN(!0, {separatorBefore: !0})),
				(this.CADEdgesColor = M.COLOR(m5.edgesColor, {visibleIf: {CADDisplayEdges: !0}})),
				(this.CADDisplayMeshes = M.BOOLEAN(!0)),
				(this.CADMeshesColor = M.COLOR([1, 1, 1], {visibleIf: {CADDisplayMeshes: !0}})),
				(this.CADWireframe = M.BOOLEAN(!1, {visibleIf: {CADDisplayMeshes: !0}}));
		}
	};
}
const v5 = new Set([
	'CADLinearTolerance',
	'CADAngularTolerance',
	'CADCurveAbscissa',
	'CADCurveTolerance',
	'CADDisplayEdges',
	'CADEdgesColor',
	'CADDisplayMeshes',
	'CADMeshesColor',
	'CADWireframe',
]);
function E5(n, e) {
	n.params.onParamsCreated('CADtesselationParamsHooks', () => {
		const t = n.params.all;
		for (const i of t) v5.has(i.name()) && i.options.setOption('callback', e);
	});
}
const qy = {facetAngle: 45, linesColor: [0.4, 0.1, 0.6]};
function C5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.CSGFacetAngle = M.FLOAT(qy.facetAngle, {range: [0, 180], rangeLocked: [!0, !1]})),
				(this.CSGLinesColor = M.COLOR(qy.linesColor)),
				(this.CSGMeshesColor = M.COLOR([1, 1, 1])),
				(this.CSGWireframe = M.BOOLEAN(!1));
		}
	};
}
const y5 = new Set(['CSGFacetAngle', 'CSGLinesColor', 'CSGMeshesColor', 'CSGWireframe']);
function b5(n, e) {
	n.params.onParamsCreated('CSGtesselationParamsHooks', () => {
		const t = n.params.all;
		for (const i of t) y5.has(i.name()) && i.options.setOption('callback', e);
	});
}
function S5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.QUADTriangles = M.BOOLEAN(!0)),
				(this.QUADWireframe = M.BOOLEAN(!0, {separatorBefore: !0})),
				(this.QUADUnsharedEdges = M.BOOLEAN(!1, {visibleIf: {wireframe: !0}})),
				(this.QUADWireframeColor = M.COLOR([0, 0, 0], {visibleIf: {QUADWireframe: !0}})),
				(this.QUADConnections = M.BOOLEAN(!1, {separatorBefore: !0})),
				(this.QUADConnectionsBetweenQuadsSharingEdge = M.BOOLEAN(!0, {visibleIf: {QuadConnections: !0}})),
				(this.QUADConnectionsBetweenQuadsSharingPointOnly = M.BOOLEAN(!0, {visibleIf: {QuadConnections: !0}})),
				(this.QUADConnectionsColor = M.COLOR([0, 0, 0], {visibleIf: {QuadConnections: !0}})),
				(this.QUADCenter = M.BOOLEAN(!1, {separatorBefore: !0})),
				(this.QUADInnerRadius = M.BOOLEAN(!1, {visibleIf: {QUADCenter: !0}})),
				(this.QUADOuterRadius = M.BOOLEAN(!1, {visibleIf: {QUADCenter: !0}})),
				(this.QUADEdgeCenterVectors = M.BOOLEAN(!1, {visibleIf: {QUADCenter: !0}})),
				(this.QUADEdgeNearestPointVectors = M.BOOLEAN(!1, {visibleIf: {QUADCenter: !0}})),
				(this.QUADSplitQuads = M.BOOLEAN(!1, {
					separatorBefore: !0,
					visibleIf: [{QUADTriangles: !0}, {QUADWireframe: !0}],
				})),
				(this.QUADPointAttributes = M.STRING('*', {visibleIf: [{QUADTriangles: !0}]})),
				(this.QUADPrimitiveAttributes = M.STRING('*'));
		}
	};
}
const A5 = new Set(['QUADTriangles', 'QUADWireframe']);
function x5(n, e) {
	n.params.onParamsCreated('QUADtesselationParamsHooks', () => {
		const t = n.params.all;
		for (const i of t) A5.has(i.name()) && i.options.setOption('callback', e);
	});
}
const Js = {
	scale: 1,
	displayOuterMesh: !1,
	displayTetMesh: !0,
	displayLines: !1,
	displaySharedFaces: !1,
	displayPoints: !1,
	displayCenter: !1,
	displaySphere: !1,
};
function M5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.TetScale = M.FLOAT(Js.scale, {range: [0, 1], rangeLocked: [!0, !0]})),
				(this.TetDisplayOuterMesh = M.BOOLEAN(Js.displayOuterMesh)),
				(this.TetDisplayTetMesh = M.BOOLEAN(Js.displayTetMesh)),
				(this.TetDisplayLines = M.BOOLEAN(Js.displayLines)),
				(this.TetDisplaySharedFaces = M.BOOLEAN(Js.displaySharedFaces)),
				(this.TetDisplayPoints = M.BOOLEAN(Js.displayPoints)),
				(this.TetDisplayCenter = M.BOOLEAN(Js.displayCenter)),
				(this.TetDisplaySphere = M.BOOLEAN(Js.displaySphere));
		}
	};
}
const T5 = new Set([
	'TetScale',
	'TetDisplayMesh',
	'TetDisplayLines',
	'TetDisplaySharedFaces',
	'TetDisplayPoints',
	'TetDisplayCenter',
	'TetDisplaySphere',
]);
function R5(n, e) {
	n.params.onParamsCreated('TettesselationParamsHooks', () => {
		const t = n.params.all;
		for (const i of t) T5.has(i.name()) && i.options.setOption('callback', e);
	});
}
function w5(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.CAD = M.FOLDER());
		}
	};
}
function O5(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.CSG = M.FOLDER());
		}
	};
}
function P5(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.QUAD = M.FOLDER());
		}
	};
}
function N5(n) {
	return class extends n {
		constructor() {
			super(...arguments), (this.TET = M.FOLDER());
		}
	};
}
function I5(n) {
	return class extends M5(N5(S5(P5(C5(O5(g5(w5(n)))))))) {};
}
function D5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.display = M.BOOLEAN(1)),
				(this.renderOrder = M.INTEGER(0, {range: [0, 10], rangeLocked: [!0, !1]}));
		}
	};
}
class L5 extends I5(D5(R0(nn))) {}
const U5 = new L5();
class F5 extends T0 {
	constructor() {
		super(...arguments),
			(this.paramsConfig = U5),
			(this.hierarchyController = new zm(this)),
			(this.transformController = new Gm(this)),
			(this.flags = new PG(this)),
			(this.childrenDisplayController = new _5(this)),
			(this.displayNodeController = new p5(
				this,
				this.childrenDisplayController.displayNodeControllerCallbacks()
			)),
			(this._childrenControllerContext = fe.SOP),
			(this._onChildAddBound = this._onChildAdd.bind(this));
	}
	static type() {
		return Hm.GEO;
	}
	createObject() {
		const e = new Vi();
		return (e.matrixAutoUpdate = !1), e;
	}
	initializeNode() {
		this.lifecycle.onChildAdd(this._onChildAddBound),
			this.hierarchyController.initializeNode(),
			this.transformController.initializeNode(),
			this.childrenDisplayController.initializeNode();
		const e = () => {
			this.childrenDisplayController.requestDisplayNodeContainer();
		};
		E5(this, e), b5(this, e), x5(this, e), R5(this, e);
	}
	createNode(e, t) {
		return super.createNode(e, t);
	}
	children() {
		return super.children();
	}
	nodesByType(e) {
		return super.nodesByType(e);
	}
	_onChildAdd(e) {
		var t, i;
		this.scene().loadingController.loaded() &&
			this.children().length == 1 &&
			((i = (t = e.flags) == null ? void 0 : t.display) == null || i.set(!0));
	}
	cook() {
		this.transformController.update(),
			(this.object.visible = this.pv.display),
			(this.object.renderOrder = this.pv.renderOrder),
			this.cookController.endCook();
	}
}
class ci extends wi {
	constructor() {
		super(...arguments), (this.flags = new IG(this));
	}
	static context() {
		return fe.SOP;
	}
	dataType() {
		return em.THREEJS;
	}
	initializeBaseNode() {
		this.flags.display.set(!1),
			this.flags.display.onUpdate(() => {
				if (!this.flags.display.active()) return;
				const e = this.parent();
				e && e.displayNodeController && e.displayNodeController.setDisplayNode(this);
			}),
			this.io.outputs.setHasOneOutput();
	}
	setCoreGroup(e) {
		this._setContainer(e);
	}
	setObject(e) {
		this._setContainerObjects([e]);
	}
	setObjects(e) {
		this._setContainerObjects(e);
	}
	setGeometry(e, t = Dn.MESH) {
		const i = this.createObject(e, t);
		this._setContainerObjects(i ? [i] : []);
	}
	setGeometries(e, t = Dn.MESH) {
		const i = [];
		for (const s of e) {
			const r = this.createObject(s, t);
			r && i.push(r);
		}
		this._setContainerObjects(i);
	}
	_setContainerObjects(e) {
		const t = this.containerController.container().coreContent() || new ba();
		t.setAllObjects(e), this._setContainer(t);
	}
	static createObject(e, t, i) {
		return rn.createObject(e, t, i);
	}
	createObject(e, t, i) {
		return ci.createObject(e, t, i);
	}
	static createIndexIfNone(e) {
		rn.createIndexIfNone(e);
	}
	_createIndexIfNone(e) {
		ci.createIndexIfNone(e);
	}
}
const Ip = new Ht(),
	gu = new w(),
	Yy = new w();
function qo(n) {
	return Math.max(1, Math.floor(n));
}
class Wc extends rn {
	constructor() {
		super(...arguments), (this._coreTransform = new Pn());
	}
	static type() {
		return 'box';
	}
	cook(e, t) {
		const i = e[0],
			s = i ? this._cookWithInput(i, t) : this._cookWithoutInput(t),
			r = rn.createObject(s, Dn.MESH);
		return this._node && (r.name = this._node.name()), this.createCoreGroupFromObjects([r]);
	}
	_cookWithoutInput(e) {
		const {divisions: t, size: i, sizes: s} = e,
			r = new Qr(i * s.x, i * s.y, i * s.z, qo(t.x), qo(t.y), qo(t.z));
		return r.translate(e.center.x, e.center.y, e.center.z), r.computeVertexNormals(), r;
	}
	_cookWithInput(e, t) {
		e.boundingBox(Ip), Ip.getSize(gu), Ip.getCenter(Yy);
		const i = t.divisions,
			s = new Qr(gu.x, gu.y, gu.z, qo(i.x), qo(i.y), qo(i.z)),
			r = this._coreTransform.translationMatrix(Yy);
		return s.applyMatrix4(r), s;
	}
}
Wc.DEFAULT_PARAMS = {sizes: new w(1, 1, 1), size: 1, divisions: new w(1, 1, 1), center: new w(0, 0, 0)};
Wc.INPUT_CLONED_STATE = Ft.NEVER;
const vu = Wc.DEFAULT_PARAMS;
class B5 extends nn {
	constructor() {
		super(...arguments),
			(this.size = M.FLOAT(vu.size, {range: [0, 2], rangeLocked: [!0, !1]})),
			(this.sizes = M.VECTOR3(vu.sizes)),
			(this.divisions = M.VECTOR3(vu.divisions)),
			(this.center = M.VECTOR3(vu.center));
	}
}
const k5 = new B5();
class V5 extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = k5);
	}
	static type() {
		return oi.BOX;
	}
	initializeNode() {
		this.io.inputs.setCount(0, 1), this.io.inputs.initInputsClonedState(Wc.INPUT_CLONED_STATE);
	}
	cook(e) {
		this._operation = this._operation || new Wc(this._scene, this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
const Ky = {near: 0.1, far: 100};
var Ze = ((n) => (
		(n.NODE_ID = '_Camera_nodeGeneratorId__'),
		(n.CONTROLS_NODE_ID = '_Camera_controlsNodeId'),
		(n.CSS_RENDERER_NODE_ID = '_Camera_CSSRendererNodeId'),
		(n.FRAME_MODE = '_Camera_frameMode'),
		(n.FRAME_MODE_EXPECTED_ASPECT_RATIO = '_Camera_frameModeExpectedAspectRatio'),
		(n.MAX_FPS = 'maxFPS'),
		(n.MAX_FPS_DYNAMIC_CHANGE = '_Camera_maxFPSDynamicChange'),
		(n.VIEW_OFFSET_MIN = '_Camera_viewOffsetMin'),
		(n.VIEW_OFFSET_MAX = '_Camera_viewOffsetMax'),
		(n.POST_PROCESS_NODE_ID = '_Camera_postProcessNodeId'),
		(n.RENDER_SCENE_NODE_ID = '_Camera_renderSceneNodeId'),
		(n.RENDERER_NODE_ID = '_Camera_rendererNodeId'),
		(n.VIEWER_ID = '_Camera_viewerId'),
		(n.VIEWER_HTML = '_Camera_viewerHTML'),
		(n.WEBXR_AR = '_Camera_WebXR_AR'),
		(n.WEBXR_VR = '_Camera_WebXR_VR'),
		(n.WEBXR_AR_FEATURES_OPTIONAL = '_Camera_WebXR_AR_Features_Optional'),
		(n.WEBXR_AR_FEATURES_REQUIRED = '_Camera_WebXR_AR_Features_Required'),
		(n.WEBXR_AR_OVERRIDE_REFERENCE_SPACE_TYPE = '_Camera_WebXR_AR_overrideReferenceSpaceType'),
		(n.WEBXR_AR_REFERENCE_SPACE_TYPE = '_Camera_WebXR_AR_referenceSpaceType'),
		(n.WEBXR_VR_FEATURES_OPTIONAL = '_Camera_WebXR_VR_Features_Optional'),
		(n.WEBXR_VR_FEATURES_REQUIRED = '_Camera_WebXR_VR_Features_Required'),
		(n.WEBXR_VR_OVERRIDE_REFERENCE_SPACE_TYPE = '_Camera_WebXR_VR_overrideReferenceSpaceType'),
		(n.WEBXR_VR_REFERENCE_SPACE_TYPE = '_Camera_WebXR_VR_referenceSpaceType'),
		(n.WEBXR_AR_MARKER_TRACKING = '_Camera_WebXR_AR_markerTracking'),
		(n.WEBXR_AR_MARKER_TRACKING_SOURCE_MODE = '_Camera_WebXR_AR_markerTracking_sourceMode'),
		(n.WEBXR_AR_MARKER_TRACKING_SOURCE_URL = '_Camera_WebXR_AR_markerTracking_sourceUrl'),
		(n.WEBXR_AR_MARKER_TRACKING_BAR_CODE_TYPE = '_Camera_WebXR_AR_markerTracking_barCodeType'),
		(n.WEBXR_AR_MARKER_TRACKING_BAR_CODE_VALUE = '_Camera_WebXR_AR_markerTracking_barCodeValue'),
		(n.WEBXR_AR_MARKER_TRACKING_TRANSFORM_MODE = '_Camera_WebXR_AR_markerTracking_transformMode'),
		(n.WEBXR_AR_MARKER_TRACKING_SMOOTH = '_Camera_WebXR_AR_markerTracking_smooth'),
		(n.WEBXR_AR_MARKER_TRACKING_SMOOTH_COUNT = '_Camera_WebXR_AR_markerTracking_smoothCount'),
		n
	))(Ze || {}),
	Wm = ((n) => ((n.FOV = '_PerspectiveCamera_fov'), n))(Wm || {});
function w0(n, e, t) {
	return P0(e.group, t || n.allCoreObjects()).map((i) => i.object(), e.invert);
}
function G5(n, e, t) {
	return P0(e.group, t || n.allCoreObjects());
}
function O0(n, e) {
	const t = n.trim();
	if (t.length == 0 || e.object.name == t || Ds(e.name(), t)) return !0;
	const i = t.split('='),
		s = i[0];
	if (s[0] == '@') {
		const r = s.substring(1),
			o = i[1],
			a = e.attribValue(r);
		return o == a;
	}
	return !1;
}
function P0(n, e) {
	if (((n = n.trim()), n == '')) return e;
	const t = parseInt(n);
	if (!F_(t)) {
		const s = e[t];
		return s ? [s] : [];
	}
	const i = [];
	for (const s of e) {
		let r = !1;
		const o = s.object();
		if (o) {
			const a = Ti.objectsByMask(n, o);
			for (const l of a) {
				const u = l.parent,
					h = u ? u.children.indexOf(l) : 0,
					d = Ss(l, h);
				i.push(d), (r = !0);
			}
			O0(n, s) && !r && i.push(s);
		}
	}
	return i;
}
function z5(n, e) {
	return w0(n, e, n.threejsCoreObjects());
}
class as {}
as.filterObjects = w0;
as.filterCoreObjects = G5;
as.filterThreejsObjects = z5;
as.isInGroup = O0;
const N0 = class extends rn {
	static type() {
		return co.CONTROLS;
	}
	cook(n, e) {
		const t = n[0],
			i = as.filterObjects(t, {group: e.group});
		return (
			this._node &&
				N0.updateObject({objects: i, params: e, node: this._node, active: !0, errorIfNodeNotFound: !0}),
			t
		);
	}
	static updateObject(n) {
		const {objects: e, params: t, node: i, active: s, errorIfNodeNotFound: r} = n,
			o = t.node.path(),
			a = i.node(o);
		if (a && s) {
			const c = a.graphNodeId();
			for (let l of e) Jt.addAttribute(l, Ze.CONTROLS_NODE_ID, c);
		} else {
			for (let c of e) Jt.deleteAttribute(c, Ze.CONTROLS_NODE_ID);
			r && i.states.error.set('controls node not found');
		}
	}
};
let mh = N0;
mh.DEFAULT_PARAMS = {group: '', node: new zi('')};
mh.INPUT_CLONED_STATE = Ft.FROM_NODE;
class H5 extends gB {
	constructor() {
		super(...arguments),
			(this.node = M.NODE_PATH('', {nodeSelection: {context: fe.EVENT}, dependentOnFoundNode: !0}));
	}
}
const W5 = new H5();
class j5 extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = W5), (this._childrenControllerContext = fe.EVENT);
	}
	static type() {
		return co.CONTROLS;
	}
	initializeNode() {
		this.io.inputs.setCount(1), this.io.inputs.initInputsClonedState(mh.INPUT_CLONED_STATE);
	}
	cook(e) {
		this._operation = this._operation || new mh(this._scene, this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
	createNode(e, t) {
		return super.createNode(e, t);
	}
	children() {
		return super.children();
	}
	nodesByType(e) {
		return super.nodesByType(e);
	}
}
const gh = {
		skyColor: new Ee(1, 1, 1),
		groundColor: new Ee(0, 0, 0),
		intensity: 1,
		position: new w(0, 1, 0),
		name: 'hemisphereLight',
	},
	Eu = gh;
function X5(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.skyColor = M.COLOR(Eu.skyColor.toArray(), {})),
				(this.groundColor = M.COLOR(Eu.groundColor.toArray(), {})),
				(this.intensity = M.FLOAT(Eu.intensity, {range: [0, 2], rangeLocked: [!0, !1]})),
				(this.position = M.VECTOR3(Eu.position.toArray())),
				(this.name = M.STRING('`$OS`'));
		}
	};
}
class jm extends rn {
	static type() {
		return 'hemisphereLight';
	}
	cook(e, t) {
		const i = this.createLight();
		return (i.name = t.name), this.updateLightParams(i, t), this.createCoreGroupFromObjects([i]);
	}
	createLight() {
		var e;
		Hh({
			type: Dn.HEMISPHERE_LIGHT,
			checkFunc: (i) => {
				if (i.isHemisphereLight) return Dn.HEMISPHERE_LIGHT;
			},
			ctor: Iv,
			humanName: 'HemisphereLight',
		});
		const t = new Iv();
		return (
			(t.name = `HemisphereLight_${((e = this._node) == null ? void 0 : e.name()) || ''}`),
			(t.matrixAutoUpdate = !1),
			t.updateMatrix(),
			t.color.copy(gh.skyColor),
			t.groundColor.copy(gh.groundColor),
			t
		);
	}
	updateLightParams(e, t) {
		e.color.copy(t.skyColor),
			e.groundColor.copy(t.groundColor),
			(e.intensity = t.intensity),
			e.position.copy(t.position),
			e.updateMatrix();
	}
}
jm.DEFAULT_PARAMS = gh;
jm.INPUT_CLONED_STATE = Ft.NEVER;
class $5 extends X5(nn) {}
const q5 = new $5();
class Y5 extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = q5);
	}
	static type() {
		return 'hemisphereLight';
	}
	initializeNode() {
		this.io.inputs.setCount(0);
	}
	cook(e) {
		this._operation = this._operation || new jm(this._scene, this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
class K5 {
	handleGlobalsNode(e, t, i) {}
	handleGlobalVar(e, t, i, s) {}
}
var I0 = ((n) => (
	(n.ADJACENT_POINTS_ATTRIB_SMOOTH = 'adjacentPointsAttribSmooth'),
	(n.ADJACENT_UV_ATTRIB_SMOOTH = 'adjacentUvAttribSmooth'),
	(n.ATTRIBUTE = 'attribute'),
	(n.COMPUTE_NORMALS = 'computeNormals'),
	(n.CONSTANT = 'constant'),
	(n.FOR_LOOP = 'forLoop'),
	(n.IF_THEN = 'ifThen'),
	(n.GLOBALS = 'globals'),
	(n.NOISE = 'noise'),
	(n.OUTPUT = 'output'),
	(n.PARAM = 'param'),
	(n.RAMP = 'ramp'),
	(n.SDF_2D_BOX = 'SDF2DBox'),
	(n.SDF_2D_CIRCLE = 'SDF2DCircle'),
	(n.SDF_2D_CROSS = 'SDF2DCross'),
	(n.SDF_2D_HEART = 'SDF2DHeart'),
	(n.SDF_2D_ROUNDED_X = 'SDF2DRoundedX'),
	(n.SDF_2D_STAIRS = 'SDF2DStairs'),
	(n.SDF_BOX = 'SDFBox'),
	(n.SDF_BOX_FRAME = 'SDFBoxFrame'),
	(n.SDF_BOX_ROUND = 'SDFBoxRound'),
	(n.SDF_CAPSULE = 'SDFCapsule'),
	(n.SDF_CAPSULE_VERTICAL = 'SDFCapsuleVertical'),
	(n.SDF_CONE = 'SDFCone'),
	(n.SDF_CONE_ROUND = 'SDFConeRound'),
	(n.SDF_ELONGATE = 'SDFElongate'),
	(n.SDF_FRACTAL_MANDELBROT = 'SDFFractalMandelbrot'),
	(n.SDF_GRADIENT = 'SDFGradient'),
	(n.SDF_HEXAGONAL_PRISM = 'SDFHexagonalPrism'),
	(n.SDF_HORSE_SHOE = 'SDFHorseShoe'),
	(n.SDF_LINK = 'SDFLink'),
	(n.SDF_OCTAHEDRON = 'SDFOctahedron'),
	(n.SDF_OCTOGONAL_PRISM = 'SDFOctogonalPrism'),
	(n.SDF_ONION = 'SDFOnion'),
	(n.SDF_PLANE = 'SDFPlane'),
	(n.SDF_PYRAMID = 'SDFPyramid'),
	(n.SDF_QUAD = 'SDFQuad'),
	(n.SDF_REPEAT_POLAR = 'SDFRepeatPolar'),
	(n.SDF_REVOLUTION = 'SDFRevolution'),
	(n.SDF_RHOMBUS = 'SDFRhombus'),
	(n.SDF_RHOMBUS_TRIACONTAHEDRON = 'SDFRhombusTriacontahedron'),
	(n.SDF_SOLID_ANGLE = 'SDFSolidAngle'),
	(n.SDF_SPHERE = 'SDFSphere'),
	(n.SDF_SPHERE_CUT = 'SDFSphereCut'),
	(n.SDF_SPHERE_HOLLOW = 'SDFSphereHollow'),
	(n.SDF_TORUS = 'SDFTorus'),
	(n.SDF_TRANSFORM = 'SDFTransform'),
	(n.SDF_TRIANGULAR_PRISM = 'SDFTriangularPrism'),
	(n.SDF_TRIANGLE = 'SDFTriangle'),
	(n.SDF_TUBE = 'SDFTube'),
	(n.SDF_TWIST = 'SDFTwist'),
	(n.SDF_CONTEXT = 'SDFContext'),
	(n.SDF_MATERIAL = 'SDFMaterial'),
	(n.TEXTURE = 'texture'),
	(n.TEXTURE_DISPLACEMENT = 'textureDisplacement'),
	(n.TEXTURE_SDF = 'textureSDF'),
	(n.VARYING_READ = 'varyingRead'),
	(n.VARYING_WRITE = 'varyingWrite'),
	(n.VERTEX_ANIMATION_TEXTURE = 'vertexAnimationTexture'),
	(n.VERTEX_ANIMATION_TEXTURE_INTERPOLATED = 'vertexAnimationTextureInterpolated'),
	n
))(I0 || {});
class Z5 {
	constructor(e) {
		(this.node = e),
			(this._initialized = !1),
			(this._checkParamsEditableStateBound = this._checkParamsEditableState.bind(this));
	}
	initializeNode() {
		if (this._initialized) {
			console.warn('already initialized', this.node);
			return;
		}
		(this._initialized = !0),
			this.node.io.inputs.add_on_set_input_hook(
				'_checkParamsEditableStateBound',
				this._checkParamsEditableStateBound
			);
	}
	initialized() {
		return this._initialized;
	}
	_checkParamsEditableState() {
		this._paramsMatchEditableState() || this.updateParamsEditableStateIfNeeded();
	}
	_paramsMatchEditableState() {
		let e = 0;
		const t = this.node.params,
			i = this.node.io.inputs.namedInputConnectionPoints();
		if (!i) return !1;
		for (const s of i) {
			if (s) {
				const r = this.node.io.inputs.input(e) != null,
					o = s == null ? void 0 : s.name();
				if (t.has(o)) {
					const c = t.get(o);
					if (c) {
						const l = !r,
							u = c.options.editable();
						if (l != u) return !1;
					}
				}
			}
			e++;
		}
		return !0;
	}
	updateParamsEditableStateIfNeeded() {
		let e = 0;
		const t = this.node.params,
			i = this.node.io.inputs.namedInputConnectionPoints();
		if (i)
			for (const s of i) {
				if (s) {
					const r = this.node.io.inputs.input(e) != null,
						o = s == null ? void 0 : s.name();
					if (t.has(o)) {
						const a = t.get(o);
						if (a) {
							const c = !r;
							a.options.setEditableState(c);
						}
					}
				}
				e++;
			}
	}
}
const Q5 = 'v_POLY';
class J5 extends wi {
	constructor() {
		super(...arguments), (this._paramsEditableStatesController = new Z5(this));
	}
	static context() {
		return fe.GL;
	}
	initializeBaseNode() {
		this.uiData.setLayoutHorizontal(),
			this.io.connections.initInputs(),
			this.io.connection_points.spare_params.initializeNode(),
			this._paramsEditableStatesController.initializeNode();
	}
	cook() {
		console.warn('gl node cooking');
	}
	_setMatToRecompile() {
		var e, t;
		(t = (e = this.materialNode()) == null ? void 0 : e.assemblerController()) == null ||
			t.setCompilationRequiredAndDirty(this);
	}
	materialNode() {
		const e = this.parent();
		if (e) return e.context() == fe.GL ? (e == null ? void 0 : e.materialNode()) : e;
	}
	glVarName(e) {
		const t = [this];
		let i = this;
		for (; i.parent() && i.parent() != this.materialNode(); ) {
			const r = i.parent();
			r && (t.unshift(r), (i = r));
		}
		const s = t.map((r) => r._glVarNameBase());
		return `${Q5}_${s.join('_')}_${e}`;
	}
	_glVarNameBase() {
		return this.name();
	}
	variableForInputParam(e) {
		return this.variableForInput(e.name());
	}
	variableForInput(e) {
		var t;
		const i = this.io.inputs.getInputIndex(e),
			s = this.io.connections.inputConnection(i);
		if (s) {
			const r = s.nodeSrc(),
				o = r.io.outputs.namedOutputConnectionPoints();
			if (o) {
				const a = o[s.outputIndex()];
				if (a) {
					const c = a.name();
					return r.glVarName(c);
				} else
					throw (console.warn(`no output called '${e}' for gl node ${r.path()}`), 'variable_for_input ERROR');
			}
		} else {
			if (this.params.has(e)) return e_.any((t = this.params.get(e)) == null ? void 0 : t.value);
			{
				const r = this.io.inputs.namedInputConnectionPoints();
				if (r) {
					const o = r[i];
					return e_.any(o.init_value);
				}
			}
		}
		throw 'variable_for_input ERROR';
	}
	setLines(e) {}
	reset_code() {
		var e;
		(e = this._param_configs_controller) == null || e.reset();
	}
	setParamConfigs() {}
	param_configs() {
		var e;
		return (e = this._param_configs_controller) == null ? void 0 : e.list();
	}
	paramsGenerating() {
		return !1;
	}
	paramDefaultValue(e) {
		return null;
	}
}
const Vu = [xt.FLOAT, xt.VEC2, xt.VEC3, xt.VEC4];
class eX extends nn {
	constructor() {
		super(...arguments),
			(this.name = M.STRING('attribute1')),
			(this.type = M.INTEGER(0, {menu: {entries: Vu.map((e, t) => ({name: e, value: t}))}})),
			(this.texportWhenConnected = M.BOOLEAN(0, {hidden: !0})),
			(this.exportWhenConnected = M.BOOLEAN(0, {visibleIf: {texportWhenConnected: 1}}));
	}
}
const tX = new eX(),
	kr = class extends J5 {
		constructor() {
			super(...arguments),
				(this.paramsConfig = tX),
				(this._bound_setExportWhenConnectedStatus = this._setExportWhenConnectedStatus.bind(this));
		}
		static type() {
			return I0.ATTRIBUTE;
		}
		initializeNode() {
			this.addPostDirtyHook('_setMatToRecompile', this._setMatToRecompileIfIsExporting.bind(this)),
				this.io.connection_points.initializeNode(),
				this.io.connection_points.set_expected_input_types_function(() => {
					var n, e;
					return (e = (n = this.materialNode()) == null ? void 0 : n.assemblerController()) != null &&
						e.allow_attribute_exports()
						? [Vu[this.pv.type]]
						: [];
				}),
				this.io.connection_points.set_input_name_function((n) => kr.INPUT_NAME),
				this.io.connection_points.set_expected_output_types_function(() => [Vu[this.pv.type]]),
				this.lifecycle.onAfterAdded(this._bound_setExportWhenConnectedStatus),
				this.params.addOnSceneLoadHook('prepare params', this._bound_setExportWhenConnectedStatus);
		}
		_setExportWhenConnectedStatus() {
			var n, e;
			(e = (n = this.materialNode()) == null ? void 0 : n.assemblerController()) != null &&
				e.allow_attribute_exports() &&
				this.p.texportWhenConnected.set(1);
		}
		setAttribSize(n) {
			this.p.type.set(n - 1);
		}
		inputName() {
			return kr.INPUT_NAME;
		}
		outputName() {
			return kr.OUTPUT_NAME;
		}
		varyingName() {
			return `v_POLY_attribute_${this.pv.name}`;
		}
		setLines(n) {
			n.assembler().setNodeLinesAttribute(this, n);
		}
		attributeName() {
			return this.pv.name.trim();
		}
		glType() {
			const n = this.io.outputs.namedOutputConnectionPoints();
			return n ? n[0].type() : xt.FLOAT;
		}
		setGlType(n) {
			this.p.type.set(Vu.indexOf(n));
		}
		connected_input_node() {
			return this.io.inputs.named_input(kr.INPUT_NAME);
		}
		connected_input_connection_point() {
			return this.io.inputs.named_input_connection_point(kr.INPUT_NAME);
		}
		output_connection_point() {
			return this.io.outputs.namedOutputConnectionPointsByName(this.outputName());
		}
		isImporting() {
			return this.io.outputs.used_output_names().length > 0;
		}
		isExporting() {
			return this.pv.exportWhenConnected ? this.io.inputs.named_input(kr.INPUT_NAME) != null : !1;
		}
		_setMatToRecompileIfIsExporting() {
			this.pv.exportWhenConnected && this._setMatToRecompile();
		}
	};
let Xm = kr;
Xm.INPUT_NAME = 'in';
Xm.OUTPUT_NAME = 'val';
class nX {
	constructor(e = []) {
		(this._definitions = e), (this._errored = !1);
	}
	get errored() {
		return this._errored;
	}
	get error_message() {
		return this._error_message;
	}
	uniq() {
		const e = new Map(),
			t = [];
		for (const s of this._definitions)
			if (!this._errored) {
				const r = s.name(),
					o = e.get(r);
				o
					? o.data_type != s.data_type &&
					  ((this._errored = !0),
					  (this._error_message = `attempt to create '${s.name()}' with types '${
							s.data_type
					  }' by node '${s.node.path()}', when there is already an existing with type ${
							o.data_type
					  } from node '${o.node.path()}'`),
					  console.warn('emitting error message:', this._error_message))
					: (e.set(r, s), t.push(r));
			}
		const i = [];
		for (const s of t) {
			const r = e.get(s);
			r && i.push(r);
		}
		return i;
	}
}
class D0 {
	constructor(e, t, i, s) {
		(this._definition_type = e), (this._data_type = t), (this._node = i), (this._name = s);
	}
	get definition_type() {
		return this._definition_type;
	}
	get data_type() {
		return this._data_type;
	}
	get node() {
		return this._node;
	}
	name() {
		return this._name;
	}
	collection_instance() {
		return new nX();
	}
}
class iX extends D0 {
	constructor(e, t, i) {
		super('attribute', t, e, i), (this._node = e), (this._data_type = t), (this._name = i);
	}
	get line() {
		return `attribute ${this.data_type} ${this.name()}`;
	}
}
class Zy extends D0 {
	constructor(e, t, i) {
		super('varying', t, e, i), (this._node = e), (this._data_type = t), (this._name = i);
	}
	get line() {
		return `varying ${this.data_type} ${this.name()}`;
	}
}
var ta = ((n) => (
		(n.VERTEX = 'vertex'), (n.FRAGMENT = 'fragment'), (n.LEAVES_FROM_NODES_SHADER = 'leaves_from_nodes_shader'), n
	))(ta || {}),
	t_ = ((n) => (
		(n.TIME = 'time'),
		(n.RESOLUTION = 'resolution'),
		(n.MV_POSITION = 'mvPosition'),
		(n.GL_POSITION = 'gl_Position'),
		(n.GL_FRAGCOORD = 'gl_FragCoord'),
		(n.GL_POINTCOORD = 'gl_PointCoord'),
		(n.GL_POINTSIZE = 'gl_PointSize'),
		(n.WORLD_POSITION = 'worldPosition'),
		(n.WORLD_NORMAL = 'worldNormal'),
		(n.MODEL_MATRIX = 'modelMatrix'),
		(n.MODEL_VIEW_MATRIX = 'modelViewMatrix'),
		(n.NORMAL_MATRIX = 'normalMatrix'),
		n
	))(t_ || {}),
	L0 = ((n) => ((n.GEOMETRY = 'geometry'), (n.TEXTURE = 'texture'), n))(L0 || {});
const sX = {position: 'vec3( position )'},
	fc = class extends K5 {
		type() {
			return L0.GEOMETRY;
		}
		handleGlobalsNode(n, e, t) {
			const i = n.io.outputs.namedOutputConnectionPointsByName(e);
			if (!i) return;
			const s = i.type();
			this.handleGlobalVar(n, e, s, t);
		}
		handleGlobalVar(n, e, t, i) {
			var s, r;
			const o = n.glVarName(e),
				a = new Zy(n, t, o);
			i.addDefinitions(n, [a]);
			const c =
				(r = (s = n.materialNode()) == null ? void 0 : s.assemblerController()) == null ? void 0 : r.assembler;
			if (!c) return;
			const l = c.shader_config(i.currentShaderName());
			if (!l) return;
			const u = l.dependencies(),
				h = [],
				d = `${o} = modelMatrix * vec4( position, 1.0 )`,
				p = `${o} = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal )`;
			switch (e) {
				case t_.WORLD_POSITION: {
					h.push(d);
					break;
				}
				case t_.WORLD_NORMAL: {
					h.push(p);
					break;
				}
				default:
					h.push(`${o} = ${t}(${e})`);
			}
			for (const m of u) i.addDefinitions(n, [a], m), i.addBodyLines(n, h, m);
			u.length == 0 && i.addBodyLines(n, h);
		}
		static variable_config_default(n) {
			return sX[n];
		}
		variable_config_default(n) {
			return fc.variable_config_default(n);
		}
		readAttribute(n, e, t, i) {
			return fc.readAttribute(n, e, t, i);
		}
		static readAttribute(n, e, t, i) {
			var s, r;
			fc.PRE_DEFINED_ATTRIBUTES.indexOf(t) < 0 && i.addDefinitions(n, [new iX(n, e, t)], ta.VERTEX);
			const o = i.currentShaderName();
			switch (o) {
				case ta.VERTEX:
					return t;
				case ta.FRAGMENT: {
					if (!(n instanceof Xm)) return;
					const c = n.varyingName(),
						l = new Zy(n, e, c),
						u = new Map();
					u.set(ta.FRAGMENT, []);
					const h = new Map();
					h.set(ta.FRAGMENT, []), yi(u, o, l);
					const d = `${c} = ${e}(${t})`,
						p =
							(r = (s = n.materialNode()) == null ? void 0 : s.assemblerController()) == null
								? void 0
								: r.assembler.shader_config(o);
					if (p) {
						const m = p.dependencies();
						for (const g of m) yi(u, g, l), yi(h, g, d);
						u.forEach((g, _) => {
							i.addDefinitions(n, g, _);
						}),
							h.forEach((g, _) => {
								i.addBodyLines(n, g, _);
							});
					}
					return c;
				}
			}
		}
		handle_attribute_node(n, e, t, i) {
			return fc.readAttribute(n, e, t, i);
		}
	};
let $m = fc;
$m.PRE_DEFINED_ATTRIBUTES = [
	'position',
	'color',
	'normal',
	'uv',
	'uv2',
	'morphTarget0',
	'morphTarget1',
	'morphTarget2',
	'morphTarget3',
	'skinIndex',
	'skinWeight',
];
$m.IF_RULE = {
	uv: 'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )',
};
let rX = 0;
class jc extends rn {
	constructor() {
		super(...arguments),
			(this._materialSopOperationId = rX++),
			(this._globalsHandler = new $m()),
			(this._onMaterialUpdateBound = this._onMaterialUpdate.bind(this)),
			(this._oldMatByOldNewId = new Map()),
			(this._materialByUuid = new Map());
	}
	static type() {
		return 'material';
	}
	async cook(e, t) {
		const i = e[0];
		return this._oldMatByOldNewId.clear(), await this._applyMaterials(i, t), this._swapTextures(i, t), i;
	}
	async _getMaterial(e) {
		var t, i, s, r;
		const o = e.material.nodeWithContext(fe.MAT, (t = this.states) == null ? void 0 : t.error);
		if (o) {
			this._watchMaterialNode(o);
			const a = await o.material(),
				c = o;
			return (
				c.assemblerController &&
					((i = c.assemblerController()) == null || i.setAssemblerGlobalsHandler(this._globalsHandler)),
				a ||
					(s = this.states) == null ||
					s.error.set(`material invalid. (error: '${o.states.error.message()}')`),
				a
			);
		} else (r = this.states) == null || r.error.set('no material node found');
	}
	_watchMaterialNode(e) {
		if (this._watchedMaterialNode == e) return;
		const t = this._watchHookName();
		e.addPostDirtyHook(t, this._onMaterialUpdateBound),
			e.cookController.registerOnCookEnd(t, this._onMaterialUpdateBound),
			this._watchedMaterialNode &&
				(this._watchedMaterialNode.removePostDirtyHook(t),
				this._watchedMaterialNode.cookController.deregisterOnCookEnd(t)),
			(this._watchedMaterialNode = e);
	}
	async _onMaterialUpdate() {
		if (!this._watchedMaterialNode) return;
		const t = (await this._watchedMaterialNode.compute()).material();
		t != this._watchedMaterialNodeMaterial &&
			((this._watchedMaterialNodeMaterial = t), this._node && this._node.p.material.setDirty());
	}
	_watchHookName() {
		return `MaterialSopOperationId-${this._materialSopOperationId}`;
	}
	async _applyMaterials(e, t) {
		if (!t.assignMat) return;
		const i = await this._getMaterial(t);
		if (!i) return;
		const s = as.filterThreejsObjects(e, t);
		for (let r of s) this._applyMaterial(r, i, t);
		return e;
	}
	_swapTextures(e, t) {
		if (!t.swapCurrentTex) return;
		this._materialByUuid.clear();
		const i = as.filterObjects(e, t, e.allCoreObjects());
		for (let s of i) {
			const r = s.material;
			this._materialByUuid.set(r.uuid, r);
		}
		this._materialByUuid.forEach((s, r) => {
			this._swapTexture(s, t);
		});
	}
	_applyMaterial(e, t, i) {
		const s = i.cloneMat
			? im(this.scene(), t, {shareCustomUniforms: i.shareCustomUniforms, addCustomMaterials: !0})
			: t;
		if (t instanceof ti && s instanceof ti) for (let o in t.uniforms) s.uniforms[o] = t.uniforms[o];
		if (e.isGroup) return;
		const r = e;
		this._oldMatByOldNewId.set(s.uuid, r.material), (r.material = s), xk(e, s), sm(e, s);
	}
	_swapTexture(e, t) {
		if (t.texSrc0 == '' || t.texDest0 == '') return;
		let i = this._oldMatByOldNewId.get(e.uuid);
		i = i || e;
		const s = i[t.texSrc0];
		if (s) {
			e[t.texDest0] = s;
			const r = e.uniforms;
			r && r[t.texDest0] && (r[t.texDest0] = {value: s});
		}
	}
}
jc.DEFAULT_PARAMS = {
	group: '',
	assignMat: !0,
	material: new zi(''),
	cloneMat: !1,
	shareCustomUniforms: !0,
	swapCurrentTex: !1,
	texSrc0: 'emissiveMap',
	texDest0: 'map',
};
jc.INPUT_CLONED_STATE = Ft.FROM_NODE;
const Nr = jc.DEFAULT_PARAMS;
class oX extends nn {
	constructor() {
		super(...arguments),
			(this.group = M.STRING(Nr.group, {objectMask: !0})),
			(this.assignMat = M.BOOLEAN(Nr.assignMat)),
			(this.material = M.NODE_PATH('', {
				nodeSelection: {context: fe.MAT},
				dependentOnFoundNode: !1,
				visibleIf: {assignMat: 1},
			})),
			(this.cloneMat = M.BOOLEAN(Nr.cloneMat, {visibleIf: {assignMat: 1}, separatorBefore: !0})),
			(this.shareCustomUniforms = M.BOOLEAN(Nr.shareCustomUniforms, {visibleIf: {assignMat: 1, cloneMat: 1}})),
			(this.swapCurrentTex = M.BOOLEAN(Nr.swapCurrentTex)),
			(this.texSrc0 = M.STRING(Nr.texSrc0, {visibleIf: {swapCurrentTex: 1}})),
			(this.texDest0 = M.STRING(Nr.texDest0, {visibleIf: {swapCurrentTex: 1}}));
	}
}
const aX = new oX();
class cX extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = aX);
	}
	static type() {
		return oi.MATERIAL;
	}
	initializeNode() {
		this.io.inputs.setCount(1), this.io.inputs.initInputsClonedState(jc.INPUT_CLONED_STATE);
	}
	async cook(e) {
		this._operation = this._operation || new jc(this._scene, this.states, this);
		const t = await this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
class lX extends wi {
	static context() {
		return fe.SOP;
	}
	cook() {
		this.cookController.endCook();
	}
}
class uX extends lX {}
class hX extends uX {
	constructor() {
		super(...arguments), (this._childrenControllerContext = fe.MAT);
	}
	static type() {
		return Da.MAT;
	}
	createNode(e, t) {
		return super.createNode(e, t);
	}
	children() {
		return super.children();
	}
	nodesByType(e) {
		return super.nodesByType(e);
	}
}
const U0 = class extends rn {
	static type() {
		return 'merge';
	}
	cook(n, e) {
		var t;
		let i = [];
		for (const s of n)
			if (s) {
				const r = s.allObjects();
				if (e.compact)
					for (const o of r)
						o.traverse((a) => {
							i.push(a);
						});
				else for (const o of r) i.push(o);
			}
		return (
			e.compact && (i = U0.makeCompact(i, e, (t = this.states) == null ? void 0 : t.error)),
			this.createCoreGroupFromObjects(i)
		);
	}
	static makeCompact(n, e, t) {
		const {preserveMaterials: i} = e,
			s = new Map(),
			r = new Map(),
			o = [];
		for (let c of n)
			c.traverse((l) => {
				if (l instanceof Vi) return;
				const u = c.type;
				u && (o.includes(u) || o.push(u), u && (s.get(u) || s.set(u, c.material), yi(r, u, c)));
			});
		const a = [];
		return (
			o.forEach((c) => {
				const l = s.get(c),
					u = r.get(c);
				u &&
					u.length != 0 &&
					(i
						? dX({
								objects: u,
								material: l,
								objectType: c,
								mergedObjects: a,
								onError: (h) => {
									t == null || t.set(h);
								},
						  })
						: Zt(u[0]).mergeCompact({
								objects: u,
								material: l,
								objectType: c,
								mergedObjects: a,
								onError: (d) => {
									t == null || t.set(d);
								},
						  }));
			}),
			a
		);
	}
};
let Xc = U0;
Xc.DEFAULT_PARAMS = {compact: !1, preserveMaterials: !0};
Xc.INPUT_CLONED_STATE = Ft.FROM_NODE;
const Dp = new Map();
function dX(n) {
	const {objects: e, objectType: t, mergedObjects: i, onError: s} = n,
		r = Zt(e[0]);
	Dp.clear();
	for (let o of e) Ai(Dp, o.material, o);
	Dp.forEach((o, a) => {
		r.mergeCompact({objects: Hi(o, []), material: a, objectType: t, mergedObjects: i, onError: s});
	});
}
const Qy = Xc.DEFAULT_PARAMS,
	F0 = 4;
class pX extends nn {
	constructor() {
		super(...arguments),
			(this.compact = M.BOOLEAN(Qy.compact)),
			(this.preserveMaterials = M.BOOLEAN(Qy.preserveMaterials, {visibleIf: {compact: !0}})),
			(this.inputsCount = M.INTEGER(F0, {
				range: [1, 32],
				rangeLocked: [!0, !1],
				callback: (e) => {
					B0.PARAM_CALLBACK_setInputsCount(e);
				},
			}));
	}
}
const fX = new pX();
class B0 extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = fX);
	}
	static type() {
		return oi.MERGE;
	}
	setCompactMode(e) {
		this.p.compact.set(e);
	}
	initializeNode() {
		this.io.inputs.setCount(1, F0),
			this.io.inputs.initInputsClonedState(Xc.INPUT_CLONED_STATE),
			this.params.onParamsCreated('update inputs', () => {
				this._callbackUpdateInputsCount();
			});
	}
	cook(e) {
		this._operation = this._operation || new Xc(this.scene(), this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
	_callbackUpdateInputsCount() {
		this.io.inputs.setCount(1, this.pv.inputsCount), this.emit(mn.INPUTS_UPDATED);
	}
	static PARAM_CALLBACK_setInputsCount(e) {
		e._callbackUpdateInputsCount();
	}
}
class _X {
	constructor(e) {
		(this._viewer = e), (this._size = new re(100, 100)), (this._aspect = 1);
	}
	camera() {
		return this._viewer.camera();
	}
	get size() {
		return this._size;
	}
	get aspect() {
		return this._aspect;
	}
	computeSizeAndAspect(e) {
		this._updateSize(),
			this._viewer.scene().uniformsController.updateResolution(this._size, e),
			(this._aspect = this._getAspect());
	}
	_updateSize() {
		var e, t;
		(this._size.x = ((e = this._viewer.domElement()) == null ? void 0 : e.offsetWidth) || 0),
			(this._size.y = ((t = this._viewer.domElement()) == null ? void 0 : t.offsetHeight) || 0);
	}
	_getAspect() {
		return this._size.x / this._size.y;
	}
	updateCameraAspect() {
		this._viewer.updateCameraAspect(this._aspect, this._size);
	}
	async prepareCurrentCamera() {
		await this._updateFromCameraContainer();
	}
	async _updateFromCameraContainer() {
		this.updateCameraAspect();
	}
}
const Jy = ['start', 'end'],
	mX = {type: 'start'},
	gX = {type: 'end'};
class vX extends cs {
	constructor(e) {
		super(),
			(this.viewer = e),
			(this._active = !1),
			(this._mounted = !1),
			(this._boundEventHandler = {start: () => this.dispatchEvent(mX), end: () => this.dispatchEvent(gX)});
	}
	controls() {
		return this._controls;
	}
	mount() {
		if (this._mounted) return;
		this._mounted = !0;
		const e = this.viewer.controlsNode(),
			t = this.viewer.camera();
		e &&
			t &&
			e.applyControls(t, this.viewer).then((i) => {
				(this._controls = i), (this._updateControlsFunc = i ? (s) => i.update(s) : void 0);
				for (const s of Jy) i.addEventListener(s, this._boundEventHandler[s]);
				this._mounted || this._disposeControls();
			});
	}
	unmount() {
		this._mounted && ((this._mounted = !1), this._disposeControls());
	}
	_disposeControls() {
		if (this._controls) {
			for (const e of Jy) this._controls.removeEventListener(e, this._boundEventHandler[e]);
			this._controls.dispose();
		}
		this._updateControlsFunc = void 0;
	}
	update(e) {
		this._updateControlsFunc && this._updateControlsFunc(e);
	}
	setActive(e) {
		e ? this.mount() : this.unmount();
	}
	setTarget(e) {
		if (!this._controls) return;
		const t = this._controls;
		t.target && t.target.copy(e);
	}
}
function EX(n) {
	n.setAttribute('tabindex', '0');
}
var k0 = ((n) => ((n.resize = 'resize'), n))(k0 || {});
function CX(n, e) {
	return n == ch.CANVAS ? e : document;
}
function eb(n, e) {
	return n.type == k0.resize ? window : CX(n.emitter, e);
}
const Lp = new Set();
class yX {
	constructor(e) {
		(this.viewer = e), (this._eventTypes = new Map());
	}
	removeEvents(e, t) {
		const i = t || this.canvas();
		if (!i) {
			console.warn('no canvas found');
			return;
		}
		const s = this._eventTypes.get(e.type());
		s &&
			s.forEach((r, o) => {
				r.forEach((a, c) => {
					eb({emitter: a.data.emitter, type: c}, i).removeEventListener(c, a.listener);
				}),
					r.clear();
			});
	}
	updateEvents(e) {
		const t = this.canvas();
		if (!t) {
			console.warn('no canvas found');
			return;
		}
		this.removeEvents(e, t);
		const i = e.activeEventDatas();
		for (const s of i) {
			const r = eb(s, t),
				o = this._mapForEmitter(e, r),
				a = s.type,
				c = (u, h) => {
					const d = {viewer: this.viewer, event: u, emitter: s.emitter};
					h.processEvent(d);
				},
				l = (u) => {
					c(u, e);
				};
			r.addEventListener(a, l, {passive: !0}),
				r != document && Ix.includes(s.type) && EX(r),
				o.set(s.type, {listener: l, data: s});
		}
	}
	_mapForEmitter(e, t) {
		const i = e.type();
		let s = this._eventTypes.get(i);
		s || ((s = new Map()), this._eventTypes.set(i, s));
		let r = s.get(t);
		return r || ((r = new Map()), s.set(t, r)), r;
	}
	camera() {
		return this.viewer.camera();
	}
	canvas() {
		return this.viewer.canvas();
	}
	init() {
		if (!this.canvas()) {
			console.warn('no canvas found for eventsController');
			return;
		}
		this.viewer.scene().eventsDispatcher.traverseControllers((e) => {
			this.updateEvents(e);
		});
	}
	unmount() {
		this.viewer.scene().eventsDispatcher.traverseControllers((e) => {
			this.removeEvents(e);
		});
	}
	registeredEventTypes() {
		Lp.clear(),
			this._eventTypes.forEach((t) => {
				t.forEach((i, s) => {
					i.forEach((r, o) => {
						Lp.add(o);
					});
				});
			});
		const e = [];
		return Hi(Lp, e), e;
	}
}
class bX {
	constructor(e) {
		this.viewer = e;
	}
	init() {
		const e = this.viewer.canvas();
		e &&
			((e.onwebglcontextlost = this._on_webglcontextlost.bind(this)),
			(e.onwebglcontextrestored = this._on_webglcontextrestored.bind(this)));
	}
	_on_webglcontextlost() {
		console.warn('context lost at frame', this.viewer.scene().frame()),
			this.request_animation_frame_id
				? cancelAnimationFrame(this.request_animation_frame_id)
				: console.warn('request_animation_frame_id not initialized'),
			console.warn('not canceled', this.request_animation_frame_id);
	}
	_on_webglcontextrestored() {
		console.log('context restored');
	}
}
const tb = {
	ON: `<svg xmlns="http://www.w3.org/2000/svg" class="soundOn h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
  </svg>`,
	OFF: `<svg xmlns="http://www.w3.org/2000/svg" class="soundOff h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" clip-rule="evenodd" />
	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2" />
  </svg>`,
};
class SX {
	constructor(e) {
		this._viewer = e;
	}
	update() {
		const e = this._viewer.scene().root();
		e.pv.displayAudioIcon ? (this._showIcon(), this._updateIcon(e)) : this._hideIcon();
	}
	unmount() {
		var e;
		this.__iconContainer &&
			((e = this.__iconContainer.parentElement) == null || e.removeChild(this.__iconContainer),
			(this.__iconContainer = void 0)),
			(this._onIcon = void 0),
			(this._offIcon = void 0);
	}
	_showIcon() {
		const e = this._iconContainer();
		e && (e.style.display = 'block');
	}
	_hideIcon() {
		this.__iconContainer && (this.__iconContainer.style.display = 'none');
	}
	_iconContainer() {
		const e = () => {
			const t = this._createIconContainer(),
				i = this._viewer.domElement();
			if (i) return i.append(t), t;
		};
		return (this.__iconContainer = this.__iconContainer || e());
	}
	_createIconContainer() {
		const e = document.createElement('div');
		return (
			e.addEventListener(
				'pointerdown',
				(t) => (this._toggleSound(), t.preventDefault(), t.stopPropagation(), !1)
			),
			e
		);
	}
	_setIconContainerStyle(e, t) {
		const i = t.pv.audioIconStyle;
		e.setAttribute('style', i), (e.style.color = t.pv.audioIconColor.getStyle());
	}
	offIcon() {
		function e() {
			const t = document.createElement('div');
			return (t.innerHTML = tb.OFF), t.children[0];
		}
		return (this._offIcon = this._offIcon || e());
	}
	onIcon() {
		function e() {
			const t = document.createElement('div');
			return (t.innerHTML = tb.ON), t.children[0];
		}
		return (this._onIcon = this._onIcon || e());
	}
	_toggleSound() {
		const e = this._viewer.scene().root();
		e.audioController.toggleSound(), this._updateIcon(e);
	}
	_updateIcon(e) {
		var t, i;
		const s = this._iconContainer();
		if (!s) return;
		this._setIconContainerStyle(s, e);
		const r = this.onIcon(),
			o = this.offIcon();
		this._viewer.scene().root().audioController.soundOn()
			? (s.appendChild(r), (t = o.parentElement) == null || t.removeChild(o))
			: (s.appendChild(o), (i = r.parentElement) == null || i.removeChild(r));
	}
}
class AX {
	constructor(e) {
		this.viewer = e;
		const t = this.viewer.scene();
		(this.pointerEventsController = t.eventsDispatcher.pointerEventsController),
			this.pointerEventsController.setRaycaster(e.createRaycaster());
	}
	setCursor0(e) {
		this.pointerEventsController.cursor().value.set(e.x, e.y);
	}
	raycaster0() {
		return this.pointerEventsController.raycaster().value;
	}
	updateRaycasters() {
		this.pointerEventsController
			.raycaster()
			.value.setFromCamera(this.pointerEventsController.cursor().value, this.viewer.camera());
	}
}
function nb(n) {
	return Math.round(n * 10);
}
class xX {
	constructor(e) {
		(this.viewer = e), (this._accumulatedDelta = 0), (this._framesCount = 0), (this._lastRoundedPerf = nb(1));
	}
	measurePerformance(e) {
		if (((this._accumulatedDelta += e), this._accumulatedDelta >= 1)) {
			const t = this._framesCount / AB,
				i = nb(t);
			i != this._lastRoundedPerf &&
				((this._lastRoundedPerf = i), this.viewer.scene().perfMonitor.onPerformanceChange(t)),
				(this._framesCount = 0),
				(this._accumulatedDelta = 0);
		}
		this._framesCount++;
	}
}
const ib = 'hovered',
	_c = class {
		constructor(n) {
			(this._active = !1),
				(this._doRender = !0),
				(this._mounted = !1),
				(this._controlsController = new vX(this)),
				(this.performanceMonitor = new xX(this)),
				(this._size = new re()),
				(this._onBeforeTickCallbacks = []),
				(this._onAfterTickCallbacks = []),
				(this._onBeforeRenderCallbacks = []),
				(this._onAfterRenderCallbacks = []),
				(this._id = _c._nextId()),
				(this._camera = n.camera),
				(this._scene = n.scene),
				(this._canvas = n.canvas),
				n.autoRender != null && (this._doRender = n.autoRender),
				(this.updateCameraAspect = n.updateCameraAspect),
				this.scene().viewersRegister.registerViewer(this),
				(this.raycastersController = new AX(this));
		}
		static _nextId() {
			return `${_c._nextViewerId++}`;
		}
		createRaycaster() {
			return Lx();
		}
		mount(n, e) {
			let t = !0;
			e && e.updateAutoRenderOnIntersectionChange != null && (t = e.updateAutoRenderOnIntersectionChange),
				(this._domElement = n),
				(this._domElement.viewer = this),
				(this._domElement.scene = this._scene),
				(this._domElement.Poly = le),
				t && this.updateAutoRenderOnIntersectionChange({playPauseScene: !0}),
				this.controlsController().mount(),
				(this._mounted = !0);
		}
		unmount() {
			var n, e;
			if (!this._domElement) return;
			(n = this._audioController) == null || n.unmount();
			const t = this.canvas();
			(e = t.parentElement) == null || e.removeChild(t),
				this.eventsController().unmount(),
				this.controlsController().unmount(),
				(this._mounted = !1);
		}
		static _canvasIdPrefix() {
			return 'TypedViewer';
		}
		static createCanvas(n) {
			n = n || _c._nextId();
			const e = le.canvasRegister.findOrCreateCanvas();
			return (
				(e.id = `${this._canvasIdPrefix()}_${n}`),
				(e.style.display = 'block'),
				(e.style.outline = 'none'),
				(e.style.width = '100%'),
				(e.style.height = '100%'),
				e.addEventListener('contextmenu', (t) => {
					t.preventDefault(), t.stopPropagation();
				}),
				e
			);
		}
		controlsNode() {
			return this._controlsNode;
		}
		canvas() {
			return (this._canvas = this._canvas || _c.createCanvas(this._id));
		}
		_tickAndRender(n) {
			this._tick(n), this.render(n), this._postRender(n);
		}
		_tick(n) {
			this.controlsController().update(n),
				this.raycastersController.updateRaycasters(),
				this._runOnBeforeTickCallbacks(n),
				this.scene().update(n),
				this._runOnAfterTickCallbacks(n);
		}
		render(n) {
			if (!this._doRender) return;
			const e = this._renderer;
			if (!e) {
				console.error('render: no renderer');
				return;
			}
			this._runOnBeforeRenderCallbacks(n, e),
				this._renderFunc && this._renderFunc(n),
				this._renderCSSFunc && this._renderCSSFunc(),
				this._runOnAfterRenderCallbacks(n, e);
		}
		_postRender(n) {
			this._scene.viewersRegister.markViewerAsRendered(this),
				this.scene().timeController.playing() && this.performanceMonitor.measurePerformance(n);
		}
		setRenderObjectOverride(n) {
			n ? (this._renderObjectOverride = n) : (this._renderObjectOverride = void 0);
		}
		active() {
			return this._active;
		}
		activate() {
			this._active = !0;
		}
		deactivate() {
			this._active = !1;
		}
		camerasController() {
			return (this._camerasController = this._camerasController || new _X(this));
		}
		controlsController() {
			return this._controlsController;
		}
		eventsController() {
			return (this._eventsController = this._eventsController || new yX(this));
		}
		webglController() {
			return (this._webGLController = this._webGLController || new bX(this));
		}
		audioController() {
			return (this._audioController = this._audioController || new SX(this));
		}
		domElement() {
			return this._domElement;
		}
		scene() {
			return this._scene;
		}
		camera() {
			return this._camera;
		}
		id() {
			return this._id;
		}
		size(n) {
			n.copy(this._size);
		}
		updateSize() {}
		dispose() {
			if (
				(this._scene.viewersRegister.unregisterViewer(this),
				this.controlsController().unmount(),
				!this._domElement)
			)
				return;
			let n;
			for (; (n = this._domElement.children[0]); ) this._domElement.removeChild(n);
		}
		resetContainerClass() {
			var n;
			(n = this.domElement()) == null || n.classList.remove(ib);
		}
		setContainerClassHovered() {
			var n;
			(n = this.domElement()) == null || n.classList.add(ib);
		}
		markAsReady() {}
		setAutoRender(n = !0) {
			this._doRender = n;
		}
		autoRenderState() {
			return this._doRender;
		}
		updateAutoRenderOnIntersectionChange(n) {
			if (!this._domElement) {
				console.warn('cannot apply');
				return;
			}
			let {threshold: e, root: t, rootMargin: i, playPauseScene: s, onChange: r} = n;
			e == null && (e = 0.01);
			const o = {root: t, rootMargin: i, threshold: e},
				a = (c, l) => {
					this._scene.loadingController.loaded() &&
						c.forEach((u) => {
							const h = u.isIntersecting;
							this.setAutoRender(h), s && (h ? this._scene.play() : this._scene.pause()), r && r(h);
						});
				};
			this.disableUpdateAutoRenderOnIntersectionChange(),
				(this._observer = new IntersectionObserver(a, o)),
				this._observer.observe(this._domElement);
		}
		disableUpdateAutoRenderOnIntersectionChange() {
			this._domElement && this._observer && this._observer.unobserve(this._domElement);
		}
		registerOnResizeCallback(n) {
			(this._onResizeCallbacks = this._onResizeCallbacks || []), this._onResizeCallbacks.push(n);
		}
		unregisterOnResizeCallback(n) {
			if (!this._onResizeCallbacks) return;
			const e = this._onResizeCallbacks.indexOf(n);
			e >= 0 && this._onResizeCallbacks.splice(e, 1),
				this._onResizeCallbacks.length == 0 && (this._onResizeCallbacks = void 0);
		}
		_runOnResizeCallbacks() {
			const n = this.canvas();
			if ((n && Gf.resetCacheForCanvas(n), !!this._onResizeCallbacks))
				for (const e of this._onResizeCallbacks) e(this._size.x, this._size.y);
		}
		registerOnBeforeTick(n, e, t = {}) {
			this._registerCallback(n, e, this.registeredBeforeTickCallbacks(), t);
		}
		unRegisterOnBeforeTick(n) {
			this._unregisterCallback(n, this._onBeforeTickCallbacksMap);
		}
		registeredBeforeTickCallbacks() {
			return (this._onBeforeTickCallbacksMap = this._onBeforeTickCallbacksMap || new Map());
		}
		registerOnAfterTick(n, e, t = {}) {
			this._registerCallback(n, e, this.registeredAfterTickCallbacks(), t);
		}
		unRegisterOnAfterTick(n) {
			this._unregisterCallback(n, this._onAfterTickCallbacksMap);
		}
		registeredAfterTickCallbacks() {
			return (this._onAfterTickCallbacksMap = this._onAfterTickCallbacksMap || new Map());
		}
		registerOnBeforeRender(n, e, t = {}) {
			this._registerCallback(n, e, this.registeredBeforeRenderCallbacks(), t);
		}
		unRegisterOnBeforeRender(n) {
			this._unregisterCallback(n, this._onBeforeRenderCallbacksMap);
		}
		registeredBeforeRenderCallbacks() {
			return (this._onBeforeRenderCallbacksMap = this._onBeforeRenderCallbacksMap || new Map());
		}
		registerOnAfterRender(n, e, t = {}) {
			this._registerCallback(n, e, this.registeredAfterRenderCallbacks(), t);
		}
		unRegisterOnAfterRender(n) {
			this._unregisterCallback(n, this._onAfterRenderCallbacksMap);
		}
		registeredAfterRenderCallbacks() {
			return (this._onAfterRenderCallbacksMap = this._onAfterRenderCallbacksMap || new Map());
		}
		_registerCallback(n, e, t, i = {}) {
			if (t.has(n)) {
				console.warn(`callback ${n} already registered`);
				return;
			}
			t.set(n, {callback: e, options: i}), this._updateCallbacks();
		}
		_unregisterCallback(n, e) {
			if (!e) return;
			const t = e.get(n);
			!t || t.options.persistent == !0 || (e.delete(n), this._updateCallbacks());
		}
		_updateCallbacks() {
			var n, e, t, i;
			(this._onBeforeTickCallbacks = []),
				(n = this._onBeforeTickCallbacksMap) == null ||
					n.forEach((s) => {
						this._onBeforeTickCallbacks.push(s.callback);
					}),
				(this._onAfterTickCallbacks = []),
				(e = this._onAfterTickCallbacksMap) == null ||
					e.forEach((s) => {
						this._onAfterTickCallbacks.push(s.callback);
					}),
				(this._onBeforeRenderCallbacks = []),
				(t = this._onBeforeRenderCallbacksMap) == null ||
					t.forEach((s) => {
						this._onBeforeRenderCallbacks.push(s.callback);
					}),
				(this._onAfterRenderCallbacks = []),
				(i = this._onAfterRenderCallbacksMap) == null ||
					i.forEach((s) => {
						this._onAfterRenderCallbacks.push(s.callback);
					});
		}
		_runTickCallbacks(n, e) {
			for (const t of n) t(e);
		}
		_runRenderCallbacks(n, e, t) {
			for (const i of n) i(e, t);
		}
		_runOnBeforeTickCallbacks(n) {
			this._runTickCallbacks(this._onBeforeTickCallbacks, n);
		}
		_runOnAfterTickCallbacks(n) {
			this._runTickCallbacks(this._onAfterTickCallbacks, n);
		}
		_runOnBeforeRenderCallbacks(n, e) {
			this._runRenderCallbacks(this._onBeforeRenderCallbacks, n, e);
		}
		_runOnAfterRenderCallbacks(n, e) {
			this._runRenderCallbacks(this._onAfterRenderCallbacks, n, e);
		}
	};
let V0 = _c;
V0._nextViewerId = 0;
class MX extends wi {
	constructor() {
		super(...arguments), (this.flags = new Jh(this));
	}
	static context() {
		return fe.ROP;
	}
	initializeBaseNode() {
		this.dirtyController.addPostDirtyHook('cook_immediately', () => {
			this.cookController.cookMainWithoutInputs();
		});
	}
	cook() {
		this.cookController.endCook();
	}
}
var Aa = ((n) => (
	(n.CSS2D = 'CSS2DRenderer'),
	(n.CSS3D = 'CSS3DRenderer'),
	(n.WEBGL = 'WebGLRenderer'),
	(n.WEBGPU = 'WebGPURenderer'),
	(n.PATH_TRACING = 'pathTracingRenderer'),
	n
))(Aa || {});
function G0() {
	return 2;
}
const TX = [en, $n, io, yr],
	z0 = en;
var sr = ((n) => (
	(n[(n.No = Ci)] = 'No'),
	(n[(n.Linear = vb)] = 'Linear'),
	(n[(n.Reinhard = Eb)] = 'Reinhard'),
	(n[(n.Cineon = Cb)] = 'Cineon'),
	(n[(n.ACESFilmic = yb)] = 'ACESFilmic'),
	n
))(sr || {});
const RX = ['No', 'Linear', 'Reinhard', 'Cineon', 'ACESFilmic'],
	H0 = [sr.No, sr.Linear, sr.Reinhard, sr.Cineon, sr.ACESFilmic],
	W0 = sr.ACESFilmic,
	wX = RX.map((n, e) => ({name: n, value: H0[e]})),
	j0 = [];
for (const n of H0) n != sr.No && j0.push(n);
var ha = ((n) => (
	(n[(n.Basic = cM)] = 'Basic'),
	(n[(n.PCF = r_)] = 'PCF'),
	(n[(n.PCFSoft = gb)] = 'PCFSoft'),
	(n[(n.VSM = Ki)] = 'VSM'),
	n
))(ha || {});
const OX = ['Basic', 'PCF', 'PCFSoft', 'VSM'],
	PX = [ha.Basic, ha.PCF, ha.PCFSoft, ha.VSM],
	X0 = ha.PCFSoft;
class NX extends nn {
	constructor() {
		super(...arguments),
			(this.common = M.FOLDER()),
			(this.toneMapping = M.INTEGER(W0, {
				menu: {entries: wX},
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateToneMapping(e);
				},
			})),
			(this.toneMappingExposure = M.FLOAT(1, {
				range: [0, 2],
				cook: !1,
				visibleIf: j0.map((e) => ({toneMapping: e})),
				callback: (e) => {
					qi.PARAM_CALLBACK_updateToneMappingExposure(e);
				},
			})),
			(this.outputColorSpace = M.STRING(z0, {
				menuString: {entries: TX.map((e) => ({name: $x[e], value: e}))},
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateOutputColorSpace(e);
				},
			})),
			(this.sortObjects = M.BOOLEAN(1, {
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateSortObjects(e);
				},
			})),
			(this.tpixelRatio = M.BOOLEAN(0, {
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updatePixelRatio(e);
				},
			})),
			(this.pixelRatio = M.FLOAT(2, {
				visibleIf: {tpixelRatio: !0},
				range: [0.1, 4],
				rangeLocked: [!0, !1],
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updatePixelRatio(e);
				},
			})),
			(this.shadow = M.FOLDER()),
			(this.tshadowMap = M.BOOLEAN(1, {
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateShadow(e);
				},
			})),
			(this.shadowMapAutoUpdate = M.BOOLEAN(1, {
				visibleIf: {tshadowMap: 1},
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateShadow(e);
				},
			})),
			(this.shadowMapNeedsUpdate = M.BOOLEAN(0, {
				visibleIf: {tshadowMap: 1},
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateShadow(e);
				},
			})),
			(this.shadowMapType = M.INTEGER(X0, {
				visibleIf: {tshadowMap: 1},
				menu: {entries: OX.map((e, t) => ({name: e, value: PX[t]}))},
				cook: !1,
				callback: (e) => {
					qi.PARAM_CALLBACK_updateShadow(e);
				},
			})),
			(this.advanced = M.FOLDER()),
			(this.alpha = M.BOOLEAN(1)),
			(this.antialias = M.BOOLEAN(1)),
			(this.premultipliedAlpha = M.BOOLEAN(1)),
			(this.stencil = M.BOOLEAN(1)),
			(this.depth = M.BOOLEAN(1)),
			(this.localClippingEnabled = M.BOOLEAN(0)),
			(this.logarithmicDepthBuffer = M.BOOLEAN(0)),
			(this.preserveDrawingBuffer = M.BOOLEAN(0)),
			(this.tprecision = M.BOOLEAN(0)),
			(this.precision = M.INTEGER(rf.indexOf(cS.HIGH), {
				visibleIf: {tprecision: 1},
				menu: {entries: rf.map((e, t) => ({value: t, name: e}))},
			})),
			(this.tpowerPreference = M.BOOLEAN(0)),
			(this.powerPreference = M.INTEGER(sf.indexOf(aS.HIGH), {
				visibleIf: {tpowerPreference: 1},
				menu: {entries: sf.map((e, t) => ({value: t, name: e}))},
			}));
	}
}
const IX = new NX();
class qi extends MX {
	constructor() {
		super(...arguments), (this.paramsConfig = IX), (this._rendererByCanvas = new Map());
	}
	static type() {
		return Aa.WEBGL;
	}
	createRenderer(e, t) {
		const i = {},
			s = Object.keys(of);
		let r;
		for (r of s) i[r] = of[r];
		if (this.pv.tprecision) {
			const a = rf[this.pv.precision];
			i.precision = a;
		}
		if (this.pv.tpowerPreference) {
			const a = sf[this.pv.powerPreference];
			i.powerPreference = a;
		}
		(i.antialias = this.pv.antialias),
			(i.alpha = this.pv.alpha),
			(i.premultipliedAlpha = this.pv.premultipliedAlpha),
			(i.depth = this.pv.depth),
			(i.stencil = this.pv.stencil),
			(i.logarithmicDepthBuffer = this.pv.logarithmicDepthBuffer),
			(i.canvas = e),
			(i.context = t),
			(i.preserveDrawingBuffer = this.pv.preserveDrawingBuffer);
		const o = le.renderersController.createWebGLRenderer(i);
		return (
			(o.localClippingEnabled = this.pv.localClippingEnabled),
			this._rendererByCanvas.set(e, o),
			le.renderersController.printDebug() &&
				(le.renderersController.printDebugMessage(`create renderer from node '${this.path()}'`),
				le.renderersController.printDebugMessage({params: i})),
			this._updateRenderer(o),
			o
		);
	}
	cook() {
		this._traverseSceneAndUpdateMaterials(), this.cookController.endCook();
	}
	_updateRenderer(e) {
		this._updateRendererOutputColorSpace(e),
			this._updateRendererToneMapping(e),
			this._updateRendererToneMappingExposure(e),
			this._updateRendererShadow(e),
			this._updateRendererSortObjects(e),
			this._updateRendererPixelRatio(e);
	}
	_traverseSceneAndUpdateMaterials() {
		this.scene()
			.threejsScene()
			.traverse((e) => {
				const t = e.material;
				if (t)
					if (ft(t)) for (const i of t) i.needsUpdate = !0;
					else t.needsUpdate = !0;
			});
	}
	static PARAM_CALLBACK_updateToneMapping(e) {
		e._rendererByCanvas.forEach((t, i) => {
			e._updateRendererToneMapping(t);
		});
	}
	static PARAM_CALLBACK_updateToneMappingExposure(e) {
		e._rendererByCanvas.forEach((t, i) => {
			e._updateRendererToneMappingExposure(t);
		});
	}
	static PARAM_CALLBACK_updateOutputColorSpace(e) {
		e._rendererByCanvas.forEach((t, i) => {
			e._updateRendererOutputColorSpace(t);
		});
	}
	static PARAM_CALLBACK_updateShadow(e) {
		e._rendererByCanvas.forEach((t, i) => {
			e._updateRendererShadow(t);
		});
	}
	static PARAM_CALLBACK_updateSortObjects(e) {
		e._rendererByCanvas.forEach((t, i) => {
			e._updateRendererSortObjects(t);
		});
	}
	static PARAM_CALLBACK_updatePixelRatio(e) {
		e._rendererByCanvas.forEach((t, i) => {
			e._updateRendererPixelRatio(t);
		}),
			window.dispatchEvent(new Event('resize'));
	}
	_updateRendererToneMapping(e) {
		e.toneMapping = this.pv.toneMapping;
	}
	_updateRendererToneMappingExposure(e) {
		e.toneMappingExposure = this.pv.toneMappingExposure;
	}
	_updateRendererOutputColorSpace(e) {
		const t = this.pv.outputColorSpace;
		t != e.outputColorSpace && (e.outputColorSpace = t);
	}
	_updateRendererShadow(e) {
		(e.shadowMap.enabled = this.pv.tshadowMap),
			(e.shadowMap.autoUpdate = this.pv.shadowMapAutoUpdate),
			(e.shadowMap.needsUpdate = this.pv.shadowMapNeedsUpdate),
			(e.shadowMap.type = this.pv.shadowMapType);
	}
	_updateRendererSortObjects(e) {
		e.sortObjects = this.pv.sortObjects;
	}
	_updateRendererPixelRatio(e) {
		const t = this.pv.tpixelRatio ? this.pv.pixelRatio : G0();
		le.renderersController.printDebug() &&
			(le.renderersController.printDebugMessage(`set renderer pixelRatio from '${this.path()}'`),
			le.renderersController.printDebugMessage({pixelRatio: t})),
			e.setPixelRatio(t);
	}
	setToneMapping(e) {
		this.p.toneMapping.set(e);
	}
}
const DX = !1,
	sb = 1,
	$0 = class {
		static renderer(n) {
			return this._renderersByCanvas.get(n);
		}
		static rendererNode(n) {
			const {scene: e, camera: t} = n,
				i = Zt(t).attribValue(t, Ze.RENDERER_NODE_ID);
			if (i && je(i)) return e.graph.nodeFromId(i);
		}
		static rendererConfig(n) {
			const {canvas: e, scene: t} = n,
				i = le.renderersController.getRenderingContext(e);
			if (!i) {
				console.error('failed to create webgl context');
				return;
			}
			let s, r;
			const o = this.rendererNode(n);
			if (o != null && o instanceof wi && o.context() == fe.ROP)
				switch (o.type()) {
					case Aa.WEBGL: {
						(s = o.createRenderer(e, i)), (r = o);
						break;
					}
					case Aa.PATH_TRACING: {
						(s = o.renderer(e, i)), (r = o);
						break;
					}
				}
			return (
				s ||
					((s = this._defaultRendererByContext.get(i)),
					s || ((s = $0.createDefaultRenderer(e, i)), this._defaultRendererByContext.set(i, s))),
				t.renderersRegister.registerRenderer(s),
				this._renderersByCanvas.set(e, s),
				s ? {renderer: s, rendererNode: r} : void 0
			);
		}
		static setRendererSize(n, e) {
			const t = this.renderer(n);
			t && t.setSize(sb * e.x, sb * e.y, DX);
		}
		static createDefaultRenderer(n, e) {
			const t = le.renderersController.defaultWebGLRendererForCanvas(n),
				i = G0();
			return (
				t.setPixelRatio(i),
				(t.shadowMap.enabled = !0),
				(t.shadowMap.type = X0),
				(t.toneMapping = W0),
				(t.toneMappingExposure = 1),
				(t.outputColorSpace = z0),
				le.renderersController.printDebug() &&
					le.renderersController.printDebugMessage('create default renderer'),
				t
			);
		}
	};
let vh = $0;
vh._defaultRendererByContext = new Map();
vh._renderersByCanvas = new Map();
class LX {
	static isPostProcessNetworkNode(e) {
		return e.type() == Da.POST || (e.context() == fe.SOP && e.type() == co.POST_PROCESS);
	}
	static createComposer(e) {
		const {renderer: t, scene: i, renderScene: s, camera: r, viewer: o} = e;
		let a;
		const c = Zt(r).attribValue(r, Ze.POST_PROCESS_NODE_ID);
		if (c && je(c)) {
			const l = i.graph.nodeFromId(c);
			l && l instanceof wi && this.isPostProcessNetworkNode(l) && (a = l);
		}
		if (a && t instanceof ss)
			return a.effectsComposerController.createEffectsComposerAndBuildPasses({
				renderer: t,
				scene: s,
				camera: r,
				viewer: o,
			});
	}
}
class UX {
	static isCSSRendererNode(e) {
		return e.type() == Aa.CSS2D || e.type() == Aa.CSS3D;
	}
	static cssRendererConfig(e) {
		const {canvas: t, scene: i, camera: s} = e,
			r = Zt(s).attribValue(s, Ze.CSS_RENDERER_NODE_ID);
		if (r == null || !je(r)) return;
		const o = i.graph.nodeFromId(r);
		if (!o || !this.isCSSRendererNode(o)) return;
		const a = o;
		return a.compute(), {cssRenderer: a.renderer(t), cssRendererNode: a};
	}
}
class FX {
	constructor(e) {
		this.options = e;
	}
	createViewerElement(e) {
		const {viewerId: t, html: i} = this.options,
			{domElement: s, canvas: r, CSSClass: o} = e,
			c = document.createElement('div');
		(c.style.height = '100%'), (c.innerHTML = i), s == null || s.appendChild(c), c.classList.add(o);
		const l = c.querySelector(`#${t}`);
		if (!l) {
			console.error(`failed to find element with id ${t}`);
			return;
		}
		l.appendChild(r);
		function u(h) {
			const d = h.querySelectorAll('script');
			Array.from(d).forEach((p) => {
				var m;
				const g = document.createElement('script');
				Array.from(p.attributes).forEach((_) => {
					g.setAttribute(_.name, _.value);
				}),
					(g.text = p.text),
					(m = p.parentNode) == null || m.replaceChild(g, p);
			});
		}
		return u(c), l;
	}
}
class BX {
	static viewerCodeConfig(e) {
		const {camera: t} = e,
			i = Zt(t),
			s = i.attribValue(t, Ze.VIEWER_ID),
			r = i.attribValue(t, Ze.VIEWER_HTML);
		if (!(s == null || r == null)) return new FX({viewerId: s, html: r});
	}
}
class kX {
	static controlsNode(e) {
		const {scene: t, camera: i} = e;
		let s;
		const r = Zt(i).attribValue(i, Ze.CONTROLS_NODE_ID);
		if (r && je(r)) {
			const o = t.graph.nodeFromId(r);
			o && o.applyControls && (s = o);
		}
		return s;
	}
}
class VX {
	static isRenderSceneNode(e) {
		return e.type() == Hm.SCENE;
	}
	static renderScene(e) {
		const {scene: t, camera: i} = e;
		let s;
		const r = Zt(i).attribValue(i, Ze.RENDER_SCENE_NODE_ID);
		if (r && je(r)) {
			const o = t.graph.nodeFromId(r);
			if (o && o instanceof wi && this.isRenderSceneNode(o)) return (s = o), s.object;
		}
	}
}
const GX = ['connected', 'disconnected', 'select', 'selectstart', 'selectend'];
function zX() {
	const n = new Map();
	let e = 0;
	for (const t of GX) n.set(t, e), e++;
	return n;
}
zX();
const HX = ['viewer', 'local', 'local-floor', 'bounded-floor', 'unbounded'],
	WX = ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'],
	jX = ['hit-test', 'light-estimation'];
function rb(n, e, t) {
	const i = [],
		s = Zt(n).attribValue(n, e),
		r = s == null ? void 0 : s.split(' ');
	if (r) for (const o of r) t.includes(o) && i.push(o);
	return i;
}
function ob(n, e, t) {
	const i = rb(n, t.optional, e);
	return {requiredFeatures: rb(n, t.required, e), optionalFeatures: i};
}
function ab(n, e) {
	const t = Zt(n);
	let i = t.attribValue(n, e.override),
		s = t.attribValue(n, e.type);
	return (s && HX.includes(s)) || ((i = !1), (s = void 0)), {overrideReferenceSpaceType: i, referenceSpaceType: s};
}
class XX {
	static process(e) {
		const {camera: t, scene: i, renderer: s, canvas: r} = e,
			o = [],
			a = [],
			c = [],
			l = () => {
				for (const m of a) m();
			},
			u = () => {
				for (const m of c) m();
			},
			h = Zt(t);
		if (h.attribValue(t, Ze.WEBXR_AR) == !0) {
			const m = i.webXR.ARControllerCreateFunction();
			if (m) {
				const {overrideReferenceSpaceType: g, referenceSpaceType: _} = ab(t, {
						type: Ze.WEBXR_AR_OVERRIDE_REFERENCE_SPACE_TYPE,
						override: Ze.WEBXR_AR_REFERENCE_SPACE_TYPE,
					}),
					{requiredFeatures: f, optionalFeatures: y} = ob(t, jX, {
						optional: Ze.WEBXR_AR_FEATURES_OPTIONAL,
						required: Ze.WEBXR_AR_FEATURES_REQUIRED,
					}),
					v = m(s, t, r, {
						overrideReferenceSpaceType: g || !1,
						referenceSpaceType: _,
						requiredFeatures: f,
						optionalFeatures: y,
					});
				o.push(v);
			}
		}
		if (h.attribValue(t, Ze.WEBXR_VR) == !0) {
			const m = i.webXR.VRControllerCreateFunction();
			if (m) {
				const {overrideReferenceSpaceType: g, referenceSpaceType: _} = ab(t, {
						type: Ze.WEBXR_VR_OVERRIDE_REFERENCE_SPACE_TYPE,
						override: Ze.WEBXR_VR_REFERENCE_SPACE_TYPE,
					}),
					{requiredFeatures: f, optionalFeatures: y} = ob(t, WX, {
						optional: Ze.WEBXR_VR_FEATURES_OPTIONAL,
						required: Ze.WEBXR_VR_FEATURES_REQUIRED,
					}),
					v = m(s, t, r, {
						overrideReferenceSpaceType: g || !1,
						referenceSpaceType: _,
						requiredFeatures: f,
						optionalFeatures: y,
					});
				o.push(v);
			}
		}
		for (const m of o) a.push(() => m.mount()), c.push(() => m.unmount());
		return {mountFunction: l, unmountFunction: u};
	}
}
var Eh = ((n) => ((n.WEBCAM = 'webcam'), (n.IMAGE = 'image'), (n.VIDEO = 'video'), n))(Eh || {});
const qm = ['webcam', 'image', 'video'];
var q0 = ((n) => ((n.CAMERA = 'camera'), (n.MARKER = 'marker'), n))(q0 || {});
const Ym = ['camera', 'marker'],
	Y0 = class extends rn {
		static type() {
			return co.WEBXR_AR_MARKER_TRACKING;
		}
		cook(n, e) {
			var t;
			const i = n[0],
				s = as.filterObjects(i, {group: e.group});
			return (
				le.thirdParty.markerTracking().hasController()
					? this._node && Y0.updateObject({scene: this._node.scene(), objects: s, params: e, active: !0})
					: (t = this._node) == null ||
					  t.states.error.set(
							'This node requires the plugin-marker-tracking. See [https://github.com/polygonjs/plugin-marker-tracking](https://github.com/polygonjs/plugin-marker-tracking)'
					  ),
				i
			);
		}
		static updateObject(n) {
			const {objects: e, params: t, active: i} = n;
			for (let s of e) {
				Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING, i);
				const r = qm[t.sourceMode];
				Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_SOURCE_MODE, r),
					Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_SOURCE_URL, t.sourceUrl);
				const o = Ym[t.transformMode];
				Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_TRANSFORM_MODE, o),
					Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_SMOOTH, t.smooth),
					Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_SMOOTH_COUNT, t.smoothCount),
					Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_BAR_CODE_TYPE, t.barCodeType),
					Jt.addAttribute(s, Ze.WEBXR_AR_MARKER_TRACKING_BAR_CODE_VALUE, t.barCodeValue);
			}
		}
	};
let Km = Y0;
Km.DEFAULT_PARAMS = {
	group: '',
	sourceMode: qm.indexOf(Eh.WEBCAM),
	sourceUrl: '',
	transformMode: Ym.indexOf(q0.CAMERA),
	smooth: !0,
	smoothCount: 5,
	barCodeType: le.thirdParty.markerTracking().barCodeTypes()[0] || '',
	barCodeValue: 0,
};
Km.INPUT_CLONED_STATE = Ft.FROM_NODE;
Km.DEFAULT_PARAMS;
class $X {
	static process(e) {
		const {canvas: t, scene: i, camera: s, onError: r} = e,
			o = Zt(s);
		if (!o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING)) return;
		const c = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_SOURCE_MODE),
			l = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_SOURCE_URL),
			u = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_BAR_CODE_TYPE),
			h = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_BAR_CODE_VALUE),
			d = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_TRANSFORM_MODE);
		if (
			c == null ||
			u == null ||
			h == null ||
			d == null ||
			!qm.includes(c) ||
			([Eh.IMAGE, Eh.VIDEO].includes(c) && l == null) ||
			!qe(u) ||
			!qe(d) ||
			!le.thirdParty.markerTracking().barCodeTypes().includes(u) ||
			!Ym.includes(d) ||
			!je(h)
		)
			return;
		const p = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_SMOOTH) || !1,
			m = o.attribValue(s, Ze.WEBXR_AR_MARKER_TRACKING_SMOOTH_COUNT) || 0;
		try {
			const g = le.thirdParty.markerTracking().createController({
					sourceMode: c,
					sourceUrl: l,
					canvas: t,
					camera: s,
					scene: i.threejsScene(),
					transformMode: d,
					barCode: {type: u, value: h},
					smooth: {active: p, count: m},
				}),
				_ = g == null ? void 0 : g.errorMessage();
			return (
				_
					? r(_)
					: g ||
					  r(
							'failed to create the MarkerTracking controller. Make sure you have loaded the plugin. See: `https://polygonjs.com/markerTracking`'
					  ),
				g == null ? void 0 : g.config()
			);
		} catch {
			r('There was an unknown error while using the MarkerTracking plugin');
		}
	}
}
const K0 = class extends rn {
	static type() {
		return co.FPS;
	}
	cook(n, e) {
		const t = n[0],
			i = as.filterObjects(t, {group: e.group});
		return this._node && K0.updateObject({objects: i, params: e}), t;
	}
	static updateObject(n) {
		const {objects: e, params: t} = n;
		for (let i of e)
			Jt.addAttribute(i, Ze.MAX_FPS, t.maxFPS),
				Jt.addAttribute(i, Ze.MAX_FPS_DYNAMIC_CHANGE, t.allowDynamicChange);
	}
};
let Zm = K0;
Zm.DEFAULT_PARAMS = {group: '', maxFPS: 60, allowDynamicChange: !1};
Zm.INPUT_CLONED_STATE = Ft.FROM_NODE;
Zm.DEFAULT_PARAMS;
const Up = (n) => 1 / n,
	qX = 0.1;
function YX(n, e) {
	const t = e.minDelta();
	if (n > t) return !0;
	const i = t - n;
	return !(i > 0 && i / t > qX);
}
class KX {
	static viewerFPSConfig(e) {
		const {camera: t} = e,
			i = () => Zt(t).attribValue(t, Ze.MAX_FPS),
			s = i();
		if (s == null) return;
		const r = Up(s);
		if (Zt(t).attribValue(t, Ze.MAX_FPS_DYNAMIC_CHANGE) || !1) {
			const a = Up(60);
			return {
				minDelta: () => {
					const l = i();
					return l == null ? a : Up(l);
				},
			};
		} else return {minDelta: () => r};
	}
}
const cb = 'CoreThreejsViewer';
class ZX extends V0 {
	constructor(e) {
		super(e),
			(this._animateWebBound = this._animateWeb.bind(this)),
			(this._accumulatedDelta = 0),
			(this._onResizeBound = this.onResize.bind(this)),
			this._setupFunctions(e);
	}
	static _canvasIdPrefix() {
		return 'ThreejsViewer';
	}
	rendererConfig() {
		return this._rendererConfig;
	}
	_setupFunctions(e) {
		var t;
		const i = this.camera(),
			s = this.scene(),
			r = this.canvas(),
			o = s.threejsScene();
		(this._errorMessage = void 0),
			(this._renderer = e.renderer),
			this._renderer ||
				((this._rendererConfig = vh.rendererConfig({camera: i, scene: s, canvas: r})),
				this._rendererConfig && (this._renderer = this._rendererConfig.renderer));
		const a = this._renderer;
		if ((a || console.error('no renderer'), a)) {
			const l = VX.renderScene({camera: i, scene: s}) || o;
			this._effectComposer = LX.createComposer({camera: i, scene: s, renderScene: l, renderer: a, viewer: this});
			const u = this._effectComposer;
			a instanceof ss &&
				((this._webXRConfig = XX.process({camera: i, scene: s, renderer: a, canvas: this.canvas()})),
				(this._markerTrackingConfig = $X.process({
					canvas: r,
					camera: i,
					scene: s,
					onError: (d) => {
						this._errorMessage = d;
					},
				}))),
				(this._codeConfig = BX.viewerCodeConfig({camera: i})),
				(this._cssRendererConfig = UX.cssRendererConfig({scene: s, camera: i, canvas: r}));
			const h = (t = this._cssRendererConfig) == null ? void 0 : t.cssRenderer;
			return (
				(this._renderCSSFunc = h ? () => h.render(l, i) : void 0),
				(this._controlsNode = kX.controlsNode({camera: i, scene: s})),
				(this._FPSConfig = KX.viewerFPSConfig({camera: i})),
				u ? (this._renderFunc = (d) => u.render(d)) : (this._renderFunc = () => a.render(l, i)),
				{renderer: a, renderScene: l, camera: i}
			);
		}
	}
	mount(e, t) {
		var i, s, r;
		super.mount(e, t);
		const o = this.canvas(),
			a = (d) => {
				if (this._domElement)
					return d.createViewerElement({domElement: this._domElement, canvas: o, CSSClass: cb});
			},
			c = () => {
				var d, p;
				return (
					(d = this._domElement) == null || d.appendChild(o),
					(p = this._domElement) == null || p.classList.add(cb),
					this._domElement
				);
			},
			l = this._codeConfig ? a(this._codeConfig) : c(),
			u = (i = this._cssRendererConfig) == null ? void 0 : i.cssRendererNode;
		u && u.mountRenderer(o),
			(s = this._webXRConfig) == null || s.mountFunction(),
			(r = this._markerTrackingConfig) == null || r.mountFunction(),
			this._build(),
			this._setEvents();
		const h = o.parentElement;
		if ((h && this._createResizeObserver(h), this.onResize(), this._errorMessage)) {
			const d = document.createElement('div');
			(d.style.position = 'absolute'),
				(d.style.top = '0px'),
				(d.style.width = '100%'),
				(d.style.color = 'red'),
				(d.style.backgroundColor = 'white'),
				(d.style.padding = '20px'),
				(d.style.textAlign = 'center'),
				(d.style.opacity = '90%'),
				(d.innerText = this._errorMessage),
				l == null || l.append(d);
		}
	}
	_build() {
		this._initDisplay(), this.activate();
	}
	dispose() {
		var e, t, i;
		const s = this.canvas(),
			r = (e = this._cssRendererConfig) == null ? void 0 : e.cssRendererNode;
		r && r.unmountRenderer(s),
			(this._cssRendererConfig = void 0),
			(t = this._webXRConfig) == null || t.unmountFunction(),
			(i = this._markerTrackingConfig) == null || i.unmountFunction(),
			(this._effectComposer = void 0),
			this.setAutoRender(!1),
			this._cancelAnimate(),
			this._unlistenToWindowResize(),
			this._disposeResizeObserver(),
			super.dispose();
	}
	_setEvents() {
		this.eventsController().init(),
			this.webglController().init(),
			this._unlistenToWindowResize(),
			this._listenToWindowResize();
	}
	_initDisplay() {
		if (!this._canvas) {
			console.warn('no canvas found for viewer');
			return;
		}
		if (!this._renderer) return;
		const e = this._renderer.getPixelRatio();
		this.camerasController().computeSizeAndAspect(e), this.audioController().update(), this._startAnimate();
	}
	setAutoRender(e = !0, t) {
		super.setAutoRender(e),
			this._doRender && this._requestAnimationFrameId == null && this._startAnimate(),
			this._doRender || (t && t.cancelAnimate == !0 && this._cancelAnimate());
	}
	isXR() {
		return this._renderer ? this._renderer instanceof ss && this._renderer.xr.enabled : !1;
	}
	_startAnimate() {
		if (this.isXR()) {
			const e = this._renderer;
			if (!e) return;
			const t = this.scene().webXR,
				i = (s, r) => {
					var o;
					(o = t.activeXRController()) == null || o.process(r), this._animateWebXR();
				};
			e.setAnimationLoop(i);
		} else this._animateWeb();
	}
	_cancelAnimate() {
		var e;
		this.isXR() ? (e = this._renderer) == null || e.setAnimationLoop(null) : this._cancelAnimateCommon();
	}
	_animateWeb() {
		(this._requestAnimationFrameId = requestAnimationFrame(this._animateWebBound)), this.__animateCommon__();
	}
	_animateWebXR() {
		this.__animateCommon__();
	}
	__animateCommon__() {
		const e = this._scene.timeController.updateClockDelta();
		if (this._FPSConfig) {
			if (((this._accumulatedDelta += e), !YX(this._accumulatedDelta, this._FPSConfig))) return;
			this._accumulatedDelta = 0;
		}
		this._tickAndRender(e);
	}
	_cancelAnimateCommon() {
		(this._doRender = !1),
			this._requestAnimationFrameId != null &&
				(cancelAnimationFrame(this._requestAnimationFrameId), (this._requestAnimationFrameId = void 0)),
			this._canvas;
	}
	_tick(e) {
		var t;
		super._tick(e), (t = this._markerTrackingConfig) == null || t.renderFunction();
	}
	renderer() {
		return this._renderer;
	}
	effectComposer() {
		return this._effectComposer;
	}
	preCompile() {
		this._renderer && this._renderer.compile(this._scene.threejsScene(), this._camera);
	}
	markAsReady() {
		this.preCompile(), this.setAutoRender(!0);
	}
	onResize() {
		this.updateSize() &&
			(this._updateRendererSize(),
			this._renderFunc && this._renderFunc(this.scene().timeController.delta()),
			this._runOnResizeCallbacks());
	}
	updateSize() {
		const e = this._renderer;
		if (!e) return !1;
		const t = e.getPixelRatio();
		this.camerasController().computeSizeAndAspect(t);
		const i = this.camerasController().size;
		return this._size.equals(i)
			? !1
			: (this._size.copy(i), this._scene.viewersRegister.markViewerAsSizeUpdated(this), !0);
	}
	_updateRendererSize() {
		var e, t;
		const i = this._canvas;
		i &&
			(vh.setRendererSize(i, this._size),
			(e = this._cssRendererConfig) == null || e.cssRenderer.setSize(this._size.x, this._size.y),
			(t = this._effectComposer) == null || t.setSize(this._size.x, this._size.y),
			this.camerasController().updateCameraAspect());
	}
	_listenToWindowResize() {}
	_unlistenToWindowResize() {}
	_createResizeObserver(e) {
		this._disposeResizeObserver(),
			(this._resizeObserver = new ResizeObserver(this._onResizeBound)),
			this._resizeObserver.observe(e, {box: 'border-box'});
	}
	_disposeResizeObserver() {
		this._resizeObserver && (this._resizeObserver.disconnect(), (this._resizeObserver = void 0));
	}
}
var wc = ((n) => ((n.DEFAULT = 'default'), (n.COVER = 'cover'), (n.CONTAIN = 'contain'), n))(wc || {});
const QX = ['default', 'cover', 'contain'];
class lb {
	static frameMode(e) {
		return this._getFrameMode(e) || wc.DEFAULT;
	}
	static expectedAspectRatio(e) {
		return Zt(e).attribValue(e, Ze.FRAME_MODE_EXPECTED_ASPECT_RATIO);
	}
	static _getFrameMode(e) {
		const t = Zt(e).attribValue(e, Ze.FRAME_MODE);
		if (t && je(t)) return QX[t];
	}
}
function JX(n, e, t) {
	t.set(0, 0), n.attribValue(e, Ze.VIEW_OFFSET_MIN, 0, t);
}
function e$(n, e, t) {
	t.set(1, 1), n.attribValue(e, Ze.VIEW_OFFSET_MAX, 0, t);
}
const Fp = new re(),
	Bp = new re();
function t$(n, e) {
	const t = Zt(n),
		i = t.hasAttribute(n, Ze.VIEW_OFFSET_MIN),
		s = t.hasAttribute(n, Ze.VIEW_OFFSET_MAX);
	i && s && (JX(t, n, Fp), e$(t, n, Bp), n.setViewOffset(e.x, e.y, Fp.x * e.x, Fp.y * e.y, Bp.x * e.x, Bp.y * e.y));
}
class n$ {
	static updateCameraAspect(e, t, i) {
		e.aspect = t;
		const s = (i == null ? void 0 : i.cameraWithAttributes) || e,
			r = lb.frameMode(s),
			o = lb.expectedAspectRatio(s),
			a = Zt(s).attribValue(s, Wm.FOV);
		a != null && o != null && this._update({mode: r, camera: e, fov: a, expectedAspectRatio: o}),
			i && i.resolution && t$(e, i.resolution),
			e.updateProjectionMatrix();
	}
	static _update(e) {
		const t = e.mode;
		switch (t) {
			case wc.DEFAULT:
				return this._adjustFOVFromModeDefault(e);
			case wc.COVER:
				return this._adjustFOVFromModeCover(e);
			case wc.CONTAIN:
				return this._adjustFOVFromModeContain(e);
		}
		zt.unreachable(t);
	}
	static _adjustFOVFromModeDefault(e) {
		e.camera.fov = e.fov;
	}
	static _adjustFOVFromModeCover(e) {
		if (e.camera.aspect > e.expectedAspectRatio) {
			const t = Math.tan(bn.degToRad(e.fov / 2)),
				i = e.camera.aspect / e.expectedAspectRatio,
				s = t / i;
			e.camera.fov = bn.radToDeg(Math.atan(s)) * 2;
		} else e.camera.fov = e.fov;
	}
	static _adjustFOVFromModeContain(e) {
		if (e.camera.aspect > e.expectedAspectRatio) e.camera.fov = e.fov;
		else {
			const t = Math.tan(bn.degToRad(e.fov / 2)),
				i = e.camera.aspect / e.expectedAspectRatio,
				s = t / i;
			e.camera.fov = bn.radToDeg(Math.atan(s)) * 2;
		}
	}
}
const Z0 = {fov: 50, fovRange: [0.001, 180]},
	Q0 = (n) => {
		n.registerCameraNodeType(Ca.PERSPECTIVE),
			n.registerCamera(
				Rn,
				(e) =>
					new ZX({
						...e,
						updateCameraAspect: (i, s) => {
							n$.updateCameraAspect(e.camera, i, {resolution: s});
						},
					})
			);
	},
	Cu = new w(),
	Qt = new Rn();
function i$() {
	const n = new qn(),
		e = new Ee(16755200),
		t = new Ee(16711680),
		i = new Ee(43775),
		s = new Ee(16777215),
		r = new Ee(3355443),
		o = [],
		a = [],
		c = {};
	function l(h, d, p) {
		u(h, p), u(d, p);
	}
	function u(h, d) {
		o.push(0, 0, 0), a.push(d.r, d.g, d.b), c[h] === void 0 && (c[h] = []), c[h].push(o.length / 3 - 1);
	}
	return (
		l('n1', 'n2', e),
		l('n2', 'n4', e),
		l('n4', 'n3', e),
		l('n3', 'n1', e),
		l('f1', 'f2', e),
		l('f2', 'f4', e),
		l('f4', 'f3', e),
		l('f3', 'f1', e),
		l('n1', 'f1', e),
		l('n2', 'f2', e),
		l('n3', 'f3', e),
		l('n4', 'f4', e),
		l('p', 'n1', t),
		l('p', 'n2', t),
		l('p', 'n3', t),
		l('p', 'n4', t),
		l('u1', 'u2', i),
		l('u2', 'u3', i),
		l('u3', 'u1', i),
		l('c', 't', s),
		l('p', 'c', r),
		l('cn1', 'cn2', r),
		l('cn3', 'cn4', r),
		l('cf1', 'cf2', r),
		l('cf3', 'cf4', r),
		n.setAttribute('position', new Kt(o, 3)),
		n.setAttribute('color', new Kt(a, 3)),
		{geometry: n, pointMap: c}
	);
}
function s$() {
	return new so({color: 16777215, vertexColors: !0, toneMapped: !1});
}
class Qm extends A_ {
	constructor(e) {
		super(),
			(this._pointMap = {}),
			(this.camera = e),
			this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(),
			(this.name = 'CameraHelper'),
			(this.type = 'CameraHelper'),
			(this.matrixAutoUpdate = !1);
		const {geometry: t, pointMap: i} = i$();
		(this.geometry = t), (this._pointMap = i), (this.material = s$());
	}
	clone() {
		return new Qm(this.camera);
	}
	update() {
		const e = this.geometry,
			t = this._pointMap,
			i = 1,
			s = 1;
		Qt.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),
			sn('c', t, e, Qt, 0, 0, -1),
			sn('t', t, e, Qt, 0, 0, 1),
			sn('n1', t, e, Qt, -i, -s, -1),
			sn('n2', t, e, Qt, i, -s, -1),
			sn('n3', t, e, Qt, -i, s, -1),
			sn('n4', t, e, Qt, i, s, -1),
			sn('f1', t, e, Qt, -i, -s, 1),
			sn('f2', t, e, Qt, i, -s, 1),
			sn('f3', t, e, Qt, -i, s, 1),
			sn('f4', t, e, Qt, i, s, 1),
			sn('u1', t, e, Qt, i * 0.7, s * 1.1, -1),
			sn('u2', t, e, Qt, -i * 0.7, s * 1.1, -1),
			sn('u3', t, e, Qt, 0, s * 2, -1),
			sn('cf1', t, e, Qt, -i, 0, 1),
			sn('cf2', t, e, Qt, i, 0, 1),
			sn('cf3', t, e, Qt, 0, -s, 1),
			sn('cf4', t, e, Qt, 0, s, 1),
			sn('cn1', t, e, Qt, -i, 0, -1),
			sn('cn2', t, e, Qt, i, 0, -1),
			sn('cn3', t, e, Qt, 0, -s, -1),
			sn('cn4', t, e, Qt, 0, s, -1),
			(e.getAttribute('position').needsUpdate = !0);
	}
}
function sn(n, e, t, i, s, r, o) {
	Cu.set(s, r, o).unproject(i);
	const a = e[n];
	if (a !== void 0) {
		const c = t.getAttribute('position');
		for (let l = 0, u = a.length; l < u; l++) c.setXYZ(a[l], Cu.x, Cu.y, Cu.z);
	}
}
function J0(n) {
	const e = n.copy.bind(n);
	n.copy = function (t, i) {
		const s = e(t, i);
		return (s.map = t.map), J0(s), s;
	};
}
var $c = ((n) => (
	(n.PERSPECTIVE_CAMERA = 'perspectiveCamera'),
	(n.PERSPECTIVE_CAMERA_UPDATE = 'perspectiveCameraUpdate'),
	(n.AREA_LIGHT = 'areaLight'),
	(n.SPOT_LIGHT = 'spotLight'),
	(n.SPOT_LIGHT_UPDATE = 'spotLightUpdate'),
	n
))($c || {});
const r$ = (n) => {
		Hh({
			type: Dn.PERSPECTIVE_CAMERA,
			checkFunc: (r) => {
				if (r.isPerspectiveCamera) return Dn.PERSPECTIVE_CAMERA;
			},
			ctor: Rn,
			humanName: 'PerspectiveCamera',
		});
		const {fov: e, aspect: t, near: i, far: s} = n;
		return new Rn(e, t, i, s);
	},
	o$ = (n) => {},
	a$ = (n) => {
		Hh({
			type: Dn.AREA_LIGHT,
			checkFunc: (r) => {
				if (r.isRectAreaLight) return Dn.AREA_LIGHT;
			},
			ctor: Fv,
			humanName: 'AreaLight',
		});
		const {color: e, intensity: t, width: i, height: s} = n;
		return new Fv(e, t, i, s);
	},
	c$ = () => {
		Hh({
			type: Dn.SPOT_LIGHT,
			checkFunc: (e) => {
				if (e.isSpotLight) return Dn.SPOT_LIGHT;
			},
			ctor: Uv,
			humanName: Dn.SPOT_LIGHT,
		});
		const n = new Uv();
		return J0(n), n;
	},
	l$ = (n) => {};
class Jm {
	constructor() {
		this._generators = {
			perspectiveCamera: r$,
			perspectiveCameraUpdate: o$,
			areaLight: a$,
			spotLight: c$,
			spotLightUpdate: l$,
		};
	}
	static instance() {
		return (this._instance = this._instance || new Jm());
	}
	generator(e) {
		return this._generators[e];
	}
	registerGenerator(e, t) {
		this._generators[e] = t;
	}
}
const Ch = Jm.instance(),
	n_ = class extends rn {
		static type() {
			return Ca.PERSPECTIVE;
		}
		cook(n, e) {
			const t = n_.createCamera(e, this._node);
			(t.name = e.name || Ca.PERSPECTIVE),
				t.position.copy(e.position),
				t.rotation.set(bn.degToRad(e.rotation.x), bn.degToRad(e.rotation.y), bn.degToRad(e.rotation.z)),
				t.updateWorldMatrix(!1, !1),
				t.updateProjectionMatrix(),
				(t.matrixAutoUpdate = e.matrixAutoUpdate),
				n_.setCameraAttributes(t, e),
				Ch.generator($c.PERSPECTIVE_CAMERA_UPDATE)({
					camera: t,
					params: {
						apertureBlades: e.apertureBlades,
						fStop: e.fStop,
						focusDistance: e.focusDistance,
						apertureRotation: e.apertureRotation,
						anamorphicRatio: e.anamorphicRatio,
					},
				});
			const s = [t];
			if (e.showHelper) {
				const r = new Qm(t);
				r.update(), t.add(r);
			}
			return this.createCoreGroupFromObjects(s);
		}
		static createCamera(n, e) {
			const t = Ch.generator($c.PERSPECTIVE_CAMERA)({fov: n.fov, aspect: 1, near: n.near, far: n.far});
			return e && Jt.addAttribute(t, Ze.NODE_ID, e.graphNodeId()), t;
		}
		static setCameraAttributes(n, e) {
			Jt.addAttribute(n, Wm.FOV, e.fov);
		}
	};
let rl = n_;
rl.DEFAULT_PARAMS = {
	fov: Z0.fov,
	near: Ky.near,
	far: Ky.far,
	position: new w(0, 0, 0),
	rotation: new w(0, 0, 0),
	showHelper: !1,
	matrixAutoUpdate: !0,
	name: Ca.PERSPECTIVE,
	apertureBlades: 6,
	fStop: 0.6,
	focusDistance: 10,
	apertureRotation: 0,
	anamorphicRatio: 1,
};
rl.INPUT_CLONED_STATE = Ft.NEVER;
rl.onRegister = Q0;
const yu = [0, 0, 0];
async function u$(n) {
	const t = `*/${n.p.name.value}`,
		i = n.scene().objectsController.findObjectByMask(t);
	i &&
		(n.p.position.set(i.position.toArray()),
		i.rotation.toArray(yu),
		yu.forEach((s, r) => (yu[r] = bn.radToDeg(s))),
		n.p.rotation.set(yu));
}
const Ir = rl.DEFAULT_PARAMS;
class h$ extends nn {
	constructor() {
		super(...arguments),
			(this.default = M.FOLDER()),
			(this.fov = M.FLOAT(Ir.fov, {range: Z0.fovRange, rangeLocked: [!0, !1]})),
			(this.near = M.FLOAT(Ir.near, {range: [0, 100], rangeLocked: [!0, !1]})),
			(this.far = M.FLOAT(Ir.far, {range: [0, 100], rangeLocked: [!0, !1]})),
			(this.position = M.VECTOR3(Ir.position)),
			(this.rotation = M.VECTOR3(Ir.rotation)),
			(this.showHelper = M.BOOLEAN(Ir.showHelper)),
			(this.matrixAutoUpdate = M.BOOLEAN(Ir.matrixAutoUpdate)),
			(this.name = M.STRING('`$OS`')),
			(this.updateTransformFromCamera = M.BUTTON(null, {
				callback: (e) => {
					u$(e);
				},
			})),
			(this.PBR = M.FOLDER()),
			(this.apertureBlades = M.INTEGER(6, {range: [0, 10], rangeLocked: [!0, !1]})),
			(this.fStop = M.FLOAT(0.5, {range: [0.02, 20], rangeLocked: [!0, !1]})),
			(this.focusDistance = M.FLOAT(10, {range: [0, 100], rangeLocked: [!0, !1]})),
			(this.apertureRotation = M.FLOAT(0, {range: [0, 12.5], rangeLocked: [!0, !1]})),
			(this.anamorphicRatio = M.FLOAT(1, {range: [0.1, 10], rangeLocked: [!0, !1]}));
	}
}
const d$ = new h$();
class eM extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = d$);
	}
	static type() {
		return Ca.PERSPECTIVE;
	}
	initializeNode() {
		this.io.inputs.setCount(0);
	}
	cook(e) {
		this._operation = this._operation || new rl(this._scene, this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
eM.onRegister = Q0;
const p$ = new w(0, 1, 0),
	f$ = new w(-1, 0, 0),
	kp = new Qe(),
	Vp = new Qe(),
	Gp = new Qe(),
	zp = new Qe(),
	Yo = {t: new w(), q: new Sn(), s: new w()};
class ub {
	static matrix(e, t) {
		kp.identity(),
			Vp.identity(),
			Gp.identity(),
			zp.identity(),
			kp.makeTranslation(e.center.x, e.center.y, e.center.z),
			Vp.makeRotationAxis(p$, bn.degToRad(e.longitude)),
			Gp.makeRotationAxis(f$, bn.degToRad(e.latitude)),
			zp.makeTranslation(0, 0, e.depth),
			t.copy(kp).multiply(Vp).multiply(Gp).multiply(zp);
	}
	static applyMatrixToObject(e, t) {
		t.decompose(Yo.t, Yo.q, Yo.s),
			e.position.copy(Yo.t),
			e.quaternion.copy(Yo.q),
			e.scale.copy(Yo.s),
			e.updateMatrix();
	}
}
class qc extends rn {
	constructor() {
		super(...arguments), (this._fullMatrix = new Qe());
	}
	static type() {
		return 'polarTransform';
	}
	cook(e, t) {
		const i = e[0].threejsObjects();
		return ub.matrix(t, this._fullMatrix), this._applyTransform(i, t, this._fullMatrix), e[0];
	}
	_applyTransform(e, t, i) {
		const s = ei[t.applyOn];
		switch (s) {
			case ri.GEOMETRY:
				return this._applyMatrixToGeometries(e, i);
			case ri.OBJECT:
				return this._applyMatrixToObjects(e, i);
		}
		zt.unreachable(s);
	}
	_applyMatrixToGeometries(e, t) {
		for (let i of e) {
			const s = i.geometry;
			s && s.applyMatrix4(t);
		}
	}
	_applyMatrixToObjects(e, t) {
		for (let i of e) ub.applyMatrixToObject(i, t);
	}
}
qc.DEFAULT_PARAMS = {applyOn: ei.indexOf(ri.OBJECT), center: new w(0, 0, 0), longitude: 0, latitude: 0, depth: 1};
qc.INPUT_CLONED_STATE = Ft.FROM_NODE;
const cc = qc.DEFAULT_PARAMS;
class _$ extends nn {
	constructor() {
		super(...arguments),
			(this.applyOn = M.INTEGER(cc.applyOn, {menu: {entries: ei.map((e, t) => ({name: e, value: t}))}})),
			(this.center = M.VECTOR3(cc.center.toArray())),
			(this.longitude = M.FLOAT(cc.longitude, {range: [-360, 360]})),
			(this.latitude = M.FLOAT(cc.latitude, {range: [-180, 180]})),
			(this.depth = M.FLOAT(cc.depth, {range: [0, 10]}));
	}
}
const m$ = new _$();
class g$ extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = m$);
	}
	static type() {
		return oi.POLAR_TRANSFORM;
	}
	initializeNode() {
		this.io.inputs.setCount(1), this.io.inputs.initInputsClonedState(qc.INPUT_CLONED_STATE);
	}
	cook(e) {
		this._operation = this._operation || new qc(this.scene(), this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
	setApplyOn(e) {
		this.p.applyOn.set(ei.indexOf(e));
	}
}
class hb {
	static create(e) {
		const t = new qn();
		t.type = 'SphereBuilder';
		let {
			radius: i,
			widthSegments: s,
			heightSegments: r,
			phiStart: o,
			phiLength: a,
			thetaStart: c,
			thetaLength: l,
			asLines: u,
			open: h,
		} = e;
		o == null && (o = 0),
			a == null && (a = Math.PI * 2),
			c == null && (c = 0),
			l == null && (l = Math.PI),
			h == null && (h = !1),
			(s = Math.max(3, Math.floor(s))),
			(r = Math.max(2, Math.floor(r)));
		const d = Math.min(c + l, Math.PI);
		let p = 0;
		const m = [],
			g = new w(),
			_ = new w(),
			f = [],
			y = [],
			v = [],
			A = [];
		for (let S = 0; S <= r; S++) {
			const T = [],
				R = S / r;
			let D = 0;
			S == 0 && c == 0 ? (D = 0.5 / s) : S == r && d == Math.PI && (D = -0.5 / s);
			for (let E = 0; E <= s; E++) {
				const x = E / s;
				(g.x = -i * Math.cos(o + x * a) * Math.sin(c + R * l)),
					(g.y = i * Math.cos(c + R * l)),
					(g.z = i * Math.sin(o + x * a) * Math.sin(c + R * l)),
					y.push(g.x, g.y, g.z),
					_.copy(g).normalize(),
					v.push(_.x, _.y, _.z),
					A.push(x + D, 1 - R),
					T.push(p++);
			}
			m.push(T);
		}
		for (let S = 0; S < r; S++)
			for (let T = 0; T < s; T++) {
				const R = m[S][T + 1],
					D = m[S][T],
					E = m[S + 1][T],
					x = m[S + 1][T + 1];
				u
					? ((S !== 0 || c > 0) && f.push(R, D),
					  f.push(D, E),
					  h && (T < s - 1 && f.push(E, x), S < r - 1 && f.push(R, x)))
					: ((S !== 0 || c > 0) && f.push(R, D, x), (S !== r - 1 || d < Math.PI) && f.push(D, E, x));
			}
		if (h) {
			const S = m[r][s - 1],
				T = m[r][s];
			f.push(S, T);
			const R = m[r - 1][s],
				D = m[r][s];
			f.push(R, D);
		}
		return (
			t.setIndex(f),
			t.setAttribute('position', new Kt(y, 3)),
			t.setAttribute('normal', new Kt(v, 3)),
			t.setAttribute('uv', new Kt(A, 2)),
			t
		);
	}
}
const Hp = new Ht(),
	bu = new w(),
	Su = new w(),
	Zi = {default: 0, isocahedron: 1},
	v$ = ['default', 'isocahedron'];
class Yc extends rn {
	static type() {
		return 'sphere';
	}
	cook(e, t) {
		const i = e[0],
			s = i ? this._cookWithInput(i, t) : this._cookWithoutInput(t);
		return this._node && (s.name = this._node.name()), this.createCoreGroupFromObjects([s]);
	}
	_cookWithoutInput(e) {
		const t = this._createRequiredGeometry(e);
		return t.translate(e.center.x, e.center.y, e.center.z), this._createSphereObject(t, e);
	}
	_cookWithInput(e, t) {
		e.boundingBox(Hp), Hp.getSize(bu), Hp.getCenter(Su);
		const i = this._createRequiredGeometry(t);
		return (
			i.scale(bu.x, bu.y, bu.z),
			i.translate(t.center.x, t.center.y, t.center.z),
			i.translate(Su.x, Su.y, Su.z),
			this._createSphereObject(i, t)
		);
	}
	_createSphereObject(e, t) {
		return rn.createObject(e, t.asLines ? Dn.LINE_SEGMENTS : Dn.MESH);
	}
	_createRequiredGeometry(e) {
		return e.type == Zi.default ? this._createDefaultSphere(e) : this._createDefaultIsocahedron(e);
	}
	_createDefaultSphere(e) {
		return e.open
			? hb.create({
					radius: e.radius,
					widthSegments: e.resolution.x,
					heightSegments: e.resolution.y,
					phiStart: e.phiStart,
					phiLength: e.phiLength,
					thetaStart: e.thetaStart,
					thetaLength: e.thetaLength,
					asLines: e.asLines,
					open: !0,
			  })
			: hb.create({
					radius: e.radius,
					widthSegments: e.resolution.x,
					heightSegments: e.resolution.y,
					asLines: e.asLines,
					open: !1,
			  });
	}
	_createDefaultIsocahedron(e) {
		return new R_(e.radius, e.detail);
	}
}
Yc.DEFAULT_PARAMS = {
	type: Zi.default,
	radius: 1,
	resolution: new re(30, 30),
	open: !1,
	phiStart: 0,
	phiLength: Math.PI * 2,
	thetaStart: 0,
	thetaLength: Math.PI,
	detail: 1,
	center: new w(0, 0, 0),
	asLines: !1,
};
Yc.INPUT_CLONED_STATE = Ft.NEVER;
const Es = Yc.DEFAULT_PARAMS,
	Au = 1e-5;
class E$ extends nn {
	constructor() {
		super(...arguments),
			(this.type = M.INTEGER(Es.type, {menu: {entries: v$.map((e) => ({name: e, value: Zi[e]}))}})),
			(this.radius = M.FLOAT(Es.radius, {range: [0, 2], rangeLocked: [!0, !1]})),
			(this.resolution = M.VECTOR2(Es.resolution, {visibleIf: {type: Zi.default}})),
			(this.open = M.BOOLEAN(Es.open, {visibleIf: {type: Zi.default}})),
			(this.phiStart = M.FLOAT(Es.phiStart, {
				range: [0, Math.PI * 2],
				visibleIf: {type: Zi.default, open: !0},
				step: Au,
			})),
			(this.phiLength = M.FLOAT('$PI*2', {
				range: [0, Math.PI * 2],
				visibleIf: {type: Zi.default, open: !0},
				step: Au,
			})),
			(this.thetaStart = M.FLOAT(Es.thetaStart, {
				range: [0, Math.PI],
				visibleIf: {type: Zi.default, open: !0},
				step: Au,
			})),
			(this.thetaLength = M.FLOAT('$PI', {
				range: [0, Math.PI],
				visibleIf: {type: Zi.default, open: !0},
				step: Au,
			})),
			(this.detail = M.INTEGER(Es.detail, {
				range: [0, 5],
				rangeLocked: [!0, !1],
				visibleIf: {type: Zi.isocahedron},
			})),
			(this.center = M.VECTOR3(Es.center)),
			(this.asLines = M.BOOLEAN(Es.asLines));
	}
}
const C$ = new E$();
class y$ extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = C$);
	}
	static type() {
		return oi.SPHERE;
	}
	initializeNode() {
		this.io.inputs.setCount(0, 1), this.io.inputs.initInputsClonedState(Yc.INPUT_CLONED_STATE);
	}
	cook(e) {
		this._operation = this._operation || new Yc(this.scene(), this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
const b$ = `varying vec3 vNormal;
varying vec3 vWorldPosition;
varying vec3 vWorldOrigin;

void main(){
	// compute intensity
	vNormal		= normalize( normalMatrix * normal );

	vec4 worldPosition	= modelMatrix * vec4( position, 1.0 );
	vWorldPosition		= worldPosition.xyz;

	vec4 worldOrigin	= modelMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vWorldOrigin		= worldOrigin.xyz;

	// set gl_Position
	gl_Position	= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,
	S$ = `varying vec3 vNormal;
varying vec3 vWorldPosition;
varying vec3 vWorldOrigin;

uniform vec3 lightColor;

// uniform vec3 spotPosition;

uniform float attenuation;
uniform float anglePower;

void main(){

	//////////////////////////////////////////////////////////
	// distance attenuation   //
	//////////////////////////////////////////////////////////
	float intensity = distance(vWorldPosition, vWorldOrigin) / attenuation;
	intensity = 1.0 - clamp(intensity, 0.0, 1.0);

	//////////////////////////////////////////////////////////
	// intensity on angle   //
	//////////////////////////////////////////////////////////
	vec3 normal = vec3(vNormal.x, vNormal.y, abs(vNormal.z));
	float angleIntensity = pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );
	intensity = intensity * angleIntensity;
	// 'gl_FragColor = vec4( lightColor, intensity );

	//////////////////////////////////////////////////////////
	// final color   //
	//////////////////////////////////////////////////////////

	// set the final color
	gl_FragColor = vec4( lightColor, intensity);
}`,
	i_ = class {
		constructor(n) {
			(this.container = n),
				(this.object = new On()),
				(this._cone = new A_()),
				(this._lineMaterial = new so()),
				(this.object.name = `CoreSpotLightHelper_${this.container.nodeName}`),
				(this.object.matrixAutoUpdate = !1),
				this.createAndBuildObject({helperSize: 1});
		}
		createAndBuildObject(n) {
			this.buildHelper(), this.update(n);
		}
		buildHelper() {
			(this._cone.geometry = i_._buildConeGeometry()),
				(this._cone.material = this._lineMaterial),
				(this._cone.matrixAutoUpdate = !1),
				(this._cone.name = `CoreSpotLightHelperCone_${this.container.nodeName}`),
				this.object.add(this._cone);
		}
		update(n) {
			const e = this.container.light();
			i_.transformObject(this._cone, {sizeMult: n.helperSize, distance: e.distance, angle: e.angle}),
				this._lineMaterial.color.copy(e.color);
		}
		static transformObject(n, e) {
			const t = (e.distance ? e.distance : 1e3) * e.sizeMult,
				i = t * Math.tan(e.angle);
			this._matrixScale.set(i, i, t),
				n.matrix.identity(),
				n.matrix.makeRotationX(Math.PI * 1),
				n.matrix.scale(this._matrixScale);
		}
		static _buildConeGeometry() {
			const n = new qn(),
				e = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];
			for (let t = 0, i = 1, s = 32; t < s; t++, i++) {
				const r = (t / s) * Math.PI * 2,
					o = (i / s) * Math.PI * 2;
				e.push(Math.cos(r), Math.sin(r), 1, Math.cos(o), Math.sin(o), 1);
			}
			return n.setAttribute('position', new Kt(e, 3)), n;
		}
	};
let eg = i_;
eg._matrixScale = new w();
class A$ {
	constructor(e) {
		this.container = e;
	}
	update(e) {
		const t = this.container.light();
		if (e.tvolumetric) {
			const i = this.object();
			eg.transformObject(i, {sizeMult: 1, distance: t.distance, angle: t.angle});
			const s = i.material.uniforms;
			s.lightColor.value.copy(t.color),
				(s.attenuation.value = e.volAttenuation),
				(s.anglePower.value = e.volAnglePower),
				t.add(i);
		} else this._mesh && t.remove(this._mesh);
	}
	object() {
		return (this._mesh = this._mesh || this._createMesh());
	}
	_createMesh() {
		const r = new M_(1, 1, 128, 32);
		r.applyMatrix4(new Qe().makeTranslation(0, -0.5 * 1, 0)), r.applyMatrix4(new Qe().makeRotationX(-Math.PI / 2));
		const o = this._createMaterial(),
			a = new On(r, o);
		return (
			(a.matrixAutoUpdate = !1),
			(a.name = `VolumetricSpotLight_${this.container.nodeName}`),
			o.uniforms.lightColor.value.set('white'),
			a
		);
	}
	_createMaterial() {
		return new ti({
			uniforms: {attenuation: {value: 5}, anglePower: {value: 1.2}, lightColor: {value: new Ee('cyan')}},
			vertexShader: b$,
			fragmentShader: S$,
			transparent: !0,
			depthWrite: !1,
		});
	}
}
const tM = {
		color: new Ee(1, 1, 1),
		intensity: 2,
		angle: 45,
		penumbra: 0.1,
		decay: 2,
		distance: 100,
		showHelper: !1,
		helperSize: 1,
		tmap: !1,
		map: new zi(''),
		name: 'pointLight',
		castShadow: !1,
		shadowAutoUpdate: !0,
		shadowUpdateOnNextRender: !1,
		shadowRes: new re(1024, 1024),
		shadowBias: 1e-4,
		shadowNear: 0.1,
		shadowFar: 100,
		shadowRadius: 0,
		tvolumetric: !1,
		volAttenuation: 5,
		volAnglePower: 10,
		raymarchingPenumbra: 0,
		raymarchingShadowBiasAngle: 0.01,
		raymarchingShadowBiasDistance: 0.1,
	},
	Xt = tM;
function x$(n) {
	return class extends n {
		constructor() {
			super(...arguments),
				(this.light = M.FOLDER()),
				(this.color = M.COLOR(Xt.color.toArray(), {})),
				(this.intensity = M.FLOAT(Xt.intensity, {range: [0, 10], rangeLocked: [!0, !1]})),
				(this.angle = M.FLOAT(Xt.angle, {range: [0, 180], rangeLocked: [!0, !1]})),
				(this.penumbra = M.FLOAT(Xt.penumbra, {range: [0, 1], rangeLocked: [!0, !0]})),
				(this.decay = M.FLOAT(Xt.decay, {range: [0, 10], rangeLocked: [!0, !1]})),
				(this.distance = M.FLOAT(Xt.distance, {range: [0, 100], rangeLocked: [!0, !1]})),
				(this.showHelper = M.BOOLEAN(Xt.showHelper)),
				(this.helperSize = M.FLOAT(Xt.helperSize, {visibleIf: {showHelper: 1}})),
				(this.tmap = M.BOOLEAN(Xt.tmap)),
				(this.map = M.NODE_PATH('', {
					nodeSelection: {context: fe.COP},
					dependentOnFoundNode: !1,
					visibleIf: {tmap: 1},
				})),
				(this.name = M.STRING('`$OS`')),
				(this.shadow = M.FOLDER()),
				(this.castShadow = M.BOOLEAN(Xt.castShadow)),
				(this.shadowAutoUpdate = M.BOOLEAN(Xt.shadowAutoUpdate, {visibleIf: {castShadow: 1}})),
				(this.shadowUpdateOnNextRender = M.BOOLEAN(Xt.shadowUpdateOnNextRender, {
					visibleIf: {castShadow: 1, shadowAutoUpdate: 0},
				})),
				(this.shadowRes = M.VECTOR2(Xt.shadowRes.toArray(), {visibleIf: {castShadow: 1}})),
				(this.shadowBias = M.FLOAT(Xt.shadowBias, {
					visibleIf: {castShadow: 1},
					range: [-0.01, 0.01],
					rangeLocked: [!1, !1],
				})),
				(this.shadowNear = M.FLOAT(Xt.shadowNear, {
					visibleIf: {castShadow: 1},
					range: [0, 100],
					rangeLocked: [!0, !1],
				})),
				(this.shadowFar = M.FLOAT(Xt.shadowFar, {
					visibleIf: {castShadow: 1},
					range: [0, 100],
					rangeLocked: [!0, !1],
				})),
				(this.shadowRadius = M.FLOAT(Xt.shadowRadius, {
					visibleIf: {castShadow: 1},
					range: [0, 10],
					rangeLocked: [!0, !1],
				})),
				(this.volumetric = M.FOLDER()),
				(this.tvolumetric = M.BOOLEAN(Xt.tvolumetric)),
				(this.volAttenuation = M.FLOAT(Xt.volAttenuation, {range: [0, 10], rangeLocked: [!0, !1]})),
				(this.volAnglePower = M.FLOAT(Xt.volAnglePower, {range: [0, 20], rangeLocked: [!0, !1]})),
				(this.raymarching = M.FOLDER()),
				(this.raymarchingPenumbra = M.FLOAT(Xt.raymarchingPenumbra)),
				(this.raymarchingShadowBiasAngle = M.FLOAT(Xt.raymarchingShadowBiasAngle, {
					range: [0, 1],
					rangeLocked: [!0, !1],
				})),
				(this.raymarchingShadowBiasDistance = M.FLOAT(Xt.raymarchingShadowBiasDistance, {
					range: [0, 1],
					rangeLocked: [!0, !1],
				}));
		}
	};
}
class tg extends Vi {
	constructor(e, t) {
		super(),
			(this.nodeName = t),
			(this._target = new kt()),
			(this.matrixAutoUpdate = !1),
			(this.params = {showHelper: !1, helperSize: 1, tvolumetric: !1, volAnglePower: 1, volAttenuation: 1}),
			e.showHelper != null && (this.params.showHelper = e.showHelper),
			e.tvolumetric != null && (this.params.tvolumetric = e.tvolumetric),
			e.volAnglePower != null && (this.params.volAnglePower = e.volAnglePower),
			e.volAttenuation != null && (this.params.volAttenuation = e.volAttenuation),
			(this._light = Ch.generator($c.SPOT_LIGHT)()),
			Ch.generator($c.SPOT_LIGHT_UPDATE)({spotLight: this._light, textureName: 'IES_PROFILE_LM_63_1995'}),
			this._target.copy(this._light.target, !1),
			(this._light.target = this._target),
			this._light.position.set(0, 0, 0.01),
			this._light.target.position.set(0, 0, -1),
			this._light.updateMatrix(),
			this._target.updateMatrix(),
			(this._light.matrixAutoUpdate = !1),
			(this._target.matrixAutoUpdate = !1),
			(this.name = `SpotLightContainer_${this.nodeName}`),
			(this._light.name = `SpotLight_${this.nodeName}`),
			(this._target.name = `SpotLightDefaultTarget_${this.nodeName}`),
			this.add(this._light),
			this.add(this._target),
			this.updateHelper();
	}
	updateParams(e) {
		e.showHelper != null && (this.params.showHelper = e.showHelper),
			e.helperSize != null && (this.params.helperSize = e.helperSize),
			e.tvolumetric != null && (this.params.tvolumetric = e.tvolumetric),
			e.volAnglePower != null && (this.params.volAnglePower = e.volAnglePower),
			e.volAttenuation != null && (this.params.volAttenuation = e.volAttenuation);
	}
	light() {
		return this._light;
	}
	copy(e, t) {
		const i = e.light();
		return (
			this._light.copy(i),
			super.copy(e, !1),
			this.updateParams(e.params),
			this.updateHelper(),
			(this._light.target = this._target),
			t && this.updateVolumetric(),
			this
		);
	}
	clone(e) {
		const t = new tg(this.params, this.nodeName);
		return t.copy(this), t;
	}
	updateHelper() {
		this.params.showHelper
			? ((this.__helper__ = this.__helper__ || new eg(this)),
			  this.add(this.__helper__.object),
			  this.__helper__.update({helperSize: this.params.helperSize}))
			: this.__helper__ && this.remove(this.__helper__.object);
	}
	updateVolumetric() {
		this.params.tvolumetric
			? ((this.__volumetric__ = this.__volumetric__ || new A$(this)), this.__volumetric__.update(this.params))
			: this.__volumetric__ && this.__volumetric__.update(this.params);
	}
}
class ng extends rn {
	static type() {
		return 'spotLight';
	}
	async cook(e, t) {
		const i = this.createLight(t);
		return (
			(i.light().name = t.name),
			await this.updateLightParams(i, t),
			this.updateShadowParams(i, t),
			i.updateParams(t),
			i.updateHelper(),
			i.updateVolumetric(),
			this.createCoreGroupFromObjects([i])
		);
	}
	createLight(e) {
		var t;
		const i = new tg(e, ((t = this._node) == null ? void 0 : t.name()) || '_'),
			s = i.light();
		return (
			(s.matrixAutoUpdate = !1),
			(s.castShadow = !0),
			(s.shadow.bias = -0.001),
			(s.shadow.mapSize.x = 1024),
			(s.shadow.mapSize.y = 1024),
			(s.shadow.camera.near = 0.1),
			i
		);
	}
	async updateLightParams(e, t) {
		const i = e.light();
		(i.color = t.color),
			(i.intensity = t.intensity),
			(i.angle = t.angle * (Math.PI / 180)),
			(i.penumbra = t.penumbra),
			(i.decay = t.decay),
			(i.distance = t.distance),
			(i.userData[ws.PENUMBRA] = t.raymarchingPenumbra),
			(i.userData[ws.SHADOW_BIAS_ANGLE] = t.raymarchingShadowBiasAngle),
			(i.userData[ws.SHADOW_BIAS_DISTANCE] = t.raymarchingShadowBiasDistance),
			await this._updateLightMap(i, t);
	}
	async _updateLightMap(e, t) {
		var i, s, r;
		if (!t.tmap) {
			e.map = null;
			return;
		}
		const o = t.map.nodeWithContext(fe.COP, (i = this.states) == null ? void 0 : i.error);
		if (o) {
			const c = (await o.compute()).coreContent();
			c || (s = this.states) == null || s.error.set(`texture invalid. (error: '${o.states.error.message()}')`),
				(e.map = c || null);
		} else (r = this.states) == null || r.error.set('no texture node found');
	}
	updateShadowParams(e, t) {
		const i = e.light();
		(i.castShadow = t.castShadow),
			(i.shadow.autoUpdate = t.shadowAutoUpdate),
			(i.shadow.needsUpdate = t.shadowUpdateOnNextRender),
			i.shadow.mapSize.copy(t.shadowRes);
		const s = i.shadow.map;
		s && s.setSize(t.shadowRes.x, t.shadowRes.y),
			(i.shadow.bias = t.shadowBias),
			(i.shadow.radius = t.shadowRadius),
			(i.shadow.camera.near = t.shadowNear),
			(i.shadow.camera.far = t.shadowFar),
			i.shadow.camera.updateProjectionMatrix(),
			e.updateHelper();
	}
}
ng.DEFAULT_PARAMS = tM;
ng.INPUT_CLONED_STATE = Ft.NEVER;
var nM = ((n) => (
	(n.AREA = 'areaLight'),
	(n.DIRECTIONAL = 'directionalLight'),
	(n.HEMISPHERE = 'hemisphereLight'),
	(n.POINT = 'pointLight'),
	(n.PROBE = 'lightProbe'),
	(n.SPOT = 'spotLight'),
	n
))(nM || {});
class M$ extends x$(nn) {}
const T$ = new M$();
class R$ extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = T$);
	}
	static type() {
		return nM.SPOT;
	}
	initializeNode() {
		this.io.inputs.setCount(0);
	}
	async cook(e) {
		this._operation = this._operation || new ng(this._scene, this.states, this);
		const t = await this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
const xu = new w(),
	db = new br(),
	pb = new Sn(),
	fb = new w(),
	_b = new Qe(),
	w$ = new w(),
	mb = [];
class Kc extends rn {
	constructor() {
		super(...arguments), (this._coreTransform = new Pn());
	}
	static type() {
		return oi.TRANSFORM;
	}
	cook(e, t) {
		const i = e[0],
			s = as.filterObjects(i, t);
		for (const r of s) this._applyTransform(r, i, t);
		return i.resetBoundingBox(), i;
	}
	_applyTransform(e, t, i) {
		Vn(e)
			? this._applyTransformWithTransformTargetType(e, t, i)
			: this._applyTransformWithoutTransformTargetType(e, i);
	}
	_applyTransformWithoutTransformTargetType(e, t) {
		this._updateObject(e, t);
	}
	_applyTransformWithTransformTargetType(e, t, i) {
		const s = ei[i.applyOn];
		switch (s) {
			case ri.GEOMETRY:
				return this._updateGeometry(e, i);
			case ri.OBJECT:
				return this._updateObject(e, i);
		}
		zt.unreachable(s);
	}
	_updateGeometry(e, t) {
		const i = this._matrix(t),
			s = t.pointGroup;
		if (s.trim() === '') {
			const r = e.geometry;
			r &&
				(r.translate(-t.pivot.x, -t.pivot.y, -t.pivot.z),
				r.applyMatrix4(i),
				r.translate(t.pivot.x, t.pivot.y, t.pivot.z));
		} else {
			nV(e, s, mb);
			for (const r of mb) {
				const o = r.position(w$).sub(t.pivot);
				o.applyMatrix4(i), r.setPosition(o.add(t.pivot));
			}
		}
	}
	_updateObject(e, t) {
		const i = Gc[t.objectMode];
		switch (i) {
			case Hr.SET:
				return this._setMatrix(e, t);
			case Hr.MULT:
				return this._multMatrix(e, t);
		}
		zt.unreachable(i);
	}
	_setMatrix(e, t) {
		const i = no[t.rotationOrder];
		xu.copy(t.r).multiplyScalar(bn.DEG2RAD),
			db.set(xu.x, xu.y, xu.z, i),
			pb.setFromEuler(db),
			fb.copy(t.s).multiplyScalar(t.scale),
			_b.compose(t.t, pb, fb),
			Zt(e).applyMatrix(e, _b, ei[t.applyOn], dm.LOCAL, Hr.SET);
	}
	_multMatrix(e, t) {
		const i = this._matrix(t),
			s = rh[t.objectTransformSpace];
		qA(e, i, s, Hr.MULT);
	}
	_matrix(e) {
		return this._coreTransform.matrix(e.t, e.r, e.s, e.scale, no[e.rotationOrder]);
	}
}
Kc.DEFAULT_PARAMS = {
	applyOn: ei.indexOf(ri.GEOMETRY),
	group: '',
	objectMode: Gc.indexOf(Hr.SET),
	objectTransformSpace: rh.indexOf(dm.PARENT),
	pointGroup: '',
	rotationOrder: no.indexOf(hm.XYZ),
	t: new w(0, 0, 0),
	r: new w(0, 0, 0),
	s: new w(1, 1, 1),
	scale: 1,
	pivot: new w(0, 0, 0),
};
Kc.INPUT_CLONED_STATE = Ft.FROM_NODE;
const Yi = Kc.DEFAULT_PARAMS;
class O$ extends nn {
	constructor() {
		super(...arguments),
			(this.applyOn = M.INTEGER(Yi.applyOn, {menu: {entries: ei.map((e, t) => ({name: e, value: t}))}})),
			(this.group = M.STRING(Yi.group, {objectMask: !0})),
			(this.objectMode = M.INTEGER(Yi.objectMode, {
				visibleIf: {applyOn: ei.indexOf(ri.OBJECT)},
				menu: {entries: Gc.map((e, t) => ({name: e, value: t}))},
			})),
			(this.objectTransformSpace = M.INTEGER(0, {
				visibleIf: {applyOn: ei.indexOf(ri.OBJECT), objectMode: Gc.indexOf(Hr.MULT)},
				menu: {entries: eV},
			})),
			(this.pointGroup = M.STRING(Yi.pointGroup, {visibleIf: {applyOn: ei.indexOf(ri.GEOMETRY)}})),
			(this.rotationOrder = M.INTEGER(Yi.rotationOrder, {
				separatorBefore: !0,
				menu: {entries: no.map((e, t) => ({name: e, value: t}))},
			})),
			(this.t = M.VECTOR3(Yi.t)),
			(this.r = M.VECTOR3(Yi.r)),
			(this.s = M.VECTOR3(Yi.s)),
			(this.scale = M.FLOAT(Yi.scale, {range: [0, 2], step: 0.01})),
			(this.pivot = M.VECTOR3(Yi.pivot, {visibleIf: {applyOn: ei.indexOf(ri.GEOMETRY)}}));
	}
}
const P$ = new O$();
class N$ extends ci {
	constructor() {
		super(...arguments), (this.paramsConfig = P$);
	}
	static type() {
		return oi.TRANSFORM;
	}
	initializeNode() {
		this.io.inputs.setCount(1), this.io.inputs.initInputsClonedState(Kc.INPUT_CLONED_STATE);
	}
	setApplyOn(e) {
		this.p.applyOn.set(ei.indexOf(e));
	}
	applyOn() {
		return ei[this.pv.applyOn];
	}
	setObjectMode(e) {
		this.p.objectMode.set(Gc.indexOf(e));
	}
	cook(e) {
		this._operation = this._operation || new Kc(this.scene(), this.states, this);
		const t = this._operation.cook(e, this.pv);
		this.setCoreGroup(t);
	}
}
const Wp = {
		nodes: [p4, F4, Q4, c0, Bj, a5, u5, F5, V5, j5, Y5, cX, hX, B0, eM, g$, y$, R$, N$],
		operations: [],
		jsFunctions: [],
	},
	D6 = async function (n) {
		const {
			domElement: e,
			sceneData: t,
			onProgress: i,
			autoPlay: s,
			createViewer: r,
			assetsRoot: o,
			libsRootPrefix: a,
			printWarnings: c,
			renderer: l,
			cameraMaskOverride: u,
		} = n;
		if (n.runRegister != null ? n.runRegister : !0) {
			for (const f of Wp.nodes) le.registerNode(f, void 0, {printWarnings: c});
			for (const f of Wp.operations) le.registerOperation(f, {printWarnings: c});
			for (const f of Wp.jsFunctions) le.registerNamedFunction(f, {printWarnings: c});
			const _ = [];
			for (let f of _) Qh.createNodeClassAndRegister(f);
			c4.run(le);
		}
		le.libs.setRoot('./three/js/libs');
		function d(_) {
			o && _.assets.setRoot(o), a && le.libs.setRootPrefix(a);
		}
		const p = 'scene_01',
			{scene: m, viewer: g} = await Mc.loadSceneData({
				domElement: e,
				sceneName: p,
				configureScene: d,
				sceneData: t,
				onProgress: i,
				autoPlay: s,
				createViewer: r,
				renderer: l,
				cameraMaskOverride: u,
			});
		return {scene: m, viewer: g};
	};
export {le as Poly, D6 as loadSceneFromSceneData_scene_01};
